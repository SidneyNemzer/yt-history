<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1334" onload="init(evt)" viewBox="0 0 1200 1334" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1334" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1317.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1317.00"> </text><svg id="frames" x="10" width="1180" total_samples="2167"><g><title>[libc.so.6] (7 samples, 0.32%)</title><rect x="0.0000%" y="1237" width="0.3230%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="7"/><text x="0.2500%" y="1247.50"></text></g><g><title>[unknown] (7 samples, 0.32%)</title><rect x="0.0000%" y="1221" width="0.3230%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="7"/><text x="0.2500%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.2769%" y="1205" width="0.0461%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="1"/><text x="0.5269%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.2769%" y="1189" width="0.0461%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="1"/><text x="0.5269%" y="1199.50"></text></g><g><title>brk (1 samples, 0.05%)</title><rect x="0.3230%" y="1237" width="0.0461%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="1"/><text x="0.5730%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.3230%" y="1221" width="0.0461%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="1"/><text x="0.5730%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.3230%" y="1205" width="0.0461%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="1"/><text x="0.5730%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.3230%" y="1189" width="0.0461%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="1"/><text x="0.5730%" y="1199.50"></text></g><g><title>[[stack]] (9 samples, 0.42%)</title><rect x="0.0000%" y="1253" width="0.4153%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="9"/><text x="0.2500%" y="1263.50"></text></g><g><title>read (1 samples, 0.05%)</title><rect x="0.3692%" y="1237" width="0.0461%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="1"/><text x="0.6192%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.3692%" y="1221" width="0.0461%" height="15" fill="rgb(250,228,42)" fg:x="8" fg:w="1"/><text x="0.6192%" y="1231.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.14%)</title><rect x="0.9229%" y="1173" width="0.1384%" height="15" fill="rgb(240,193,28)" fg:x="20" fg:w="3"/><text x="1.1729%" y="1183.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.14%)</title><rect x="0.9229%" y="1157" width="0.1384%" height="15" fill="rgb(216,20,37)" fg:x="20" fg:w="3"/><text x="1.1729%" y="1167.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.05%)</title><rect x="1.0152%" y="1141" width="0.0461%" height="15" fill="rgb(206,188,39)" fg:x="22" fg:w="1"/><text x="1.2652%" y="1151.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.05%)</title><rect x="1.0152%" y="1125" width="0.0461%" height="15" fill="rgb(217,207,13)" fg:x="22" fg:w="1"/><text x="1.2652%" y="1135.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.05%)</title><rect x="1.0152%" y="1109" width="0.0461%" height="15" fill="rgb(231,73,38)" fg:x="22" fg:w="1"/><text x="1.2652%" y="1119.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.32%)</title><rect x="0.7845%" y="1189" width="0.3230%" height="15" fill="rgb(225,20,46)" fg:x="17" fg:w="7"/><text x="1.0345%" y="1199.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.05%)</title><rect x="1.0614%" y="1173" width="0.0461%" height="15" fill="rgb(210,31,41)" fg:x="23" fg:w="1"/><text x="1.3114%" y="1183.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.05%)</title><rect x="1.0614%" y="1157" width="0.0461%" height="15" fill="rgb(221,200,47)" fg:x="23" fg:w="1"/><text x="1.3114%" y="1167.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.05%)</title><rect x="1.0614%" y="1141" width="0.0461%" height="15" fill="rgb(226,26,5)" fg:x="23" fg:w="1"/><text x="1.3114%" y="1151.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.05%)</title><rect x="1.0614%" y="1125" width="0.0461%" height="15" fill="rgb(249,33,26)" fg:x="23" fg:w="1"/><text x="1.3114%" y="1135.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.05%)</title><rect x="1.0614%" y="1109" width="0.0461%" height="15" fill="rgb(235,183,28)" fg:x="23" fg:w="1"/><text x="1.3114%" y="1119.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.05%)</title><rect x="1.0614%" y="1093" width="0.0461%" height="15" fill="rgb(221,5,38)" fg:x="23" fg:w="1"/><text x="1.3114%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.0614%" y="1077" width="0.0461%" height="15" fill="rgb(247,18,42)" fg:x="23" fg:w="1"/><text x="1.3114%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.0614%" y="1061" width="0.0461%" height="15" fill="rgb(241,131,45)" fg:x="23" fg:w="1"/><text x="1.3114%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.0614%" y="1045" width="0.0461%" height="15" fill="rgb(249,31,29)" fg:x="23" fg:w="1"/><text x="1.3114%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.0614%" y="1029" width="0.0461%" height="15" fill="rgb(225,111,53)" fg:x="23" fg:w="1"/><text x="1.3114%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.0614%" y="1013" width="0.0461%" height="15" fill="rgb(238,160,17)" fg:x="23" fg:w="1"/><text x="1.3114%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.0614%" y="997" width="0.0461%" height="15" fill="rgb(214,148,48)" fg:x="23" fg:w="1"/><text x="1.3114%" y="1007.50"></text></g><g><title>[ld-linux-x86-64.so.2] (14 samples, 0.65%)</title><rect x="0.5076%" y="1205" width="0.6461%" height="15" fill="rgb(232,36,49)" fg:x="11" fg:w="14"/><text x="0.7576%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.1075%" y="1189" width="0.0461%" height="15" fill="rgb(209,103,24)" fg:x="24" fg:w="1"/><text x="1.3575%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.1075%" y="1173" width="0.0461%" height="15" fill="rgb(229,88,8)" fg:x="24" fg:w="1"/><text x="1.3575%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.1075%" y="1157" width="0.0461%" height="15" fill="rgb(213,181,19)" fg:x="24" fg:w="1"/><text x="1.3575%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.1075%" y="1141" width="0.0461%" height="15" fill="rgb(254,191,54)" fg:x="24" fg:w="1"/><text x="1.3575%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.1075%" y="1125" width="0.0461%" height="15" fill="rgb(241,83,37)" fg:x="24" fg:w="1"/><text x="1.3575%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.1075%" y="1109" width="0.0461%" height="15" fill="rgb(233,36,39)" fg:x="24" fg:w="1"/><text x="1.3575%" y="1119.50"></text></g><g><title>[ld-linux-x86-64.so.2] (17 samples, 0.78%)</title><rect x="0.4615%" y="1221" width="0.7845%" height="15" fill="rgb(226,3,54)" fg:x="10" fg:w="17"/><text x="0.7115%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="1.1537%" y="1205" width="0.0923%" height="15" fill="rgb(245,192,40)" fg:x="25" fg:w="2"/><text x="1.4037%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.1998%" y="1189" width="0.0461%" height="15" fill="rgb(238,167,29)" fg:x="26" fg:w="1"/><text x="1.4498%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.1998%" y="1173" width="0.0461%" height="15" fill="rgb(232,182,51)" fg:x="26" fg:w="1"/><text x="1.4498%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.1998%" y="1157" width="0.0461%" height="15" fill="rgb(231,60,39)" fg:x="26" fg:w="1"/><text x="1.4498%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.1998%" y="1141" width="0.0461%" height="15" fill="rgb(208,69,12)" fg:x="26" fg:w="1"/><text x="1.4498%" y="1151.50"></text></g><g><title>[ld-linux-x86-64.so.2] (21 samples, 0.97%)</title><rect x="0.4153%" y="1237" width="0.9691%" height="15" fill="rgb(235,93,37)" fg:x="9" fg:w="21"/><text x="0.6653%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="1.2460%" y="1221" width="0.1384%" height="15" fill="rgb(213,116,39)" fg:x="27" fg:w="3"/><text x="1.4960%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.3383%" y="1205" width="0.0461%" height="15" fill="rgb(222,207,29)" fg:x="29" fg:w="1"/><text x="1.5883%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.3383%" y="1189" width="0.0461%" height="15" fill="rgb(206,96,30)" fg:x="29" fg:w="1"/><text x="1.5883%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.3383%" y="1173" width="0.0461%" height="15" fill="rgb(218,138,4)" fg:x="29" fg:w="1"/><text x="1.5883%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.3383%" y="1157" width="0.0461%" height="15" fill="rgb(250,191,14)" fg:x="29" fg:w="1"/><text x="1.5883%" y="1167.50"></text></g><g><title>[ld-linux-x86-64.so.2] (23 samples, 1.06%)</title><rect x="0.4153%" y="1253" width="1.0614%" height="15" fill="rgb(239,60,40)" fg:x="9" fg:w="23"/><text x="0.6653%" y="1263.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="1.3844%" y="1237" width="0.0923%" height="15" fill="rgb(206,27,48)" fg:x="30" fg:w="2"/><text x="1.6344%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.4305%" y="1221" width="0.0461%" height="15" fill="rgb(225,35,8)" fg:x="31" fg:w="1"/><text x="1.6805%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.4305%" y="1205" width="0.0461%" height="15" fill="rgb(250,213,24)" fg:x="31" fg:w="1"/><text x="1.6805%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.4305%" y="1189" width="0.0461%" height="15" fill="rgb(247,123,22)" fg:x="31" fg:w="1"/><text x="1.6805%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.4305%" y="1173" width="0.0461%" height="15" fill="rgb(231,138,38)" fg:x="31" fg:w="1"/><text x="1.6805%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.4305%" y="1157" width="0.0461%" height="15" fill="rgb(231,145,46)" fg:x="31" fg:w="1"/><text x="1.6805%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.4305%" y="1141" width="0.0461%" height="15" fill="rgb(251,118,11)" fg:x="31" fg:w="1"/><text x="1.6805%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.4305%" y="1125" width="0.0461%" height="15" fill="rgb(217,147,25)" fg:x="31" fg:w="1"/><text x="1.6805%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.4305%" y="1109" width="0.0461%" height="15" fill="rgb(247,81,37)" fg:x="31" fg:w="1"/><text x="1.6805%" y="1119.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.09%)</title><rect x="1.4767%" y="1237" width="0.0923%" height="15" fill="rgb(209,12,38)" fg:x="32" fg:w="2"/><text x="1.7267%" y="1247.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (2 samples, 0.09%)</title><rect x="1.4767%" y="1221" width="0.0923%" height="15" fill="rgb(227,1,9)" fg:x="32" fg:w="2"/><text x="1.7267%" y="1231.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (2 samples, 0.09%)</title><rect x="1.4767%" y="1205" width="0.0923%" height="15" fill="rgb(248,47,43)" fg:x="32" fg:w="2"/><text x="1.7267%" y="1215.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (2 samples, 0.09%)</title><rect x="1.4767%" y="1189" width="0.0923%" height="15" fill="rgb(221,10,30)" fg:x="32" fg:w="2"/><text x="1.7267%" y="1199.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.09%)</title><rect x="1.4767%" y="1173" width="0.0923%" height="15" fill="rgb(210,229,1)" fg:x="32" fg:w="2"/><text x="1.7267%" y="1183.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.09%)</title><rect x="1.4767%" y="1157" width="0.0923%" height="15" fill="rgb(222,148,37)" fg:x="32" fg:w="2"/><text x="1.7267%" y="1167.50"></text></g><g><title>[libc.so.6] (2 samples, 0.09%)</title><rect x="1.4767%" y="1141" width="0.0923%" height="15" fill="rgb(234,67,33)" fg:x="32" fg:w="2"/><text x="1.7267%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="1.4767%" y="1125" width="0.0923%" height="15" fill="rgb(247,98,35)" fg:x="32" fg:w="2"/><text x="1.7267%" y="1135.50"></text></g><g><title>[unknown] (5 samples, 0.23%)</title><rect x="1.4767%" y="1253" width="0.2307%" height="15" fill="rgb(247,138,52)" fg:x="32" fg:w="5"/><text x="1.7267%" y="1263.50"></text></g><g><title>[libc.so.6] (3 samples, 0.14%)</title><rect x="1.5690%" y="1237" width="0.1384%" height="15" fill="rgb(213,79,30)" fg:x="34" fg:w="3"/><text x="1.8190%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="1.5690%" y="1221" width="0.1384%" height="15" fill="rgb(246,177,23)" fg:x="34" fg:w="3"/><text x="1.8190%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.6613%" y="1205" width="0.0461%" height="15" fill="rgb(230,62,27)" fg:x="36" fg:w="1"/><text x="1.9113%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="1.6613%" y="1189" width="0.0461%" height="15" fill="rgb(216,154,8)" fg:x="36" fg:w="1"/><text x="1.9113%" y="1199.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="1.7074%" y="949" width="0.0461%" height="15" fill="rgb(244,35,45)" fg:x="37" fg:w="1"/><text x="1.9574%" y="959.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.05%)</title><rect x="1.7074%" y="933" width="0.0461%" height="15" fill="rgb(251,115,12)" fg:x="37" fg:w="1"/><text x="1.9574%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.05%)</title><rect x="2.2612%" y="869" width="0.0461%" height="15" fill="rgb(240,54,50)" fg:x="49" fg:w="1"/><text x="2.5112%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.05%)</title><rect x="2.2612%" y="853" width="0.0461%" height="15" fill="rgb(233,84,52)" fg:x="49" fg:w="1"/><text x="2.5112%" y="863.50"></text></g><g><title>cfree (1 samples, 0.05%)</title><rect x="2.2612%" y="837" width="0.0461%" height="15" fill="rgb(207,117,47)" fg:x="49" fg:w="1"/><text x="2.5112%" y="847.50"></text></g><g><title>cfree (4 samples, 0.18%)</title><rect x="2.3073%" y="869" width="0.1846%" height="15" fill="rgb(249,43,39)" fg:x="50" fg:w="4"/><text x="2.5573%" y="879.50"></text></g><g><title>[libc.so.6] (2 samples, 0.09%)</title><rect x="2.3996%" y="853" width="0.0923%" height="15" fill="rgb(209,38,44)" fg:x="52" fg:w="2"/><text x="2.6496%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Channel&gt;&gt; (13 samples, 0.60%)</title><rect x="2.4919%" y="853" width="0.5999%" height="15" fill="rgb(236,212,23)" fg:x="54" fg:w="13"/><text x="2.7419%" y="863.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.60%)</title><rect x="2.4919%" y="837" width="0.5999%" height="15" fill="rgb(242,79,21)" fg:x="54" fg:w="13"/><text x="2.7419%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Channel&gt; (9 samples, 0.42%)</title><rect x="2.6765%" y="821" width="0.4153%" height="15" fill="rgb(211,96,35)" fg:x="58" fg:w="9"/><text x="2.9265%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (9 samples, 0.42%)</title><rect x="2.6765%" y="805" width="0.4153%" height="15" fill="rgb(253,215,40)" fg:x="58" fg:w="9"/><text x="2.9265%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (9 samples, 0.42%)</title><rect x="2.6765%" y="789" width="0.4153%" height="15" fill="rgb(211,81,21)" fg:x="58" fg:w="9"/><text x="2.9265%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (9 samples, 0.42%)</title><rect x="2.6765%" y="773" width="0.4153%" height="15" fill="rgb(208,190,38)" fg:x="58" fg:w="9"/><text x="2.9265%" y="783.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.42%)</title><rect x="2.6765%" y="757" width="0.4153%" height="15" fill="rgb(235,213,38)" fg:x="58" fg:w="9"/><text x="2.9265%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.42%)</title><rect x="2.6765%" y="741" width="0.4153%" height="15" fill="rgb(237,122,38)" fg:x="58" fg:w="9"/><text x="2.9265%" y="751.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.42%)</title><rect x="2.6765%" y="725" width="0.4153%" height="15" fill="rgb(244,218,35)" fg:x="58" fg:w="9"/><text x="2.9265%" y="735.50"></text></g><g><title>cfree (9 samples, 0.42%)</title><rect x="2.6765%" y="709" width="0.4153%" height="15" fill="rgb(240,68,47)" fg:x="58" fg:w="9"/><text x="2.9265%" y="719.50"></text></g><g><title>[libc.so.6] (2 samples, 0.09%)</title><rect x="2.9995%" y="693" width="0.0923%" height="15" fill="rgb(210,16,53)" fg:x="65" fg:w="2"/><text x="3.2495%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (56 samples, 2.58%)</title><rect x="3.0918%" y="789" width="2.5842%" height="15" fill="rgb(235,124,12)" fg:x="67" fg:w="56"/><text x="3.3418%" y="799.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (56 samples, 2.58%)</title><rect x="3.0918%" y="773" width="2.5842%" height="15" fill="rgb(224,169,11)" fg:x="67" fg:w="56"/><text x="3.3418%" y="783.50">al..</text></g><g><title>cfree (56 samples, 2.58%)</title><rect x="3.0918%" y="757" width="2.5842%" height="15" fill="rgb(250,166,2)" fg:x="67" fg:w="56"/><text x="3.3418%" y="767.50">cf..</text></g><g><title>[libc.so.6] (14 samples, 0.65%)</title><rect x="5.0300%" y="741" width="0.6461%" height="15" fill="rgb(242,216,29)" fg:x="109" fg:w="14"/><text x="5.2800%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Video&gt;&gt; (86 samples, 3.97%)</title><rect x="1.7536%" y="901" width="3.9686%" height="15" fill="rgb(230,116,27)" fg:x="38" fg:w="86"/><text x="2.0036%" y="911.50">core..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (86 samples, 3.97%)</title><rect x="1.7536%" y="885" width="3.9686%" height="15" fill="rgb(228,99,48)" fg:x="38" fg:w="86"/><text x="2.0036%" y="895.50">&lt;all..</text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Video&gt; (70 samples, 3.23%)</title><rect x="2.4919%" y="869" width="3.2303%" height="15" fill="rgb(253,11,6)" fg:x="54" fg:w="70"/><text x="2.7419%" y="879.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (57 samples, 2.63%)</title><rect x="3.0918%" y="853" width="2.6304%" height="15" fill="rgb(247,143,39)" fg:x="67" fg:w="57"/><text x="3.3418%" y="863.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (57 samples, 2.63%)</title><rect x="3.0918%" y="837" width="2.6304%" height="15" fill="rgb(236,97,10)" fg:x="67" fg:w="57"/><text x="3.3418%" y="847.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (57 samples, 2.63%)</title><rect x="3.0918%" y="821" width="2.6304%" height="15" fill="rgb(233,208,19)" fg:x="67" fg:w="57"/><text x="3.3418%" y="831.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (57 samples, 2.63%)</title><rect x="3.0918%" y="805" width="2.6304%" height="15" fill="rgb(216,164,2)" fg:x="67" fg:w="57"/><text x="3.3418%" y="815.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.05%)</title><rect x="5.6760%" y="789" width="0.0461%" height="15" fill="rgb(220,129,5)" fg:x="123" fg:w="1"/><text x="5.9260%" y="799.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (136 samples, 6.28%)</title><rect x="1.7074%" y="981" width="6.2760%" height="15" fill="rgb(242,17,10)" fg:x="37" fg:w="136"/><text x="1.9574%" y="991.50">&lt;hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (136 samples, 6.28%)</title><rect x="1.7074%" y="965" width="6.2760%" height="15" fill="rgb(242,107,0)" fg:x="37" fg:w="136"/><text x="1.9574%" y="975.50">hashbrow..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (135 samples, 6.23%)</title><rect x="1.7536%" y="949" width="6.2298%" height="15" fill="rgb(251,28,31)" fg:x="38" fg:w="135"/><text x="2.0036%" y="959.50">hashbrow..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (135 samples, 6.23%)</title><rect x="1.7536%" y="933" width="6.2298%" height="15" fill="rgb(233,223,10)" fg:x="38" fg:w="135"/><text x="2.0036%" y="943.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::rc::Rc&lt;yt_history::model::Video&gt;)&gt; (135 samples, 6.23%)</title><rect x="1.7536%" y="917" width="6.2298%" height="15" fill="rgb(215,21,27)" fg:x="38" fg:w="135"/><text x="2.0036%" y="927.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (49 samples, 2.26%)</title><rect x="5.7222%" y="901" width="2.2612%" height="15" fill="rgb(232,23,21)" fg:x="124" fg:w="49"/><text x="5.9722%" y="911.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (49 samples, 2.26%)</title><rect x="5.7222%" y="885" width="2.2612%" height="15" fill="rgb(244,5,23)" fg:x="124" fg:w="49"/><text x="5.9722%" y="895.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (49 samples, 2.26%)</title><rect x="5.7222%" y="869" width="2.2612%" height="15" fill="rgb(226,81,46)" fg:x="124" fg:w="49"/><text x="5.9722%" y="879.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 2.26%)</title><rect x="5.7222%" y="853" width="2.2612%" height="15" fill="rgb(247,70,30)" fg:x="124" fg:w="49"/><text x="5.9722%" y="863.50">&lt;..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (49 samples, 2.26%)</title><rect x="5.7222%" y="837" width="2.2612%" height="15" fill="rgb(212,68,19)" fg:x="124" fg:w="49"/><text x="5.9722%" y="847.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (49 samples, 2.26%)</title><rect x="5.7222%" y="821" width="2.2612%" height="15" fill="rgb(240,187,13)" fg:x="124" fg:w="49"/><text x="5.9722%" y="831.50">a..</text></g><g><title>cfree (49 samples, 2.26%)</title><rect x="5.7222%" y="805" width="2.2612%" height="15" fill="rgb(223,113,26)" fg:x="124" fg:w="49"/><text x="5.9722%" y="815.50">c..</text></g><g><title>[libc.so.6] (5 samples, 0.23%)</title><rect x="7.7527%" y="789" width="0.2307%" height="15" fill="rgb(206,192,2)" fg:x="168" fg:w="5"/><text x="8.0027%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (3 samples, 0.14%)</title><rect x="8.1218%" y="917" width="0.1384%" height="15" fill="rgb(241,108,4)" fg:x="176" fg:w="3"/><text x="8.3718%" y="927.50"></text></g><g><title>yt_history::main::{{closure}} (3 samples, 0.14%)</title><rect x="8.1218%" y="901" width="0.1384%" height="15" fill="rgb(247,173,49)" fg:x="176" fg:w="3"/><text x="8.3718%" y="911.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (3 samples, 0.14%)</title><rect x="8.1218%" y="885" width="0.1384%" height="15" fill="rgb(224,114,35)" fg:x="176" fg:w="3"/><text x="8.3718%" y="895.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="8.2603%" y="917" width="0.0461%" height="15" fill="rgb(245,159,27)" fg:x="179" fg:w="1"/><text x="8.5103%" y="927.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="8.2603%" y="901" width="0.0461%" height="15" fill="rgb(245,172,44)" fg:x="179" fg:w="1"/><text x="8.5103%" y="911.50"></text></g><g><title>core::slice::sort::merge (8 samples, 0.37%)</title><rect x="7.9834%" y="933" width="0.3692%" height="15" fill="rgb(236,23,11)" fg:x="173" fg:w="8"/><text x="8.2334%" y="943.50"></text></g><g><title>core::slice::sort::merge::get_and_increment (1 samples, 0.05%)</title><rect x="8.3064%" y="917" width="0.0461%" height="15" fill="rgb(205,117,38)" fg:x="180" fg:w="1"/><text x="8.5564%" y="927.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.05%)</title><rect x="8.3064%" y="901" width="0.0461%" height="15" fill="rgb(237,72,25)" fg:x="180" fg:w="1"/><text x="8.5564%" y="911.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.05%)</title><rect x="8.3064%" y="885" width="0.0461%" height="15" fill="rgb(244,70,9)" fg:x="180" fg:w="1"/><text x="8.5564%" y="895.50"></text></g><g><title>core::slice::sort::merge_sort::collapse (1 samples, 0.05%)</title><rect x="8.3526%" y="933" width="0.0461%" height="15" fill="rgb(217,125,39)" fg:x="181" fg:w="1"/><text x="8.6026%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (10 samples, 0.46%)</title><rect x="7.9834%" y="981" width="0.4615%" height="15" fill="rgb(235,36,10)" fg:x="173" fg:w="10"/><text x="8.2334%" y="991.50"></text></g><g><title>alloc::slice::stable_sort (10 samples, 0.46%)</title><rect x="7.9834%" y="965" width="0.4615%" height="15" fill="rgb(251,123,47)" fg:x="173" fg:w="10"/><text x="8.2334%" y="975.50"></text></g><g><title>core::slice::sort::merge_sort (10 samples, 0.46%)</title><rect x="7.9834%" y="949" width="0.4615%" height="15" fill="rgb(221,13,13)" fg:x="173" fg:w="10"/><text x="8.2334%" y="959.50"></text></g><g><title>core::slice::sort::provide_sorted_batch (1 samples, 0.05%)</title><rect x="8.3987%" y="933" width="0.0461%" height="15" fill="rgb(238,131,9)" fg:x="182" fg:w="1"/><text x="8.6487%" y="943.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.05%)</title><rect x="8.3987%" y="917" width="0.0461%" height="15" fill="rgb(211,50,8)" fg:x="182" fg:w="1"/><text x="8.6487%" y="927.50"></text></g><g><title>core::slice::sort::insert_tail (1 samples, 0.05%)</title><rect x="8.3987%" y="901" width="0.0461%" height="15" fill="rgb(245,182,24)" fg:x="182" fg:w="1"/><text x="8.6487%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.05%)</title><rect x="8.4449%" y="981" width="0.0461%" height="15" fill="rgb(242,14,37)" fg:x="183" fg:w="1"/><text x="8.6949%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.05%)</title><rect x="8.4449%" y="965" width="0.0461%" height="15" fill="rgb(246,228,12)" fg:x="183" fg:w="1"/><text x="8.6949%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.05%)</title><rect x="8.4449%" y="949" width="0.0461%" height="15" fill="rgb(213,55,15)" fg:x="183" fg:w="1"/><text x="8.6949%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.05%)</title><rect x="8.4449%" y="933" width="0.0461%" height="15" fill="rgb(209,9,3)" fg:x="183" fg:w="1"/><text x="8.6949%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.05%)</title><rect x="8.4449%" y="917" width="0.0461%" height="15" fill="rgb(230,59,30)" fg:x="183" fg:w="1"/><text x="8.6949%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.05%)</title><rect x="8.4449%" y="901" width="0.0461%" height="15" fill="rgb(209,121,21)" fg:x="183" fg:w="1"/><text x="8.6949%" y="911.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="8.4449%" y="885" width="0.0461%" height="15" fill="rgb(220,109,13)" fg:x="183" fg:w="1"/><text x="8.6949%" y="895.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="8.4449%" y="869" width="0.0461%" height="15" fill="rgb(232,18,1)" fg:x="183" fg:w="1"/><text x="8.6949%" y="879.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="8.4449%" y="853" width="0.0461%" height="15" fill="rgb(215,41,42)" fg:x="183" fg:w="1"/><text x="8.6949%" y="863.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.05%)</title><rect x="8.4449%" y="837" width="0.0461%" height="15" fill="rgb(224,123,36)" fg:x="183" fg:w="1"/><text x="8.6949%" y="847.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (1 samples, 0.05%)</title><rect x="8.4449%" y="821" width="0.0461%" height="15" fill="rgb(240,125,3)" fg:x="183" fg:w="1"/><text x="8.6949%" y="831.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.05%)</title><rect x="8.4449%" y="805" width="0.0461%" height="15" fill="rgb(205,98,50)" fg:x="183" fg:w="1"/><text x="8.6949%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.05%)</title><rect x="8.4449%" y="789" width="0.0461%" height="15" fill="rgb(205,185,37)" fg:x="183" fg:w="1"/><text x="8.6949%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;)&gt; (18 samples, 0.83%)</title><rect x="8.4910%" y="853" width="0.8306%" height="15" fill="rgb(238,207,15)" fg:x="184" fg:w="18"/><text x="8.7410%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Video&gt;&gt; (18 samples, 0.83%)</title><rect x="8.4910%" y="837" width="0.8306%" height="15" fill="rgb(213,199,42)" fg:x="184" fg:w="18"/><text x="8.7410%" y="847.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.83%)</title><rect x="8.4910%" y="821" width="0.8306%" height="15" fill="rgb(235,201,11)" fg:x="184" fg:w="18"/><text x="8.7410%" y="831.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.05%)</title><rect x="9.3216%" y="757" width="0.0461%" height="15" fill="rgb(207,46,11)" fg:x="202" fg:w="1"/><text x="9.5716%" y="767.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.05%)</title><rect x="9.3216%" y="741" width="0.0461%" height="15" fill="rgb(241,35,35)" fg:x="202" fg:w="1"/><text x="9.5716%" y="751.50"></text></g><g><title>__rust_dealloc (1 samples, 0.05%)</title><rect x="9.3678%" y="757" width="0.0461%" height="15" fill="rgb(243,32,47)" fg:x="203" fg:w="1"/><text x="9.6178%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 1.15%)</title><rect x="8.4910%" y="933" width="1.1537%" height="15" fill="rgb(247,202,23)" fg:x="184" fg:w="25"/><text x="8.7410%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (25 samples, 1.15%)</title><rect x="8.4910%" y="917" width="1.1537%" height="15" fill="rgb(219,102,11)" fg:x="184" fg:w="25"/><text x="8.7410%" y="927.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (25 samples, 1.15%)</title><rect x="8.4910%" y="901" width="1.1537%" height="15" fill="rgb(243,110,44)" fg:x="184" fg:w="25"/><text x="8.7410%" y="911.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (25 samples, 1.15%)</title><rect x="8.4910%" y="885" width="1.1537%" height="15" fill="rgb(222,74,54)" fg:x="184" fg:w="25"/><text x="8.7410%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;))&gt; (25 samples, 1.15%)</title><rect x="8.4910%" y="869" width="1.1537%" height="15" fill="rgb(216,99,12)" fg:x="184" fg:w="25"/><text x="8.7410%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (7 samples, 0.32%)</title><rect x="9.3216%" y="853" width="0.3230%" height="15" fill="rgb(226,22,26)" fg:x="202" fg:w="7"/><text x="9.5716%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (7 samples, 0.32%)</title><rect x="9.3216%" y="837" width="0.3230%" height="15" fill="rgb(217,163,10)" fg:x="202" fg:w="7"/><text x="9.5716%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (7 samples, 0.32%)</title><rect x="9.3216%" y="821" width="0.3230%" height="15" fill="rgb(213,25,53)" fg:x="202" fg:w="7"/><text x="9.5716%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.32%)</title><rect x="9.3216%" y="805" width="0.3230%" height="15" fill="rgb(252,105,26)" fg:x="202" fg:w="7"/><text x="9.5716%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.32%)</title><rect x="9.3216%" y="789" width="0.3230%" height="15" fill="rgb(220,39,43)" fg:x="202" fg:w="7"/><text x="9.5716%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.32%)</title><rect x="9.3216%" y="773" width="0.3230%" height="15" fill="rgb(229,68,48)" fg:x="202" fg:w="7"/><text x="9.5716%" y="783.50"></text></g><g><title>cfree (5 samples, 0.23%)</title><rect x="9.4139%" y="757" width="0.2307%" height="15" fill="rgb(252,8,32)" fg:x="204" fg:w="5"/><text x="9.6639%" y="767.50"></text></g><g><title>[libc.so.6] (2 samples, 0.09%)</title><rect x="9.5524%" y="741" width="0.0923%" height="15" fill="rgb(223,20,43)" fg:x="207" fg:w="2"/><text x="9.8024%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;)&gt;&gt; (35 samples, 1.62%)</title><rect x="8.4910%" y="981" width="1.6151%" height="15" fill="rgb(229,81,49)" fg:x="184" fg:w="35"/><text x="8.7410%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;),std::collections::hash::map::RandomState&gt;&gt; (35 samples, 1.62%)</title><rect x="8.4910%" y="965" width="1.6151%" height="15" fill="rgb(236,28,36)" fg:x="184" fg:w="35"/><text x="8.7410%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;))&gt;&gt; (35 samples, 1.62%)</title><rect x="8.4910%" y="949" width="1.6151%" height="15" fill="rgb(249,185,26)" fg:x="184" fg:w="35"/><text x="8.7410%" y="959.50"></text></g><g><title>cfree (10 samples, 0.46%)</title><rect x="9.6447%" y="933" width="0.4615%" height="15" fill="rgb(249,174,33)" fg:x="209" fg:w="10"/><text x="9.8947%" y="943.50"></text></g><g><title>[libc.so.6] (10 samples, 0.46%)</title><rect x="9.6447%" y="917" width="0.4615%" height="15" fill="rgb(233,201,37)" fg:x="209" fg:w="10"/><text x="9.8947%" y="927.50"></text></g><g><title>[libc.so.6] (10 samples, 0.46%)</title><rect x="9.6447%" y="901" width="0.4615%" height="15" fill="rgb(221,78,26)" fg:x="209" fg:w="10"/><text x="9.8947%" y="911.50"></text></g><g><title>[libc.so.6] (3 samples, 0.14%)</title><rect x="9.9677%" y="885" width="0.1384%" height="15" fill="rgb(250,127,30)" fg:x="216" fg:w="3"/><text x="10.2177%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;yt_history::model::Watched&gt;&gt; (2 samples, 0.09%)</title><rect x="10.1061%" y="965" width="0.0923%" height="15" fill="rgb(230,49,44)" fg:x="219" fg:w="2"/><text x="10.3561%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.09%)</title><rect x="10.1061%" y="949" width="0.0923%" height="15" fill="rgb(229,67,23)" fg:x="219" fg:w="2"/><text x="10.3561%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;[yt_history::model::Watched]&gt; (2 samples, 0.09%)</title><rect x="10.1061%" y="933" width="0.0923%" height="15" fill="rgb(249,83,47)" fg:x="219" fg:w="2"/><text x="10.3561%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Watched&gt; (2 samples, 0.09%)</title><rect x="10.1061%" y="917" width="0.0923%" height="15" fill="rgb(215,43,3)" fg:x="219" fg:w="2"/><text x="10.3561%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Video&gt;&gt; (2 samples, 0.09%)</title><rect x="10.1061%" y="901" width="0.0923%" height="15" fill="rgb(238,154,13)" fg:x="219" fg:w="2"/><text x="10.3561%" y="911.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.09%)</title><rect x="10.1061%" y="885" width="0.0923%" height="15" fill="rgb(219,56,2)" fg:x="219" fg:w="2"/><text x="10.3561%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Channel&gt;&gt; (2 samples, 0.09%)</title><rect x="10.1984%" y="837" width="0.0923%" height="15" fill="rgb(233,0,4)" fg:x="221" fg:w="2"/><text x="10.4484%" y="847.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.09%)</title><rect x="10.1984%" y="821" width="0.0923%" height="15" fill="rgb(235,30,7)" fg:x="221" fg:w="2"/><text x="10.4484%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.28%)</title><rect x="10.1984%" y="917" width="0.2769%" height="15" fill="rgb(250,79,13)" fg:x="221" fg:w="6"/><text x="10.4484%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (6 samples, 0.28%)</title><rect x="10.1984%" y="901" width="0.2769%" height="15" fill="rgb(211,146,34)" fg:x="221" fg:w="6"/><text x="10.4484%" y="911.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (6 samples, 0.28%)</title><rect x="10.1984%" y="885" width="0.2769%" height="15" fill="rgb(228,22,38)" fg:x="221" fg:w="6"/><text x="10.4484%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (6 samples, 0.28%)</title><rect x="10.1984%" y="869" width="0.2769%" height="15" fill="rgb(235,168,5)" fg:x="221" fg:w="6"/><text x="10.4484%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::rc::Rc&lt;yt_history::model::Channel&gt;)&gt; (6 samples, 0.28%)</title><rect x="10.1984%" y="853" width="0.2769%" height="15" fill="rgb(221,155,16)" fg:x="221" fg:w="6"/><text x="10.4484%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4 samples, 0.18%)</title><rect x="10.2907%" y="837" width="0.1846%" height="15" fill="rgb(215,215,53)" fg:x="223" fg:w="4"/><text x="10.5407%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.18%)</title><rect x="10.2907%" y="821" width="0.1846%" height="15" fill="rgb(223,4,10)" fg:x="223" fg:w="4"/><text x="10.5407%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.18%)</title><rect x="10.2907%" y="805" width="0.1846%" height="15" fill="rgb(234,103,6)" fg:x="223" fg:w="4"/><text x="10.5407%" y="815.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.18%)</title><rect x="10.2907%" y="789" width="0.1846%" height="15" fill="rgb(227,97,0)" fg:x="223" fg:w="4"/><text x="10.5407%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.18%)</title><rect x="10.2907%" y="773" width="0.1846%" height="15" fill="rgb(234,150,53)" fg:x="223" fg:w="4"/><text x="10.5407%" y="783.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.18%)</title><rect x="10.2907%" y="757" width="0.1846%" height="15" fill="rgb(228,201,54)" fg:x="223" fg:w="4"/><text x="10.5407%" y="767.50"></text></g><g><title>cfree (4 samples, 0.18%)</title><rect x="10.2907%" y="741" width="0.1846%" height="15" fill="rgb(222,22,37)" fg:x="223" fg:w="4"/><text x="10.5407%" y="751.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="10.4292%" y="725" width="0.0461%" height="15" fill="rgb(237,53,32)" fg:x="226" fg:w="1"/><text x="10.6792%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Models&gt; (13 samples, 0.60%)</title><rect x="10.1061%" y="981" width="0.5999%" height="15" fill="rgb(233,25,53)" fg:x="219" fg:w="13"/><text x="10.3561%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,alloc::rc::Rc&lt;yt_history::model::Channel&gt;&gt;&gt; (11 samples, 0.51%)</title><rect x="10.1984%" y="965" width="0.5076%" height="15" fill="rgb(210,40,34)" fg:x="221" fg:w="11"/><text x="10.4484%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,alloc::rc::Rc&lt;yt_history::model::Channel&gt;,std::collections::hash::map::RandomState&gt;&gt; (11 samples, 0.51%)</title><rect x="10.1984%" y="949" width="0.5076%" height="15" fill="rgb(241,220,44)" fg:x="221" fg:w="11"/><text x="10.4484%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,alloc::rc::Rc&lt;yt_history::model::Channel&gt;)&gt;&gt; (11 samples, 0.51%)</title><rect x="10.1984%" y="933" width="0.5076%" height="15" fill="rgb(235,28,35)" fg:x="221" fg:w="11"/><text x="10.4484%" y="943.50"></text></g><g><title>cfree (5 samples, 0.23%)</title><rect x="10.4753%" y="917" width="0.2307%" height="15" fill="rgb(210,56,17)" fg:x="227" fg:w="5"/><text x="10.7253%" y="927.50"></text></g><g><title>[libc.so.6] (5 samples, 0.23%)</title><rect x="10.4753%" y="901" width="0.2307%" height="15" fill="rgb(224,130,29)" fg:x="227" fg:w="5"/><text x="10.7253%" y="911.50"></text></g><g><title>[libc.so.6] (5 samples, 0.23%)</title><rect x="10.4753%" y="885" width="0.2307%" height="15" fill="rgb(235,212,8)" fg:x="227" fg:w="5"/><text x="10.7253%" y="895.50"></text></g><g><title>[libc.so.6] (4 samples, 0.18%)</title><rect x="10.5215%" y="869" width="0.1846%" height="15" fill="rgb(223,33,50)" fg:x="228" fg:w="4"/><text x="10.7715%" y="879.50"></text></g><g><title>std::io::stdio::_print (1 samples, 0.05%)</title><rect x="10.7060%" y="981" width="0.0461%" height="15" fill="rgb(219,149,13)" fg:x="232" fg:w="1"/><text x="10.9560%" y="991.50"></text></g><g><title>std::io::stdio::print_to (1 samples, 0.05%)</title><rect x="10.7060%" y="965" width="0.0461%" height="15" fill="rgb(250,156,29)" fg:x="232" fg:w="1"/><text x="10.9560%" y="975.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.05%)</title><rect x="10.7060%" y="949" width="0.0461%" height="15" fill="rgb(216,193,19)" fg:x="232" fg:w="1"/><text x="10.9560%" y="959.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.05%)</title><rect x="10.7060%" y="933" width="0.0461%" height="15" fill="rgb(216,135,14)" fg:x="232" fg:w="1"/><text x="10.9560%" y="943.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.05%)</title><rect x="10.7060%" y="917" width="0.0461%" height="15" fill="rgb(241,47,5)" fg:x="232" fg:w="1"/><text x="10.9560%" y="927.50"></text></g><g><title>core::fmt::write (1 samples, 0.05%)</title><rect x="10.7060%" y="901" width="0.0461%" height="15" fill="rgb(233,42,35)" fg:x="232" fg:w="1"/><text x="10.9560%" y="911.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="10.7060%" y="885" width="0.0461%" height="15" fill="rgb(231,13,6)" fg:x="232" fg:w="1"/><text x="10.9560%" y="895.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.05%)</title><rect x="10.7060%" y="869" width="0.0461%" height="15" fill="rgb(207,181,40)" fg:x="232" fg:w="1"/><text x="10.9560%" y="879.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.05%)</title><rect x="10.7060%" y="853" width="0.0461%" height="15" fill="rgb(254,173,49)" fg:x="232" fg:w="1"/><text x="10.9560%" y="863.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.05%)</title><rect x="10.7060%" y="837" width="0.0461%" height="15" fill="rgb(221,1,38)" fg:x="232" fg:w="1"/><text x="10.9560%" y="847.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.05%)</title><rect x="10.7060%" y="821" width="0.0461%" height="15" fill="rgb(206,124,46)" fg:x="232" fg:w="1"/><text x="10.9560%" y="831.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (1 samples, 0.05%)</title><rect x="10.7060%" y="805" width="0.0461%" height="15" fill="rgb(249,21,11)" fg:x="232" fg:w="1"/><text x="10.9560%" y="815.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.05%)</title><rect x="10.7060%" y="789" width="0.0461%" height="15" fill="rgb(222,201,40)" fg:x="232" fg:w="1"/><text x="10.9560%" y="799.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.05%)</title><rect x="10.7060%" y="773" width="0.0461%" height="15" fill="rgb(235,61,29)" fg:x="232" fg:w="1"/><text x="10.9560%" y="783.50"></text></g><g><title>write (1 samples, 0.05%)</title><rect x="10.7060%" y="757" width="0.0461%" height="15" fill="rgb(219,207,3)" fg:x="232" fg:w="1"/><text x="10.9560%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="10.7060%" y="741" width="0.0461%" height="15" fill="rgb(222,56,46)" fg:x="232" fg:w="1"/><text x="10.9560%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="10.7060%" y="725" width="0.0461%" height="15" fill="rgb(239,76,54)" fg:x="232" fg:w="1"/><text x="10.9560%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="10.7060%" y="709" width="0.0461%" height="15" fill="rgb(231,124,27)" fg:x="232" fg:w="1"/><text x="10.9560%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="10.7060%" y="693" width="0.0461%" height="15" fill="rgb(249,195,6)" fg:x="232" fg:w="1"/><text x="10.9560%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="10.7060%" y="677" width="0.0461%" height="15" fill="rgb(237,174,47)" fg:x="232" fg:w="1"/><text x="10.9560%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="10.7060%" y="661" width="0.0461%" height="15" fill="rgb(206,201,31)" fg:x="232" fg:w="1"/><text x="10.9560%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="10.7060%" y="645" width="0.0461%" height="15" fill="rgb(231,57,52)" fg:x="232" fg:w="1"/><text x="10.9560%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="10.7060%" y="629" width="0.0461%" height="15" fill="rgb(248,177,22)" fg:x="232" fg:w="1"/><text x="10.9560%" y="639.50"></text></g><g><title>__rust_alloc (1 samples, 0.05%)</title><rect x="10.7983%" y="677" width="0.0461%" height="15" fill="rgb(215,211,37)" fg:x="234" fg:w="1"/><text x="11.0483%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.14%)</title><rect x="10.7983%" y="773" width="0.1384%" height="15" fill="rgb(241,128,51)" fg:x="234" fg:w="3"/><text x="11.0483%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.14%)</title><rect x="10.7983%" y="757" width="0.1384%" height="15" fill="rgb(227,165,31)" fg:x="234" fg:w="3"/><text x="11.0483%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.14%)</title><rect x="10.7983%" y="741" width="0.1384%" height="15" fill="rgb(228,167,24)" fg:x="234" fg:w="3"/><text x="11.0483%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.14%)</title><rect x="10.7983%" y="725" width="0.1384%" height="15" fill="rgb(228,143,12)" fg:x="234" fg:w="3"/><text x="11.0483%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.14%)</title><rect x="10.7983%" y="709" width="0.1384%" height="15" fill="rgb(249,149,8)" fg:x="234" fg:w="3"/><text x="11.0483%" y="719.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.14%)</title><rect x="10.7983%" y="693" width="0.1384%" height="15" fill="rgb(243,35,44)" fg:x="234" fg:w="3"/><text x="11.0483%" y="703.50"></text></g><g><title>malloc (2 samples, 0.09%)</title><rect x="10.8445%" y="677" width="0.0923%" height="15" fill="rgb(246,89,9)" fg:x="235" fg:w="2"/><text x="11.0945%" y="687.50"></text></g><g><title>[libc.so.6] (2 samples, 0.09%)</title><rect x="10.8445%" y="661" width="0.0923%" height="15" fill="rgb(233,213,13)" fg:x="235" fg:w="2"/><text x="11.0945%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (4 samples, 0.18%)</title><rect x="10.7983%" y="901" width="0.1846%" height="15" fill="rgb(233,141,41)" fg:x="234" fg:w="4"/><text x="11.0483%" y="911.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (4 samples, 0.18%)</title><rect x="10.7983%" y="885" width="0.1846%" height="15" fill="rgb(239,167,4)" fg:x="234" fg:w="4"/><text x="11.0483%" y="895.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (4 samples, 0.18%)</title><rect x="10.7983%" y="869" width="0.1846%" height="15" fill="rgb(209,217,16)" fg:x="234" fg:w="4"/><text x="11.0483%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (4 samples, 0.18%)</title><rect x="10.7983%" y="853" width="0.1846%" height="15" fill="rgb(219,88,35)" fg:x="234" fg:w="4"/><text x="11.0483%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4 samples, 0.18%)</title><rect x="10.7983%" y="837" width="0.1846%" height="15" fill="rgb(220,193,23)" fg:x="234" fg:w="4"/><text x="11.0483%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.18%)</title><rect x="10.7983%" y="821" width="0.1846%" height="15" fill="rgb(230,90,52)" fg:x="234" fg:w="4"/><text x="11.0483%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.18%)</title><rect x="10.7983%" y="805" width="0.1846%" height="15" fill="rgb(252,106,19)" fg:x="234" fg:w="4"/><text x="11.0483%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.18%)</title><rect x="10.7983%" y="789" width="0.1846%" height="15" fill="rgb(206,74,20)" fg:x="234" fg:w="4"/><text x="11.0483%" y="799.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.05%)</title><rect x="10.9368%" y="773" width="0.0461%" height="15" fill="rgb(230,138,44)" fg:x="237" fg:w="1"/><text x="11.1868%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="10.9368%" y="757" width="0.0461%" height="15" fill="rgb(235,182,43)" fg:x="237" fg:w="1"/><text x="11.1868%" y="767.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="10.9368%" y="741" width="0.0461%" height="15" fill="rgb(242,16,51)" fg:x="237" fg:w="1"/><text x="11.1868%" y="751.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.28%)</title><rect x="10.9829%" y="901" width="0.2769%" height="15" fill="rgb(248,9,4)" fg:x="238" fg:w="6"/><text x="11.2329%" y="911.50"></text></g><g><title>core::ptr::read (6 samples, 0.28%)</title><rect x="10.9829%" y="885" width="0.2769%" height="15" fill="rgb(210,31,22)" fg:x="238" fg:w="6"/><text x="11.2329%" y="895.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (6 samples, 0.28%)</title><rect x="10.9829%" y="869" width="0.2769%" height="15" fill="rgb(239,54,39)" fg:x="238" fg:w="6"/><text x="11.2329%" y="879.50"></text></g><g><title>[libc.so.6] (6 samples, 0.28%)</title><rect x="10.9829%" y="853" width="0.2769%" height="15" fill="rgb(230,99,41)" fg:x="238" fg:w="6"/><text x="11.2329%" y="863.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.09%)</title><rect x="11.2598%" y="901" width="0.0923%" height="15" fill="rgb(253,106,12)" fg:x="244" fg:w="2"/><text x="11.5098%" y="911.50"></text></g><g><title>[libc.so.6] (2 samples, 0.09%)</title><rect x="11.3521%" y="901" width="0.0923%" height="15" fill="rgb(213,46,41)" fg:x="246" fg:w="2"/><text x="11.6021%" y="911.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.05%)</title><rect x="11.4444%" y="901" width="0.0461%" height="15" fill="rgb(215,133,35)" fg:x="248" fg:w="1"/><text x="11.6944%" y="911.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.05%)</title><rect x="11.4444%" y="885" width="0.0461%" height="15" fill="rgb(213,28,5)" fg:x="248" fg:w="1"/><text x="11.6944%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.05%)</title><rect x="11.4444%" y="869" width="0.0461%" height="15" fill="rgb(215,77,49)" fg:x="248" fg:w="1"/><text x="11.6944%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.05%)</title><rect x="11.4444%" y="853" width="0.0461%" height="15" fill="rgb(248,100,22)" fg:x="248" fg:w="1"/><text x="11.6944%" y="863.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.05%)</title><rect x="11.4444%" y="837" width="0.0461%" height="15" fill="rgb(208,67,9)" fg:x="248" fg:w="1"/><text x="11.6944%" y="847.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.05%)</title><rect x="11.4444%" y="821" width="0.0461%" height="15" fill="rgb(219,133,21)" fg:x="248" fg:w="1"/><text x="11.6944%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.05%)</title><rect x="11.4444%" y="805" width="0.0461%" height="15" fill="rgb(246,46,29)" fg:x="248" fg:w="1"/><text x="11.6944%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.05%)</title><rect x="11.4444%" y="789" width="0.0461%" height="15" fill="rgb(246,185,52)" fg:x="248" fg:w="1"/><text x="11.6944%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.05%)</title><rect x="11.4444%" y="773" width="0.0461%" height="15" fill="rgb(252,136,11)" fg:x="248" fg:w="1"/><text x="11.6944%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.05%)</title><rect x="11.4444%" y="757" width="0.0461%" height="15" fill="rgb(219,138,53)" fg:x="248" fg:w="1"/><text x="11.6944%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.05%)</title><rect x="11.4444%" y="741" width="0.0461%" height="15" fill="rgb(211,51,23)" fg:x="248" fg:w="1"/><text x="11.6944%" y="751.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.05%)</title><rect x="11.4444%" y="725" width="0.0461%" height="15" fill="rgb(247,221,28)" fg:x="248" fg:w="1"/><text x="11.6944%" y="735.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="11.4444%" y="709" width="0.0461%" height="15" fill="rgb(251,222,45)" fg:x="248" fg:w="1"/><text x="11.6944%" y="719.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.09%)</title><rect x="11.4905%" y="885" width="0.0923%" height="15" fill="rgb(217,162,53)" fg:x="249" fg:w="2"/><text x="11.7405%" y="895.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.09%)</title><rect x="11.7674%" y="837" width="0.0923%" height="15" fill="rgb(229,93,14)" fg:x="255" fg:w="2"/><text x="12.0174%" y="847.50"></text></g><g><title>chrono::format::parsed::Parsed::set_day (1 samples, 0.05%)</title><rect x="11.8597%" y="837" width="0.0461%" height="15" fill="rgb(209,67,49)" fg:x="257" fg:w="1"/><text x="12.1097%" y="847.50"></text></g><g><title>chrono::format::parsed::set_if_consistent (1 samples, 0.05%)</title><rect x="11.8597%" y="821" width="0.0461%" height="15" fill="rgb(213,87,29)" fg:x="257" fg:w="1"/><text x="12.1097%" y="831.50"></text></g><g><title>chrono::format::parsed::Parsed::set_minute (1 samples, 0.05%)</title><rect x="11.9059%" y="837" width="0.0461%" height="15" fill="rgb(205,151,52)" fg:x="258" fg:w="1"/><text x="12.1559%" y="847.50"></text></g><g><title>&lt;i64 as num_traits::cast::ToPrimitive&gt;::to_u32 (1 samples, 0.05%)</title><rect x="11.9059%" y="821" width="0.0461%" height="15" fill="rgb(253,215,39)" fg:x="258" fg:w="1"/><text x="12.1559%" y="831.50"></text></g><g><title>chrono::format::parsed::Parsed::set_offset (1 samples, 0.05%)</title><rect x="11.9520%" y="837" width="0.0461%" height="15" fill="rgb(221,220,41)" fg:x="259" fg:w="1"/><text x="12.2020%" y="847.50"></text></g><g><title>chrono::format::parsed::set_if_consistent (1 samples, 0.05%)</title><rect x="11.9520%" y="821" width="0.0461%" height="15" fill="rgb(218,133,21)" fg:x="259" fg:w="1"/><text x="12.2020%" y="831.50"></text></g><g><title>chrono::format::parsed::Parsed::set_second (1 samples, 0.05%)</title><rect x="11.9982%" y="837" width="0.0461%" height="15" fill="rgb(221,193,43)" fg:x="260" fg:w="1"/><text x="12.2482%" y="847.50"></text></g><g><title>chrono::format::scan::char (1 samples, 0.05%)</title><rect x="12.0443%" y="837" width="0.0461%" height="15" fill="rgb(240,128,52)" fg:x="261" fg:w="1"/><text x="12.2943%" y="847.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (1 samples, 0.05%)</title><rect x="12.0443%" y="821" width="0.0461%" height="15" fill="rgb(253,114,12)" fg:x="261" fg:w="1"/><text x="12.2943%" y="831.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (1 samples, 0.05%)</title><rect x="12.0443%" y="805" width="0.0461%" height="15" fill="rgb(215,223,47)" fg:x="261" fg:w="1"/><text x="12.2943%" y="815.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (1 samples, 0.05%)</title><rect x="12.0443%" y="789" width="0.0461%" height="15" fill="rgb(248,225,23)" fg:x="261" fg:w="1"/><text x="12.2943%" y="799.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (1 samples, 0.05%)</title><rect x="12.0443%" y="773" width="0.0461%" height="15" fill="rgb(250,108,0)" fg:x="261" fg:w="1"/><text x="12.2943%" y="783.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.05%)</title><rect x="12.0443%" y="757" width="0.0461%" height="15" fill="rgb(228,208,7)" fg:x="261" fg:w="1"/><text x="12.2943%" y="767.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.05%)</title><rect x="12.0443%" y="741" width="0.0461%" height="15" fill="rgb(244,45,10)" fg:x="261" fg:w="1"/><text x="12.2943%" y="751.50"></text></g><g><title>chrono::format::scan::nanosecond (1 samples, 0.05%)</title><rect x="12.0904%" y="837" width="0.0461%" height="15" fill="rgb(207,125,25)" fg:x="262" fg:w="1"/><text x="12.3404%" y="847.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_left_matches (1 samples, 0.05%)</title><rect x="12.0904%" y="821" width="0.0461%" height="15" fill="rgb(210,195,18)" fg:x="262" fg:w="1"/><text x="12.3404%" y="831.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start_matches (1 samples, 0.05%)</title><rect x="12.0904%" y="805" width="0.0461%" height="15" fill="rgb(249,80,12)" fg:x="262" fg:w="1"/><text x="12.3404%" y="815.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_reject (1 samples, 0.05%)</title><rect x="12.0904%" y="789" width="0.0461%" height="15" fill="rgb(221,65,9)" fg:x="262" fg:w="1"/><text x="12.3404%" y="799.50"></text></g><g><title>core::str::pattern::Searcher::next_reject (1 samples, 0.05%)</title><rect x="12.0904%" y="773" width="0.0461%" height="15" fill="rgb(235,49,36)" fg:x="262" fg:w="1"/><text x="12.3404%" y="783.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (1 samples, 0.05%)</title><rect x="12.0904%" y="757" width="0.0461%" height="15" fill="rgb(225,32,20)" fg:x="262" fg:w="1"/><text x="12.3404%" y="767.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (1 samples, 0.05%)</title><rect x="12.0904%" y="741" width="0.0461%" height="15" fill="rgb(215,141,46)" fg:x="262" fg:w="1"/><text x="12.3404%" y="751.50"></text></g><g><title>chrono::format::scan::nanosecond::{{closure}} (1 samples, 0.05%)</title><rect x="12.0904%" y="725" width="0.0461%" height="15" fill="rgb(250,160,47)" fg:x="262" fg:w="1"/><text x="12.3404%" y="735.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (1 samples, 0.05%)</title><rect x="12.0904%" y="709" width="0.0461%" height="15" fill="rgb(216,222,40)" fg:x="262" fg:w="1"/><text x="12.3404%" y="719.50"></text></g><g><title>core::ops::range::RangeBounds::contains (1 samples, 0.05%)</title><rect x="12.0904%" y="693" width="0.0461%" height="15" fill="rgb(234,217,39)" fg:x="262" fg:w="1"/><text x="12.3404%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="12.2289%" y="821" width="0.0461%" height="15" fill="rgb(207,178,40)" fg:x="265" fg:w="1"/><text x="12.4789%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="12.2289%" y="805" width="0.0461%" height="15" fill="rgb(221,136,13)" fg:x="265" fg:w="1"/><text x="12.4789%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="12.2289%" y="789" width="0.0461%" height="15" fill="rgb(249,199,10)" fg:x="265" fg:w="1"/><text x="12.4789%" y="799.50"></text></g><g><title>chrono::format::scan::number (1 samples, 0.05%)</title><rect x="12.2289%" y="773" width="0.0461%" height="15" fill="rgb(249,222,13)" fg:x="265" fg:w="1"/><text x="12.4789%" y="783.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (4 samples, 0.18%)</title><rect x="12.2750%" y="821" width="0.1846%" height="15" fill="rgb(244,185,38)" fg:x="266" fg:w="4"/><text x="12.5250%" y="831.50"></text></g><g><title>core::ops::range::RangeBounds::contains (4 samples, 0.18%)</title><rect x="12.2750%" y="805" width="0.1846%" height="15" fill="rgb(236,202,9)" fg:x="266" fg:w="4"/><text x="12.5250%" y="815.50"></text></g><g><title>chrono::format::parse::parse (21 samples, 0.97%)</title><rect x="11.5828%" y="885" width="0.9691%" height="15" fill="rgb(250,229,37)" fg:x="251" fg:w="21"/><text x="11.8328%" y="895.50"></text></g><g><title>chrono::format::parse::parse_internal (21 samples, 0.97%)</title><rect x="11.5828%" y="869" width="0.9691%" height="15" fill="rgb(206,174,23)" fg:x="251" fg:w="21"/><text x="11.8328%" y="879.50"></text></g><g><title>chrono::format::parse::parse_rfc3339 (20 samples, 0.92%)</title><rect x="11.6290%" y="853" width="0.9229%" height="15" fill="rgb(211,33,43)" fg:x="252" fg:w="20"/><text x="11.8790%" y="863.50"></text></g><g><title>chrono::format::scan::number (9 samples, 0.42%)</title><rect x="12.1366%" y="837" width="0.4153%" height="15" fill="rgb(245,58,50)" fg:x="263" fg:w="9"/><text x="12.3866%" y="847.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (2 samples, 0.09%)</title><rect x="12.4596%" y="821" width="0.0923%" height="15" fill="rgb(244,68,36)" fg:x="270" fg:w="2"/><text x="12.7096%" y="831.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (2 samples, 0.09%)</title><rect x="12.4596%" y="805" width="0.0923%" height="15" fill="rgb(232,229,15)" fg:x="270" fg:w="2"/><text x="12.7096%" y="815.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (2 samples, 0.09%)</title><rect x="12.4596%" y="789" width="0.0923%" height="15" fill="rgb(254,30,23)" fg:x="270" fg:w="2"/><text x="12.7096%" y="799.50"></text></g><g><title>chrono::format::parsed::Parsed::new (1 samples, 0.05%)</title><rect x="12.5519%" y="885" width="0.0461%" height="15" fill="rgb(235,160,14)" fg:x="272" fg:w="1"/><text x="12.8019%" y="895.50"></text></g><g><title>&lt;chrono::format::parsed::Parsed as core::default::Default&gt;::default (1 samples, 0.05%)</title><rect x="12.5519%" y="869" width="0.0461%" height="15" fill="rgb(212,155,44)" fg:x="272" fg:w="1"/><text x="12.8019%" y="879.50"></text></g><g><title>&lt;chrono::naive::date::NaiveDate as chrono::traits::Datelike&gt;::iso_week (4 samples, 0.18%)</title><rect x="12.9672%" y="821" width="0.1846%" height="15" fill="rgb(226,2,50)" fg:x="281" fg:w="4"/><text x="13.2172%" y="831.50"></text></g><g><title>chrono::naive::isoweek::iso_week_from_yof (4 samples, 0.18%)</title><rect x="12.9672%" y="805" width="0.1846%" height="15" fill="rgb(234,177,6)" fg:x="281" fg:w="4"/><text x="13.2172%" y="815.50"></text></g><g><title>chrono::naive::internals::Of::isoweekdate_raw (3 samples, 0.14%)</title><rect x="13.0134%" y="789" width="0.1384%" height="15" fill="rgb(217,24,9)" fg:x="282" fg:w="3"/><text x="13.2634%" y="799.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (2 samples, 0.09%)</title><rect x="13.0595%" y="773" width="0.0923%" height="15" fill="rgb(220,13,46)" fg:x="283" fg:w="2"/><text x="13.3095%" y="783.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.05%)</title><rect x="13.1518%" y="821" width="0.0461%" height="15" fill="rgb(239,221,27)" fg:x="285" fg:w="1"/><text x="13.4018%" y="831.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (1 samples, 0.05%)</title><rect x="13.1518%" y="805" width="0.0461%" height="15" fill="rgb(222,198,25)" fg:x="285" fg:w="1"/><text x="13.4018%" y="815.50"></text></g><g><title>chrono::naive::date::NaiveDate::weeks_from (1 samples, 0.05%)</title><rect x="13.1980%" y="821" width="0.0461%" height="15" fill="rgb(211,99,13)" fg:x="286" fg:w="1"/><text x="13.4480%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (1 samples, 0.05%)</title><rect x="13.2441%" y="821" width="0.0461%" height="15" fill="rgb(232,111,31)" fg:x="287" fg:w="1"/><text x="13.4941%" y="831.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date::{{closure}} (10 samples, 0.46%)</title><rect x="12.9672%" y="837" width="0.4615%" height="15" fill="rgb(245,82,37)" fg:x="281" fg:w="10"/><text x="13.2172%" y="847.50"></text></g><g><title>num_integer::div_rem (3 samples, 0.14%)</title><rect x="13.2903%" y="821" width="0.1384%" height="15" fill="rgb(227,149,46)" fg:x="288" fg:w="3"/><text x="13.5403%" y="831.50"></text></g><g><title>&lt;i32 as num_integer::Integer&gt;::div_rem (3 samples, 0.14%)</title><rect x="13.2903%" y="805" width="0.1384%" height="15" fill="rgb(218,36,50)" fg:x="288" fg:w="3"/><text x="13.5403%" y="815.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_mdf (3 samples, 0.14%)</title><rect x="13.4287%" y="821" width="0.1384%" height="15" fill="rgb(226,80,48)" fg:x="291" fg:w="3"/><text x="13.6787%" y="831.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_of (3 samples, 0.14%)</title><rect x="13.4287%" y="805" width="0.1384%" height="15" fill="rgb(238,224,15)" fg:x="291" fg:w="3"/><text x="13.6787%" y="815.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (3 samples, 0.14%)</title><rect x="13.4287%" y="789" width="0.1384%" height="15" fill="rgb(241,136,10)" fg:x="291" fg:w="3"/><text x="13.6787%" y="799.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date (3 samples, 0.14%)</title><rect x="13.4287%" y="773" width="0.1384%" height="15" fill="rgb(208,32,45)" fg:x="291" fg:w="3"/><text x="13.6787%" y="783.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date (17 samples, 0.78%)</title><rect x="12.8288%" y="853" width="0.7845%" height="15" fill="rgb(207,135,9)" fg:x="278" fg:w="17"/><text x="13.0788%" y="863.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (4 samples, 0.18%)</title><rect x="13.4287%" y="837" width="0.1846%" height="15" fill="rgb(206,86,44)" fg:x="291" fg:w="4"/><text x="13.6787%" y="847.50"></text></g><g><title>chrono::naive::internals::YearFlags::from_year (1 samples, 0.05%)</title><rect x="13.5671%" y="821" width="0.0461%" height="15" fill="rgb(245,177,15)" fg:x="294" fg:w="1"/><text x="13.8171%" y="831.50"></text></g><g><title>chrono::naive::internals::YearFlags::from_year_mod_400 (1 samples, 0.05%)</title><rect x="13.5671%" y="805" width="0.0461%" height="15" fill="rgb(206,64,50)" fg:x="294" fg:w="1"/><text x="13.8171%" y="815.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_datetime_with_offset (22 samples, 1.02%)</title><rect x="12.6904%" y="869" width="1.0152%" height="15" fill="rgb(234,36,40)" fg:x="275" fg:w="22"/><text x="12.9404%" y="879.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_time (2 samples, 0.09%)</title><rect x="13.6133%" y="853" width="0.0923%" height="15" fill="rgb(213,64,8)" fg:x="295" fg:w="2"/><text x="13.8633%" y="863.50"></text></g><g><title>chrono::naive::internals::Of::new (1 samples, 0.05%)</title><rect x="13.7056%" y="837" width="0.0461%" height="15" fill="rgb(210,75,36)" fg:x="297" fg:w="1"/><text x="13.9556%" y="847.50"></text></g><g><title>chrono::naive::internals::cycle_to_yo (1 samples, 0.05%)</title><rect x="13.7517%" y="837" width="0.0461%" height="15" fill="rgb(229,88,21)" fg:x="298" fg:w="1"/><text x="14.0017%" y="847.50"></text></g><g><title>core::num::&lt;impl i32&gt;::checked_sub (1 samples, 0.05%)</title><rect x="13.7979%" y="837" width="0.0461%" height="15" fill="rgb(252,204,47)" fg:x="299" fg:w="1"/><text x="14.0479%" y="847.50"></text></g><g><title>core::num::&lt;impl i32&gt;::overflowing_sub (1 samples, 0.05%)</title><rect x="13.7979%" y="821" width="0.0461%" height="15" fill="rgb(208,77,27)" fg:x="299" fg:w="1"/><text x="14.0479%" y="831.50"></text></g><g><title>num_integer::div_mod_floor (2 samples, 0.09%)</title><rect x="13.8440%" y="837" width="0.0923%" height="15" fill="rgb(221,76,26)" fg:x="300" fg:w="2"/><text x="14.0940%" y="847.50"></text></g><g><title>&lt;i32 as num_integer::Integer&gt;::div_mod_floor (2 samples, 0.09%)</title><rect x="13.8440%" y="821" width="0.0923%" height="15" fill="rgb(225,139,18)" fg:x="300" fg:w="2"/><text x="14.0940%" y="831.50"></text></g><g><title>&lt;i32 as num_integer::Integer&gt;::div_rem (1 samples, 0.05%)</title><rect x="13.8902%" y="805" width="0.0461%" height="15" fill="rgb(230,137,11)" fg:x="301" fg:w="1"/><text x="14.1402%" y="815.50"></text></g><g><title>chrono::naive::date::NaiveDate::checked_sub_signed (6 samples, 0.28%)</title><rect x="13.7056%" y="853" width="0.2769%" height="15" fill="rgb(212,28,1)" fg:x="297" fg:w="6"/><text x="13.9556%" y="863.50"></text></g><g><title>time::duration::Duration::num_days (1 samples, 0.05%)</title><rect x="13.9363%" y="837" width="0.0461%" height="15" fill="rgb(248,164,17)" fg:x="302" fg:w="1"/><text x="14.1863%" y="847.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_signed (9 samples, 0.42%)</title><rect x="13.7056%" y="869" width="0.4153%" height="15" fill="rgb(222,171,42)" fg:x="297" fg:w="9"/><text x="13.9556%" y="879.50"></text></g><g><title>chrono::naive::time::NaiveTime::overflowing_sub_signed (3 samples, 0.14%)</title><rect x="13.9825%" y="853" width="0.1384%" height="15" fill="rgb(243,84,45)" fg:x="303" fg:w="3"/><text x="14.2325%" y="863.50"></text></g><g><title>chrono::naive::time::NaiveTime::overflowing_add_signed (3 samples, 0.14%)</title><rect x="13.9825%" y="837" width="0.1384%" height="15" fill="rgb(252,49,23)" fg:x="303" fg:w="3"/><text x="14.2325%" y="847.50"></text></g><g><title>time::duration::Duration::num_nanoseconds (1 samples, 0.05%)</title><rect x="14.0748%" y="821" width="0.0461%" height="15" fill="rgb(215,19,7)" fg:x="305" fg:w="1"/><text x="14.3248%" y="831.50"></text></g><g><title>core::num::&lt;impl i64&gt;::checked_mul (1 samples, 0.05%)</title><rect x="14.0748%" y="805" width="0.0461%" height="15" fill="rgb(238,81,41)" fg:x="305" fg:w="1"/><text x="14.3248%" y="815.50"></text></g><g><title>core::num::&lt;impl i64&gt;::overflowing_mul (1 samples, 0.05%)</title><rect x="14.0748%" y="789" width="0.0461%" height="15" fill="rgb(210,199,37)" fg:x="305" fg:w="1"/><text x="14.3248%" y="799.50"></text></g><g><title>chrono::naive::internals::cycle_to_yo (3 samples, 0.14%)</title><rect x="14.1671%" y="741" width="0.1384%" height="15" fill="rgb(244,192,49)" fg:x="307" fg:w="3"/><text x="14.4171%" y="751.50"></text></g><g><title>num_integer::div_rem (1 samples, 0.05%)</title><rect x="14.2593%" y="725" width="0.0461%" height="15" fill="rgb(226,211,11)" fg:x="309" fg:w="1"/><text x="14.5093%" y="735.50"></text></g><g><title>&lt;u32 as num_integer::Integer&gt;::div_rem (1 samples, 0.05%)</title><rect x="14.2593%" y="709" width="0.0461%" height="15" fill="rgb(236,162,54)" fg:x="309" fg:w="1"/><text x="14.5093%" y="719.50"></text></g><g><title>core::num::&lt;impl i32&gt;::checked_add (1 samples, 0.05%)</title><rect x="14.3055%" y="741" width="0.0461%" height="15" fill="rgb(220,229,9)" fg:x="310" fg:w="1"/><text x="14.5555%" y="751.50"></text></g><g><title>core::num::&lt;impl i32&gt;::overflowing_add (1 samples, 0.05%)</title><rect x="14.3055%" y="725" width="0.0461%" height="15" fill="rgb(250,87,22)" fg:x="310" fg:w="1"/><text x="14.5555%" y="735.50"></text></g><g><title>num_integer::div_mod_floor (1 samples, 0.05%)</title><rect x="14.3516%" y="741" width="0.0461%" height="15" fill="rgb(239,43,17)" fg:x="311" fg:w="1"/><text x="14.6016%" y="751.50"></text></g><g><title>&lt;i32 as num_integer::Integer&gt;::div_mod_floor (1 samples, 0.05%)</title><rect x="14.3516%" y="725" width="0.0461%" height="15" fill="rgb(231,177,25)" fg:x="311" fg:w="1"/><text x="14.6016%" y="735.50"></text></g><g><title>chrono::naive::date::NaiveDate::checked_add_signed (7 samples, 0.32%)</title><rect x="14.1671%" y="757" width="0.3230%" height="15" fill="rgb(219,179,1)" fg:x="307" fg:w="7"/><text x="14.4171%" y="767.50"></text></g><g><title>time::duration::Duration::num_days (2 samples, 0.09%)</title><rect x="14.3978%" y="741" width="0.0923%" height="15" fill="rgb(238,219,53)" fg:x="312" fg:w="2"/><text x="14.6478%" y="751.50"></text></g><g><title>time::duration::Duration::num_seconds (2 samples, 0.09%)</title><rect x="14.3978%" y="725" width="0.0923%" height="15" fill="rgb(232,167,36)" fg:x="312" fg:w="2"/><text x="14.6478%" y="735.50"></text></g><g><title>chrono::datetime::DateTime&lt;chrono::offset::fixed::FixedOffset&gt;::parse_from_rfc3339 (67 samples, 3.09%)</title><rect x="11.4905%" y="901" width="3.0918%" height="15" fill="rgb(244,19,51)" fg:x="249" fg:w="67"/><text x="11.7405%" y="911.50">chr..</text></g><g><title>chrono::format::parsed::Parsed::to_datetime (43 samples, 1.98%)</title><rect x="12.5981%" y="885" width="1.9843%" height="15" fill="rgb(224,6,22)" fg:x="273" fg:w="43"/><text x="12.8481%" y="895.50">c..</text></g><g><title>chrono::offset::TimeZone::from_local_datetime (10 samples, 0.46%)</title><rect x="14.1209%" y="869" width="0.4615%" height="15" fill="rgb(224,145,5)" fg:x="306" fg:w="10"/><text x="14.3709%" y="879.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::map (10 samples, 0.46%)</title><rect x="14.1209%" y="853" width="0.4615%" height="15" fill="rgb(234,130,49)" fg:x="306" fg:w="10"/><text x="14.3709%" y="863.50"></text></g><g><title>chrono::offset::TimeZone::from_local_datetime::{{closure}} (10 samples, 0.46%)</title><rect x="14.1209%" y="837" width="0.4615%" height="15" fill="rgb(254,6,2)" fg:x="306" fg:w="10"/><text x="14.3709%" y="847.50"></text></g><g><title>chrono::offset::fixed::&lt;impl core::ops::arith::Sub&lt;chrono::offset::fixed::FixedOffset&gt; for chrono::naive::datetime::NaiveDateTime&gt;::sub (10 samples, 0.46%)</title><rect x="14.1209%" y="821" width="0.4615%" height="15" fill="rgb(208,96,46)" fg:x="306" fg:w="10"/><text x="14.3709%" y="831.50"></text></g><g><title>chrono::offset::fixed::add_with_leapsecond (9 samples, 0.42%)</title><rect x="14.1671%" y="805" width="0.4153%" height="15" fill="rgb(239,3,39)" fg:x="307" fg:w="9"/><text x="14.4171%" y="815.50"></text></g><g><title>&lt;chrono::naive::datetime::NaiveDateTime as core::ops::arith::Add&lt;time::duration::Duration&gt;&gt;::add (9 samples, 0.42%)</title><rect x="14.1671%" y="789" width="0.4153%" height="15" fill="rgb(233,210,1)" fg:x="307" fg:w="9"/><text x="14.4171%" y="799.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_signed (9 samples, 0.42%)</title><rect x="14.1671%" y="773" width="0.4153%" height="15" fill="rgb(244,137,37)" fg:x="307" fg:w="9"/><text x="14.4171%" y="783.50"></text></g><g><title>chrono::naive::time::NaiveTime::overflowing_add_signed (2 samples, 0.09%)</title><rect x="14.4901%" y="757" width="0.0923%" height="15" fill="rgb(240,136,2)" fg:x="314" fg:w="2"/><text x="14.7401%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (18 samples, 0.83%)</title><rect x="14.5824%" y="901" width="0.8306%" height="15" fill="rgb(239,18,37)" fg:x="316" fg:w="18"/><text x="14.8324%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (18 samples, 0.83%)</title><rect x="14.5824%" y="885" width="0.8306%" height="15" fill="rgb(218,185,22)" fg:x="316" fg:w="18"/><text x="14.8324%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (18 samples, 0.83%)</title><rect x="14.5824%" y="869" width="0.8306%" height="15" fill="rgb(225,218,4)" fg:x="316" fg:w="18"/><text x="14.8324%" y="879.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.83%)</title><rect x="14.5824%" y="853" width="0.8306%" height="15" fill="rgb(230,182,32)" fg:x="316" fg:w="18"/><text x="14.8324%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.83%)</title><rect x="14.5824%" y="837" width="0.8306%" height="15" fill="rgb(242,56,43)" fg:x="316" fg:w="18"/><text x="14.8324%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.83%)</title><rect x="14.5824%" y="821" width="0.8306%" height="15" fill="rgb(233,99,24)" fg:x="316" fg:w="18"/><text x="14.8324%" y="831.50"></text></g><g><title>cfree (18 samples, 0.83%)</title><rect x="14.5824%" y="805" width="0.8306%" height="15" fill="rgb(234,209,42)" fg:x="316" fg:w="18"/><text x="14.8324%" y="815.50"></text></g><g><title>[libc.so.6] (17 samples, 0.78%)</title><rect x="14.6285%" y="789" width="0.7845%" height="15" fill="rgb(227,7,12)" fg:x="317" fg:w="17"/><text x="14.8785%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.23%)</title><rect x="15.4130%" y="885" width="0.2307%" height="15" fill="rgb(245,203,43)" fg:x="334" fg:w="5"/><text x="15.6630%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (5 samples, 0.23%)</title><rect x="15.4130%" y="869" width="0.2307%" height="15" fill="rgb(238,205,33)" fg:x="334" fg:w="5"/><text x="15.6630%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (5 samples, 0.23%)</title><rect x="15.4130%" y="853" width="0.2307%" height="15" fill="rgb(231,56,7)" fg:x="334" fg:w="5"/><text x="15.6630%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 0.23%)</title><rect x="15.4130%" y="837" width="0.2307%" height="15" fill="rgb(244,186,29)" fg:x="334" fg:w="5"/><text x="15.6630%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5 samples, 0.23%)</title><rect x="15.4130%" y="821" width="0.2307%" height="15" fill="rgb(234,111,31)" fg:x="334" fg:w="5"/><text x="15.6630%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.23%)</title><rect x="15.4130%" y="805" width="0.2307%" height="15" fill="rgb(241,149,10)" fg:x="334" fg:w="5"/><text x="15.6630%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.23%)</title><rect x="15.4130%" y="789" width="0.2307%" height="15" fill="rgb(249,206,44)" fg:x="334" fg:w="5"/><text x="15.6630%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.23%)</title><rect x="15.4130%" y="773" width="0.2307%" height="15" fill="rgb(251,153,30)" fg:x="334" fg:w="5"/><text x="15.6630%" y="783.50"></text></g><g><title>cfree (4 samples, 0.18%)</title><rect x="15.4592%" y="757" width="0.1846%" height="15" fill="rgb(239,152,38)" fg:x="335" fg:w="4"/><text x="15.7092%" y="767.50"></text></g><g><title>[libc.so.6] (3 samples, 0.14%)</title><rect x="15.5053%" y="741" width="0.1384%" height="15" fill="rgb(249,139,47)" fg:x="336" fg:w="3"/><text x="15.7553%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (11 samples, 0.51%)</title><rect x="15.4130%" y="901" width="0.5076%" height="15" fill="rgb(244,64,35)" fg:x="334" fg:w="11"/><text x="15.6630%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (6 samples, 0.28%)</title><rect x="15.6437%" y="885" width="0.2769%" height="15" fill="rgb(216,46,15)" fg:x="339" fg:w="6"/><text x="15.8937%" y="895.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.28%)</title><rect x="15.6437%" y="869" width="0.2769%" height="15" fill="rgb(250,74,19)" fg:x="339" fg:w="6"/><text x="15.8937%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.28%)</title><rect x="15.6437%" y="853" width="0.2769%" height="15" fill="rgb(249,42,33)" fg:x="339" fg:w="6"/><text x="15.8937%" y="863.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.28%)</title><rect x="15.6437%" y="837" width="0.2769%" height="15" fill="rgb(242,149,17)" fg:x="339" fg:w="6"/><text x="15.8937%" y="847.50"></text></g><g><title>cfree (6 samples, 0.28%)</title><rect x="15.6437%" y="821" width="0.2769%" height="15" fill="rgb(244,29,21)" fg:x="339" fg:w="6"/><text x="15.8937%" y="831.50"></text></g><g><title>[libc.so.6] (3 samples, 0.14%)</title><rect x="15.7822%" y="805" width="0.1384%" height="15" fill="rgb(220,130,37)" fg:x="342" fg:w="3"/><text x="16.0322%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="15.9206%" y="885" width="0.0461%" height="15" fill="rgb(211,67,2)" fg:x="345" fg:w="1"/><text x="16.1706%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;[yt_history::parser::json_parser::Subtitles]&gt; (1 samples, 0.05%)</title><rect x="15.9206%" y="869" width="0.0461%" height="15" fill="rgb(235,68,52)" fg:x="345" fg:w="1"/><text x="16.1706%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::parser::json_parser::Subtitles&gt; (1 samples, 0.05%)</title><rect x="15.9206%" y="853" width="0.0461%" height="15" fill="rgb(246,142,3)" fg:x="345" fg:w="1"/><text x="16.1706%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.05%)</title><rect x="15.9206%" y="837" width="0.0461%" height="15" fill="rgb(241,25,7)" fg:x="345" fg:w="1"/><text x="16.1706%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.05%)</title><rect x="15.9206%" y="821" width="0.0461%" height="15" fill="rgb(242,119,39)" fg:x="345" fg:w="1"/><text x="16.1706%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.05%)</title><rect x="15.9206%" y="805" width="0.0461%" height="15" fill="rgb(241,98,45)" fg:x="345" fg:w="1"/><text x="16.1706%" y="815.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="15.9206%" y="789" width="0.0461%" height="15" fill="rgb(254,28,30)" fg:x="345" fg:w="1"/><text x="16.1706%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.05%)</title><rect x="15.9206%" y="773" width="0.0461%" height="15" fill="rgb(241,142,54)" fg:x="345" fg:w="1"/><text x="16.1706%" y="783.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.05%)</title><rect x="15.9206%" y="757" width="0.0461%" height="15" fill="rgb(222,85,15)" fg:x="345" fg:w="1"/><text x="16.1706%" y="767.50"></text></g><g><title>cfree (1 samples, 0.05%)</title><rect x="15.9206%" y="741" width="0.0461%" height="15" fill="rgb(210,85,47)" fg:x="345" fg:w="1"/><text x="16.1706%" y="751.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="15.9206%" y="725" width="0.0461%" height="15" fill="rgb(224,206,25)" fg:x="345" fg:w="1"/><text x="16.1706%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;yt_history::parser::json_parser::Subtitles&gt;&gt; (4 samples, 0.18%)</title><rect x="15.9206%" y="901" width="0.1846%" height="15" fill="rgb(243,201,19)" fg:x="345" fg:w="4"/><text x="16.1706%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;yt_history::parser::json_parser::Subtitles&gt;&gt; (3 samples, 0.14%)</title><rect x="15.9668%" y="885" width="0.1384%" height="15" fill="rgb(236,59,4)" fg:x="346" fg:w="3"/><text x="16.2168%" y="895.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.14%)</title><rect x="15.9668%" y="869" width="0.1384%" height="15" fill="rgb(254,179,45)" fg:x="346" fg:w="3"/><text x="16.2168%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.14%)</title><rect x="15.9668%" y="853" width="0.1384%" height="15" fill="rgb(226,14,10)" fg:x="346" fg:w="3"/><text x="16.2168%" y="863.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.14%)</title><rect x="15.9668%" y="837" width="0.1384%" height="15" fill="rgb(244,27,41)" fg:x="346" fg:w="3"/><text x="16.2168%" y="847.50"></text></g><g><title>cfree (3 samples, 0.14%)</title><rect x="15.9668%" y="821" width="0.1384%" height="15" fill="rgb(235,35,32)" fg:x="346" fg:w="3"/><text x="16.2168%" y="831.50"></text></g><g><title>[libc.so.6] (3 samples, 0.14%)</title><rect x="15.9668%" y="805" width="0.1384%" height="15" fill="rgb(218,68,31)" fg:x="346" fg:w="3"/><text x="16.2168%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.09%)</title><rect x="16.1514%" y="885" width="0.0923%" height="15" fill="rgb(207,120,37)" fg:x="350" fg:w="2"/><text x="16.4014%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.09%)</title><rect x="16.1514%" y="869" width="0.0923%" height="15" fill="rgb(227,98,0)" fg:x="350" fg:w="2"/><text x="16.4014%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.09%)</title><rect x="16.1514%" y="853" width="0.0923%" height="15" fill="rgb(207,7,3)" fg:x="350" fg:w="2"/><text x="16.4014%" y="863.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.09%)</title><rect x="16.1514%" y="837" width="0.0923%" height="15" fill="rgb(206,98,19)" fg:x="350" fg:w="2"/><text x="16.4014%" y="847.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.09%)</title><rect x="16.1514%" y="821" width="0.0923%" height="15" fill="rgb(217,5,26)" fg:x="350" fg:w="2"/><text x="16.4014%" y="831.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.09%)</title><rect x="16.1514%" y="805" width="0.0923%" height="15" fill="rgb(235,190,38)" fg:x="350" fg:w="2"/><text x="16.4014%" y="815.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.09%)</title><rect x="16.1514%" y="789" width="0.0923%" height="15" fill="rgb(247,86,24)" fg:x="350" fg:w="2"/><text x="16.4014%" y="799.50"></text></g><g><title>[libc.so.6] (2 samples, 0.09%)</title><rect x="16.1514%" y="773" width="0.0923%" height="15" fill="rgb(205,101,16)" fg:x="350" fg:w="2"/><text x="16.4014%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.05%)</title><rect x="16.3821%" y="757" width="0.0461%" height="15" fill="rgb(246,168,33)" fg:x="355" fg:w="1"/><text x="16.6321%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.05%)</title><rect x="16.3821%" y="741" width="0.0461%" height="15" fill="rgb(231,114,1)" fg:x="355" fg:w="1"/><text x="16.6321%" y="751.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.05%)</title><rect x="16.3821%" y="725" width="0.0461%" height="15" fill="rgb(207,184,53)" fg:x="355" fg:w="1"/><text x="16.6321%" y="735.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.09%)</title><rect x="16.3821%" y="789" width="0.0923%" height="15" fill="rgb(224,95,51)" fg:x="355" fg:w="2"/><text x="16.6321%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.09%)</title><rect x="16.3821%" y="773" width="0.0923%" height="15" fill="rgb(212,188,45)" fg:x="355" fg:w="2"/><text x="16.6321%" y="783.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="16.4282%" y="757" width="0.0461%" height="15" fill="rgb(223,154,38)" fg:x="356" fg:w="1"/><text x="16.6782%" y="767.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.09%)</title><rect x="16.6128%" y="661" width="0.0923%" height="15" fill="rgb(251,22,52)" fg:x="360" fg:w="2"/><text x="16.8628%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.23%)</title><rect x="16.5205%" y="693" width="0.2307%" height="15" fill="rgb(229,209,22)" fg:x="358" fg:w="5"/><text x="16.7705%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.18%)</title><rect x="16.5667%" y="677" width="0.1846%" height="15" fill="rgb(234,138,34)" fg:x="359" fg:w="4"/><text x="16.8167%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.05%)</title><rect x="16.7051%" y="661" width="0.0461%" height="15" fill="rgb(212,95,11)" fg:x="362" fg:w="1"/><text x="16.9551%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 0.46%)</title><rect x="16.3821%" y="821" width="0.4615%" height="15" fill="rgb(240,179,47)" fg:x="355" fg:w="10"/><text x="16.6321%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.46%)</title><rect x="16.3821%" y="805" width="0.4615%" height="15" fill="rgb(240,163,11)" fg:x="355" fg:w="10"/><text x="16.6321%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8 samples, 0.37%)</title><rect x="16.4744%" y="789" width="0.3692%" height="15" fill="rgb(236,37,12)" fg:x="357" fg:w="8"/><text x="16.7244%" y="799.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (7 samples, 0.32%)</title><rect x="16.5205%" y="773" width="0.3230%" height="15" fill="rgb(232,164,16)" fg:x="358" fg:w="7"/><text x="16.7705%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (7 samples, 0.32%)</title><rect x="16.5205%" y="757" width="0.3230%" height="15" fill="rgb(244,205,15)" fg:x="358" fg:w="7"/><text x="16.7705%" y="767.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (7 samples, 0.32%)</title><rect x="16.5205%" y="741" width="0.3230%" height="15" fill="rgb(223,117,47)" fg:x="358" fg:w="7"/><text x="16.7705%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (7 samples, 0.32%)</title><rect x="16.5205%" y="725" width="0.3230%" height="15" fill="rgb(244,107,35)" fg:x="358" fg:w="7"/><text x="16.7705%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (7 samples, 0.32%)</title><rect x="16.5205%" y="709" width="0.3230%" height="15" fill="rgb(205,140,8)" fg:x="358" fg:w="7"/><text x="16.7705%" y="719.50"></text></g><g><title>core::hash::Hasher::write_u8 (2 samples, 0.09%)</title><rect x="16.7513%" y="693" width="0.0923%" height="15" fill="rgb(228,84,46)" fg:x="363" fg:w="2"/><text x="17.0013%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="16.7974%" y="677" width="0.0461%" height="15" fill="rgb(254,188,9)" fg:x="364" fg:w="1"/><text x="17.0474%" y="687.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.05%)</title><rect x="16.7974%" y="661" width="0.0461%" height="15" fill="rgb(206,112,54)" fg:x="364" fg:w="1"/><text x="17.0474%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="16.9359%" y="773" width="0.0461%" height="15" fill="rgb(216,84,49)" fg:x="367" fg:w="1"/><text x="17.1859%" y="783.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.05%)</title><rect x="16.9359%" y="757" width="0.0461%" height="15" fill="rgb(214,194,35)" fg:x="367" fg:w="1"/><text x="17.1859%" y="767.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1 samples, 0.05%)</title><rect x="16.9820%" y="773" width="0.0461%" height="15" fill="rgb(249,28,3)" fg:x="368" fg:w="1"/><text x="17.2320%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (9 samples, 0.42%)</title><rect x="17.0281%" y="773" width="0.4153%" height="15" fill="rgb(222,56,52)" fg:x="369" fg:w="9"/><text x="17.2781%" y="783.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (9 samples, 0.42%)</title><rect x="17.0281%" y="757" width="0.4153%" height="15" fill="rgb(245,217,50)" fg:x="369" fg:w="9"/><text x="17.2781%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (9 samples, 0.42%)</title><rect x="17.0281%" y="741" width="0.4153%" height="15" fill="rgb(213,201,24)" fg:x="369" fg:w="9"/><text x="17.2781%" y="751.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (9 samples, 0.42%)</title><rect x="17.0281%" y="725" width="0.4153%" height="15" fill="rgb(248,116,28)" fg:x="369" fg:w="9"/><text x="17.2781%" y="735.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (9 samples, 0.42%)</title><rect x="17.0281%" y="709" width="0.4153%" height="15" fill="rgb(219,72,43)" fg:x="369" fg:w="9"/><text x="17.2781%" y="719.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (9 samples, 0.42%)</title><rect x="17.0281%" y="693" width="0.4153%" height="15" fill="rgb(209,138,14)" fg:x="369" fg:w="9"/><text x="17.2781%" y="703.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (9 samples, 0.42%)</title><rect x="17.0281%" y="677" width="0.4153%" height="15" fill="rgb(222,18,33)" fg:x="369" fg:w="9"/><text x="17.2781%" y="687.50"></text></g><g><title>[libc.so.6] (3 samples, 0.14%)</title><rect x="17.3050%" y="661" width="0.1384%" height="15" fill="rgb(213,199,7)" fg:x="375" fg:w="3"/><text x="17.5550%" y="671.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.05%)</title><rect x="17.4435%" y="773" width="0.0461%" height="15" fill="rgb(250,110,10)" fg:x="378" fg:w="1"/><text x="17.6935%" y="783.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.05%)</title><rect x="17.4896%" y="773" width="0.0461%" height="15" fill="rgb(248,123,6)" fg:x="379" fg:w="1"/><text x="17.7396%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.05%)</title><rect x="17.4896%" y="757" width="0.0461%" height="15" fill="rgb(206,91,31)" fg:x="379" fg:w="1"/><text x="17.7396%" y="767.50"></text></g><g><title>yt_history::model::Models::find_channel (1 samples, 0.05%)</title><rect x="17.4896%" y="741" width="0.0461%" height="15" fill="rgb(211,154,13)" fg:x="379" fg:w="1"/><text x="17.7396%" y="751.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.05%)</title><rect x="17.5358%" y="773" width="0.0461%" height="15" fill="rgb(225,148,7)" fg:x="380" fg:w="1"/><text x="17.7858%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.05%)</title><rect x="17.5358%" y="757" width="0.0461%" height="15" fill="rgb(220,160,43)" fg:x="380" fg:w="1"/><text x="17.7858%" y="767.50"></text></g><g><title>yt_history::model::Models::find_channel (30 samples, 1.38%)</title><rect x="16.2437%" y="885" width="1.3844%" height="15" fill="rgb(213,52,39)" fg:x="352" fg:w="30"/><text x="16.4937%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (28 samples, 1.29%)</title><rect x="16.3359%" y="869" width="1.2921%" height="15" fill="rgb(243,137,7)" fg:x="354" fg:w="28"/><text x="16.5859%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (28 samples, 1.29%)</title><rect x="16.3359%" y="853" width="1.2921%" height="15" fill="rgb(230,79,13)" fg:x="354" fg:w="28"/><text x="16.5859%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (28 samples, 1.29%)</title><rect x="16.3359%" y="837" width="1.2921%" height="15" fill="rgb(247,105,23)" fg:x="354" fg:w="28"/><text x="16.5859%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (17 samples, 0.78%)</title><rect x="16.8436%" y="821" width="0.7845%" height="15" fill="rgb(223,179,41)" fg:x="365" fg:w="17"/><text x="17.0936%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (17 samples, 0.78%)</title><rect x="16.8436%" y="805" width="0.7845%" height="15" fill="rgb(218,9,34)" fg:x="365" fg:w="17"/><text x="17.0936%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (17 samples, 0.78%)</title><rect x="16.8436%" y="789" width="0.7845%" height="15" fill="rgb(222,106,8)" fg:x="365" fg:w="17"/><text x="17.0936%" y="799.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.05%)</title><rect x="17.5819%" y="773" width="0.0461%" height="15" fill="rgb(211,220,0)" fg:x="381" fg:w="1"/><text x="17.8319%" y="783.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.05%)</title><rect x="17.5819%" y="757" width="0.0461%" height="15" fill="rgb(229,52,16)" fg:x="381" fg:w="1"/><text x="17.8319%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.05%)</title><rect x="17.5819%" y="741" width="0.0461%" height="15" fill="rgb(212,155,18)" fg:x="381" fg:w="1"/><text x="17.8319%" y="751.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (7 samples, 0.32%)</title><rect x="17.6281%" y="869" width="0.3230%" height="15" fill="rgb(242,21,14)" fg:x="382" fg:w="7"/><text x="17.8781%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (7 samples, 0.32%)</title><rect x="17.6281%" y="853" width="0.3230%" height="15" fill="rgb(222,19,48)" fg:x="382" fg:w="7"/><text x="17.8781%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (7 samples, 0.32%)</title><rect x="17.6281%" y="837" width="0.3230%" height="15" fill="rgb(232,45,27)" fg:x="382" fg:w="7"/><text x="17.8781%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.32%)</title><rect x="17.6281%" y="821" width="0.3230%" height="15" fill="rgb(249,103,42)" fg:x="382" fg:w="7"/><text x="17.8781%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.32%)</title><rect x="17.6281%" y="805" width="0.3230%" height="15" fill="rgb(246,81,33)" fg:x="382" fg:w="7"/><text x="17.8781%" y="815.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.32%)</title><rect x="17.6281%" y="789" width="0.3230%" height="15" fill="rgb(252,33,42)" fg:x="382" fg:w="7"/><text x="17.8781%" y="799.50"></text></g><g><title>malloc (7 samples, 0.32%)</title><rect x="17.6281%" y="773" width="0.3230%" height="15" fill="rgb(209,212,41)" fg:x="382" fg:w="7"/><text x="17.8781%" y="783.50"></text></g><g><title>[libc.so.6] (7 samples, 0.32%)</title><rect x="17.6281%" y="757" width="0.3230%" height="15" fill="rgb(207,154,6)" fg:x="382" fg:w="7"/><text x="17.8781%" y="767.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.05%)</title><rect x="17.9511%" y="805" width="0.0461%" height="15" fill="rgb(223,64,47)" fg:x="389" fg:w="1"/><text x="18.2011%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.05%)</title><rect x="17.9511%" y="789" width="0.0461%" height="15" fill="rgb(211,161,38)" fg:x="389" fg:w="1"/><text x="18.2011%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.05%)</title><rect x="17.9511%" y="773" width="0.0461%" height="15" fill="rgb(219,138,40)" fg:x="389" fg:w="1"/><text x="18.2011%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.05%)</title><rect x="17.9511%" y="757" width="0.0461%" height="15" fill="rgb(241,228,46)" fg:x="389" fg:w="1"/><text x="18.2011%" y="767.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.05%)</title><rect x="17.9511%" y="741" width="0.0461%" height="15" fill="rgb(223,209,38)" fg:x="389" fg:w="1"/><text x="18.2011%" y="751.50"></text></g><g><title>hashbrown::map::make_insert_hash (2 samples, 0.09%)</title><rect x="17.9511%" y="837" width="0.0923%" height="15" fill="rgb(236,164,45)" fg:x="389" fg:w="2"/><text x="18.2011%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.09%)</title><rect x="17.9511%" y="821" width="0.0923%" height="15" fill="rgb(231,15,5)" fg:x="389" fg:w="2"/><text x="18.2011%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.05%)</title><rect x="17.9972%" y="805" width="0.0461%" height="15" fill="rgb(252,35,15)" fg:x="390" fg:w="1"/><text x="18.2472%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.05%)</title><rect x="17.9972%" y="789" width="0.0461%" height="15" fill="rgb(248,181,18)" fg:x="390" fg:w="1"/><text x="18.2472%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.05%)</title><rect x="17.9972%" y="773" width="0.0461%" height="15" fill="rgb(233,39,42)" fg:x="390" fg:w="1"/><text x="18.2472%" y="783.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.05%)</title><rect x="17.9972%" y="757" width="0.0461%" height="15" fill="rgb(238,110,33)" fg:x="390" fg:w="1"/><text x="18.2472%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1 samples, 0.05%)</title><rect x="17.9972%" y="741" width="0.0461%" height="15" fill="rgb(233,195,10)" fg:x="390" fg:w="1"/><text x="18.2472%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1 samples, 0.05%)</title><rect x="17.9972%" y="725" width="0.0461%" height="15" fill="rgb(254,105,3)" fg:x="390" fg:w="1"/><text x="18.2472%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="17.9972%" y="709" width="0.0461%" height="15" fill="rgb(221,225,9)" fg:x="390" fg:w="1"/><text x="18.2472%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.05%)</title><rect x="17.9972%" y="693" width="0.0461%" height="15" fill="rgb(224,227,45)" fg:x="390" fg:w="1"/><text x="18.2472%" y="703.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.05%)</title><rect x="17.9972%" y="677" width="0.0461%" height="15" fill="rgb(229,198,43)" fg:x="390" fg:w="1"/><text x="18.2472%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.05%)</title><rect x="18.0434%" y="837" width="0.0461%" height="15" fill="rgb(206,209,35)" fg:x="391" fg:w="1"/><text x="18.2934%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.05%)</title><rect x="18.0434%" y="821" width="0.0461%" height="15" fill="rgb(245,195,53)" fg:x="391" fg:w="1"/><text x="18.2934%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.05%)</title><rect x="18.0434%" y="805" width="0.0461%" height="15" fill="rgb(240,92,26)" fg:x="391" fg:w="1"/><text x="18.2934%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.05%)</title><rect x="18.0434%" y="789" width="0.0461%" height="15" fill="rgb(207,40,23)" fg:x="391" fg:w="1"/><text x="18.2934%" y="799.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.05%)</title><rect x="18.0434%" y="773" width="0.0461%" height="15" fill="rgb(223,111,35)" fg:x="391" fg:w="1"/><text x="18.2934%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1 samples, 0.05%)</title><rect x="18.0434%" y="757" width="0.0461%" height="15" fill="rgb(229,147,28)" fg:x="391" fg:w="1"/><text x="18.2934%" y="767.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.05%)</title><rect x="18.0434%" y="741" width="0.0461%" height="15" fill="rgb(211,29,28)" fg:x="391" fg:w="1"/><text x="18.2934%" y="751.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.05%)</title><rect x="18.0434%" y="725" width="0.0461%" height="15" fill="rgb(228,72,33)" fg:x="391" fg:w="1"/><text x="18.2934%" y="735.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.05%)</title><rect x="18.0434%" y="709" width="0.0461%" height="15" fill="rgb(205,214,31)" fg:x="391" fg:w="1"/><text x="18.2934%" y="719.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.05%)</title><rect x="18.0434%" y="693" width="0.0461%" height="15" fill="rgb(224,111,15)" fg:x="391" fg:w="1"/><text x="18.2934%" y="703.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="18.0434%" y="677" width="0.0461%" height="15" fill="rgb(253,21,26)" fg:x="391" fg:w="1"/><text x="18.2934%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.05%)</title><rect x="18.0895%" y="821" width="0.0461%" height="15" fill="rgb(245,139,43)" fg:x="392" fg:w="1"/><text x="18.3395%" y="831.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.05%)</title><rect x="18.0895%" y="805" width="0.0461%" height="15" fill="rgb(252,170,7)" fg:x="392" fg:w="1"/><text x="18.3395%" y="815.50"></text></g><g><title>core::ptr::write (1 samples, 0.05%)</title><rect x="18.0895%" y="789" width="0.0461%" height="15" fill="rgb(231,118,14)" fg:x="392" fg:w="1"/><text x="18.3395%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.14%)</title><rect x="18.1357%" y="661" width="0.1384%" height="15" fill="rgb(238,83,0)" fg:x="393" fg:w="3"/><text x="18.3857%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.14%)</title><rect x="18.1357%" y="645" width="0.1384%" height="15" fill="rgb(221,39,39)" fg:x="393" fg:w="3"/><text x="18.3857%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.05%)</title><rect x="18.2280%" y="629" width="0.0461%" height="15" fill="rgb(222,119,46)" fg:x="395" fg:w="1"/><text x="18.4780%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.18%)</title><rect x="18.1357%" y="693" width="0.1846%" height="15" fill="rgb(222,165,49)" fg:x="393" fg:w="4"/><text x="18.3857%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.18%)</title><rect x="18.1357%" y="677" width="0.1846%" height="15" fill="rgb(219,113,52)" fg:x="393" fg:w="4"/><text x="18.3857%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="18.2741%" y="661" width="0.0461%" height="15" fill="rgb(214,7,15)" fg:x="396" fg:w="1"/><text x="18.5241%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (14 samples, 0.65%)</title><rect x="18.1357%" y="757" width="0.6461%" height="15" fill="rgb(235,32,4)" fg:x="393" fg:w="14"/><text x="18.3857%" y="767.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (14 samples, 0.65%)</title><rect x="18.1357%" y="741" width="0.6461%" height="15" fill="rgb(238,90,54)" fg:x="393" fg:w="14"/><text x="18.3857%" y="751.50"></text></g><g><title>hashbrown::map::make_hash (14 samples, 0.65%)</title><rect x="18.1357%" y="725" width="0.6461%" height="15" fill="rgb(213,208,19)" fg:x="393" fg:w="14"/><text x="18.3857%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 0.65%)</title><rect x="18.1357%" y="709" width="0.6461%" height="15" fill="rgb(233,156,4)" fg:x="393" fg:w="14"/><text x="18.3857%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10 samples, 0.46%)</title><rect x="18.3203%" y="693" width="0.4615%" height="15" fill="rgb(207,194,5)" fg:x="397" fg:w="10"/><text x="18.5703%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (10 samples, 0.46%)</title><rect x="18.3203%" y="677" width="0.4615%" height="15" fill="rgb(206,111,30)" fg:x="397" fg:w="10"/><text x="18.5703%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (10 samples, 0.46%)</title><rect x="18.3203%" y="661" width="0.4615%" height="15" fill="rgb(243,70,54)" fg:x="397" fg:w="10"/><text x="18.5703%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (10 samples, 0.46%)</title><rect x="18.3203%" y="645" width="0.4615%" height="15" fill="rgb(242,28,8)" fg:x="397" fg:w="10"/><text x="18.5703%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (10 samples, 0.46%)</title><rect x="18.3203%" y="629" width="0.4615%" height="15" fill="rgb(219,106,18)" fg:x="397" fg:w="10"/><text x="18.5703%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (10 samples, 0.46%)</title><rect x="18.3203%" y="613" width="0.4615%" height="15" fill="rgb(244,222,10)" fg:x="397" fg:w="10"/><text x="18.5703%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.46%)</title><rect x="18.3203%" y="597" width="0.4615%" height="15" fill="rgb(236,179,52)" fg:x="397" fg:w="10"/><text x="18.5703%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (10 samples, 0.46%)</title><rect x="18.3203%" y="581" width="0.4615%" height="15" fill="rgb(213,23,39)" fg:x="397" fg:w="10"/><text x="18.5703%" y="591.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.09%)</title><rect x="18.6894%" y="565" width="0.0923%" height="15" fill="rgb(238,48,10)" fg:x="405" fg:w="2"/><text x="18.9394%" y="575.50"></text></g><g><title>yt_history::model::Models::find_or_create_channel (66 samples, 3.05%)</title><rect x="16.1052%" y="901" width="3.0457%" height="15" fill="rgb(251,196,23)" fg:x="349" fg:w="66"/><text x="16.3552%" y="911.50">yt_..</text></g><g><title>yt_history::model::Models::insert_channel (33 samples, 1.52%)</title><rect x="17.6281%" y="885" width="1.5228%" height="15" fill="rgb(250,152,24)" fg:x="382" fg:w="33"/><text x="17.8781%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (26 samples, 1.20%)</title><rect x="17.9511%" y="869" width="1.1998%" height="15" fill="rgb(209,150,17)" fg:x="389" fg:w="26"/><text x="18.2011%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (26 samples, 1.20%)</title><rect x="17.9511%" y="853" width="1.1998%" height="15" fill="rgb(234,202,34)" fg:x="389" fg:w="26"/><text x="18.2011%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (23 samples, 1.06%)</title><rect x="18.0895%" y="837" width="1.0614%" height="15" fill="rgb(253,148,53)" fg:x="392" fg:w="23"/><text x="18.3395%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (22 samples, 1.02%)</title><rect x="18.1357%" y="821" width="1.0152%" height="15" fill="rgb(218,129,16)" fg:x="393" fg:w="22"/><text x="18.3857%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (22 samples, 1.02%)</title><rect x="18.1357%" y="805" width="1.0152%" height="15" fill="rgb(216,85,19)" fg:x="393" fg:w="22"/><text x="18.3857%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (22 samples, 1.02%)</title><rect x="18.1357%" y="789" width="1.0152%" height="15" fill="rgb(235,228,7)" fg:x="393" fg:w="22"/><text x="18.3857%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (22 samples, 1.02%)</title><rect x="18.1357%" y="773" width="1.0152%" height="15" fill="rgb(245,175,0)" fg:x="393" fg:w="22"/><text x="18.3857%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (8 samples, 0.37%)</title><rect x="18.7817%" y="757" width="0.3692%" height="15" fill="rgb(208,168,36)" fg:x="407" fg:w="8"/><text x="19.0317%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (8 samples, 0.37%)</title><rect x="18.7817%" y="741" width="0.3692%" height="15" fill="rgb(246,171,24)" fg:x="407" fg:w="8"/><text x="19.0317%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (8 samples, 0.37%)</title><rect x="18.7817%" y="725" width="0.3692%" height="15" fill="rgb(215,142,24)" fg:x="407" fg:w="8"/><text x="19.0317%" y="735.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (8 samples, 0.37%)</title><rect x="18.7817%" y="709" width="0.3692%" height="15" fill="rgb(250,187,7)" fg:x="407" fg:w="8"/><text x="19.0317%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.37%)</title><rect x="18.7817%" y="693" width="0.3692%" height="15" fill="rgb(228,66,33)" fg:x="407" fg:w="8"/><text x="19.0317%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.37%)</title><rect x="18.7817%" y="677" width="0.3692%" height="15" fill="rgb(234,215,21)" fg:x="407" fg:w="8"/><text x="19.0317%" y="687.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.37%)</title><rect x="18.7817%" y="661" width="0.3692%" height="15" fill="rgb(222,191,20)" fg:x="407" fg:w="8"/><text x="19.0317%" y="671.50"></text></g><g><title>malloc (8 samples, 0.37%)</title><rect x="18.7817%" y="645" width="0.3692%" height="15" fill="rgb(245,79,54)" fg:x="407" fg:w="8"/><text x="19.0317%" y="655.50"></text></g><g><title>[libc.so.6] (8 samples, 0.37%)</title><rect x="18.7817%" y="629" width="0.3692%" height="15" fill="rgb(240,10,37)" fg:x="407" fg:w="8"/><text x="19.0317%" y="639.50"></text></g><g><title>[libc.so.6] (7 samples, 0.32%)</title><rect x="18.8279%" y="613" width="0.3230%" height="15" fill="rgb(214,192,32)" fg:x="408" fg:w="7"/><text x="19.0779%" y="623.50"></text></g><g><title>[libc.so.6] (3 samples, 0.14%)</title><rect x="19.0125%" y="597" width="0.1384%" height="15" fill="rgb(209,36,54)" fg:x="412" fg:w="3"/><text x="19.2625%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.09%)</title><rect x="19.1970%" y="885" width="0.0923%" height="15" fill="rgb(220,10,11)" fg:x="416" fg:w="2"/><text x="19.4470%" y="895.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (2 samples, 0.09%)</title><rect x="19.1970%" y="869" width="0.0923%" height="15" fill="rgb(221,106,17)" fg:x="416" fg:w="2"/><text x="19.4470%" y="879.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.09%)</title><rect x="19.2893%" y="773" width="0.0923%" height="15" fill="rgb(251,142,44)" fg:x="418" fg:w="2"/><text x="19.5393%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.05%)</title><rect x="19.3355%" y="757" width="0.0461%" height="15" fill="rgb(238,13,15)" fg:x="419" fg:w="1"/><text x="19.5855%" y="767.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.05%)</title><rect x="19.3355%" y="741" width="0.0461%" height="15" fill="rgb(208,107,27)" fg:x="419" fg:w="1"/><text x="19.5855%" y="751.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.18%)</title><rect x="19.2893%" y="805" width="0.1846%" height="15" fill="rgb(205,136,37)" fg:x="418" fg:w="4"/><text x="19.5393%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.18%)</title><rect x="19.2893%" y="789" width="0.1846%" height="15" fill="rgb(250,205,27)" fg:x="418" fg:w="4"/><text x="19.5393%" y="799.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.09%)</title><rect x="19.3816%" y="773" width="0.0923%" height="15" fill="rgb(210,80,43)" fg:x="420" fg:w="2"/><text x="19.6316%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.05%)</title><rect x="19.5201%" y="693" width="0.0461%" height="15" fill="rgb(247,160,36)" fg:x="423" fg:w="1"/><text x="19.7701%" y="703.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.05%)</title><rect x="19.5201%" y="677" width="0.0461%" height="15" fill="rgb(234,13,49)" fg:x="423" fg:w="1"/><text x="19.7701%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.14%)</title><rect x="19.4739%" y="709" width="0.1384%" height="15" fill="rgb(234,122,0)" fg:x="422" fg:w="3"/><text x="19.7239%" y="719.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.05%)</title><rect x="19.5662%" y="693" width="0.0461%" height="15" fill="rgb(207,146,38)" fg:x="424" fg:w="1"/><text x="19.8162%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 0.42%)</title><rect x="19.2893%" y="837" width="0.4153%" height="15" fill="rgb(207,177,25)" fg:x="418" fg:w="9"/><text x="19.5393%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.42%)</title><rect x="19.2893%" y="821" width="0.4153%" height="15" fill="rgb(211,178,42)" fg:x="418" fg:w="9"/><text x="19.5393%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.23%)</title><rect x="19.4739%" y="805" width="0.2307%" height="15" fill="rgb(230,69,54)" fg:x="422" fg:w="5"/><text x="19.7239%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (5 samples, 0.23%)</title><rect x="19.4739%" y="789" width="0.2307%" height="15" fill="rgb(214,135,41)" fg:x="422" fg:w="5"/><text x="19.7239%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (5 samples, 0.23%)</title><rect x="19.4739%" y="773" width="0.2307%" height="15" fill="rgb(237,67,25)" fg:x="422" fg:w="5"/><text x="19.7239%" y="783.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (5 samples, 0.23%)</title><rect x="19.4739%" y="757" width="0.2307%" height="15" fill="rgb(222,189,50)" fg:x="422" fg:w="5"/><text x="19.7239%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (5 samples, 0.23%)</title><rect x="19.4739%" y="741" width="0.2307%" height="15" fill="rgb(245,148,34)" fg:x="422" fg:w="5"/><text x="19.7239%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (5 samples, 0.23%)</title><rect x="19.4739%" y="725" width="0.2307%" height="15" fill="rgb(222,29,6)" fg:x="422" fg:w="5"/><text x="19.7239%" y="735.50"></text></g><g><title>core::hash::Hasher::write_u8 (2 samples, 0.09%)</title><rect x="19.6124%" y="709" width="0.0923%" height="15" fill="rgb(221,189,43)" fg:x="425" fg:w="2"/><text x="19.8624%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="19.6585%" y="693" width="0.0461%" height="15" fill="rgb(207,36,27)" fg:x="426" fg:w="1"/><text x="19.9085%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (5 samples, 0.23%)</title><rect x="19.7047%" y="789" width="0.2307%" height="15" fill="rgb(217,90,24)" fg:x="427" fg:w="5"/><text x="19.9547%" y="799.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (5 samples, 0.23%)</title><rect x="19.7047%" y="773" width="0.2307%" height="15" fill="rgb(224,66,35)" fg:x="427" fg:w="5"/><text x="19.9547%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (5 samples, 0.23%)</title><rect x="19.7047%" y="757" width="0.2307%" height="15" fill="rgb(221,13,50)" fg:x="427" fg:w="5"/><text x="19.9547%" y="767.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (5 samples, 0.23%)</title><rect x="19.7047%" y="741" width="0.2307%" height="15" fill="rgb(236,68,49)" fg:x="427" fg:w="5"/><text x="19.9547%" y="751.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.23%)</title><rect x="19.7047%" y="725" width="0.2307%" height="15" fill="rgb(229,146,28)" fg:x="427" fg:w="5"/><text x="19.9547%" y="735.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (5 samples, 0.23%)</title><rect x="19.7047%" y="709" width="0.2307%" height="15" fill="rgb(225,31,38)" fg:x="427" fg:w="5"/><text x="19.9547%" y="719.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (5 samples, 0.23%)</title><rect x="19.7047%" y="693" width="0.2307%" height="15" fill="rgb(250,208,3)" fg:x="427" fg:w="5"/><text x="19.9547%" y="703.50"></text></g><g><title>[libc.so.6] (2 samples, 0.09%)</title><rect x="19.8431%" y="677" width="0.0923%" height="15" fill="rgb(246,54,23)" fg:x="430" fg:w="2"/><text x="20.0931%" y="687.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.05%)</title><rect x="19.9354%" y="789" width="0.0461%" height="15" fill="rgb(243,76,11)" fg:x="432" fg:w="1"/><text x="20.1854%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.05%)</title><rect x="19.9354%" y="773" width="0.0461%" height="15" fill="rgb(245,21,50)" fg:x="432" fg:w="1"/><text x="20.1854%" y="783.50"></text></g><g><title>yt_history::model::Models::find_or_create_video (1 samples, 0.05%)</title><rect x="19.9354%" y="757" width="0.0461%" height="15" fill="rgb(228,9,43)" fg:x="432" fg:w="1"/><text x="20.1854%" y="767.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.05%)</title><rect x="19.9815%" y="789" width="0.0461%" height="15" fill="rgb(208,100,47)" fg:x="433" fg:w="1"/><text x="20.2315%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.05%)</title><rect x="19.9815%" y="773" width="0.0461%" height="15" fill="rgb(232,26,8)" fg:x="433" fg:w="1"/><text x="20.2315%" y="783.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (17 samples, 0.78%)</title><rect x="19.2893%" y="885" width="0.7845%" height="15" fill="rgb(216,166,38)" fg:x="418" fg:w="17"/><text x="19.5393%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (17 samples, 0.78%)</title><rect x="19.2893%" y="869" width="0.7845%" height="15" fill="rgb(251,202,51)" fg:x="418" fg:w="17"/><text x="19.5393%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (17 samples, 0.78%)</title><rect x="19.2893%" y="853" width="0.7845%" height="15" fill="rgb(254,216,34)" fg:x="418" fg:w="17"/><text x="19.5393%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (8 samples, 0.37%)</title><rect x="19.7047%" y="837" width="0.3692%" height="15" fill="rgb(251,32,27)" fg:x="427" fg:w="8"/><text x="19.9547%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (8 samples, 0.37%)</title><rect x="19.7047%" y="821" width="0.3692%" height="15" fill="rgb(208,127,28)" fg:x="427" fg:w="8"/><text x="19.9547%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (8 samples, 0.37%)</title><rect x="19.7047%" y="805" width="0.3692%" height="15" fill="rgb(224,137,22)" fg:x="427" fg:w="8"/><text x="19.9547%" y="815.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.05%)</title><rect x="20.0277%" y="789" width="0.0461%" height="15" fill="rgb(254,70,32)" fg:x="434" fg:w="1"/><text x="20.2777%" y="799.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.05%)</title><rect x="20.0277%" y="773" width="0.0461%" height="15" fill="rgb(229,75,37)" fg:x="434" fg:w="1"/><text x="20.2777%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.05%)</title><rect x="20.0277%" y="757" width="0.0461%" height="15" fill="rgb(252,64,23)" fg:x="434" fg:w="1"/><text x="20.2777%" y="767.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.05%)</title><rect x="20.0738%" y="709" width="0.0461%" height="15" fill="rgb(232,162,48)" fg:x="435" fg:w="1"/><text x="20.3238%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.09%)</title><rect x="20.0738%" y="741" width="0.0923%" height="15" fill="rgb(246,160,12)" fg:x="435" fg:w="2"/><text x="20.3238%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.09%)</title><rect x="20.0738%" y="725" width="0.0923%" height="15" fill="rgb(247,166,0)" fg:x="435" fg:w="2"/><text x="20.3238%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.05%)</title><rect x="20.1200%" y="709" width="0.0461%" height="15" fill="rgb(249,219,21)" fg:x="436" fg:w="1"/><text x="20.3700%" y="719.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.14%)</title><rect x="20.0738%" y="773" width="0.1384%" height="15" fill="rgb(205,209,3)" fg:x="435" fg:w="3"/><text x="20.3238%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.14%)</title><rect x="20.0738%" y="757" width="0.1384%" height="15" fill="rgb(243,44,1)" fg:x="435" fg:w="3"/><text x="20.3238%" y="767.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="20.1661%" y="741" width="0.0461%" height="15" fill="rgb(206,159,16)" fg:x="437" fg:w="1"/><text x="20.4161%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="20.3507%" y="645" width="0.0461%" height="15" fill="rgb(244,77,30)" fg:x="441" fg:w="1"/><text x="20.6007%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.09%)</title><rect x="20.3969%" y="645" width="0.0923%" height="15" fill="rgb(218,69,12)" fg:x="442" fg:w="2"/><text x="20.6469%" y="655.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 0.46%)</title><rect x="20.0738%" y="805" width="0.4615%" height="15" fill="rgb(212,87,7)" fg:x="435" fg:w="10"/><text x="20.3238%" y="815.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.46%)</title><rect x="20.0738%" y="789" width="0.4615%" height="15" fill="rgb(245,114,25)" fg:x="435" fg:w="10"/><text x="20.3238%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.32%)</title><rect x="20.2123%" y="773" width="0.3230%" height="15" fill="rgb(210,61,42)" fg:x="438" fg:w="7"/><text x="20.4623%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (7 samples, 0.32%)</title><rect x="20.2123%" y="757" width="0.3230%" height="15" fill="rgb(211,52,33)" fg:x="438" fg:w="7"/><text x="20.4623%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (7 samples, 0.32%)</title><rect x="20.2123%" y="741" width="0.3230%" height="15" fill="rgb(234,58,33)" fg:x="438" fg:w="7"/><text x="20.4623%" y="751.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (7 samples, 0.32%)</title><rect x="20.2123%" y="725" width="0.3230%" height="15" fill="rgb(220,115,36)" fg:x="438" fg:w="7"/><text x="20.4623%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (7 samples, 0.32%)</title><rect x="20.2123%" y="709" width="0.3230%" height="15" fill="rgb(243,153,54)" fg:x="438" fg:w="7"/><text x="20.4623%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (7 samples, 0.32%)</title><rect x="20.2123%" y="693" width="0.3230%" height="15" fill="rgb(251,47,18)" fg:x="438" fg:w="7"/><text x="20.4623%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.32%)</title><rect x="20.2123%" y="677" width="0.3230%" height="15" fill="rgb(242,102,42)" fg:x="438" fg:w="7"/><text x="20.4623%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.28%)</title><rect x="20.2584%" y="661" width="0.2769%" height="15" fill="rgb(234,31,38)" fg:x="439" fg:w="6"/><text x="20.5084%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.05%)</title><rect x="20.4892%" y="645" width="0.0461%" height="15" fill="rgb(221,117,51)" fg:x="444" fg:w="1"/><text x="20.7392%" y="655.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (5 samples, 0.23%)</title><rect x="20.5353%" y="741" width="0.2307%" height="15" fill="rgb(212,20,18)" fg:x="445" fg:w="5"/><text x="20.7853%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (5 samples, 0.23%)</title><rect x="20.5353%" y="725" width="0.2307%" height="15" fill="rgb(245,133,36)" fg:x="445" fg:w="5"/><text x="20.7853%" y="735.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (5 samples, 0.23%)</title><rect x="20.5353%" y="709" width="0.2307%" height="15" fill="rgb(212,6,19)" fg:x="445" fg:w="5"/><text x="20.7853%" y="719.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.23%)</title><rect x="20.5353%" y="693" width="0.2307%" height="15" fill="rgb(218,1,36)" fg:x="445" fg:w="5"/><text x="20.7853%" y="703.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (5 samples, 0.23%)</title><rect x="20.5353%" y="677" width="0.2307%" height="15" fill="rgb(246,84,54)" fg:x="445" fg:w="5"/><text x="20.7853%" y="687.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (5 samples, 0.23%)</title><rect x="20.5353%" y="661" width="0.2307%" height="15" fill="rgb(242,110,6)" fg:x="445" fg:w="5"/><text x="20.7853%" y="671.50"></text></g><g><title>[libc.so.6] (4 samples, 0.18%)</title><rect x="20.5814%" y="645" width="0.1846%" height="15" fill="rgb(214,47,5)" fg:x="446" fg:w="4"/><text x="20.8314%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (6 samples, 0.28%)</title><rect x="20.5353%" y="757" width="0.2769%" height="15" fill="rgb(218,159,25)" fg:x="445" fg:w="6"/><text x="20.7853%" y="767.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.05%)</title><rect x="20.7660%" y="741" width="0.0461%" height="15" fill="rgb(215,211,28)" fg:x="450" fg:w="1"/><text x="21.0160%" y="751.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.05%)</title><rect x="20.7660%" y="725" width="0.0461%" height="15" fill="rgb(238,59,32)" fg:x="450" fg:w="1"/><text x="21.0160%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.05%)</title><rect x="20.7660%" y="709" width="0.0461%" height="15" fill="rgb(226,82,3)" fg:x="450" fg:w="1"/><text x="21.0160%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.05%)</title><rect x="20.7660%" y="693" width="0.0461%" height="15" fill="rgb(240,164,32)" fg:x="450" fg:w="1"/><text x="21.0160%" y="703.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.05%)</title><rect x="20.8122%" y="757" width="0.0461%" height="15" fill="rgb(232,46,7)" fg:x="451" fg:w="1"/><text x="21.0622%" y="767.50"></text></g><g><title>yt_history::model::Models::find_or_create_channel (19 samples, 0.88%)</title><rect x="20.0738%" y="885" width="0.8768%" height="15" fill="rgb(229,129,53)" fg:x="435" fg:w="19"/><text x="20.3238%" y="895.50"></text></g><g><title>yt_history::model::Models::find_channel (19 samples, 0.88%)</title><rect x="20.0738%" y="869" width="0.8768%" height="15" fill="rgb(234,188,29)" fg:x="435" fg:w="19"/><text x="20.3238%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (19 samples, 0.88%)</title><rect x="20.0738%" y="853" width="0.8768%" height="15" fill="rgb(246,141,4)" fg:x="435" fg:w="19"/><text x="20.3238%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (19 samples, 0.88%)</title><rect x="20.0738%" y="837" width="0.8768%" height="15" fill="rgb(229,23,39)" fg:x="435" fg:w="19"/><text x="20.3238%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (19 samples, 0.88%)</title><rect x="20.0738%" y="821" width="0.8768%" height="15" fill="rgb(206,12,3)" fg:x="435" fg:w="19"/><text x="20.3238%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (9 samples, 0.42%)</title><rect x="20.5353%" y="805" width="0.4153%" height="15" fill="rgb(252,226,20)" fg:x="445" fg:w="9"/><text x="20.7853%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9 samples, 0.42%)</title><rect x="20.5353%" y="789" width="0.4153%" height="15" fill="rgb(216,123,35)" fg:x="445" fg:w="9"/><text x="20.7853%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (9 samples, 0.42%)</title><rect x="20.5353%" y="773" width="0.4153%" height="15" fill="rgb(212,68,40)" fg:x="445" fg:w="9"/><text x="20.7853%" y="783.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.09%)</title><rect x="20.8583%" y="757" width="0.0923%" height="15" fill="rgb(254,125,32)" fg:x="452" fg:w="2"/><text x="21.1083%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.09%)</title><rect x="20.8583%" y="741" width="0.0923%" height="15" fill="rgb(253,97,22)" fg:x="452" fg:w="2"/><text x="21.1083%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.14%)</title><rect x="20.9506%" y="869" width="0.1384%" height="15" fill="rgb(241,101,14)" fg:x="454" fg:w="3"/><text x="21.2006%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.09%)</title><rect x="20.9968%" y="853" width="0.0923%" height="15" fill="rgb(238,103,29)" fg:x="455" fg:w="2"/><text x="21.2468%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.09%)</title><rect x="20.9968%" y="837" width="0.0923%" height="15" fill="rgb(233,195,47)" fg:x="455" fg:w="2"/><text x="21.2468%" y="847.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.09%)</title><rect x="20.9968%" y="821" width="0.0923%" height="15" fill="rgb(246,218,30)" fg:x="455" fg:w="2"/><text x="21.2468%" y="831.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.09%)</title><rect x="20.9968%" y="805" width="0.0923%" height="15" fill="rgb(219,145,47)" fg:x="455" fg:w="2"/><text x="21.2468%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.09%)</title><rect x="20.9968%" y="789" width="0.0923%" height="15" fill="rgb(243,12,26)" fg:x="455" fg:w="2"/><text x="21.2468%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.09%)</title><rect x="20.9968%" y="773" width="0.0923%" height="15" fill="rgb(214,87,16)" fg:x="455" fg:w="2"/><text x="21.2468%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.09%)</title><rect x="20.9968%" y="757" width="0.0923%" height="15" fill="rgb(208,99,42)" fg:x="455" fg:w="2"/><text x="21.2468%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.09%)</title><rect x="20.9968%" y="741" width="0.0923%" height="15" fill="rgb(253,99,2)" fg:x="455" fg:w="2"/><text x="21.2468%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.09%)</title><rect x="20.9968%" y="725" width="0.0923%" height="15" fill="rgb(220,168,23)" fg:x="455" fg:w="2"/><text x="21.2468%" y="735.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.09%)</title><rect x="20.9968%" y="709" width="0.0923%" height="15" fill="rgb(242,38,24)" fg:x="455" fg:w="2"/><text x="21.2468%" y="719.50"></text></g><g><title>malloc (2 samples, 0.09%)</title><rect x="20.9968%" y="693" width="0.0923%" height="15" fill="rgb(225,182,9)" fg:x="455" fg:w="2"/><text x="21.2468%" y="703.50"></text></g><g><title>__rdl_alloc (1 samples, 0.05%)</title><rect x="21.1352%" y="773" width="0.0461%" height="15" fill="rgb(243,178,37)" fg:x="458" fg:w="1"/><text x="21.3852%" y="783.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (16 samples, 0.74%)</title><rect x="21.0891%" y="869" width="0.7383%" height="15" fill="rgb(232,139,19)" fg:x="457" fg:w="16"/><text x="21.3391%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (15 samples, 0.69%)</title><rect x="21.1352%" y="853" width="0.6922%" height="15" fill="rgb(225,201,24)" fg:x="458" fg:w="15"/><text x="21.3852%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (15 samples, 0.69%)</title><rect x="21.1352%" y="837" width="0.6922%" height="15" fill="rgb(221,47,46)" fg:x="458" fg:w="15"/><text x="21.3852%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.69%)</title><rect x="21.1352%" y="821" width="0.6922%" height="15" fill="rgb(249,23,13)" fg:x="458" fg:w="15"/><text x="21.3852%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.69%)</title><rect x="21.1352%" y="805" width="0.6922%" height="15" fill="rgb(219,9,5)" fg:x="458" fg:w="15"/><text x="21.3852%" y="815.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.69%)</title><rect x="21.1352%" y="789" width="0.6922%" height="15" fill="rgb(254,171,16)" fg:x="458" fg:w="15"/><text x="21.3852%" y="799.50"></text></g><g><title>malloc (14 samples, 0.65%)</title><rect x="21.1814%" y="773" width="0.6461%" height="15" fill="rgb(230,171,20)" fg:x="459" fg:w="14"/><text x="21.4314%" y="783.50"></text></g><g><title>[libc.so.6] (14 samples, 0.65%)</title><rect x="21.1814%" y="757" width="0.6461%" height="15" fill="rgb(210,71,41)" fg:x="459" fg:w="14"/><text x="21.4314%" y="767.50"></text></g><g><title>[libc.so.6] (3 samples, 0.14%)</title><rect x="21.6890%" y="741" width="0.1384%" height="15" fill="rgb(206,173,20)" fg:x="470" fg:w="3"/><text x="21.9390%" y="751.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.09%)</title><rect x="21.8274%" y="805" width="0.0923%" height="15" fill="rgb(233,88,34)" fg:x="473" fg:w="2"/><text x="22.0774%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.09%)</title><rect x="21.8274%" y="789" width="0.0923%" height="15" fill="rgb(223,209,46)" fg:x="473" fg:w="2"/><text x="22.0774%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.09%)</title><rect x="21.8274%" y="773" width="0.0923%" height="15" fill="rgb(250,43,18)" fg:x="473" fg:w="2"/><text x="22.0774%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.09%)</title><rect x="21.8274%" y="757" width="0.0923%" height="15" fill="rgb(208,13,10)" fg:x="473" fg:w="2"/><text x="22.0774%" y="767.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.09%)</title><rect x="21.8274%" y="741" width="0.0923%" height="15" fill="rgb(212,200,36)" fg:x="473" fg:w="2"/><text x="22.0774%" y="751.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.09%)</title><rect x="22.0581%" y="677" width="0.0923%" height="15" fill="rgb(225,90,30)" fg:x="478" fg:w="2"/><text x="22.3081%" y="687.50"></text></g><g><title>hashbrown::map::make_insert_hash (8 samples, 0.37%)</title><rect x="21.8274%" y="837" width="0.3692%" height="15" fill="rgb(236,182,39)" fg:x="473" fg:w="8"/><text x="22.0774%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.37%)</title><rect x="21.8274%" y="821" width="0.3692%" height="15" fill="rgb(212,144,35)" fg:x="473" fg:w="8"/><text x="22.0774%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.28%)</title><rect x="21.9197%" y="805" width="0.2769%" height="15" fill="rgb(228,63,44)" fg:x="475" fg:w="6"/><text x="22.1697%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (6 samples, 0.28%)</title><rect x="21.9197%" y="789" width="0.2769%" height="15" fill="rgb(228,109,6)" fg:x="475" fg:w="6"/><text x="22.1697%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (6 samples, 0.28%)</title><rect x="21.9197%" y="773" width="0.2769%" height="15" fill="rgb(238,117,24)" fg:x="475" fg:w="6"/><text x="22.1697%" y="783.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (6 samples, 0.28%)</title><rect x="21.9197%" y="757" width="0.2769%" height="15" fill="rgb(242,26,26)" fg:x="475" fg:w="6"/><text x="22.1697%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (6 samples, 0.28%)</title><rect x="21.9197%" y="741" width="0.2769%" height="15" fill="rgb(221,92,48)" fg:x="475" fg:w="6"/><text x="22.1697%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (6 samples, 0.28%)</title><rect x="21.9197%" y="725" width="0.2769%" height="15" fill="rgb(209,209,32)" fg:x="475" fg:w="6"/><text x="22.1697%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.28%)</title><rect x="21.9197%" y="709" width="0.2769%" height="15" fill="rgb(221,70,22)" fg:x="475" fg:w="6"/><text x="22.1697%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.23%)</title><rect x="21.9659%" y="693" width="0.2307%" height="15" fill="rgb(248,145,5)" fg:x="476" fg:w="5"/><text x="22.2159%" y="703.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.05%)</title><rect x="22.1504%" y="677" width="0.0461%" height="15" fill="rgb(226,116,26)" fg:x="480" fg:w="1"/><text x="22.4004%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="22.2427%" y="789" width="0.0461%" height="15" fill="rgb(244,5,17)" fg:x="482" fg:w="1"/><text x="22.4927%" y="799.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.05%)</title><rect x="22.2427%" y="773" width="0.0461%" height="15" fill="rgb(252,159,33)" fg:x="482" fg:w="1"/><text x="22.4927%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3 samples, 0.14%)</title><rect x="22.1966%" y="837" width="0.1384%" height="15" fill="rgb(206,71,0)" fg:x="481" fg:w="3"/><text x="22.4466%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.14%)</title><rect x="22.1966%" y="821" width="0.1384%" height="15" fill="rgb(233,118,54)" fg:x="481" fg:w="3"/><text x="22.4466%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (3 samples, 0.14%)</title><rect x="22.1966%" y="805" width="0.1384%" height="15" fill="rgb(234,83,48)" fg:x="481" fg:w="3"/><text x="22.4466%" y="815.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.05%)</title><rect x="22.2889%" y="789" width="0.0461%" height="15" fill="rgb(228,3,54)" fg:x="483" fg:w="1"/><text x="22.5389%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.05%)</title><rect x="22.2889%" y="773" width="0.0461%" height="15" fill="rgb(226,155,13)" fg:x="483" fg:w="1"/><text x="22.5389%" y="783.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.09%)</title><rect x="22.3350%" y="821" width="0.0923%" height="15" fill="rgb(241,28,37)" fg:x="484" fg:w="2"/><text x="22.5850%" y="831.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.09%)</title><rect x="22.3350%" y="805" width="0.0923%" height="15" fill="rgb(233,93,10)" fg:x="484" fg:w="2"/><text x="22.5850%" y="815.50"></text></g><g><title>core::ptr::write (2 samples, 0.09%)</title><rect x="22.3350%" y="789" width="0.0923%" height="15" fill="rgb(225,113,19)" fg:x="484" fg:w="2"/><text x="22.5850%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.05%)</title><rect x="22.4273%" y="773" width="0.0461%" height="15" fill="rgb(241,2,18)" fg:x="486" fg:w="1"/><text x="22.6773%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.46%)</title><rect x="22.4735%" y="757" width="0.4615%" height="15" fill="rgb(228,207,21)" fg:x="487" fg:w="10"/><text x="22.7235%" y="767.50"></text></g><g><title>[unknown] (9 samples, 0.42%)</title><rect x="22.5196%" y="741" width="0.4153%" height="15" fill="rgb(213,211,35)" fg:x="488" fg:w="9"/><text x="22.7696%" y="751.50"></text></g><g><title>[unknown] (6 samples, 0.28%)</title><rect x="22.6581%" y="725" width="0.2769%" height="15" fill="rgb(209,83,10)" fg:x="491" fg:w="6"/><text x="22.9081%" y="735.50"></text></g><g><title>[unknown] (5 samples, 0.23%)</title><rect x="22.7042%" y="709" width="0.2307%" height="15" fill="rgb(209,164,1)" fg:x="492" fg:w="5"/><text x="22.9542%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.23%)</title><rect x="22.7042%" y="693" width="0.2307%" height="15" fill="rgb(213,184,43)" fg:x="492" fg:w="5"/><text x="22.9542%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.23%)</title><rect x="22.7042%" y="677" width="0.2307%" height="15" fill="rgb(231,61,34)" fg:x="492" fg:w="5"/><text x="22.9542%" y="687.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="22.7965%" y="661" width="0.1384%" height="15" fill="rgb(235,75,3)" fg:x="494" fg:w="3"/><text x="23.0465%" y="671.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="22.7965%" y="645" width="0.1384%" height="15" fill="rgb(220,106,47)" fg:x="494" fg:w="3"/><text x="23.0465%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="22.7965%" y="629" width="0.1384%" height="15" fill="rgb(210,196,33)" fg:x="494" fg:w="3"/><text x="23.0465%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="22.7965%" y="613" width="0.1384%" height="15" fill="rgb(229,154,42)" fg:x="494" fg:w="3"/><text x="23.0465%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="22.7965%" y="597" width="0.1384%" height="15" fill="rgb(228,114,26)" fg:x="494" fg:w="3"/><text x="23.0465%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.14%)</title><rect x="22.9349%" y="661" width="0.1384%" height="15" fill="rgb(208,144,1)" fg:x="497" fg:w="3"/><text x="23.1849%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.09%)</title><rect x="22.9811%" y="645" width="0.0923%" height="15" fill="rgb(239,112,37)" fg:x="498" fg:w="2"/><text x="23.2311%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.09%)</title><rect x="22.9811%" y="629" width="0.0923%" height="15" fill="rgb(210,96,50)" fg:x="498" fg:w="2"/><text x="23.2311%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.23%)</title><rect x="22.9349%" y="693" width="0.2307%" height="15" fill="rgb(222,178,2)" fg:x="497" fg:w="5"/><text x="23.1849%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.23%)</title><rect x="22.9349%" y="677" width="0.2307%" height="15" fill="rgb(226,74,18)" fg:x="497" fg:w="5"/><text x="23.1849%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.09%)</title><rect x="23.0734%" y="661" width="0.0923%" height="15" fill="rgb(225,67,54)" fg:x="500" fg:w="2"/><text x="23.3234%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (39 samples, 1.80%)</title><rect x="22.9349%" y="757" width="1.7997%" height="15" fill="rgb(251,92,32)" fg:x="497" fg:w="39"/><text x="23.1849%" y="767.50">h..</text></g><g><title>hashbrown::map::make_hasher::{{closure}} (39 samples, 1.80%)</title><rect x="22.9349%" y="741" width="1.7997%" height="15" fill="rgb(228,149,22)" fg:x="497" fg:w="39"/><text x="23.1849%" y="751.50">h..</text></g><g><title>hashbrown::map::make_hash (39 samples, 1.80%)</title><rect x="22.9349%" y="725" width="1.7997%" height="15" fill="rgb(243,54,13)" fg:x="497" fg:w="39"/><text x="23.1849%" y="735.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (39 samples, 1.80%)</title><rect x="22.9349%" y="709" width="1.7997%" height="15" fill="rgb(243,180,28)" fg:x="497" fg:w="39"/><text x="23.1849%" y="719.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (34 samples, 1.57%)</title><rect x="23.1657%" y="693" width="1.5690%" height="15" fill="rgb(208,167,24)" fg:x="502" fg:w="34"/><text x="23.4157%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (34 samples, 1.57%)</title><rect x="23.1657%" y="677" width="1.5690%" height="15" fill="rgb(245,73,45)" fg:x="502" fg:w="34"/><text x="23.4157%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (34 samples, 1.57%)</title><rect x="23.1657%" y="661" width="1.5690%" height="15" fill="rgb(237,203,48)" fg:x="502" fg:w="34"/><text x="23.4157%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (34 samples, 1.57%)</title><rect x="23.1657%" y="645" width="1.5690%" height="15" fill="rgb(211,197,16)" fg:x="502" fg:w="34"/><text x="23.4157%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (34 samples, 1.57%)</title><rect x="23.1657%" y="629" width="1.5690%" height="15" fill="rgb(243,99,51)" fg:x="502" fg:w="34"/><text x="23.4157%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (34 samples, 1.57%)</title><rect x="23.1657%" y="613" width="1.5690%" height="15" fill="rgb(215,123,29)" fg:x="502" fg:w="34"/><text x="23.4157%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (34 samples, 1.57%)</title><rect x="23.1657%" y="597" width="1.5690%" height="15" fill="rgb(239,186,37)" fg:x="502" fg:w="34"/><text x="23.4157%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (34 samples, 1.57%)</title><rect x="23.1657%" y="581" width="1.5690%" height="15" fill="rgb(252,136,39)" fg:x="502" fg:w="34"/><text x="23.4157%" y="591.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.09%)</title><rect x="24.6424%" y="565" width="0.0923%" height="15" fill="rgb(223,213,32)" fg:x="534" fg:w="2"/><text x="24.8924%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket_ptr (1 samples, 0.05%)</title><rect x="24.7347%" y="757" width="0.0461%" height="15" fill="rgb(233,115,5)" fg:x="536" fg:w="1"/><text x="24.9847%" y="767.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.05%)</title><rect x="24.8269%" y="725" width="0.0461%" height="15" fill="rgb(207,226,44)" fg:x="538" fg:w="1"/><text x="25.0769%" y="735.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.05%)</title><rect x="24.8731%" y="725" width="0.0461%" height="15" fill="rgb(208,126,0)" fg:x="539" fg:w="1"/><text x="25.1231%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.05%)</title><rect x="24.8731%" y="709" width="0.0461%" height="15" fill="rgb(244,66,21)" fg:x="539" fg:w="1"/><text x="25.1231%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="24.8731%" y="693" width="0.0461%" height="15" fill="rgb(222,97,12)" fg:x="539" fg:w="1"/><text x="25.1231%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (5 samples, 0.23%)</title><rect x="24.7808%" y="757" width="0.2307%" height="15" fill="rgb(219,213,19)" fg:x="537" fg:w="5"/><text x="25.0308%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (5 samples, 0.23%)</title><rect x="24.7808%" y="741" width="0.2307%" height="15" fill="rgb(252,169,30)" fg:x="537" fg:w="5"/><text x="25.0308%" y="751.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (2 samples, 0.09%)</title><rect x="24.9192%" y="725" width="0.0923%" height="15" fill="rgb(206,32,51)" fg:x="540" fg:w="2"/><text x="25.1692%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.09%)</title><rect x="24.9192%" y="709" width="0.0923%" height="15" fill="rgb(250,172,42)" fg:x="540" fg:w="2"/><text x="25.1692%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (76 samples, 3.51%)</title><rect x="22.4273%" y="821" width="3.5072%" height="15" fill="rgb(209,34,43)" fg:x="486" fg:w="76"/><text x="22.6773%" y="831.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (76 samples, 3.51%)</title><rect x="22.4273%" y="805" width="3.5072%" height="15" fill="rgb(223,11,35)" fg:x="486" fg:w="76"/><text x="22.6773%" y="815.50">has..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (76 samples, 3.51%)</title><rect x="22.4273%" y="789" width="3.5072%" height="15" fill="rgb(251,219,26)" fg:x="486" fg:w="76"/><text x="22.6773%" y="799.50">has..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (75 samples, 3.46%)</title><rect x="22.4735%" y="773" width="3.4610%" height="15" fill="rgb(231,119,3)" fg:x="487" fg:w="75"/><text x="22.7235%" y="783.50">has..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (20 samples, 0.92%)</title><rect x="25.0115%" y="757" width="0.9229%" height="15" fill="rgb(216,97,11)" fg:x="542" fg:w="20"/><text x="25.2615%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (20 samples, 0.92%)</title><rect x="25.0115%" y="741" width="0.9229%" height="15" fill="rgb(223,59,9)" fg:x="542" fg:w="20"/><text x="25.2615%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (20 samples, 0.92%)</title><rect x="25.0115%" y="725" width="0.9229%" height="15" fill="rgb(233,93,31)" fg:x="542" fg:w="20"/><text x="25.2615%" y="735.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (20 samples, 0.92%)</title><rect x="25.0115%" y="709" width="0.9229%" height="15" fill="rgb(239,81,33)" fg:x="542" fg:w="20"/><text x="25.2615%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.92%)</title><rect x="25.0115%" y="693" width="0.9229%" height="15" fill="rgb(213,120,34)" fg:x="542" fg:w="20"/><text x="25.2615%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.92%)</title><rect x="25.0115%" y="677" width="0.9229%" height="15" fill="rgb(243,49,53)" fg:x="542" fg:w="20"/><text x="25.2615%" y="687.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.92%)</title><rect x="25.0115%" y="661" width="0.9229%" height="15" fill="rgb(247,216,33)" fg:x="542" fg:w="20"/><text x="25.2615%" y="671.50"></text></g><g><title>malloc (20 samples, 0.92%)</title><rect x="25.0115%" y="645" width="0.9229%" height="15" fill="rgb(226,26,14)" fg:x="542" fg:w="20"/><text x="25.2615%" y="655.50"></text></g><g><title>[libc.so.6] (20 samples, 0.92%)</title><rect x="25.0115%" y="629" width="0.9229%" height="15" fill="rgb(215,49,53)" fg:x="542" fg:w="20"/><text x="25.2615%" y="639.50"></text></g><g><title>[libc.so.6] (18 samples, 0.83%)</title><rect x="25.1038%" y="613" width="0.8306%" height="15" fill="rgb(245,162,40)" fg:x="544" fg:w="18"/><text x="25.3538%" y="623.50"></text></g><g><title>[libc.so.6] (9 samples, 0.42%)</title><rect x="25.5192%" y="597" width="0.4153%" height="15" fill="rgb(229,68,17)" fg:x="553" fg:w="9"/><text x="25.7692%" y="607.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (91 samples, 4.20%)</title><rect x="21.8274%" y="869" width="4.1994%" height="15" fill="rgb(213,182,10)" fg:x="473" fg:w="91"/><text x="22.0774%" y="879.50">std::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (91 samples, 4.20%)</title><rect x="21.8274%" y="853" width="4.1994%" height="15" fill="rgb(245,125,30)" fg:x="473" fg:w="91"/><text x="22.0774%" y="863.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (80 samples, 3.69%)</title><rect x="22.3350%" y="837" width="3.6917%" height="15" fill="rgb(232,202,2)" fg:x="484" fg:w="80"/><text x="22.5850%" y="847.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (2 samples, 0.09%)</title><rect x="25.9345%" y="821" width="0.0923%" height="15" fill="rgb(237,140,51)" fg:x="562" fg:w="2"/><text x="26.1845%" y="831.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.05%)</title><rect x="25.9806%" y="805" width="0.0461%" height="15" fill="rgb(236,157,25)" fg:x="563" fg:w="1"/><text x="26.2306%" y="815.50"></text></g><g><title>yt_history::model::Models::find_or_create_video (150 samples, 6.92%)</title><rect x="19.1509%" y="901" width="6.9220%" height="15" fill="rgb(219,209,0)" fg:x="415" fg:w="150"/><text x="19.4009%" y="911.50">yt_histor..</text></g><g><title>yt_history::model::Models::insert_video (111 samples, 5.12%)</title><rect x="20.9506%" y="885" width="5.1223%" height="15" fill="rgb(240,116,54)" fg:x="454" fg:w="111"/><text x="21.2006%" y="895.50">yt_his..</text></g><g><title>yt_history::model::Models::find_channel (1 samples, 0.05%)</title><rect x="26.0268%" y="869" width="0.0461%" height="15" fill="rgb(216,10,36)" fg:x="564" fg:w="1"/><text x="26.2768%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.18%)</title><rect x="26.0729%" y="869" width="0.1846%" height="15" fill="rgb(222,72,44)" fg:x="565" fg:w="4"/><text x="26.3229%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.18%)</title><rect x="26.0729%" y="853" width="0.1846%" height="15" fill="rgb(232,159,9)" fg:x="565" fg:w="4"/><text x="26.3229%" y="863.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.18%)</title><rect x="26.0729%" y="837" width="0.1846%" height="15" fill="rgb(210,39,32)" fg:x="565" fg:w="4"/><text x="26.3229%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4 samples, 0.18%)</title><rect x="26.0729%" y="821" width="0.1846%" height="15" fill="rgb(216,194,45)" fg:x="565" fg:w="4"/><text x="26.3229%" y="831.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4 samples, 0.18%)</title><rect x="26.0729%" y="805" width="0.1846%" height="15" fill="rgb(218,18,35)" fg:x="565" fg:w="4"/><text x="26.3229%" y="815.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.18%)</title><rect x="26.0729%" y="789" width="0.1846%" height="15" fill="rgb(207,83,51)" fg:x="565" fg:w="4"/><text x="26.3229%" y="799.50"></text></g><g><title>realloc (4 samples, 0.18%)</title><rect x="26.0729%" y="773" width="0.1846%" height="15" fill="rgb(225,63,43)" fg:x="565" fg:w="4"/><text x="26.3229%" y="783.50"></text></g><g><title>[libc.so.6] (4 samples, 0.18%)</title><rect x="26.0729%" y="757" width="0.1846%" height="15" fill="rgb(207,57,36)" fg:x="565" fg:w="4"/><text x="26.3229%" y="767.50"></text></g><g><title>[libc.so.6] (4 samples, 0.18%)</title><rect x="26.0729%" y="741" width="0.1846%" height="15" fill="rgb(216,99,33)" fg:x="565" fg:w="4"/><text x="26.3229%" y="751.50"></text></g><g><title>[libc.so.6] (3 samples, 0.14%)</title><rect x="26.1191%" y="725" width="0.1384%" height="15" fill="rgb(225,42,16)" fg:x="566" fg:w="3"/><text x="26.3691%" y="735.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="26.2114%" y="709" width="0.0461%" height="15" fill="rgb(220,201,45)" fg:x="568" fg:w="1"/><text x="26.4614%" y="719.50"></text></g><g><title>yt_history::model::Models::insert_watched (6 samples, 0.28%)</title><rect x="26.0729%" y="901" width="0.2769%" height="15" fill="rgb(225,33,4)" fg:x="565" fg:w="6"/><text x="26.3229%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.28%)</title><rect x="26.0729%" y="885" width="0.2769%" height="15" fill="rgb(224,33,50)" fg:x="565" fg:w="6"/><text x="26.3229%" y="895.50"></text></g><g><title>core::ptr::write (2 samples, 0.09%)</title><rect x="26.2575%" y="869" width="0.0923%" height="15" fill="rgb(246,198,51)" fg:x="569" fg:w="2"/><text x="26.5075%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="26.3036%" y="853" width="0.0461%" height="15" fill="rgb(205,22,4)" fg:x="570" fg:w="1"/><text x="26.5536%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="26.3036%" y="837" width="0.0461%" height="15" fill="rgb(206,3,8)" fg:x="570" fg:w="1"/><text x="26.5536%" y="847.50"></text></g><g><title>[libc.so.6] (4 samples, 0.18%)</title><rect x="26.3498%" y="805" width="0.1846%" height="15" fill="rgb(251,23,15)" fg:x="571" fg:w="4"/><text x="26.5998%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8 samples, 0.37%)</title><rect x="26.5344%" y="805" width="0.3692%" height="15" fill="rgb(252,88,28)" fg:x="575" fg:w="8"/><text x="26.7844%" y="815.50"></text></g><g><title>core::ptr::write (8 samples, 0.37%)</title><rect x="26.5344%" y="789" width="0.3692%" height="15" fill="rgb(212,127,14)" fg:x="575" fg:w="8"/><text x="26.7844%" y="799.50"></text></g><g><title>[libc.so.6] (8 samples, 0.37%)</title><rect x="26.5344%" y="773" width="0.3692%" height="15" fill="rgb(247,145,37)" fg:x="575" fg:w="8"/><text x="26.7844%" y="783.50"></text></g><g><title>[unknown] (4 samples, 0.18%)</title><rect x="26.7190%" y="757" width="0.1846%" height="15" fill="rgb(209,117,53)" fg:x="579" fg:w="4"/><text x="26.9690%" y="767.50"></text></g><g><title>[unknown] (4 samples, 0.18%)</title><rect x="26.7190%" y="741" width="0.1846%" height="15" fill="rgb(212,90,42)" fg:x="579" fg:w="4"/><text x="26.9690%" y="751.50"></text></g><g><title>[unknown] (4 samples, 0.18%)</title><rect x="26.7190%" y="725" width="0.1846%" height="15" fill="rgb(218,164,37)" fg:x="579" fg:w="4"/><text x="26.9690%" y="735.50"></text></g><g><title>[unknown] (4 samples, 0.18%)</title><rect x="26.7190%" y="709" width="0.1846%" height="15" fill="rgb(246,65,34)" fg:x="579" fg:w="4"/><text x="26.9690%" y="719.50"></text></g><g><title>[unknown] (4 samples, 0.18%)</title><rect x="26.7190%" y="693" width="0.1846%" height="15" fill="rgb(231,100,33)" fg:x="579" fg:w="4"/><text x="26.9690%" y="703.50"></text></g><g><title>[unknown] (4 samples, 0.18%)</title><rect x="26.7190%" y="677" width="0.1846%" height="15" fill="rgb(228,126,14)" fg:x="579" fg:w="4"/><text x="26.9690%" y="687.50"></text></g><g><title>[unknown] (4 samples, 0.18%)</title><rect x="26.7190%" y="661" width="0.1846%" height="15" fill="rgb(215,173,21)" fg:x="579" fg:w="4"/><text x="26.9690%" y="671.50"></text></g><g><title>[unknown] (4 samples, 0.18%)</title><rect x="26.7190%" y="645" width="0.1846%" height="15" fill="rgb(210,6,40)" fg:x="579" fg:w="4"/><text x="26.9690%" y="655.50"></text></g><g><title>[unknown] (4 samples, 0.18%)</title><rect x="26.7190%" y="629" width="0.1846%" height="15" fill="rgb(212,48,18)" fg:x="579" fg:w="4"/><text x="26.9690%" y="639.50"></text></g><g><title>[unknown] (4 samples, 0.18%)</title><rect x="26.7190%" y="613" width="0.1846%" height="15" fill="rgb(230,214,11)" fg:x="579" fg:w="4"/><text x="26.9690%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::default::Default&gt;::default (2 samples, 0.09%)</title><rect x="27.8265%" y="709" width="0.0923%" height="15" fill="rgb(254,105,39)" fg:x="603" fg:w="2"/><text x="28.0765%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (2 samples, 0.09%)</title><rect x="27.8265%" y="693" width="0.0923%" height="15" fill="rgb(245,158,5)" fg:x="603" fg:w="2"/><text x="28.0765%" y="703.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (3 samples, 0.14%)</title><rect x="28.3341%" y="597" width="0.1384%" height="15" fill="rgb(249,208,11)" fg:x="614" fg:w="3"/><text x="28.5841%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (11 samples, 0.51%)</title><rect x="31.8413%" y="581" width="0.5076%" height="15" fill="rgb(210,39,28)" fg:x="690" fg:w="11"/><text x="32.0913%" y="591.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (12 samples, 0.55%)</title><rect x="32.3489%" y="549" width="0.5538%" height="15" fill="rgb(211,56,53)" fg:x="701" fg:w="12"/><text x="32.5989%" y="559.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or_else (2 samples, 0.09%)</title><rect x="32.9026%" y="549" width="0.0923%" height="15" fill="rgb(226,201,30)" fg:x="713" fg:w="2"/><text x="33.1526%" y="559.50"></text></g><g><title>core::ops::function::FnOnce::call_once (27 samples, 1.25%)</title><rect x="32.3489%" y="581" width="1.2460%" height="15" fill="rgb(239,101,34)" fg:x="701" fg:w="27"/><text x="32.5989%" y="591.50"></text></g><g><title>serde_json::read::as_str (27 samples, 1.25%)</title><rect x="32.3489%" y="565" width="1.2460%" height="15" fill="rgb(226,209,5)" fg:x="701" fg:w="27"/><text x="32.5989%" y="575.50"></text></g><g><title>core::str::converts::from_utf8 (13 samples, 0.60%)</title><rect x="32.9949%" y="549" width="0.5999%" height="15" fill="rgb(250,105,47)" fg:x="715" fg:w="13"/><text x="33.2449%" y="559.50"></text></g><g><title>core::str::validations::run_utf8_validation (7 samples, 0.32%)</title><rect x="33.2718%" y="533" width="0.3230%" height="15" fill="rgb(230,72,3)" fg:x="721" fg:w="7"/><text x="33.5218%" y="543.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (9 samples, 0.42%)</title><rect x="37.5635%" y="501" width="0.4153%" height="15" fill="rgb(232,218,39)" fg:x="814" fg:w="9"/><text x="37.8135%" y="511.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (1 samples, 0.05%)</title><rect x="37.9788%" y="501" width="0.0461%" height="15" fill="rgb(248,166,6)" fg:x="823" fg:w="1"/><text x="38.2288%" y="511.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (1 samples, 0.05%)</title><rect x="37.9788%" y="485" width="0.0461%" height="15" fill="rgb(247,89,20)" fg:x="823" fg:w="1"/><text x="38.2288%" y="495.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (4 samples, 0.18%)</title><rect x="38.0249%" y="501" width="0.1846%" height="15" fill="rgb(248,130,54)" fg:x="824" fg:w="4"/><text x="38.2749%" y="511.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (4 samples, 0.18%)</title><rect x="38.0249%" y="485" width="0.1846%" height="15" fill="rgb(234,196,4)" fg:x="824" fg:w="4"/><text x="38.2749%" y="495.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (3 samples, 0.14%)</title><rect x="38.0711%" y="469" width="0.1384%" height="15" fill="rgb(250,143,31)" fg:x="825" fg:w="3"/><text x="38.3211%" y="479.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (3 samples, 0.14%)</title><rect x="38.0711%" y="453" width="0.1384%" height="15" fill="rgb(211,110,34)" fg:x="825" fg:w="3"/><text x="38.3211%" y="463.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (3 samples, 0.14%)</title><rect x="38.0711%" y="437" width="0.1384%" height="15" fill="rgb(215,124,48)" fg:x="825" fg:w="3"/><text x="38.3211%" y="447.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (3 samples, 0.14%)</title><rect x="38.0711%" y="421" width="0.1384%" height="15" fill="rgb(216,46,13)" fg:x="825" fg:w="3"/><text x="38.3211%" y="431.50"></text></g><g><title>read (3 samples, 0.14%)</title><rect x="38.0711%" y="405" width="0.1384%" height="15" fill="rgb(205,184,25)" fg:x="825" fg:w="3"/><text x="38.3211%" y="415.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="38.0711%" y="389" width="0.1384%" height="15" fill="rgb(228,1,10)" fg:x="825" fg:w="3"/><text x="38.3211%" y="399.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="38.0711%" y="373" width="0.1384%" height="15" fill="rgb(213,116,27)" fg:x="825" fg:w="3"/><text x="38.3211%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="38.0711%" y="357" width="0.1384%" height="15" fill="rgb(241,95,50)" fg:x="825" fg:w="3"/><text x="38.3211%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="38.0711%" y="341" width="0.1384%" height="15" fill="rgb(238,48,32)" fg:x="825" fg:w="3"/><text x="38.3211%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="38.0711%" y="325" width="0.1384%" height="15" fill="rgb(235,113,49)" fg:x="825" fg:w="3"/><text x="38.3211%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="38.1634%" y="309" width="0.0461%" height="15" fill="rgb(205,127,43)" fg:x="827" fg:w="1"/><text x="38.4134%" y="319.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::filled (1 samples, 0.05%)</title><rect x="38.2095%" y="501" width="0.0461%" height="15" fill="rgb(250,162,2)" fg:x="828" fg:w="1"/><text x="38.4595%" y="511.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::pos (9 samples, 0.42%)</title><rect x="38.2557%" y="501" width="0.4153%" height="15" fill="rgb(220,13,41)" fg:x="829" fg:w="9"/><text x="38.5057%" y="511.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (112 samples, 5.17%)</title><rect x="33.9640%" y="549" width="5.1684%" height="15" fill="rgb(249,221,25)" fg:x="736" fg:w="112"/><text x="34.2140%" y="559.50">&lt;serde..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (102 samples, 4.71%)</title><rect x="34.4255%" y="533" width="4.7070%" height="15" fill="rgb(215,208,19)" fg:x="746" fg:w="102"/><text x="34.6755%" y="543.50">&lt;std:..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (57 samples, 2.63%)</title><rect x="36.5021%" y="517" width="2.6304%" height="15" fill="rgb(236,175,2)" fg:x="791" fg:w="57"/><text x="36.7521%" y="527.50">&lt;s..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (10 samples, 0.46%)</title><rect x="38.6710%" y="501" width="0.4615%" height="15" fill="rgb(241,52,2)" fg:x="838" fg:w="10"/><text x="38.9210%" y="511.50"></text></g><g><title>core::cmp::min (2 samples, 0.09%)</title><rect x="39.0401%" y="485" width="0.0923%" height="15" fill="rgb(248,140,14)" fg:x="846" fg:w="2"/><text x="39.2901%" y="495.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.09%)</title><rect x="39.0401%" y="469" width="0.0923%" height="15" fill="rgb(253,22,42)" fg:x="846" fg:w="2"/><text x="39.2901%" y="479.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (249 samples, 11.49%)</title><rect x="28.1957%" y="613" width="11.4905%" height="15" fill="rgb(234,61,47)" fg:x="611" fg:w="249"/><text x="28.4457%" y="623.50">&lt;serde_json::read..</text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (243 samples, 11.21%)</title><rect x="28.4725%" y="597" width="11.2137%" height="15" fill="rgb(208,226,15)" fg:x="617" fg:w="243"/><text x="28.7225%" y="607.50">serde_json::read:..</text></g><g><title>serde_json::read::next_or_eof (132 samples, 6.09%)</title><rect x="33.5948%" y="581" width="6.0914%" height="15" fill="rgb(217,221,4)" fg:x="728" fg:w="132"/><text x="33.8448%" y="591.50">serde_js..</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (132 samples, 6.09%)</title><rect x="33.5948%" y="565" width="6.0914%" height="15" fill="rgb(212,174,34)" fg:x="728" fg:w="132"/><text x="33.8448%" y="575.50">&lt;serde_j..</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (12 samples, 0.55%)</title><rect x="39.1324%" y="549" width="0.5538%" height="15" fill="rgb(253,83,4)" fg:x="848" fg:w="12"/><text x="39.3824%" y="559.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (267 samples, 12.32%)</title><rect x="28.0572%" y="677" width="12.3212%" height="15" fill="rgb(250,195,49)" fg:x="608" fg:w="267"/><text x="28.3072%" y="687.50">&lt;core::marker::Pha..</text></g><g><title>&lt;yt_history::parser::json_parser::_::&lt;impl serde::de::Deserialize for yt_history::parser::json_parser::DataRow&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (267 samples, 12.32%)</title><rect x="28.0572%" y="661" width="12.3212%" height="15" fill="rgb(241,192,25)" fg:x="608" fg:w="267"/><text x="28.3072%" y="671.50">&lt;yt_history::parse..</text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (267 samples, 12.32%)</title><rect x="28.0572%" y="645" width="12.3212%" height="15" fill="rgb(208,124,10)" fg:x="608" fg:w="267"/><text x="28.3072%" y="655.50">&lt;serde_json::de::M..</text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (267 samples, 12.32%)</title><rect x="28.0572%" y="629" width="12.3212%" height="15" fill="rgb(222,33,0)" fg:x="608" fg:w="267"/><text x="28.3072%" y="639.50">&lt;serde_json::de::M..</text></g><g><title>&lt;yt_history::parser::json_parser::_::&lt;impl serde::de::Deserialize for yt_history::parser::json_parser::DataRow&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (15 samples, 0.69%)</title><rect x="39.6862%" y="613" width="0.6922%" height="15" fill="rgb(234,209,28)" fg:x="860" fg:w="15"/><text x="39.9362%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (2 samples, 0.09%)</title><rect x="40.2861%" y="597" width="0.0923%" height="15" fill="rgb(224,11,23)" fg:x="873" fg:w="2"/><text x="40.5361%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.09%)</title><rect x="40.2861%" y="581" width="0.0923%" height="15" fill="rgb(232,99,1)" fg:x="873" fg:w="2"/><text x="40.5361%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.09%)</title><rect x="40.2861%" y="565" width="0.0923%" height="15" fill="rgb(237,95,45)" fg:x="873" fg:w="2"/><text x="40.5361%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.09%)</title><rect x="40.2861%" y="549" width="0.0923%" height="15" fill="rgb(208,109,11)" fg:x="873" fg:w="2"/><text x="40.5361%" y="559.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (8 samples, 0.37%)</title><rect x="40.3784%" y="677" width="0.3692%" height="15" fill="rgb(216,190,48)" fg:x="875" fg:w="8"/><text x="40.6284%" y="687.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.09%)</title><rect x="44.0701%" y="581" width="0.0923%" height="15" fill="rgb(251,171,36)" fg:x="955" fg:w="2"/><text x="44.3201%" y="591.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (4 samples, 0.18%)</title><rect x="44.1624%" y="581" width="0.1846%" height="15" fill="rgb(230,62,22)" fg:x="957" fg:w="4"/><text x="44.4124%" y="591.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (4 samples, 0.18%)</title><rect x="44.1624%" y="565" width="0.1846%" height="15" fill="rgb(225,114,35)" fg:x="957" fg:w="4"/><text x="44.4124%" y="575.50"></text></g><g><title>core::cmp::min (2 samples, 0.09%)</title><rect x="44.2547%" y="549" width="0.0923%" height="15" fill="rgb(215,118,42)" fg:x="959" fg:w="2"/><text x="44.5047%" y="559.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.09%)</title><rect x="44.2547%" y="533" width="0.0923%" height="15" fill="rgb(243,119,21)" fg:x="959" fg:w="2"/><text x="44.5047%" y="543.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::pos (5 samples, 0.23%)</title><rect x="44.3470%" y="581" width="0.2307%" height="15" fill="rgb(252,177,53)" fg:x="961" fg:w="5"/><text x="44.5970%" y="591.50"></text></g><g><title>serde::de::MapAccess::next_key (364 samples, 16.80%)</title><rect x="27.9188%" y="709" width="16.7974%" height="15" fill="rgb(237,209,29)" fg:x="605" fg:w="364"/><text x="28.1688%" y="719.50">serde::de::MapAccess::next..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (364 samples, 16.80%)</title><rect x="27.9188%" y="693" width="16.7974%" height="15" fill="rgb(212,65,23)" fg:x="605" fg:w="364"/><text x="28.1688%" y="703.50">&lt;serde_json::de::MapAccess..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (86 samples, 3.97%)</title><rect x="40.7476%" y="677" width="3.9686%" height="15" fill="rgb(230,222,46)" fg:x="883" fg:w="86"/><text x="40.9976%" y="687.50">serd..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (83 samples, 3.83%)</title><rect x="40.8860%" y="661" width="3.8302%" height="15" fill="rgb(215,135,32)" fg:x="886" fg:w="83"/><text x="41.1360%" y="671.50">serd..</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (83 samples, 3.83%)</title><rect x="40.8860%" y="645" width="3.8302%" height="15" fill="rgb(246,101,22)" fg:x="886" fg:w="83"/><text x="41.1360%" y="655.50">&lt;ser..</text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (82 samples, 3.78%)</title><rect x="40.9322%" y="629" width="3.7840%" height="15" fill="rgb(206,107,13)" fg:x="887" fg:w="82"/><text x="41.1822%" y="639.50">&lt;ser..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 2.72%)</title><rect x="41.9935%" y="613" width="2.7227%" height="15" fill="rgb(250,100,44)" fg:x="910" fg:w="59"/><text x="42.2435%" y="623.50">&lt;s..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (32 samples, 1.48%)</title><rect x="43.2395%" y="597" width="1.4767%" height="15" fill="rgb(231,147,38)" fg:x="937" fg:w="32"/><text x="43.4895%" y="607.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (3 samples, 0.14%)</title><rect x="44.5778%" y="581" width="0.1384%" height="15" fill="rgb(229,8,40)" fg:x="966" fg:w="3"/><text x="44.8278%" y="591.50"></text></g><g><title>__rust_alloc (1 samples, 0.05%)</title><rect x="44.9931%" y="405" width="0.0461%" height="15" fill="rgb(221,135,30)" fg:x="975" fg:w="1"/><text x="45.2431%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (18 samples, 0.83%)</title><rect x="44.9469%" y="501" width="0.8306%" height="15" fill="rgb(249,193,18)" fg:x="974" fg:w="18"/><text x="45.1969%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (18 samples, 0.83%)</title><rect x="44.9469%" y="485" width="0.8306%" height="15" fill="rgb(209,133,39)" fg:x="974" fg:w="18"/><text x="45.1969%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (18 samples, 0.83%)</title><rect x="44.9469%" y="469" width="0.8306%" height="15" fill="rgb(232,100,14)" fg:x="974" fg:w="18"/><text x="45.1969%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.78%)</title><rect x="44.9931%" y="453" width="0.7845%" height="15" fill="rgb(224,185,1)" fg:x="975" fg:w="17"/><text x="45.2431%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.78%)</title><rect x="44.9931%" y="437" width="0.7845%" height="15" fill="rgb(223,139,8)" fg:x="975" fg:w="17"/><text x="45.2431%" y="447.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.78%)</title><rect x="44.9931%" y="421" width="0.7845%" height="15" fill="rgb(232,213,38)" fg:x="975" fg:w="17"/><text x="45.2431%" y="431.50"></text></g><g><title>malloc (16 samples, 0.74%)</title><rect x="45.0392%" y="405" width="0.7383%" height="15" fill="rgb(207,94,22)" fg:x="976" fg:w="16"/><text x="45.2892%" y="415.50"></text></g><g><title>[libc.so.6] (15 samples, 0.69%)</title><rect x="45.0854%" y="389" width="0.6922%" height="15" fill="rgb(219,183,54)" fg:x="977" fg:w="15"/><text x="45.3354%" y="399.50"></text></g><g><title>[unknown] (8 samples, 0.37%)</title><rect x="45.4084%" y="373" width="0.3692%" height="15" fill="rgb(216,185,54)" fg:x="984" fg:w="8"/><text x="45.6584%" y="383.50"></text></g><g><title>[unknown] (8 samples, 0.37%)</title><rect x="45.4084%" y="357" width="0.3692%" height="15" fill="rgb(254,217,39)" fg:x="984" fg:w="8"/><text x="45.6584%" y="367.50"></text></g><g><title>[unknown] (8 samples, 0.37%)</title><rect x="45.4084%" y="341" width="0.3692%" height="15" fill="rgb(240,178,23)" fg:x="984" fg:w="8"/><text x="45.6584%" y="351.50"></text></g><g><title>[unknown] (8 samples, 0.37%)</title><rect x="45.4084%" y="325" width="0.3692%" height="15" fill="rgb(218,11,47)" fg:x="984" fg:w="8"/><text x="45.6584%" y="335.50"></text></g><g><title>[unknown] (8 samples, 0.37%)</title><rect x="45.4084%" y="309" width="0.3692%" height="15" fill="rgb(218,51,51)" fg:x="984" fg:w="8"/><text x="45.6584%" y="319.50"></text></g><g><title>[unknown] (7 samples, 0.32%)</title><rect x="45.4545%" y="293" width="0.3230%" height="15" fill="rgb(238,126,27)" fg:x="985" fg:w="7"/><text x="45.7045%" y="303.50"></text></g><g><title>[unknown] (7 samples, 0.32%)</title><rect x="45.4545%" y="277" width="0.3230%" height="15" fill="rgb(249,202,22)" fg:x="985" fg:w="7"/><text x="45.7045%" y="287.50"></text></g><g><title>[unknown] (7 samples, 0.32%)</title><rect x="45.4545%" y="261" width="0.3230%" height="15" fill="rgb(254,195,49)" fg:x="985" fg:w="7"/><text x="45.7045%" y="271.50"></text></g><g><title>[unknown] (6 samples, 0.28%)</title><rect x="45.5007%" y="245" width="0.2769%" height="15" fill="rgb(208,123,14)" fg:x="986" fg:w="6"/><text x="45.7507%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.23%)</title><rect x="45.5468%" y="229" width="0.2307%" height="15" fill="rgb(224,200,8)" fg:x="987" fg:w="5"/><text x="45.7968%" y="239.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (21 samples, 0.97%)</title><rect x="44.9469%" y="613" width="0.9691%" height="15" fill="rgb(217,61,36)" fg:x="974" fg:w="21"/><text x="45.1969%" y="623.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (21 samples, 0.97%)</title><rect x="44.9469%" y="597" width="0.9691%" height="15" fill="rgb(206,35,45)" fg:x="974" fg:w="21"/><text x="45.1969%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (21 samples, 0.97%)</title><rect x="44.9469%" y="581" width="0.9691%" height="15" fill="rgb(217,65,33)" fg:x="974" fg:w="21"/><text x="45.1969%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (21 samples, 0.97%)</title><rect x="44.9469%" y="565" width="0.9691%" height="15" fill="rgb(222,158,48)" fg:x="974" fg:w="21"/><text x="45.1969%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (21 samples, 0.97%)</title><rect x="44.9469%" y="549" width="0.9691%" height="15" fill="rgb(254,2,54)" fg:x="974" fg:w="21"/><text x="45.1969%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (21 samples, 0.97%)</title><rect x="44.9469%" y="533" width="0.9691%" height="15" fill="rgb(250,143,38)" fg:x="974" fg:w="21"/><text x="45.1969%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (21 samples, 0.97%)</title><rect x="44.9469%" y="517" width="0.9691%" height="15" fill="rgb(248,25,0)" fg:x="974" fg:w="21"/><text x="45.1969%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.14%)</title><rect x="45.7776%" y="501" width="0.1384%" height="15" fill="rgb(206,152,27)" fg:x="992" fg:w="3"/><text x="46.0276%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.14%)</title><rect x="45.7776%" y="485" width="0.1384%" height="15" fill="rgb(240,77,30)" fg:x="992" fg:w="3"/><text x="46.0276%" y="495.50"></text></g><g><title>[libc.so.6] (3 samples, 0.14%)</title><rect x="45.7776%" y="469" width="0.1384%" height="15" fill="rgb(231,5,3)" fg:x="992" fg:w="3"/><text x="46.0276%" y="479.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1 samples, 0.05%)</title><rect x="46.0545%" y="597" width="0.0461%" height="15" fill="rgb(207,226,32)" fg:x="998" fg:w="1"/><text x="46.3045%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2 samples, 0.09%)</title><rect x="46.1006%" y="597" width="0.0923%" height="15" fill="rgb(222,207,47)" fg:x="999" fg:w="2"/><text x="46.3506%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (13 samples, 0.60%)</title><rect x="51.4998%" y="581" width="0.5999%" height="15" fill="rgb(229,115,45)" fg:x="1116" fg:w="13"/><text x="51.7498%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or_else (6 samples, 0.28%)</title><rect x="52.0997%" y="549" width="0.2769%" height="15" fill="rgb(224,191,6)" fg:x="1129" fg:w="6"/><text x="52.3497%" y="559.50"></text></g><g><title>core::ops::function::FnOnce::call_once (20 samples, 0.92%)</title><rect x="52.0997%" y="581" width="0.9229%" height="15" fill="rgb(230,227,24)" fg:x="1129" fg:w="20"/><text x="52.3497%" y="591.50"></text></g><g><title>serde_json::read::as_str (20 samples, 0.92%)</title><rect x="52.0997%" y="565" width="0.9229%" height="15" fill="rgb(228,80,19)" fg:x="1129" fg:w="20"/><text x="52.3497%" y="575.50"></text></g><g><title>core::str::converts::from_utf8 (14 samples, 0.65%)</title><rect x="52.3766%" y="549" width="0.6461%" height="15" fill="rgb(247,229,0)" fg:x="1135" fg:w="14"/><text x="52.6266%" y="559.50"></text></g><g><title>core::str::validations::run_utf8_validation (8 samples, 0.37%)</title><rect x="52.6534%" y="533" width="0.3692%" height="15" fill="rgb(237,194,15)" fg:x="1141" fg:w="8"/><text x="52.9034%" y="543.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.18%)</title><rect x="59.8062%" y="501" width="0.1846%" height="15" fill="rgb(219,203,20)" fg:x="1296" fg:w="4"/><text x="60.0562%" y="511.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (3 samples, 0.14%)</title><rect x="59.9908%" y="501" width="0.1384%" height="15" fill="rgb(234,128,8)" fg:x="1300" fg:w="3"/><text x="60.2408%" y="511.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (3 samples, 0.14%)</title><rect x="59.9908%" y="485" width="0.1384%" height="15" fill="rgb(248,202,8)" fg:x="1300" fg:w="3"/><text x="60.2408%" y="495.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (2 samples, 0.09%)</title><rect x="60.1292%" y="501" width="0.0923%" height="15" fill="rgb(206,104,37)" fg:x="1303" fg:w="2"/><text x="60.3792%" y="511.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (2 samples, 0.09%)</title><rect x="60.1292%" y="485" width="0.0923%" height="15" fill="rgb(223,8,27)" fg:x="1303" fg:w="2"/><text x="60.3792%" y="495.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (2 samples, 0.09%)</title><rect x="60.1292%" y="469" width="0.0923%" height="15" fill="rgb(216,217,28)" fg:x="1303" fg:w="2"/><text x="60.3792%" y="479.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (2 samples, 0.09%)</title><rect x="60.1292%" y="453" width="0.0923%" height="15" fill="rgb(249,199,1)" fg:x="1303" fg:w="2"/><text x="60.3792%" y="463.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (2 samples, 0.09%)</title><rect x="60.1292%" y="437" width="0.0923%" height="15" fill="rgb(240,85,17)" fg:x="1303" fg:w="2"/><text x="60.3792%" y="447.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (2 samples, 0.09%)</title><rect x="60.1292%" y="421" width="0.0923%" height="15" fill="rgb(206,108,45)" fg:x="1303" fg:w="2"/><text x="60.3792%" y="431.50"></text></g><g><title>read (2 samples, 0.09%)</title><rect x="60.1292%" y="405" width="0.0923%" height="15" fill="rgb(245,210,41)" fg:x="1303" fg:w="2"/><text x="60.3792%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="60.1292%" y="389" width="0.0923%" height="15" fill="rgb(206,13,37)" fg:x="1303" fg:w="2"/><text x="60.3792%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="60.1292%" y="373" width="0.0923%" height="15" fill="rgb(250,61,18)" fg:x="1303" fg:w="2"/><text x="60.3792%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="60.1292%" y="357" width="0.0923%" height="15" fill="rgb(235,172,48)" fg:x="1303" fg:w="2"/><text x="60.3792%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="60.1292%" y="341" width="0.0923%" height="15" fill="rgb(249,201,17)" fg:x="1303" fg:w="2"/><text x="60.3792%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="60.1292%" y="325" width="0.0923%" height="15" fill="rgb(219,208,6)" fg:x="1303" fg:w="2"/><text x="60.3792%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="60.1292%" y="309" width="0.0923%" height="15" fill="rgb(248,31,23)" fg:x="1303" fg:w="2"/><text x="60.3792%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="60.1292%" y="293" width="0.0923%" height="15" fill="rgb(245,15,42)" fg:x="1303" fg:w="2"/><text x="60.3792%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="60.1292%" y="277" width="0.0923%" height="15" fill="rgb(222,217,39)" fg:x="1303" fg:w="2"/><text x="60.3792%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="60.1292%" y="261" width="0.0923%" height="15" fill="rgb(210,219,27)" fg:x="1303" fg:w="2"/><text x="60.3792%" y="271.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::pos (20 samples, 0.92%)</title><rect x="60.2215%" y="501" width="0.9229%" height="15" fill="rgb(252,166,36)" fg:x="1305" fg:w="20"/><text x="60.4715%" y="511.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (188 samples, 8.68%)</title><rect x="53.2995%" y="549" width="8.6756%" height="15" fill="rgb(245,132,34)" fg:x="1155" fg:w="188"/><text x="53.5495%" y="559.50">&lt;serde_json:..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (174 samples, 8.03%)</title><rect x="53.9455%" y="533" width="8.0295%" height="15" fill="rgb(236,54,3)" fg:x="1169" fg:w="174"/><text x="54.1955%" y="543.50">&lt;std::io::B..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (84 samples, 3.88%)</title><rect x="58.0988%" y="517" width="3.8763%" height="15" fill="rgb(241,173,43)" fg:x="1259" fg:w="84"/><text x="58.3488%" y="527.50">&lt;std..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (18 samples, 0.83%)</title><rect x="61.1444%" y="501" width="0.8306%" height="15" fill="rgb(215,190,9)" fg:x="1325" fg:w="18"/><text x="61.3944%" y="511.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (37 samples, 1.71%)</title><rect x="61.9751%" y="549" width="1.7074%" height="15" fill="rgb(242,101,16)" fg:x="1343" fg:w="37"/><text x="62.2251%" y="559.50"></text></g><g><title>core::ptr::read (2 samples, 0.09%)</title><rect x="63.6825%" y="517" width="0.0923%" height="15" fill="rgb(223,190,21)" fg:x="1380" fg:w="2"/><text x="63.9325%" y="527.50"></text></g><g><title>serde_json::read::next_or_eof (234 samples, 10.80%)</title><rect x="53.0226%" y="581" width="10.7983%" height="15" fill="rgb(215,228,25)" fg:x="1149" fg:w="234"/><text x="53.2726%" y="591.50">serde_json::read..</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (234 samples, 10.80%)</title><rect x="53.0226%" y="565" width="10.7983%" height="15" fill="rgb(225,36,22)" fg:x="1149" fg:w="234"/><text x="53.2726%" y="575.50">&lt;serde_json::rea..</text></g><g><title>core::option::Option&lt;T&gt;::take (3 samples, 0.14%)</title><rect x="63.6825%" y="549" width="0.1384%" height="15" fill="rgb(251,106,46)" fg:x="1380" fg:w="3"/><text x="63.9325%" y="559.50"></text></g><g><title>core::mem::replace (3 samples, 0.14%)</title><rect x="63.6825%" y="533" width="0.1384%" height="15" fill="rgb(208,90,1)" fg:x="1380" fg:w="3"/><text x="63.9325%" y="543.50"></text></g><g><title>core::ptr::write (1 samples, 0.05%)</title><rect x="63.7748%" y="517" width="0.0461%" height="15" fill="rgb(243,10,4)" fg:x="1382" fg:w="1"/><text x="64.0248%" y="527.50"></text></g><g><title>serde_json::read::decode_hex_val (5 samples, 0.23%)</title><rect x="63.8671%" y="549" width="0.2307%" height="15" fill="rgb(212,137,27)" fg:x="1384" fg:w="5"/><text x="64.1171%" y="559.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::decode_hex_escape (11 samples, 0.51%)</title><rect x="63.8671%" y="565" width="0.5076%" height="15" fill="rgb(231,220,49)" fg:x="1384" fg:w="11"/><text x="64.1171%" y="575.50"></text></g><g><title>serde_json::read::next_or_eof (6 samples, 0.28%)</title><rect x="64.0978%" y="549" width="0.2769%" height="15" fill="rgb(237,96,20)" fg:x="1389" fg:w="6"/><text x="64.3478%" y="559.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (6 samples, 0.28%)</title><rect x="64.0978%" y="533" width="0.2769%" height="15" fill="rgb(239,229,30)" fg:x="1389" fg:w="6"/><text x="64.3478%" y="543.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.28%)</title><rect x="64.0978%" y="517" width="0.2769%" height="15" fill="rgb(219,65,33)" fg:x="1389" fg:w="6"/><text x="64.3478%" y="527.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.28%)</title><rect x="64.0978%" y="501" width="0.2769%" height="15" fill="rgb(243,134,7)" fg:x="1389" fg:w="6"/><text x="64.3478%" y="511.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.18%)</title><rect x="64.1901%" y="485" width="0.1846%" height="15" fill="rgb(216,177,54)" fg:x="1391" fg:w="4"/><text x="64.4401%" y="495.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (1 samples, 0.05%)</title><rect x="64.3286%" y="469" width="0.0461%" height="15" fill="rgb(211,160,20)" fg:x="1394" fg:w="1"/><text x="64.5786%" y="479.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::filled (1 samples, 0.05%)</title><rect x="64.6977%" y="485" width="0.0461%" height="15" fill="rgb(239,85,39)" fg:x="1402" fg:w="1"/><text x="64.9477%" y="495.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (409 samples, 18.87%)</title><rect x="45.9160%" y="613" width="18.8740%" height="15" fill="rgb(232,125,22)" fg:x="995" fg:w="409"/><text x="46.1660%" y="623.50">&lt;serde_json::read::IoRead&lt;R&gt; ..</text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (403 samples, 18.60%)</title><rect x="46.1929%" y="597" width="18.5971%" height="15" fill="rgb(244,57,34)" fg:x="1001" fg:w="403"/><text x="46.4429%" y="607.50">serde_json::read::IoRead&lt;R&gt;::..</text></g><g><title>serde_json::read::parse_escape (21 samples, 0.97%)</title><rect x="63.8210%" y="581" width="0.9691%" height="15" fill="rgb(214,203,32)" fg:x="1383" fg:w="21"/><text x="64.0710%" y="591.50"></text></g><g><title>serde_json::read::next_or_eof (9 samples, 0.42%)</title><rect x="64.3747%" y="565" width="0.4153%" height="15" fill="rgb(207,58,43)" fg:x="1395" fg:w="9"/><text x="64.6247%" y="575.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (9 samples, 0.42%)</title><rect x="64.3747%" y="549" width="0.4153%" height="15" fill="rgb(215,193,15)" fg:x="1395" fg:w="9"/><text x="64.6247%" y="559.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.28%)</title><rect x="64.5132%" y="533" width="0.2769%" height="15" fill="rgb(232,15,44)" fg:x="1398" fg:w="6"/><text x="64.7632%" y="543.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.28%)</title><rect x="64.5132%" y="517" width="0.2769%" height="15" fill="rgb(212,3,48)" fg:x="1398" fg:w="6"/><text x="64.7632%" y="527.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.09%)</title><rect x="64.6977%" y="501" width="0.0923%" height="15" fill="rgb(218,128,7)" fg:x="1402" fg:w="2"/><text x="64.9477%" y="511.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (1 samples, 0.05%)</title><rect x="64.7439%" y="485" width="0.0461%" height="15" fill="rgb(226,216,39)" fg:x="1403" fg:w="1"/><text x="64.9939%" y="495.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (459 samples, 21.18%)</title><rect x="44.7162%" y="661" width="21.1814%" height="15" fill="rgb(243,47,51)" fg:x="969" fg:w="459"/><text x="44.9662%" y="671.50">serde::de::impls::&lt;impl serde::de..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (459 samples, 21.18%)</title><rect x="44.7162%" y="645" width="21.1814%" height="15" fill="rgb(241,183,40)" fg:x="969" fg:w="459"/><text x="44.9662%" y="655.50">&lt;&amp;mut serde_json::de::Deserialize..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (457 samples, 21.09%)</title><rect x="44.8085%" y="629" width="21.0891%" height="15" fill="rgb(231,217,32)" fg:x="971" fg:w="457"/><text x="45.0585%" y="639.50">&lt;&amp;mut serde_json::de::Deserialize..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (24 samples, 1.11%)</title><rect x="64.7900%" y="613" width="1.1075%" height="15" fill="rgb(229,61,38)" fg:x="1404" fg:w="24"/><text x="65.0400%" y="623.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (24 samples, 1.11%)</title><rect x="64.7900%" y="597" width="1.1075%" height="15" fill="rgb(225,210,5)" fg:x="1404" fg:w="24"/><text x="65.0400%" y="607.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (24 samples, 1.11%)</title><rect x="64.7900%" y="581" width="1.1075%" height="15" fill="rgb(231,79,45)" fg:x="1404" fg:w="24"/><text x="65.0400%" y="591.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 1.11%)</title><rect x="64.7900%" y="565" width="1.1075%" height="15" fill="rgb(224,100,7)" fg:x="1404" fg:w="24"/><text x="65.0400%" y="575.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.83%)</title><rect x="65.0669%" y="549" width="0.8306%" height="15" fill="rgb(241,198,18)" fg:x="1410" fg:w="18"/><text x="65.3169%" y="559.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (10 samples, 0.46%)</title><rect x="65.4361%" y="533" width="0.4615%" height="15" fill="rgb(252,97,53)" fg:x="1418" fg:w="10"/><text x="65.6861%" y="543.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::pos (2 samples, 0.09%)</title><rect x="65.8053%" y="517" width="0.0923%" height="15" fill="rgb(220,88,7)" fg:x="1426" fg:w="2"/><text x="66.0553%" y="527.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.14%)</title><rect x="66.7743%" y="565" width="0.1384%" height="15" fill="rgb(213,176,14)" fg:x="1447" fg:w="3"/><text x="67.0243%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.05%)</title><rect x="66.9128%" y="565" width="0.0461%" height="15" fill="rgb(246,73,7)" fg:x="1450" fg:w="1"/><text x="67.1628%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="67.2820%" y="549" width="0.0461%" height="15" fill="rgb(245,64,36)" fg:x="1458" fg:w="1"/><text x="67.5320%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (44 samples, 2.03%)</title><rect x="66.5898%" y="581" width="2.0305%" height="15" fill="rgb(245,80,10)" fg:x="1443" fg:w="44"/><text x="66.8398%" y="591.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (36 samples, 1.66%)</title><rect x="66.9589%" y="565" width="1.6613%" height="15" fill="rgb(232,107,50)" fg:x="1451" fg:w="36"/><text x="67.2089%" y="575.50"></text></g><g><title>malloc (28 samples, 1.29%)</title><rect x="67.3281%" y="549" width="1.2921%" height="15" fill="rgb(253,3,0)" fg:x="1459" fg:w="28"/><text x="67.5781%" y="559.50"></text></g><g><title>[libc.so.6] (23 samples, 1.06%)</title><rect x="67.5588%" y="533" width="1.0614%" height="15" fill="rgb(212,99,53)" fg:x="1464" fg:w="23"/><text x="67.8088%" y="543.50"></text></g><g><title>[unknown] (16 samples, 0.74%)</title><rect x="67.8819%" y="517" width="0.7383%" height="15" fill="rgb(249,111,54)" fg:x="1471" fg:w="16"/><text x="68.1319%" y="527.50"></text></g><g><title>[unknown] (16 samples, 0.74%)</title><rect x="67.8819%" y="501" width="0.7383%" height="15" fill="rgb(249,55,30)" fg:x="1471" fg:w="16"/><text x="68.1319%" y="511.50"></text></g><g><title>[unknown] (16 samples, 0.74%)</title><rect x="67.8819%" y="485" width="0.7383%" height="15" fill="rgb(237,47,42)" fg:x="1471" fg:w="16"/><text x="68.1319%" y="495.50"></text></g><g><title>[unknown] (16 samples, 0.74%)</title><rect x="67.8819%" y="469" width="0.7383%" height="15" fill="rgb(211,20,18)" fg:x="1471" fg:w="16"/><text x="68.1319%" y="479.50"></text></g><g><title>[unknown] (14 samples, 0.65%)</title><rect x="67.9742%" y="453" width="0.6461%" height="15" fill="rgb(231,203,46)" fg:x="1473" fg:w="14"/><text x="68.2242%" y="463.50"></text></g><g><title>[unknown] (14 samples, 0.65%)</title><rect x="67.9742%" y="437" width="0.6461%" height="15" fill="rgb(237,142,3)" fg:x="1473" fg:w="14"/><text x="68.2242%" y="447.50"></text></g><g><title>[unknown] (14 samples, 0.65%)</title><rect x="67.9742%" y="421" width="0.6461%" height="15" fill="rgb(241,107,1)" fg:x="1473" fg:w="14"/><text x="68.2242%" y="431.50"></text></g><g><title>[unknown] (13 samples, 0.60%)</title><rect x="68.0203%" y="405" width="0.5999%" height="15" fill="rgb(229,83,13)" fg:x="1474" fg:w="13"/><text x="68.2703%" y="415.50"></text></g><g><title>[unknown] (11 samples, 0.51%)</title><rect x="68.1126%" y="389" width="0.5076%" height="15" fill="rgb(241,91,40)" fg:x="1476" fg:w="11"/><text x="68.3626%" y="399.50"></text></g><g><title>[unknown] (11 samples, 0.51%)</title><rect x="68.1126%" y="373" width="0.5076%" height="15" fill="rgb(225,3,45)" fg:x="1476" fg:w="11"/><text x="68.3626%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (45 samples, 2.08%)</title><rect x="66.5898%" y="597" width="2.0766%" height="15" fill="rgb(244,223,14)" fg:x="1443" fg:w="45"/><text x="66.8398%" y="607.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.05%)</title><rect x="68.6202%" y="581" width="0.0461%" height="15" fill="rgb(224,124,37)" fg:x="1487" fg:w="1"/><text x="68.8702%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.05%)</title><rect x="68.6664%" y="597" width="0.0461%" height="15" fill="rgb(251,171,30)" fg:x="1488" fg:w="1"/><text x="68.9164%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.05%)</title><rect x="68.6664%" y="581" width="0.0461%" height="15" fill="rgb(236,46,54)" fg:x="1488" fg:w="1"/><text x="68.9164%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (48 samples, 2.22%)</title><rect x="66.5436%" y="613" width="2.2150%" height="15" fill="rgb(245,213,5)" fg:x="1442" fg:w="48"/><text x="66.7936%" y="623.50">a..</text></g><g><title>core::ptr::write (1 samples, 0.05%)</title><rect x="68.7125%" y="597" width="0.0461%" height="15" fill="rgb(230,144,27)" fg:x="1489" fg:w="1"/><text x="68.9625%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.09%)</title><rect x="68.7587%" y="613" width="0.0923%" height="15" fill="rgb(220,86,6)" fg:x="1490" fg:w="2"/><text x="69.0087%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.09%)</title><rect x="68.7587%" y="597" width="0.0923%" height="15" fill="rgb(240,20,13)" fg:x="1490" fg:w="2"/><text x="69.0087%" y="607.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (9 samples, 0.42%)</title><rect x="69.4970%" y="517" width="0.4153%" height="15" fill="rgb(217,89,34)" fg:x="1506" fg:w="9"/><text x="69.7470%" y="527.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (9 samples, 0.42%)</title><rect x="69.4970%" y="501" width="0.4153%" height="15" fill="rgb(229,13,5)" fg:x="1506" fg:w="9"/><text x="69.7470%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (9 samples, 0.42%)</title><rect x="69.4970%" y="485" width="0.4153%" height="15" fill="rgb(244,67,35)" fg:x="1506" fg:w="9"/><text x="69.7470%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (9 samples, 0.42%)</title><rect x="69.4970%" y="469" width="0.4153%" height="15" fill="rgb(221,40,2)" fg:x="1506" fg:w="9"/><text x="69.7470%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.42%)</title><rect x="69.4970%" y="453" width="0.4153%" height="15" fill="rgb(237,157,21)" fg:x="1506" fg:w="9"/><text x="69.7470%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.42%)</title><rect x="69.4970%" y="437" width="0.4153%" height="15" fill="rgb(222,94,11)" fg:x="1506" fg:w="9"/><text x="69.7470%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.42%)</title><rect x="69.4970%" y="421" width="0.4153%" height="15" fill="rgb(249,113,6)" fg:x="1506" fg:w="9"/><text x="69.7470%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.42%)</title><rect x="69.4970%" y="405" width="0.4153%" height="15" fill="rgb(238,137,36)" fg:x="1506" fg:w="9"/><text x="69.7470%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.42%)</title><rect x="69.4970%" y="389" width="0.4153%" height="15" fill="rgb(210,102,26)" fg:x="1506" fg:w="9"/><text x="69.7470%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.42%)</title><rect x="69.4970%" y="373" width="0.4153%" height="15" fill="rgb(218,30,30)" fg:x="1506" fg:w="9"/><text x="69.7470%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.37%)</title><rect x="69.5431%" y="357" width="0.3692%" height="15" fill="rgb(214,67,26)" fg:x="1507" fg:w="8"/><text x="69.7931%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.37%)</title><rect x="69.5431%" y="341" width="0.3692%" height="15" fill="rgb(251,9,53)" fg:x="1507" fg:w="8"/><text x="69.7931%" y="351.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.37%)</title><rect x="69.5431%" y="325" width="0.3692%" height="15" fill="rgb(228,204,25)" fg:x="1507" fg:w="8"/><text x="69.7931%" y="335.50"></text></g><g><title>malloc (8 samples, 0.37%)</title><rect x="69.5431%" y="309" width="0.3692%" height="15" fill="rgb(207,153,8)" fg:x="1507" fg:w="8"/><text x="69.7931%" y="319.50"></text></g><g><title>[libc.so.6] (8 samples, 0.37%)</title><rect x="69.5431%" y="293" width="0.3692%" height="15" fill="rgb(242,9,16)" fg:x="1507" fg:w="8"/><text x="69.7931%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="69.8662%" y="277" width="0.0461%" height="15" fill="rgb(217,211,10)" fg:x="1514" fg:w="1"/><text x="70.1162%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="69.8662%" y="261" width="0.0461%" height="15" fill="rgb(219,228,52)" fg:x="1514" fg:w="1"/><text x="70.1162%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="69.8662%" y="245" width="0.0461%" height="15" fill="rgb(231,92,29)" fg:x="1514" fg:w="1"/><text x="70.1162%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="69.8662%" y="229" width="0.0461%" height="15" fill="rgb(232,8,23)" fg:x="1514" fg:w="1"/><text x="70.1162%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="69.8662%" y="213" width="0.0461%" height="15" fill="rgb(216,211,34)" fg:x="1514" fg:w="1"/><text x="70.1162%" y="223.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.05%)</title><rect x="70.0046%" y="501" width="0.0461%" height="15" fill="rgb(236,151,0)" fg:x="1517" fg:w="1"/><text x="70.2546%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.09%)</title><rect x="71.4352%" y="485" width="0.0923%" height="15" fill="rgb(209,168,3)" fg:x="1548" fg:w="2"/><text x="71.6852%" y="495.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (3 samples, 0.14%)</title><rect x="71.5275%" y="453" width="0.1384%" height="15" fill="rgb(208,129,28)" fg:x="1550" fg:w="3"/><text x="71.7775%" y="463.50"></text></g><g><title>core::ops::function::FnOnce::call_once (11 samples, 0.51%)</title><rect x="71.5275%" y="485" width="0.5076%" height="15" fill="rgb(229,78,22)" fg:x="1550" fg:w="11"/><text x="71.7775%" y="495.50"></text></g><g><title>serde_json::read::as_str (11 samples, 0.51%)</title><rect x="71.5275%" y="469" width="0.5076%" height="15" fill="rgb(228,187,13)" fg:x="1550" fg:w="11"/><text x="71.7775%" y="479.50"></text></g><g><title>core::str::converts::from_utf8 (8 samples, 0.37%)</title><rect x="71.6659%" y="453" width="0.3692%" height="15" fill="rgb(240,119,24)" fg:x="1553" fg:w="8"/><text x="71.9159%" y="463.50"></text></g><g><title>core::str::validations::run_utf8_validation (4 samples, 0.18%)</title><rect x="71.8505%" y="437" width="0.1846%" height="15" fill="rgb(209,194,42)" fg:x="1557" fg:w="4"/><text x="72.1005%" y="447.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.09%)</title><rect x="73.6964%" y="405" width="0.0923%" height="15" fill="rgb(247,200,46)" fg:x="1597" fg:w="2"/><text x="73.9464%" y="415.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (2 samples, 0.09%)</title><rect x="73.7886%" y="405" width="0.0923%" height="15" fill="rgb(218,76,16)" fg:x="1599" fg:w="2"/><text x="74.0386%" y="415.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (2 samples, 0.09%)</title><rect x="73.7886%" y="389" width="0.0923%" height="15" fill="rgb(225,21,48)" fg:x="1599" fg:w="2"/><text x="74.0386%" y="399.50"></text></g><g><title>core::cmp::min (2 samples, 0.09%)</title><rect x="73.7886%" y="373" width="0.0923%" height="15" fill="rgb(239,223,50)" fg:x="1599" fg:w="2"/><text x="74.0386%" y="383.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.09%)</title><rect x="73.7886%" y="357" width="0.0923%" height="15" fill="rgb(244,45,21)" fg:x="1599" fg:w="2"/><text x="74.0386%" y="367.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (2 samples, 0.09%)</title><rect x="73.8809%" y="405" width="0.0923%" height="15" fill="rgb(232,33,43)" fg:x="1601" fg:w="2"/><text x="74.1309%" y="415.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (2 samples, 0.09%)</title><rect x="73.8809%" y="389" width="0.0923%" height="15" fill="rgb(209,8,3)" fg:x="1601" fg:w="2"/><text x="74.1309%" y="399.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (2 samples, 0.09%)</title><rect x="73.8809%" y="373" width="0.0923%" height="15" fill="rgb(214,25,53)" fg:x="1601" fg:w="2"/><text x="74.1309%" y="383.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (2 samples, 0.09%)</title><rect x="73.8809%" y="357" width="0.0923%" height="15" fill="rgb(254,186,54)" fg:x="1601" fg:w="2"/><text x="74.1309%" y="367.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (2 samples, 0.09%)</title><rect x="73.8809%" y="341" width="0.0923%" height="15" fill="rgb(208,174,49)" fg:x="1601" fg:w="2"/><text x="74.1309%" y="351.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (2 samples, 0.09%)</title><rect x="73.8809%" y="325" width="0.0923%" height="15" fill="rgb(233,191,51)" fg:x="1601" fg:w="2"/><text x="74.1309%" y="335.50"></text></g><g><title>read (2 samples, 0.09%)</title><rect x="73.8809%" y="309" width="0.0923%" height="15" fill="rgb(222,134,10)" fg:x="1601" fg:w="2"/><text x="74.1309%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="73.8809%" y="293" width="0.0923%" height="15" fill="rgb(230,226,20)" fg:x="1601" fg:w="2"/><text x="74.1309%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="73.8809%" y="277" width="0.0923%" height="15" fill="rgb(251,111,25)" fg:x="1601" fg:w="2"/><text x="74.1309%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="73.8809%" y="261" width="0.0923%" height="15" fill="rgb(224,40,46)" fg:x="1601" fg:w="2"/><text x="74.1309%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="73.8809%" y="245" width="0.0923%" height="15" fill="rgb(236,108,47)" fg:x="1601" fg:w="2"/><text x="74.1309%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="73.8809%" y="229" width="0.0923%" height="15" fill="rgb(234,93,0)" fg:x="1601" fg:w="2"/><text x="74.1309%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="73.8809%" y="213" width="0.0923%" height="15" fill="rgb(224,213,32)" fg:x="1601" fg:w="2"/><text x="74.1309%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="73.8809%" y="197" width="0.0923%" height="15" fill="rgb(251,11,48)" fg:x="1601" fg:w="2"/><text x="74.1309%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="73.9271%" y="181" width="0.0461%" height="15" fill="rgb(236,173,5)" fg:x="1602" fg:w="1"/><text x="74.1771%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="73.9271%" y="165" width="0.0461%" height="15" fill="rgb(230,95,12)" fg:x="1602" fg:w="1"/><text x="74.1771%" y="175.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 1.89%)</title><rect x="72.2197%" y="453" width="1.8920%" height="15" fill="rgb(232,209,1)" fg:x="1565" fg:w="41"/><text x="72.4697%" y="463.50">&lt;..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 1.57%)</title><rect x="72.5427%" y="437" width="1.5690%" height="15" fill="rgb(232,6,1)" fg:x="1572" fg:w="34"/><text x="72.7927%" y="447.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (13 samples, 0.60%)</title><rect x="73.5118%" y="421" width="0.5999%" height="15" fill="rgb(210,224,50)" fg:x="1593" fg:w="13"/><text x="73.7618%" y="431.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (3 samples, 0.14%)</title><rect x="73.9732%" y="405" width="0.1384%" height="15" fill="rgb(228,127,35)" fg:x="1603" fg:w="3"/><text x="74.2232%" y="415.50"></text></g><g><title>core::cmp::min (1 samples, 0.05%)</title><rect x="74.0655%" y="389" width="0.0461%" height="15" fill="rgb(245,102,45)" fg:x="1605" fg:w="1"/><text x="74.3155%" y="399.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.05%)</title><rect x="74.0655%" y="373" width="0.0461%" height="15" fill="rgb(214,1,49)" fg:x="1605" fg:w="1"/><text x="74.3155%" y="383.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (93 samples, 4.29%)</title><rect x="69.9123%" y="517" width="4.2916%" height="15" fill="rgb(226,163,40)" fg:x="1515" fg:w="93"/><text x="70.1623%" y="527.50">&lt;serd..</text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (90 samples, 4.15%)</title><rect x="70.0508%" y="501" width="4.1532%" height="15" fill="rgb(239,212,28)" fg:x="1518" fg:w="90"/><text x="70.3008%" y="511.50">serde..</text></g><g><title>serde_json::read::next_or_eof (47 samples, 2.17%)</title><rect x="72.0351%" y="485" width="2.1689%" height="15" fill="rgb(220,20,13)" fg:x="1561" fg:w="47"/><text x="72.2851%" y="495.50">s..</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (47 samples, 2.17%)</title><rect x="72.0351%" y="469" width="2.1689%" height="15" fill="rgb(210,164,35)" fg:x="1561" fg:w="47"/><text x="72.2851%" y="479.50">&lt;..</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (2 samples, 0.09%)</title><rect x="74.1117%" y="453" width="0.0923%" height="15" fill="rgb(248,109,41)" fg:x="1606" fg:w="2"/><text x="74.3617%" y="463.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (105 samples, 4.85%)</title><rect x="69.4047%" y="565" width="4.8454%" height="15" fill="rgb(238,23,50)" fg:x="1504" fg:w="105"/><text x="69.6547%" y="575.50">serde:..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (105 samples, 4.85%)</title><rect x="69.4047%" y="549" width="4.8454%" height="15" fill="rgb(211,48,49)" fg:x="1504" fg:w="105"/><text x="69.6547%" y="559.50">&lt;&amp;mut ..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (105 samples, 4.85%)</title><rect x="69.4047%" y="533" width="4.8454%" height="15" fill="rgb(223,36,21)" fg:x="1504" fg:w="105"/><text x="69.6547%" y="543.50">&lt;&amp;mut ..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.05%)</title><rect x="74.2040%" y="517" width="0.0461%" height="15" fill="rgb(207,123,46)" fg:x="1608" fg:w="1"/><text x="74.4540%" y="527.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (3 samples, 0.14%)</title><rect x="75.1269%" y="357" width="0.1384%" height="15" fill="rgb(240,218,32)" fg:x="1628" fg:w="3"/><text x="75.3769%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or_else (1 samples, 0.05%)</title><rect x="75.2653%" y="357" width="0.0461%" height="15" fill="rgb(252,5,43)" fg:x="1631" fg:w="1"/><text x="75.5153%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once (6 samples, 0.28%)</title><rect x="75.1269%" y="389" width="0.2769%" height="15" fill="rgb(252,84,19)" fg:x="1628" fg:w="6"/><text x="75.3769%" y="399.50"></text></g><g><title>serde_json::read::as_str (6 samples, 0.28%)</title><rect x="75.1269%" y="373" width="0.2769%" height="15" fill="rgb(243,152,39)" fg:x="1628" fg:w="6"/><text x="75.3769%" y="383.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.09%)</title><rect x="75.3115%" y="357" width="0.0923%" height="15" fill="rgb(234,160,15)" fg:x="1632" fg:w="2"/><text x="75.5615%" y="367.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.05%)</title><rect x="75.3576%" y="341" width="0.0461%" height="15" fill="rgb(237,34,20)" fg:x="1633" fg:w="1"/><text x="75.6076%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.09%)</title><rect x="76.1421%" y="309" width="0.0923%" height="15" fill="rgb(229,97,13)" fg:x="1650" fg:w="2"/><text x="76.3921%" y="319.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::pos (1 samples, 0.05%)</title><rect x="76.2344%" y="309" width="0.0461%" height="15" fill="rgb(234,71,50)" fg:x="1652" fg:w="1"/><text x="76.4844%" y="319.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.83%)</title><rect x="75.4961%" y="357" width="0.8306%" height="15" fill="rgb(253,155,4)" fg:x="1636" fg:w="18"/><text x="75.7461%" y="367.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.78%)</title><rect x="75.5422%" y="341" width="0.7845%" height="15" fill="rgb(222,185,37)" fg:x="1637" fg:w="17"/><text x="75.7922%" y="351.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (10 samples, 0.46%)</title><rect x="75.8653%" y="325" width="0.4615%" height="15" fill="rgb(251,177,13)" fg:x="1644" fg:w="10"/><text x="76.1153%" y="335.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (1 samples, 0.05%)</title><rect x="76.2806%" y="309" width="0.0461%" height="15" fill="rgb(250,179,40)" fg:x="1653" fg:w="1"/><text x="76.5306%" y="319.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (42 samples, 1.94%)</title><rect x="74.4808%" y="421" width="1.9382%" height="15" fill="rgb(242,44,2)" fg:x="1614" fg:w="42"/><text x="74.7308%" y="431.50">&lt;..</text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (40 samples, 1.85%)</title><rect x="74.5731%" y="405" width="1.8459%" height="15" fill="rgb(216,177,13)" fg:x="1616" fg:w="40"/><text x="74.8231%" y="415.50">s..</text></g><g><title>serde_json::read::next_or_eof (22 samples, 1.02%)</title><rect x="75.4038%" y="389" width="1.0152%" height="15" fill="rgb(216,106,43)" fg:x="1634" fg:w="22"/><text x="75.6538%" y="399.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (22 samples, 1.02%)</title><rect x="75.4038%" y="373" width="1.0152%" height="15" fill="rgb(216,183,2)" fg:x="1634" fg:w="22"/><text x="75.6538%" y="383.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (2 samples, 0.09%)</title><rect x="76.3267%" y="357" width="0.0923%" height="15" fill="rgb(249,75,3)" fg:x="1654" fg:w="2"/><text x="76.5767%" y="367.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (45 samples, 2.08%)</title><rect x="74.4347%" y="485" width="2.0766%" height="15" fill="rgb(219,67,39)" fg:x="1613" fg:w="45"/><text x="74.6847%" y="495.50">&lt;..</text></g><g><title>&lt;yt_history::parser::json_parser::_::&lt;impl serde::de::Deserialize for yt_history::parser::json_parser::Subtitles&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (45 samples, 2.08%)</title><rect x="74.4347%" y="469" width="2.0766%" height="15" fill="rgb(253,228,2)" fg:x="1613" fg:w="45"/><text x="74.6847%" y="479.50">&lt;..</text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (45 samples, 2.08%)</title><rect x="74.4347%" y="453" width="2.0766%" height="15" fill="rgb(235,138,27)" fg:x="1613" fg:w="45"/><text x="74.6847%" y="463.50">&lt;..</text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (45 samples, 2.08%)</title><rect x="74.4347%" y="437" width="2.0766%" height="15" fill="rgb(236,97,51)" fg:x="1613" fg:w="45"/><text x="74.6847%" y="447.50">&lt;..</text></g><g><title>&lt;yt_history::parser::json_parser::_::&lt;impl serde::de::Deserialize for yt_history::parser::json_parser::Subtitles&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (2 samples, 0.09%)</title><rect x="76.4190%" y="421" width="0.0923%" height="15" fill="rgb(240,80,30)" fg:x="1656" fg:w="2"/><text x="76.6690%" y="431.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (2 samples, 0.09%)</title><rect x="76.4190%" y="405" width="0.0923%" height="15" fill="rgb(230,178,19)" fg:x="1656" fg:w="2"/><text x="76.6690%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.09%)</title><rect x="76.4190%" y="389" width="0.0923%" height="15" fill="rgb(210,190,27)" fg:x="1656" fg:w="2"/><text x="76.6690%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.09%)</title><rect x="76.4190%" y="373" width="0.0923%" height="15" fill="rgb(222,107,31)" fg:x="1656" fg:w="2"/><text x="76.6690%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.09%)</title><rect x="76.4190%" y="357" width="0.0923%" height="15" fill="rgb(216,127,34)" fg:x="1656" fg:w="2"/><text x="76.6690%" y="367.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::eat_char (1 samples, 0.05%)</title><rect x="76.5575%" y="469" width="0.0461%" height="15" fill="rgb(234,116,52)" fg:x="1659" fg:w="1"/><text x="76.8075%" y="479.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::discard (1 samples, 0.05%)</title><rect x="76.5575%" y="453" width="0.0461%" height="15" fill="rgb(222,124,15)" fg:x="1659" fg:w="1"/><text x="76.8075%" y="463.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (1 samples, 0.05%)</title><rect x="78.2187%" y="389" width="0.0461%" height="15" fill="rgb(231,179,28)" fg:x="1695" fg:w="1"/><text x="78.4687%" y="399.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (1 samples, 0.05%)</title><rect x="78.2187%" y="373" width="0.0461%" height="15" fill="rgb(226,93,45)" fg:x="1695" fg:w="1"/><text x="78.4687%" y="383.50"></text></g><g><title>core::cmp::min (1 samples, 0.05%)</title><rect x="78.2187%" y="357" width="0.0461%" height="15" fill="rgb(215,8,51)" fg:x="1695" fg:w="1"/><text x="78.4687%" y="367.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.05%)</title><rect x="78.2187%" y="341" width="0.0461%" height="15" fill="rgb(223,106,5)" fg:x="1695" fg:w="1"/><text x="78.4687%" y="351.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (2 samples, 0.09%)</title><rect x="78.2649%" y="389" width="0.0923%" height="15" fill="rgb(250,191,5)" fg:x="1696" fg:w="2"/><text x="78.5149%" y="399.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (2 samples, 0.09%)</title><rect x="78.2649%" y="373" width="0.0923%" height="15" fill="rgb(242,132,44)" fg:x="1696" fg:w="2"/><text x="78.5149%" y="383.50"></text></g><g><title>serde::de::MapAccess::next_key (87 samples, 4.01%)</title><rect x="74.3886%" y="517" width="4.0148%" height="15" fill="rgb(251,152,29)" fg:x="1612" fg:w="87"/><text x="74.6386%" y="527.50">serd..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (87 samples, 4.01%)</title><rect x="74.3886%" y="501" width="4.0148%" height="15" fill="rgb(218,179,5)" fg:x="1612" fg:w="87"/><text x="74.6386%" y="511.50">&lt;ser..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (41 samples, 1.89%)</title><rect x="76.5113%" y="485" width="1.8920%" height="15" fill="rgb(227,67,19)" fg:x="1658" fg:w="41"/><text x="76.7613%" y="495.50">s..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (39 samples, 1.80%)</title><rect x="76.6036%" y="469" width="1.7997%" height="15" fill="rgb(233,119,31)" fg:x="1660" fg:w="39"/><text x="76.8536%" y="479.50">s..</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (39 samples, 1.80%)</title><rect x="76.6036%" y="453" width="1.7997%" height="15" fill="rgb(241,120,22)" fg:x="1660" fg:w="39"/><text x="76.8536%" y="463.50">&lt;..</text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 1.80%)</title><rect x="76.6036%" y="437" width="1.7997%" height="15" fill="rgb(224,102,30)" fg:x="1660" fg:w="39"/><text x="76.8536%" y="447.50">&lt;..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 1.20%)</title><rect x="77.2035%" y="421" width="1.1998%" height="15" fill="rgb(210,164,37)" fg:x="1673" fg:w="26"/><text x="77.4535%" y="431.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (9 samples, 0.42%)</title><rect x="77.9880%" y="405" width="0.4153%" height="15" fill="rgb(226,191,16)" fg:x="1690" fg:w="9"/><text x="78.2380%" y="415.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (1 samples, 0.05%)</title><rect x="78.3572%" y="389" width="0.0461%" height="15" fill="rgb(214,40,45)" fg:x="1698" fg:w="1"/><text x="78.6072%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.51%)</title><rect x="78.5418%" y="309" width="0.5076%" height="15" fill="rgb(244,29,26)" fg:x="1702" fg:w="11"/><text x="78.7918%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.51%)</title><rect x="78.5418%" y="293" width="0.5076%" height="15" fill="rgb(216,16,5)" fg:x="1702" fg:w="11"/><text x="78.7918%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.51%)</title><rect x="78.5418%" y="277" width="0.5076%" height="15" fill="rgb(249,76,35)" fg:x="1702" fg:w="11"/><text x="78.7918%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.51%)</title><rect x="78.5418%" y="261" width="0.5076%" height="15" fill="rgb(207,11,44)" fg:x="1702" fg:w="11"/><text x="78.7918%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.51%)</title><rect x="78.5418%" y="245" width="0.5076%" height="15" fill="rgb(228,190,49)" fg:x="1702" fg:w="11"/><text x="78.7918%" y="255.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.51%)</title><rect x="78.5418%" y="229" width="0.5076%" height="15" fill="rgb(214,173,12)" fg:x="1702" fg:w="11"/><text x="78.7918%" y="239.50"></text></g><g><title>malloc (11 samples, 0.51%)</title><rect x="78.5418%" y="213" width="0.5076%" height="15" fill="rgb(218,26,35)" fg:x="1702" fg:w="11"/><text x="78.7918%" y="223.50"></text></g><g><title>[libc.so.6] (9 samples, 0.42%)</title><rect x="78.6341%" y="197" width="0.4153%" height="15" fill="rgb(220,200,19)" fg:x="1704" fg:w="9"/><text x="78.8841%" y="207.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="78.9109%" y="181" width="0.1384%" height="15" fill="rgb(239,95,49)" fg:x="1710" fg:w="3"/><text x="79.1609%" y="191.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="78.9109%" y="165" width="0.1384%" height="15" fill="rgb(235,85,53)" fg:x="1710" fg:w="3"/><text x="79.1609%" y="175.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="78.9109%" y="149" width="0.1384%" height="15" fill="rgb(233,133,31)" fg:x="1710" fg:w="3"/><text x="79.1609%" y="159.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="78.9109%" y="133" width="0.1384%" height="15" fill="rgb(218,25,20)" fg:x="1710" fg:w="3"/><text x="79.1609%" y="143.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="78.9109%" y="117" width="0.1384%" height="15" fill="rgb(252,210,38)" fg:x="1710" fg:w="3"/><text x="79.1609%" y="127.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="78.9109%" y="101" width="0.1384%" height="15" fill="rgb(242,134,21)" fg:x="1710" fg:w="3"/><text x="79.1609%" y="111.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="78.9109%" y="85" width="0.1384%" height="15" fill="rgb(213,28,48)" fg:x="1710" fg:w="3"/><text x="79.1609%" y="95.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="78.9109%" y="69" width="0.1384%" height="15" fill="rgb(250,196,2)" fg:x="1710" fg:w="3"/><text x="79.1609%" y="79.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="78.9109%" y="53" width="0.1384%" height="15" fill="rgb(227,5,17)" fg:x="1710" fg:w="3"/><text x="79.1609%" y="63.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="78.9109%" y="37" width="0.1384%" height="15" fill="rgb(221,226,24)" fg:x="1710" fg:w="3"/><text x="79.1609%" y="47.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (12 samples, 0.55%)</title><rect x="78.5418%" y="421" width="0.5538%" height="15" fill="rgb(211,5,48)" fg:x="1702" fg:w="12"/><text x="78.7918%" y="431.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (12 samples, 0.55%)</title><rect x="78.5418%" y="405" width="0.5538%" height="15" fill="rgb(219,150,6)" fg:x="1702" fg:w="12"/><text x="78.7918%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (12 samples, 0.55%)</title><rect x="78.5418%" y="389" width="0.5538%" height="15" fill="rgb(251,46,16)" fg:x="1702" fg:w="12"/><text x="78.7918%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (12 samples, 0.55%)</title><rect x="78.5418%" y="373" width="0.5538%" height="15" fill="rgb(220,204,40)" fg:x="1702" fg:w="12"/><text x="78.7918%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12 samples, 0.55%)</title><rect x="78.5418%" y="357" width="0.5538%" height="15" fill="rgb(211,85,2)" fg:x="1702" fg:w="12"/><text x="78.7918%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.55%)</title><rect x="78.5418%" y="341" width="0.5538%" height="15" fill="rgb(229,17,7)" fg:x="1702" fg:w="12"/><text x="78.7918%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12 samples, 0.55%)</title><rect x="78.5418%" y="325" width="0.5538%" height="15" fill="rgb(239,72,28)" fg:x="1702" fg:w="12"/><text x="78.7918%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.05%)</title><rect x="79.0494%" y="309" width="0.0461%" height="15" fill="rgb(230,47,54)" fg:x="1713" fg:w="1"/><text x="79.2994%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="79.0494%" y="293" width="0.0461%" height="15" fill="rgb(214,50,8)" fg:x="1713" fg:w="1"/><text x="79.2994%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="79.0494%" y="277" width="0.0461%" height="15" fill="rgb(216,198,43)" fg:x="1713" fg:w="1"/><text x="79.2994%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.05%)</title><rect x="79.0955%" y="405" width="0.0461%" height="15" fill="rgb(234,20,35)" fg:x="1714" fg:w="1"/><text x="79.3455%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (13 samples, 0.60%)</title><rect x="81.8182%" y="389" width="0.5999%" height="15" fill="rgb(254,45,19)" fg:x="1773" fg:w="13"/><text x="82.0682%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or_else (3 samples, 0.14%)</title><rect x="82.4181%" y="357" width="0.1384%" height="15" fill="rgb(219,14,44)" fg:x="1786" fg:w="3"/><text x="82.6681%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once (7 samples, 0.32%)</title><rect x="82.4181%" y="389" width="0.3230%" height="15" fill="rgb(217,220,26)" fg:x="1786" fg:w="7"/><text x="82.6681%" y="399.50"></text></g><g><title>serde_json::read::as_str (7 samples, 0.32%)</title><rect x="82.4181%" y="373" width="0.3230%" height="15" fill="rgb(213,158,28)" fg:x="1786" fg:w="7"/><text x="82.6681%" y="383.50"></text></g><g><title>core::str::converts::from_utf8 (4 samples, 0.18%)</title><rect x="82.5565%" y="357" width="0.1846%" height="15" fill="rgb(252,51,52)" fg:x="1789" fg:w="4"/><text x="82.8065%" y="367.50"></text></g><g><title>core::str::validations::run_utf8_validation (2 samples, 0.09%)</title><rect x="82.6488%" y="341" width="0.0923%" height="15" fill="rgb(246,89,16)" fg:x="1791" fg:w="2"/><text x="82.8988%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (9 samples, 0.42%)</title><rect x="86.9866%" y="309" width="0.4153%" height="15" fill="rgb(216,158,49)" fg:x="1885" fg:w="9"/><text x="87.2366%" y="319.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (2 samples, 0.09%)</title><rect x="87.4019%" y="309" width="0.0923%" height="15" fill="rgb(236,107,19)" fg:x="1894" fg:w="2"/><text x="87.6519%" y="319.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (2 samples, 0.09%)</title><rect x="87.4019%" y="293" width="0.0923%" height="15" fill="rgb(228,185,30)" fg:x="1894" fg:w="2"/><text x="87.6519%" y="303.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (2 samples, 0.09%)</title><rect x="87.4019%" y="277" width="0.0923%" height="15" fill="rgb(246,134,8)" fg:x="1894" fg:w="2"/><text x="87.6519%" y="287.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (2 samples, 0.09%)</title><rect x="87.4019%" y="261" width="0.0923%" height="15" fill="rgb(214,143,50)" fg:x="1894" fg:w="2"/><text x="87.6519%" y="271.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (2 samples, 0.09%)</title><rect x="87.4019%" y="245" width="0.0923%" height="15" fill="rgb(228,75,8)" fg:x="1894" fg:w="2"/><text x="87.6519%" y="255.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (2 samples, 0.09%)</title><rect x="87.4019%" y="229" width="0.0923%" height="15" fill="rgb(207,175,4)" fg:x="1894" fg:w="2"/><text x="87.6519%" y="239.50"></text></g><g><title>read (2 samples, 0.09%)</title><rect x="87.4019%" y="213" width="0.0923%" height="15" fill="rgb(205,108,24)" fg:x="1894" fg:w="2"/><text x="87.6519%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="87.4019%" y="197" width="0.0923%" height="15" fill="rgb(244,120,49)" fg:x="1894" fg:w="2"/><text x="87.6519%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="87.4019%" y="181" width="0.0923%" height="15" fill="rgb(223,47,38)" fg:x="1894" fg:w="2"/><text x="87.6519%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="87.4019%" y="165" width="0.0923%" height="15" fill="rgb(229,179,11)" fg:x="1894" fg:w="2"/><text x="87.6519%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="87.4019%" y="149" width="0.0923%" height="15" fill="rgb(231,122,1)" fg:x="1894" fg:w="2"/><text x="87.6519%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="87.4019%" y="133" width="0.0923%" height="15" fill="rgb(245,119,9)" fg:x="1894" fg:w="2"/><text x="87.6519%" y="143.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="87.4019%" y="117" width="0.0923%" height="15" fill="rgb(241,163,25)" fg:x="1894" fg:w="2"/><text x="87.6519%" y="127.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="87.4019%" y="101" width="0.0923%" height="15" fill="rgb(217,214,3)" fg:x="1894" fg:w="2"/><text x="87.6519%" y="111.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="87.4019%" y="85" width="0.0923%" height="15" fill="rgb(240,86,28)" fg:x="1894" fg:w="2"/><text x="87.6519%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="87.4481%" y="69" width="0.0461%" height="15" fill="rgb(215,47,9)" fg:x="1895" fg:w="1"/><text x="87.6981%" y="79.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::pos (5 samples, 0.23%)</title><rect x="87.4942%" y="309" width="0.2307%" height="15" fill="rgb(252,25,45)" fg:x="1896" fg:w="5"/><text x="87.7442%" y="319.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (116 samples, 5.35%)</title><rect x="82.9257%" y="357" width="5.3530%" height="15" fill="rgb(251,164,9)" fg:x="1797" fg:w="116"/><text x="83.1757%" y="367.50">&lt;serde_..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (106 samples, 4.89%)</title><rect x="83.3872%" y="341" width="4.8916%" height="15" fill="rgb(233,194,0)" fg:x="1807" fg:w="106"/><text x="83.6372%" y="351.50">&lt;std::..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (56 samples, 2.58%)</title><rect x="85.6945%" y="325" width="2.5842%" height="15" fill="rgb(249,111,24)" fg:x="1857" fg:w="56"/><text x="85.9445%" y="335.50">&lt;s..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (12 samples, 0.55%)</title><rect x="87.7250%" y="309" width="0.5538%" height="15" fill="rgb(250,223,3)" fg:x="1901" fg:w="12"/><text x="87.9750%" y="319.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (14 samples, 0.65%)</title><rect x="88.2787%" y="357" width="0.6461%" height="15" fill="rgb(236,178,37)" fg:x="1913" fg:w="14"/><text x="88.5287%" y="367.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (214 samples, 9.88%)</title><rect x="79.0955%" y="421" width="9.8754%" height="15" fill="rgb(241,158,50)" fg:x="1714" fg:w="214"/><text x="79.3455%" y="431.50">&lt;serde_json::r..</text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (213 samples, 9.83%)</title><rect x="79.1417%" y="405" width="9.8293%" height="15" fill="rgb(213,121,41)" fg:x="1715" fg:w="213"/><text x="79.3917%" y="415.50">serde_json::re..</text></g><g><title>serde_json::read::next_or_eof (135 samples, 6.23%)</title><rect x="82.7411%" y="389" width="6.2298%" height="15" fill="rgb(240,92,3)" fg:x="1793" fg:w="135"/><text x="82.9911%" y="399.50">serde_js..</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (135 samples, 6.23%)</title><rect x="82.7411%" y="373" width="6.2298%" height="15" fill="rgb(205,123,3)" fg:x="1793" fg:w="135"/><text x="82.9911%" y="383.50">&lt;serde_j..</text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.05%)</title><rect x="88.9248%" y="357" width="0.0461%" height="15" fill="rgb(205,97,47)" fg:x="1927" fg:w="1"/><text x="89.1748%" y="367.50"></text></g><g><title>core::mem::replace (1 samples, 0.05%)</title><rect x="88.9248%" y="341" width="0.0461%" height="15" fill="rgb(247,152,14)" fg:x="1927" fg:w="1"/><text x="89.1748%" y="351.50"></text></g><g><title>core::ptr::read (1 samples, 0.05%)</title><rect x="88.9248%" y="325" width="0.0461%" height="15" fill="rgb(248,195,53)" fg:x="1927" fg:w="1"/><text x="89.1748%" y="335.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (1 samples, 0.05%)</title><rect x="89.2940%" y="325" width="0.0461%" height="15" fill="rgb(226,201,16)" fg:x="1935" fg:w="1"/><text x="89.5440%" y="335.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (1 samples, 0.05%)</title><rect x="89.2940%" y="309" width="0.0461%" height="15" fill="rgb(205,98,0)" fg:x="1935" fg:w="1"/><text x="89.5440%" y="319.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (238 samples, 10.98%)</title><rect x="78.4033%" y="485" width="10.9829%" height="15" fill="rgb(214,191,48)" fg:x="1699" fg:w="238"/><text x="78.6533%" y="495.50">&lt;core::marker::P..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (238 samples, 10.98%)</title><rect x="78.4033%" y="469" width="10.9829%" height="15" fill="rgb(237,112,39)" fg:x="1699" fg:w="238"/><text x="78.6533%" y="479.50">serde::de::impls..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (238 samples, 10.98%)</title><rect x="78.4033%" y="453" width="10.9829%" height="15" fill="rgb(247,203,27)" fg:x="1699" fg:w="238"/><text x="78.6533%" y="463.50">&lt;&amp;mut serde_json..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (236 samples, 10.89%)</title><rect x="78.4956%" y="437" width="10.8906%" height="15" fill="rgb(235,124,28)" fg:x="1701" fg:w="236"/><text x="78.7456%" y="447.50">&lt;&amp;mut serde_json..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (9 samples, 0.42%)</title><rect x="88.9709%" y="421" width="0.4153%" height="15" fill="rgb(208,207,46)" fg:x="1928" fg:w="9"/><text x="89.2209%" y="431.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (9 samples, 0.42%)</title><rect x="88.9709%" y="405" width="0.4153%" height="15" fill="rgb(234,176,4)" fg:x="1928" fg:w="9"/><text x="89.2209%" y="415.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (9 samples, 0.42%)</title><rect x="88.9709%" y="389" width="0.4153%" height="15" fill="rgb(230,133,28)" fg:x="1928" fg:w="9"/><text x="89.2209%" y="399.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.42%)</title><rect x="88.9709%" y="373" width="0.4153%" height="15" fill="rgb(211,137,40)" fg:x="1928" fg:w="9"/><text x="89.2209%" y="383.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.28%)</title><rect x="89.1094%" y="357" width="0.2769%" height="15" fill="rgb(254,35,13)" fg:x="1931" fg:w="6"/><text x="89.3594%" y="367.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.18%)</title><rect x="89.2017%" y="341" width="0.1846%" height="15" fill="rgb(225,49,51)" fg:x="1933" fg:w="4"/><text x="89.4517%" y="351.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (1 samples, 0.05%)</title><rect x="89.3401%" y="325" width="0.0461%" height="15" fill="rgb(251,10,15)" fg:x="1936" fg:w="1"/><text x="89.5901%" y="335.50"></text></g><g><title>&lt;yt_history::parser::json_parser::_::&lt;impl serde::de::Deserialize for yt_history::parser::json_parser::Subtitles&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (331 samples, 15.27%)</title><rect x="74.2501%" y="533" width="15.2746%" height="15" fill="rgb(228,207,15)" fg:x="1609" fg:w="331"/><text x="74.5001%" y="543.50">&lt;yt_history::parser::js..</text></g><g><title>serde::de::MapAccess::next_value (241 samples, 11.12%)</title><rect x="78.4033%" y="517" width="11.1214%" height="15" fill="rgb(241,99,19)" fg:x="1699" fg:w="241"/><text x="78.6533%" y="527.50">serde::de::MapAc..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (241 samples, 11.12%)</title><rect x="78.4033%" y="501" width="11.1214%" height="15" fill="rgb(207,104,49)" fg:x="1699" fg:w="241"/><text x="78.6533%" y="511.50">&lt;serde_json::de:..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (3 samples, 0.14%)</title><rect x="89.3862%" y="485" width="0.1384%" height="15" fill="rgb(234,99,18)" fg:x="1937" fg:w="3"/><text x="89.6362%" y="495.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (3 samples, 0.14%)</title><rect x="89.3862%" y="469" width="0.1384%" height="15" fill="rgb(213,191,49)" fg:x="1937" fg:w="3"/><text x="89.6362%" y="479.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (3 samples, 0.14%)</title><rect x="89.3862%" y="453" width="0.1384%" height="15" fill="rgb(210,226,19)" fg:x="1937" fg:w="3"/><text x="89.6362%" y="463.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (3 samples, 0.14%)</title><rect x="89.3862%" y="437" width="0.1384%" height="15" fill="rgb(229,97,18)" fg:x="1937" fg:w="3"/><text x="89.6362%" y="447.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.14%)</title><rect x="89.3862%" y="421" width="0.1384%" height="15" fill="rgb(211,167,15)" fg:x="1937" fg:w="3"/><text x="89.6362%" y="431.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.14%)</title><rect x="89.3862%" y="405" width="0.1384%" height="15" fill="rgb(210,169,34)" fg:x="1937" fg:w="3"/><text x="89.6362%" y="415.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::end_map (1 samples, 0.05%)</title><rect x="89.5247%" y="533" width="0.0461%" height="15" fill="rgb(241,121,31)" fg:x="1940" fg:w="1"/><text x="89.7747%" y="543.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.05%)</title><rect x="89.5247%" y="517" width="0.0461%" height="15" fill="rgb(232,40,11)" fg:x="1940" fg:w="1"/><text x="89.7747%" y="527.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.05%)</title><rect x="89.5247%" y="501" width="0.0461%" height="15" fill="rgb(205,86,26)" fg:x="1940" fg:w="1"/><text x="89.7747%" y="511.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (1 samples, 0.05%)</title><rect x="89.5247%" y="485" width="0.0461%" height="15" fill="rgb(231,126,28)" fg:x="1940" fg:w="1"/><text x="89.7747%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (333 samples, 15.37%)</title><rect x="74.2501%" y="549" width="15.3669%" height="15" fill="rgb(219,221,18)" fg:x="1609" fg:w="333"/><text x="74.5001%" y="559.50">&lt;&amp;mut serde_json::de::De..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.05%)</title><rect x="89.5708%" y="533" width="0.0461%" height="15" fill="rgb(211,40,0)" fg:x="1941" fg:w="1"/><text x="89.8208%" y="543.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (439 samples, 20.26%)</title><rect x="69.4047%" y="581" width="20.2584%" height="15" fill="rgb(239,85,43)" fg:x="1504" fg:w="439"/><text x="69.6547%" y="591.50">&lt;core::marker::PhantomData&lt;T&gt; as..</text></g><g><title>yt_history::parser::json_parser::_::&lt;impl serde::de::Deserialize for yt_history::parser::json_parser::Subtitles&gt;::deserialize (334 samples, 15.41%)</title><rect x="74.2501%" y="565" width="15.4130%" height="15" fill="rgb(231,55,21)" fg:x="1609" fg:w="334"/><text x="74.5001%" y="575.50">yt_history::parser::json..</text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="89.6170%" y="549" width="0.0461%" height="15" fill="rgb(225,184,43)" fg:x="1942" fg:w="1"/><text x="89.8670%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="89.6170%" y="533" width="0.0461%" height="15" fill="rgb(251,158,41)" fg:x="1942" fg:w="1"/><text x="89.8670%" y="543.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.05%)</title><rect x="90.5399%" y="485" width="0.0461%" height="15" fill="rgb(234,159,37)" fg:x="1962" fg:w="1"/><text x="90.7899%" y="495.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (1 samples, 0.05%)</title><rect x="90.5861%" y="485" width="0.0461%" height="15" fill="rgb(216,204,22)" fg:x="1963" fg:w="1"/><text x="90.8361%" y="495.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (1 samples, 0.05%)</title><rect x="90.5861%" y="469" width="0.0461%" height="15" fill="rgb(214,17,3)" fg:x="1963" fg:w="1"/><text x="90.8361%" y="479.50"></text></g><g><title>core::cmp::min (1 samples, 0.05%)</title><rect x="90.5861%" y="453" width="0.0461%" height="15" fill="rgb(212,111,17)" fg:x="1963" fg:w="1"/><text x="90.8361%" y="463.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.05%)</title><rect x="90.5861%" y="437" width="0.0461%" height="15" fill="rgb(221,157,24)" fg:x="1963" fg:w="1"/><text x="90.8361%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (529 samples, 24.41%)</title><rect x="66.2667%" y="629" width="24.4116%" height="15" fill="rgb(252,16,13)" fg:x="1436" fg:w="529"/><text x="66.5167%" y="639.50">&lt;serde::de::impls::&lt;impl serde::de::Des..</text></g><g><title>serde::de::SeqAccess::next_element (473 samples, 21.83%)</title><rect x="68.8509%" y="613" width="21.8274%" height="15" fill="rgb(221,62,2)" fg:x="1492" fg:w="473"/><text x="69.1009%" y="623.50">serde::de::SeqAccess::next_element</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (472 samples, 21.78%)</title><rect x="68.8971%" y="597" width="21.7813%" height="15" fill="rgb(247,87,22)" fg:x="1493" fg:w="472"/><text x="69.1471%" y="607.50">&lt;serde_json::de::SeqAccess&lt;R&gt; as s..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (22 samples, 1.02%)</title><rect x="89.6631%" y="581" width="1.0152%" height="15" fill="rgb(215,73,9)" fg:x="1943" fg:w="22"/><text x="89.9131%" y="591.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (19 samples, 0.88%)</title><rect x="89.8016%" y="565" width="0.8768%" height="15" fill="rgb(207,175,33)" fg:x="1946" fg:w="19"/><text x="90.0516%" y="575.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (19 samples, 0.88%)</title><rect x="89.8016%" y="549" width="0.8768%" height="15" fill="rgb(243,129,54)" fg:x="1946" fg:w="19"/><text x="90.0516%" y="559.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.83%)</title><rect x="89.8477%" y="533" width="0.8306%" height="15" fill="rgb(227,119,45)" fg:x="1947" fg:w="18"/><text x="90.0977%" y="543.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.74%)</title><rect x="89.9400%" y="517" width="0.7383%" height="15" fill="rgb(205,109,36)" fg:x="1949" fg:w="16"/><text x="90.1900%" y="527.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (8 samples, 0.37%)</title><rect x="90.3092%" y="501" width="0.3692%" height="15" fill="rgb(205,6,39)" fg:x="1957" fg:w="8"/><text x="90.5592%" y="511.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::filled (1 samples, 0.05%)</title><rect x="90.6322%" y="485" width="0.0461%" height="15" fill="rgb(221,32,16)" fg:x="1964" fg:w="1"/><text x="90.8822%" y="495.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="90.6784%" y="629" width="0.0461%" height="15" fill="rgb(228,144,50)" fg:x="1965" fg:w="1"/><text x="90.9284%" y="639.50"></text></g><g><title>read (1 samples, 0.05%)</title><rect x="90.6784%" y="613" width="0.0461%" height="15" fill="rgb(229,201,53)" fg:x="1965" fg:w="1"/><text x="90.9284%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="90.6784%" y="597" width="0.0461%" height="15" fill="rgb(249,153,27)" fg:x="1965" fg:w="1"/><text x="90.9284%" y="607.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::end_seq (3 samples, 0.14%)</title><rect x="90.7245%" y="629" width="0.1384%" height="15" fill="rgb(227,106,25)" fg:x="1966" fg:w="3"/><text x="90.9745%" y="639.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::eat_char (1 samples, 0.05%)</title><rect x="90.9552%" y="613" width="0.0461%" height="15" fill="rgb(230,65,29)" fg:x="1971" fg:w="1"/><text x="91.2052%" y="623.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::discard (1 samples, 0.05%)</title><rect x="90.9552%" y="597" width="0.0461%" height="15" fill="rgb(221,57,46)" fg:x="1971" fg:w="1"/><text x="91.2052%" y="607.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,016 samples, 46.89%)</title><rect x="44.7162%" y="677" width="46.8851%" height="15" fill="rgb(229,161,17)" fg:x="969" fg:w="1016"/><text x="44.9662%" y="687.50">&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (557 samples, 25.70%)</title><rect x="65.8976%" y="661" width="25.7037%" height="15" fill="rgb(222,213,11)" fg:x="1428" fg:w="557"/><text x="66.1476%" y="671.50">serde::de::impls::&lt;impl serde::de::Deseri..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (557 samples, 25.70%)</title><rect x="65.8976%" y="645" width="25.7037%" height="15" fill="rgb(235,35,13)" fg:x="1428" fg:w="557"/><text x="66.1476%" y="655.50">&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as ..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (16 samples, 0.74%)</title><rect x="90.8629%" y="629" width="0.7383%" height="15" fill="rgb(233,158,34)" fg:x="1969" fg:w="16"/><text x="91.1129%" y="639.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (13 samples, 0.60%)</title><rect x="91.0014%" y="613" width="0.5999%" height="15" fill="rgb(215,151,48)" fg:x="1972" fg:w="13"/><text x="91.2514%" y="623.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (13 samples, 0.60%)</title><rect x="91.0014%" y="597" width="0.5999%" height="15" fill="rgb(229,84,14)" fg:x="1972" fg:w="13"/><text x="91.2514%" y="607.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.55%)</title><rect x="91.0475%" y="581" width="0.5538%" height="15" fill="rgb(229,68,14)" fg:x="1973" fg:w="12"/><text x="91.2975%" y="591.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.51%)</title><rect x="91.0937%" y="565" width="0.5076%" height="15" fill="rgb(243,106,26)" fg:x="1974" fg:w="11"/><text x="91.3437%" y="575.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.18%)</title><rect x="91.4167%" y="549" width="0.1846%" height="15" fill="rgb(206,45,38)" fg:x="1981" fg:w="4"/><text x="91.6667%" y="559.50"></text></g><g><title>&lt;yt_history::parser::json_parser::_::&lt;impl serde::de::Deserialize for yt_history::parser::json_parser::DataRow&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1,405 samples, 64.84%)</title><rect x="27.2727%" y="725" width="64.8362%" height="15" fill="rgb(226,6,15)" fg:x="591" fg:w="1405"/><text x="27.5227%" y="735.50">&lt;yt_history::parser::json_parser::_::&lt;impl serde::de::Deserialize for yt_history::parser::json_parser::Data..</text></g><g><title>serde::de::MapAccess::next_value (1,027 samples, 47.39%)</title><rect x="44.7162%" y="709" width="47.3927%" height="15" fill="rgb(232,22,54)" fg:x="969" fg:w="1027"/><text x="44.9662%" y="719.50">serde::de::MapAccess::next_value</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1,027 samples, 47.39%)</title><rect x="44.7162%" y="693" width="47.3927%" height="15" fill="rgb(229,222,32)" fg:x="969" fg:w="1027"/><text x="44.9662%" y="703.50">&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (11 samples, 0.51%)</title><rect x="91.6013%" y="677" width="0.5076%" height="15" fill="rgb(228,62,29)" fg:x="1985" fg:w="11"/><text x="91.8513%" y="687.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (11 samples, 0.51%)</title><rect x="91.6013%" y="661" width="0.5076%" height="15" fill="rgb(251,103,34)" fg:x="1985" fg:w="11"/><text x="91.8513%" y="671.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (11 samples, 0.51%)</title><rect x="91.6013%" y="645" width="0.5076%" height="15" fill="rgb(233,12,30)" fg:x="1985" fg:w="11"/><text x="91.8513%" y="655.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (11 samples, 0.51%)</title><rect x="91.6013%" y="629" width="0.5076%" height="15" fill="rgb(238,52,0)" fg:x="1985" fg:w="11"/><text x="91.8513%" y="639.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.51%)</title><rect x="91.6013%" y="613" width="0.5076%" height="15" fill="rgb(223,98,5)" fg:x="1985" fg:w="11"/><text x="91.8513%" y="623.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.46%)</title><rect x="91.6474%" y="597" width="0.4615%" height="15" fill="rgb(228,75,37)" fg:x="1986" fg:w="10"/><text x="91.8974%" y="607.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (5 samples, 0.23%)</title><rect x="91.8782%" y="581" width="0.2307%" height="15" fill="rgb(205,115,49)" fg:x="1991" fg:w="5"/><text x="92.1282%" y="591.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (1 samples, 0.05%)</title><rect x="92.0628%" y="565" width="0.0461%" height="15" fill="rgb(250,154,43)" fg:x="1995" fg:w="1"/><text x="92.3128%" y="575.50"></text></g><g><title>[libc.so.6] (10 samples, 0.46%)</title><rect x="92.1089%" y="725" width="0.4615%" height="15" fill="rgb(226,43,29)" fg:x="1996" fg:w="10"/><text x="92.3589%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,424 samples, 65.71%)</title><rect x="26.9036%" y="773" width="65.7130%" height="15" fill="rgb(249,228,39)" fg:x="583" fg:w="1424"/><text x="27.1536%" y="783.50">&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize</text></g><g><title>yt_history::parser::json_parser::_::&lt;impl serde::de::Deserialize for yt_history::parser::json_parser::DataRow&gt;::deserialize (1,424 samples, 65.71%)</title><rect x="26.9036%" y="757" width="65.7130%" height="15" fill="rgb(216,79,43)" fg:x="583" fg:w="1424"/><text x="27.1536%" y="767.50">yt_history::parser::json_parser::_::&lt;impl serde::de::Deserialize for yt_history::parser::json_parser::DataRow..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1,424 samples, 65.71%)</title><rect x="26.9036%" y="741" width="65.7130%" height="15" fill="rgb(228,95,12)" fg:x="583" fg:w="1424"/><text x="27.1536%" y="751.50">&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.05%)</title><rect x="92.5704%" y="725" width="0.0461%" height="15" fill="rgb(249,221,15)" fg:x="2006" fg:w="1"/><text x="92.8204%" y="735.50"></text></g><g><title>[libc.so.6] (4 samples, 0.18%)</title><rect x="92.6165%" y="773" width="0.1846%" height="15" fill="rgb(233,34,13)" fg:x="2007" fg:w="4"/><text x="92.8665%" y="783.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (1 samples, 0.05%)</title><rect x="92.8934%" y="677" width="0.0461%" height="15" fill="rgb(214,103,39)" fg:x="2013" fg:w="1"/><text x="93.1434%" y="687.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (1 samples, 0.05%)</title><rect x="92.8934%" y="661" width="0.0461%" height="15" fill="rgb(251,126,39)" fg:x="2013" fg:w="1"/><text x="93.1434%" y="671.50"></text></g><g><title>yt_history::load_models (1,782 samples, 82.23%)</title><rect x="10.7522%" y="981" width="82.2335%" height="15" fill="rgb(214,216,36)" fg:x="233" fg:w="1782"/><text x="11.0022%" y="991.50">yt_history::load_models</text></g><g><title>yt_history::parse (1,782 samples, 82.23%)</title><rect x="10.7522%" y="965" width="82.2335%" height="15" fill="rgb(220,221,8)" fg:x="233" fg:w="1782"/><text x="11.0022%" y="975.50">yt_history::parse</text></g><g><title>yt_history::parser::parse_file (1,782 samples, 82.23%)</title><rect x="10.7522%" y="949" width="82.2335%" height="15" fill="rgb(240,216,3)" fg:x="233" fg:w="1782"/><text x="11.0022%" y="959.50">yt_history::parser::parse_file</text></g><g><title>yt_history::parser::parser (1,782 samples, 82.23%)</title><rect x="10.7522%" y="933" width="82.2335%" height="15" fill="rgb(232,218,17)" fg:x="233" fg:w="1782"/><text x="11.0022%" y="943.50">yt_history::parser::parser</text></g><g><title>yt_history::parser::json_parser::parse (1,782 samples, 82.23%)</title><rect x="10.7522%" y="917" width="82.2335%" height="15" fill="rgb(229,163,45)" fg:x="233" fg:w="1782"/><text x="11.0022%" y="927.50">yt_history::parser::json_parser::parse</text></g><g><title>yt_history::parser::json_parser::parse_data_rows (1,444 samples, 66.64%)</title><rect x="26.3498%" y="901" width="66.6359%" height="15" fill="rgb(231,110,42)" fg:x="571" fg:w="1444"/><text x="26.5998%" y="911.50">yt_history::parser::json_parser::parse_data_rows</text></g><g><title>serde_json::de::from_reader (1,444 samples, 66.64%)</title><rect x="26.3498%" y="885" width="66.6359%" height="15" fill="rgb(208,170,48)" fg:x="571" fg:w="1444"/><text x="26.5998%" y="895.50">serde_json::de::from_reader</text></g><g><title>serde_json::de::from_trait (1,444 samples, 66.64%)</title><rect x="26.3498%" y="869" width="66.6359%" height="15" fill="rgb(239,116,25)" fg:x="571" fg:w="1444"/><text x="26.5998%" y="879.50">serde_json::de::from_trait</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (1,444 samples, 66.64%)</title><rect x="26.3498%" y="853" width="66.6359%" height="15" fill="rgb(219,200,50)" fg:x="571" fg:w="1444"/><text x="26.5998%" y="863.50">serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1,444 samples, 66.64%)</title><rect x="26.3498%" y="837" width="66.6359%" height="15" fill="rgb(245,200,0)" fg:x="571" fg:w="1444"/><text x="26.5998%" y="847.50">&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1,444 samples, 66.64%)</title><rect x="26.3498%" y="821" width="66.6359%" height="15" fill="rgb(245,119,33)" fg:x="571" fg:w="1444"/><text x="26.5998%" y="831.50">&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::..</text></g><g><title>serde::de::SeqAccess::next_element (1,432 samples, 66.08%)</title><rect x="26.9036%" y="805" width="66.0821%" height="15" fill="rgb(231,125,12)" fg:x="583" fg:w="1432"/><text x="27.1536%" y="815.50">serde::de::SeqAccess::next_element</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,432 samples, 66.08%)</title><rect x="26.9036%" y="789" width="66.0821%" height="15" fill="rgb(216,96,41)" fg:x="583" fg:w="1432"/><text x="27.1536%" y="799.50">&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (4 samples, 0.18%)</title><rect x="92.8011%" y="773" width="0.1846%" height="15" fill="rgb(248,43,45)" fg:x="2011" fg:w="4"/><text x="93.0511%" y="783.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (4 samples, 0.18%)</title><rect x="92.8011%" y="757" width="0.1846%" height="15" fill="rgb(217,222,7)" fg:x="2011" fg:w="4"/><text x="93.0511%" y="767.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (4 samples, 0.18%)</title><rect x="92.8011%" y="741" width="0.1846%" height="15" fill="rgb(233,28,6)" fg:x="2011" fg:w="4"/><text x="93.0511%" y="751.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.18%)</title><rect x="92.8011%" y="725" width="0.1846%" height="15" fill="rgb(231,218,15)" fg:x="2011" fg:w="4"/><text x="93.0511%" y="735.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.18%)</title><rect x="92.8011%" y="709" width="0.1846%" height="15" fill="rgb(226,171,48)" fg:x="2011" fg:w="4"/><text x="93.0511%" y="719.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (3 samples, 0.14%)</title><rect x="92.8473%" y="693" width="0.1384%" height="15" fill="rgb(235,201,9)" fg:x="2012" fg:w="3"/><text x="93.0973%" y="703.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::filled (1 samples, 0.05%)</title><rect x="92.9395%" y="677" width="0.0461%" height="15" fill="rgb(217,80,15)" fg:x="2014" fg:w="1"/><text x="93.1895%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.05%)</title><rect x="92.9857%" y="965" width="0.0461%" height="15" fill="rgb(219,152,8)" fg:x="2015" fg:w="1"/><text x="93.2357%" y="975.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (1 samples, 0.05%)</title><rect x="92.9857%" y="949" width="0.0461%" height="15" fill="rgb(243,107,38)" fg:x="2015" fg:w="1"/><text x="93.2357%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.74%)</title><rect x="94.1855%" y="885" width="0.7383%" height="15" fill="rgb(231,17,5)" fg:x="2041" fg:w="16"/><text x="94.4355%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.74%)</title><rect x="94.1855%" y="869" width="0.7383%" height="15" fill="rgb(209,25,54)" fg:x="2041" fg:w="16"/><text x="94.4355%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.74%)</title><rect x="94.1855%" y="853" width="0.7383%" height="15" fill="rgb(219,0,2)" fg:x="2041" fg:w="16"/><text x="94.4355%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.74%)</title><rect x="94.1855%" y="837" width="0.7383%" height="15" fill="rgb(246,9,5)" fg:x="2041" fg:w="16"/><text x="94.4355%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.74%)</title><rect x="94.1855%" y="821" width="0.7383%" height="15" fill="rgb(226,159,4)" fg:x="2041" fg:w="16"/><text x="94.4355%" y="831.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.74%)</title><rect x="94.1855%" y="805" width="0.7383%" height="15" fill="rgb(219,175,34)" fg:x="2041" fg:w="16"/><text x="94.4355%" y="815.50"></text></g><g><title>malloc (16 samples, 0.74%)</title><rect x="94.1855%" y="789" width="0.7383%" height="15" fill="rgb(236,10,46)" fg:x="2041" fg:w="16"/><text x="94.4355%" y="799.50"></text></g><g><title>[libc.so.6] (16 samples, 0.74%)</title><rect x="94.1855%" y="773" width="0.7383%" height="15" fill="rgb(240,211,16)" fg:x="2041" fg:w="16"/><text x="94.4355%" y="783.50"></text></g><g><title>[libc.so.6] (13 samples, 0.60%)</title><rect x="94.3240%" y="757" width="0.5999%" height="15" fill="rgb(205,3,43)" fg:x="2044" fg:w="13"/><text x="94.5740%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (82 samples, 3.78%)</title><rect x="93.0318%" y="965" width="3.7840%" height="15" fill="rgb(245,7,22)" fg:x="2016" fg:w="82"/><text x="93.2818%" y="975.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (57 samples, 2.63%)</title><rect x="94.1855%" y="949" width="2.6304%" height="15" fill="rgb(239,132,32)" fg:x="2041" fg:w="57"/><text x="94.4355%" y="959.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (57 samples, 2.63%)</title><rect x="94.1855%" y="933" width="2.6304%" height="15" fill="rgb(228,202,34)" fg:x="2041" fg:w="57"/><text x="94.4355%" y="943.50">al..</text></g><g><title>alloc::slice::hack::to_vec (57 samples, 2.63%)</title><rect x="94.1855%" y="917" width="2.6304%" height="15" fill="rgb(254,200,22)" fg:x="2041" fg:w="57"/><text x="94.4355%" y="927.50">al..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (57 samples, 2.63%)</title><rect x="94.1855%" y="901" width="2.6304%" height="15" fill="rgb(219,10,39)" fg:x="2041" fg:w="57"/><text x="94.4355%" y="911.50">&lt;T..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (41 samples, 1.89%)</title><rect x="94.9239%" y="885" width="1.8920%" height="15" fill="rgb(226,210,39)" fg:x="2057" fg:w="41"/><text x="95.1739%" y="895.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (41 samples, 1.89%)</title><rect x="94.9239%" y="869" width="1.8920%" height="15" fill="rgb(208,219,16)" fg:x="2057" fg:w="41"/><text x="95.1739%" y="879.50">c..</text></g><g><title>[libc.so.6] (41 samples, 1.89%)</title><rect x="94.9239%" y="853" width="1.8920%" height="15" fill="rgb(216,158,51)" fg:x="2057" fg:w="41"/><text x="95.1739%" y="863.50">[..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.51%)</title><rect x="96.8159%" y="965" width="0.5076%" height="15" fill="rgb(233,14,44)" fg:x="2098" fg:w="11"/><text x="97.0659%" y="975.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (3 samples, 0.14%)</title><rect x="97.3235%" y="965" width="0.1384%" height="15" fill="rgb(237,97,39)" fg:x="2109" fg:w="3"/><text x="97.5735%" y="975.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (3 samples, 0.14%)</title><rect x="97.3235%" y="949" width="0.1384%" height="15" fill="rgb(218,198,43)" fg:x="2109" fg:w="3"/><text x="97.5735%" y="959.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.14%)</title><rect x="97.3235%" y="933" width="0.1384%" height="15" fill="rgb(231,104,20)" fg:x="2109" fg:w="3"/><text x="97.5735%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (3 samples, 0.14%)</title><rect x="97.3235%" y="917" width="0.1384%" height="15" fill="rgb(254,36,13)" fg:x="2109" fg:w="3"/><text x="97.5735%" y="927.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (3 samples, 0.14%)</title><rect x="97.3235%" y="901" width="0.1384%" height="15" fill="rgb(248,14,50)" fg:x="2109" fg:w="3"/><text x="97.5735%" y="911.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (3 samples, 0.14%)</title><rect x="97.3235%" y="885" width="0.1384%" height="15" fill="rgb(217,107,29)" fg:x="2109" fg:w="3"/><text x="97.5735%" y="895.50"></text></g><g><title>core::ptr::write (3 samples, 0.14%)</title><rect x="97.3235%" y="869" width="0.1384%" height="15" fill="rgb(251,169,33)" fg:x="2109" fg:w="3"/><text x="97.5735%" y="879.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.23%)</title><rect x="97.4619%" y="853" width="0.2307%" height="15" fill="rgb(217,108,32)" fg:x="2112" fg:w="5"/><text x="97.7119%" y="863.50"></text></g><g><title>[unknown] (4 samples, 0.18%)</title><rect x="97.5081%" y="837" width="0.1846%" height="15" fill="rgb(219,66,42)" fg:x="2113" fg:w="4"/><text x="97.7581%" y="847.50"></text></g><g><title>[unknown] (4 samples, 0.18%)</title><rect x="97.5081%" y="821" width="0.1846%" height="15" fill="rgb(206,180,7)" fg:x="2113" fg:w="4"/><text x="97.7581%" y="831.50"></text></g><g><title>[unknown] (4 samples, 0.18%)</title><rect x="97.5081%" y="805" width="0.1846%" height="15" fill="rgb(208,226,31)" fg:x="2113" fg:w="4"/><text x="97.7581%" y="815.50"></text></g><g><title>[unknown] (4 samples, 0.18%)</title><rect x="97.5081%" y="789" width="0.1846%" height="15" fill="rgb(218,26,49)" fg:x="2113" fg:w="4"/><text x="97.7581%" y="799.50"></text></g><g><title>[unknown] (4 samples, 0.18%)</title><rect x="97.5081%" y="773" width="0.1846%" height="15" fill="rgb(233,197,48)" fg:x="2113" fg:w="4"/><text x="97.7581%" y="783.50"></text></g><g><title>[unknown] (4 samples, 0.18%)</title><rect x="97.5081%" y="757" width="0.1846%" height="15" fill="rgb(252,181,51)" fg:x="2113" fg:w="4"/><text x="97.7581%" y="767.50"></text></g><g><title>[unknown] (4 samples, 0.18%)</title><rect x="97.5081%" y="741" width="0.1846%" height="15" fill="rgb(253,90,19)" fg:x="2113" fg:w="4"/><text x="97.7581%" y="751.50"></text></g><g><title>[unknown] (4 samples, 0.18%)</title><rect x="97.5081%" y="725" width="0.1846%" height="15" fill="rgb(215,171,30)" fg:x="2113" fg:w="4"/><text x="97.7581%" y="735.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="97.5542%" y="709" width="0.1384%" height="15" fill="rgb(214,222,9)" fg:x="2114" fg:w="3"/><text x="97.8042%" y="719.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="97.5542%" y="693" width="0.1384%" height="15" fill="rgb(223,3,22)" fg:x="2114" fg:w="3"/><text x="97.8042%" y="703.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.09%)</title><rect x="97.7388%" y="789" width="0.0923%" height="15" fill="rgb(225,196,46)" fg:x="2118" fg:w="2"/><text x="97.9888%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.09%)</title><rect x="97.7388%" y="773" width="0.0923%" height="15" fill="rgb(209,110,37)" fg:x="2118" fg:w="2"/><text x="97.9888%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.09%)</title><rect x="97.7388%" y="757" width="0.0923%" height="15" fill="rgb(249,89,12)" fg:x="2118" fg:w="2"/><text x="97.9888%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.09%)</title><rect x="97.7388%" y="741" width="0.0923%" height="15" fill="rgb(226,27,33)" fg:x="2118" fg:w="2"/><text x="97.9888%" y="751.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.09%)</title><rect x="97.7388%" y="725" width="0.0923%" height="15" fill="rgb(213,82,22)" fg:x="2118" fg:w="2"/><text x="97.9888%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.09%)</title><rect x="98.6617%" y="661" width="0.0923%" height="15" fill="rgb(248,140,0)" fg:x="2138" fg:w="2"/><text x="98.9117%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (23 samples, 1.06%)</title><rect x="97.8311%" y="693" width="1.0614%" height="15" fill="rgb(228,106,3)" fg:x="2120" fg:w="23"/><text x="98.0811%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (22 samples, 1.02%)</title><rect x="97.8772%" y="677" width="1.0152%" height="15" fill="rgb(209,23,37)" fg:x="2121" fg:w="22"/><text x="98.1272%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.14%)</title><rect x="98.7540%" y="661" width="0.1384%" height="15" fill="rgb(241,93,50)" fg:x="2140" fg:w="3"/><text x="99.0040%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (27 samples, 1.25%)</title><rect x="97.6927%" y="853" width="1.2460%" height="15" fill="rgb(253,46,43)" fg:x="2117" fg:w="27"/><text x="97.9427%" y="863.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (27 samples, 1.25%)</title><rect x="97.6927%" y="837" width="1.2460%" height="15" fill="rgb(226,206,43)" fg:x="2117" fg:w="27"/><text x="97.9427%" y="847.50"></text></g><g><title>hashbrown::map::make_hash (27 samples, 1.25%)</title><rect x="97.6927%" y="821" width="1.2460%" height="15" fill="rgb(217,54,7)" fg:x="2117" fg:w="27"/><text x="97.9427%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (27 samples, 1.25%)</title><rect x="97.6927%" y="805" width="1.2460%" height="15" fill="rgb(223,5,52)" fg:x="2117" fg:w="27"/><text x="97.9427%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (24 samples, 1.11%)</title><rect x="97.8311%" y="789" width="1.1075%" height="15" fill="rgb(206,52,46)" fg:x="2120" fg:w="24"/><text x="98.0811%" y="799.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (24 samples, 1.11%)</title><rect x="97.8311%" y="773" width="1.1075%" height="15" fill="rgb(253,136,11)" fg:x="2120" fg:w="24"/><text x="98.0811%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (24 samples, 1.11%)</title><rect x="97.8311%" y="757" width="1.1075%" height="15" fill="rgb(208,106,33)" fg:x="2120" fg:w="24"/><text x="98.0811%" y="767.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (24 samples, 1.11%)</title><rect x="97.8311%" y="741" width="1.1075%" height="15" fill="rgb(206,54,4)" fg:x="2120" fg:w="24"/><text x="98.0811%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (24 samples, 1.11%)</title><rect x="97.8311%" y="725" width="1.1075%" height="15" fill="rgb(213,3,15)" fg:x="2120" fg:w="24"/><text x="98.0811%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (24 samples, 1.11%)</title><rect x="97.8311%" y="709" width="1.1075%" height="15" fill="rgb(252,211,39)" fg:x="2120" fg:w="24"/><text x="98.0811%" y="719.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.05%)</title><rect x="98.8925%" y="693" width="0.0461%" height="15" fill="rgb(223,6,36)" fg:x="2143" fg:w="1"/><text x="99.1425%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="98.8925%" y="677" width="0.0461%" height="15" fill="rgb(252,169,45)" fg:x="2143" fg:w="1"/><text x="99.1425%" y="687.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.05%)</title><rect x="98.8925%" y="661" width="0.0461%" height="15" fill="rgb(212,48,26)" fg:x="2143" fg:w="1"/><text x="99.1425%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket_ptr (2 samples, 0.09%)</title><rect x="98.9386%" y="853" width="0.0923%" height="15" fill="rgb(251,102,48)" fg:x="2144" fg:w="2"/><text x="99.1886%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (1 samples, 0.05%)</title><rect x="99.0309%" y="853" width="0.0461%" height="15" fill="rgb(243,208,16)" fg:x="2146" fg:w="1"/><text x="99.2809%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (1 samples, 0.05%)</title><rect x="99.0309%" y="837" width="0.0461%" height="15" fill="rgb(219,96,24)" fg:x="2146" fg:w="1"/><text x="99.2809%" y="847.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.05%)</title><rect x="99.0309%" y="821" width="0.0461%" height="15" fill="rgb(219,33,29)" fg:x="2146" fg:w="1"/><text x="99.2809%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (37 samples, 1.71%)</title><rect x="97.4619%" y="933" width="1.7074%" height="15" fill="rgb(223,176,5)" fg:x="2112" fg:w="37"/><text x="97.7119%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (37 samples, 1.71%)</title><rect x="97.4619%" y="917" width="1.7074%" height="15" fill="rgb(228,140,14)" fg:x="2112" fg:w="37"/><text x="97.7119%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (37 samples, 1.71%)</title><rect x="97.4619%" y="901" width="1.7074%" height="15" fill="rgb(217,179,31)" fg:x="2112" fg:w="37"/><text x="97.7119%" y="911.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (37 samples, 1.71%)</title><rect x="97.4619%" y="885" width="1.7074%" height="15" fill="rgb(230,9,30)" fg:x="2112" fg:w="37"/><text x="97.7119%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (37 samples, 1.71%)</title><rect x="97.4619%" y="869" width="1.7074%" height="15" fill="rgb(230,136,20)" fg:x="2112" fg:w="37"/><text x="97.7119%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (2 samples, 0.09%)</title><rect x="99.0771%" y="853" width="0.0923%" height="15" fill="rgb(215,210,22)" fg:x="2147" fg:w="2"/><text x="99.3271%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (2 samples, 0.09%)</title><rect x="99.0771%" y="837" width="0.0923%" height="15" fill="rgb(218,43,5)" fg:x="2147" fg:w="2"/><text x="99.3271%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (2 samples, 0.09%)</title><rect x="99.0771%" y="821" width="0.0923%" height="15" fill="rgb(216,11,5)" fg:x="2147" fg:w="2"/><text x="99.3271%" y="831.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (2 samples, 0.09%)</title><rect x="99.0771%" y="805" width="0.0923%" height="15" fill="rgb(209,82,29)" fg:x="2147" fg:w="2"/><text x="99.3271%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.09%)</title><rect x="99.0771%" y="789" width="0.0923%" height="15" fill="rgb(244,115,12)" fg:x="2147" fg:w="2"/><text x="99.3271%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.09%)</title><rect x="99.0771%" y="773" width="0.0923%" height="15" fill="rgb(222,82,18)" fg:x="2147" fg:w="2"/><text x="99.3271%" y="783.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.09%)</title><rect x="99.0771%" y="757" width="0.0923%" height="15" fill="rgb(249,227,8)" fg:x="2147" fg:w="2"/><text x="99.3271%" y="767.50"></text></g><g><title>malloc (2 samples, 0.09%)</title><rect x="99.0771%" y="741" width="0.0923%" height="15" fill="rgb(253,141,45)" fg:x="2147" fg:w="2"/><text x="99.3271%" y="751.50"></text></g><g><title>[libc.so.6] (2 samples, 0.09%)</title><rect x="99.0771%" y="725" width="0.0923%" height="15" fill="rgb(234,184,4)" fg:x="2147" fg:w="2"/><text x="99.3271%" y="735.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="99.1232%" y="709" width="0.0461%" height="15" fill="rgb(218,194,23)" fg:x="2148" fg:w="1"/><text x="99.3732%" y="719.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.09%)</title><rect x="99.1694%" y="901" width="0.0923%" height="15" fill="rgb(235,66,41)" fg:x="2149" fg:w="2"/><text x="99.4194%" y="911.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.09%)</title><rect x="99.1694%" y="885" width="0.0923%" height="15" fill="rgb(245,217,1)" fg:x="2149" fg:w="2"/><text x="99.4194%" y="895.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.09%)</title><rect x="99.1694%" y="869" width="0.0923%" height="15" fill="rgb(229,91,1)" fg:x="2149" fg:w="2"/><text x="99.4194%" y="879.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.09%)</title><rect x="99.1694%" y="853" width="0.0923%" height="15" fill="rgb(207,101,30)" fg:x="2149" fg:w="2"/><text x="99.4194%" y="863.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.09%)</title><rect x="99.1694%" y="837" width="0.0923%" height="15" fill="rgb(223,82,49)" fg:x="2149" fg:w="2"/><text x="99.4194%" y="847.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.05%)</title><rect x="99.2617%" y="901" width="0.0461%" height="15" fill="rgb(218,167,17)" fg:x="2151" fg:w="1"/><text x="99.5117%" y="911.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.05%)</title><rect x="99.2617%" y="885" width="0.0461%" height="15" fill="rgb(208,103,14)" fg:x="2151" fg:w="1"/><text x="99.5117%" y="895.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.05%)</title><rect x="99.2617%" y="869" width="0.0461%" height="15" fill="rgb(238,20,8)" fg:x="2151" fg:w="1"/><text x="99.5117%" y="879.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.05%)</title><rect x="99.2617%" y="853" width="0.0461%" height="15" fill="rgb(218,80,54)" fg:x="2151" fg:w="1"/><text x="99.5117%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.05%)</title><rect x="99.3539%" y="789" width="0.0461%" height="15" fill="rgb(240,144,17)" fg:x="2153" fg:w="1"/><text x="99.6039%" y="799.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.05%)</title><rect x="99.3539%" y="773" width="0.0461%" height="15" fill="rgb(245,27,50)" fg:x="2153" fg:w="1"/><text x="99.6039%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.14%)</title><rect x="99.3078%" y="805" width="0.1384%" height="15" fill="rgb(251,51,7)" fg:x="2152" fg:w="3"/><text x="99.5578%" y="815.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.05%)</title><rect x="99.4001%" y="789" width="0.0461%" height="15" fill="rgb(245,217,29)" fg:x="2154" fg:w="1"/><text x="99.6501%" y="799.50"></text></g><g><title>hashbrown::map::make_insert_hash (7 samples, 0.32%)</title><rect x="99.1694%" y="933" width="0.3230%" height="15" fill="rgb(221,176,29)" fg:x="2149" fg:w="7"/><text x="99.4194%" y="943.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.32%)</title><rect x="99.1694%" y="917" width="0.3230%" height="15" fill="rgb(212,180,24)" fg:x="2149" fg:w="7"/><text x="99.4194%" y="927.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.18%)</title><rect x="99.3078%" y="901" width="0.1846%" height="15" fill="rgb(254,24,2)" fg:x="2152" fg:w="4"/><text x="99.5578%" y="911.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (4 samples, 0.18%)</title><rect x="99.3078%" y="885" width="0.1846%" height="15" fill="rgb(230,100,2)" fg:x="2152" fg:w="4"/><text x="99.5578%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (4 samples, 0.18%)</title><rect x="99.3078%" y="869" width="0.1846%" height="15" fill="rgb(219,142,25)" fg:x="2152" fg:w="4"/><text x="99.5578%" y="879.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (4 samples, 0.18%)</title><rect x="99.3078%" y="853" width="0.1846%" height="15" fill="rgb(240,73,43)" fg:x="2152" fg:w="4"/><text x="99.5578%" y="863.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (4 samples, 0.18%)</title><rect x="99.3078%" y="837" width="0.1846%" height="15" fill="rgb(214,114,15)" fg:x="2152" fg:w="4"/><text x="99.5578%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (4 samples, 0.18%)</title><rect x="99.3078%" y="821" width="0.1846%" height="15" fill="rgb(207,130,4)" fg:x="2152" fg:w="4"/><text x="99.5578%" y="831.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.05%)</title><rect x="99.4462%" y="805" width="0.0461%" height="15" fill="rgb(221,25,40)" fg:x="2155" fg:w="1"/><text x="99.6962%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="99.4462%" y="789" width="0.0461%" height="15" fill="rgb(241,184,7)" fg:x="2155" fg:w="1"/><text x="99.6962%" y="799.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.05%)</title><rect x="99.4462%" y="773" width="0.0461%" height="15" fill="rgb(235,159,4)" fg:x="2155" fg:w="1"/><text x="99.6962%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="99.6308%" y="901" width="0.0461%" height="15" fill="rgb(214,87,48)" fg:x="2159" fg:w="1"/><text x="99.8808%" y="911.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.05%)</title><rect x="99.6308%" y="885" width="0.0461%" height="15" fill="rgb(246,198,24)" fg:x="2159" fg:w="1"/><text x="99.8808%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.09%)</title><rect x="99.6770%" y="901" width="0.0923%" height="15" fill="rgb(209,66,40)" fg:x="2160" fg:w="2"/><text x="99.9270%" y="911.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (2 samples, 0.09%)</title><rect x="99.6770%" y="885" width="0.0923%" height="15" fill="rgb(233,147,39)" fg:x="2160" fg:w="2"/><text x="99.9270%" y="895.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (2 samples, 0.09%)</title><rect x="99.6770%" y="869" width="0.0923%" height="15" fill="rgb(231,145,52)" fg:x="2160" fg:w="2"/><text x="99.9270%" y="879.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (2 samples, 0.09%)</title><rect x="99.6770%" y="853" width="0.0923%" height="15" fill="rgb(206,20,26)" fg:x="2160" fg:w="2"/><text x="99.9270%" y="863.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.09%)</title><rect x="99.6770%" y="837" width="0.0923%" height="15" fill="rgb(238,220,4)" fg:x="2160" fg:w="2"/><text x="99.9270%" y="847.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.09%)</title><rect x="99.6770%" y="821" width="0.0923%" height="15" fill="rgb(252,195,42)" fg:x="2160" fg:w="2"/><text x="99.9270%" y="831.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.09%)</title><rect x="99.6770%" y="805" width="0.0923%" height="15" fill="rgb(209,10,6)" fg:x="2160" fg:w="2"/><text x="99.9270%" y="815.50"></text></g><g><title>[libc.so.6] (2 samples, 0.09%)</title><rect x="99.6770%" y="789" width="0.0923%" height="15" fill="rgb(229,3,52)" fg:x="2160" fg:w="2"/><text x="99.9270%" y="799.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.05%)</title><rect x="99.7693%" y="901" width="0.0461%" height="15" fill="rgb(253,49,37)" fg:x="2162" fg:w="1"/><text x="100.0193%" y="911.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.05%)</title><rect x="99.7693%" y="885" width="0.0461%" height="15" fill="rgb(240,103,49)" fg:x="2162" fg:w="1"/><text x="100.0193%" y="895.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.05%)</title><rect x="99.7693%" y="869" width="0.0461%" height="15" fill="rgb(250,182,30)" fg:x="2162" fg:w="1"/><text x="100.0193%" y="879.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.05%)</title><rect x="99.8154%" y="901" width="0.0461%" height="15" fill="rgb(248,8,30)" fg:x="2163" fg:w="1"/><text x="100.0654%" y="911.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.05%)</title><rect x="99.8154%" y="885" width="0.0461%" height="15" fill="rgb(237,120,30)" fg:x="2163" fg:w="1"/><text x="100.0654%" y="895.50"></text></g><g><title>std::panic::catch_unwind (2,129 samples, 98.25%)</title><rect x="1.7074%" y="1109" width="98.2464%" height="15" fill="rgb(221,146,34)" fg:x="37" fg:w="2129"/><text x="1.9574%" y="1119.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,129 samples, 98.25%)</title><rect x="1.7074%" y="1093" width="98.2464%" height="15" fill="rgb(242,55,13)" fg:x="37" fg:w="2129"/><text x="1.9574%" y="1103.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,129 samples, 98.25%)</title><rect x="1.7074%" y="1077" width="98.2464%" height="15" fill="rgb(242,112,31)" fg:x="37" fg:w="2129"/><text x="1.9574%" y="1087.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,129 samples, 98.25%)</title><rect x="1.7074%" y="1061" width="98.2464%" height="15" fill="rgb(249,192,27)" fg:x="37" fg:w="2129"/><text x="1.9574%" y="1071.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (2,129 samples, 98.25%)</title><rect x="1.7074%" y="1045" width="98.2464%" height="15" fill="rgb(208,204,44)" fg:x="37" fg:w="2129"/><text x="1.9574%" y="1055.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,129 samples, 98.25%)</title><rect x="1.7074%" y="1029" width="98.2464%" height="15" fill="rgb(208,93,54)" fg:x="37" fg:w="2129"/><text x="1.9574%" y="1039.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,129 samples, 98.25%)</title><rect x="1.7074%" y="1013" width="98.2464%" height="15" fill="rgb(242,1,31)" fg:x="37" fg:w="2129"/><text x="1.9574%" y="1023.50">core::ops::function::FnOnce::call_once</text></g><g><title>yt_history::main (2,129 samples, 98.25%)</title><rect x="1.7074%" y="997" width="98.2464%" height="15" fill="rgb(241,83,25)" fg:x="37" fg:w="2129"/><text x="1.9574%" y="1007.50">yt_history::main</text></g><g><title>yt_history::model::Models::count_watched_by_video (151 samples, 6.97%)</title><rect x="92.9857%" y="981" width="6.9682%" height="15" fill="rgb(205,169,50)" fg:x="2015" fg:w="151"/><text x="93.2357%" y="991.50">yt_histor..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (54 samples, 2.49%)</title><rect x="97.4619%" y="965" width="2.4919%" height="15" fill="rgb(239,186,37)" fg:x="2112" fg:w="54"/><text x="97.7119%" y="975.50">st..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (54 samples, 2.49%)</title><rect x="97.4619%" y="949" width="2.4919%" height="15" fill="rgb(205,221,10)" fg:x="2112" fg:w="54"/><text x="97.7119%" y="959.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (10 samples, 0.46%)</title><rect x="99.4924%" y="933" width="0.4615%" height="15" fill="rgb(218,196,15)" fg:x="2156" fg:w="10"/><text x="99.7424%" y="943.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (10 samples, 0.46%)</title><rect x="99.4924%" y="917" width="0.4615%" height="15" fill="rgb(218,196,35)" fg:x="2156" fg:w="10"/><text x="99.7424%" y="927.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (2 samples, 0.09%)</title><rect x="99.8616%" y="901" width="0.0923%" height="15" fill="rgb(233,63,24)" fg:x="2164" fg:w="2"/><text x="100.1116%" y="911.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.09%)</title><rect x="99.8616%" y="885" width="0.0923%" height="15" fill="rgb(225,8,4)" fg:x="2164" fg:w="2"/><text x="100.1116%" y="895.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.09%)</title><rect x="99.8616%" y="869" width="0.0923%" height="15" fill="rgb(234,105,35)" fg:x="2164" fg:w="2"/><text x="100.1116%" y="879.50"></text></g><g><title>all (2,167 samples, 100%)</title><rect x="0.0000%" y="1285" width="100.0000%" height="15" fill="rgb(236,21,32)" fg:x="0" fg:w="2167"/><text x="0.2500%" y="1295.50"></text></g><g><title>yt-history (2,167 samples, 100.00%)</title><rect x="0.0000%" y="1269" width="100.0000%" height="15" fill="rgb(228,109,6)" fg:x="0" fg:w="2167"/><text x="0.2500%" y="1279.50">yt-history</text></g><g><title>_start (2,130 samples, 98.29%)</title><rect x="1.7074%" y="1253" width="98.2926%" height="15" fill="rgb(229,215,31)" fg:x="37" fg:w="2130"/><text x="1.9574%" y="1263.50">_start</text></g><g><title>__libc_start_main (2,130 samples, 98.29%)</title><rect x="1.7074%" y="1237" width="98.2926%" height="15" fill="rgb(221,52,54)" fg:x="37" fg:w="2130"/><text x="1.9574%" y="1247.50">__libc_start_main</text></g><g><title>[libc.so.6] (2,130 samples, 98.29%)</title><rect x="1.7074%" y="1221" width="98.2926%" height="15" fill="rgb(252,129,43)" fg:x="37" fg:w="2130"/><text x="1.9574%" y="1231.50">[libc.so.6]</text></g><g><title>main (2,130 samples, 98.29%)</title><rect x="1.7074%" y="1205" width="98.2926%" height="15" fill="rgb(248,183,27)" fg:x="37" fg:w="2130"/><text x="1.9574%" y="1215.50">main</text></g><g><title>std::rt::lang_start_internal (2,130 samples, 98.29%)</title><rect x="1.7074%" y="1189" width="98.2926%" height="15" fill="rgb(250,0,22)" fg:x="37" fg:w="2130"/><text x="1.9574%" y="1199.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,130 samples, 98.29%)</title><rect x="1.7074%" y="1173" width="98.2926%" height="15" fill="rgb(213,166,10)" fg:x="37" fg:w="2130"/><text x="1.9574%" y="1183.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,130 samples, 98.29%)</title><rect x="1.7074%" y="1157" width="98.2926%" height="15" fill="rgb(207,163,36)" fg:x="37" fg:w="2130"/><text x="1.9574%" y="1167.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,130 samples, 98.29%)</title><rect x="1.7074%" y="1141" width="98.2926%" height="15" fill="rgb(208,122,22)" fg:x="37" fg:w="2130"/><text x="1.9574%" y="1151.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (2,130 samples, 98.29%)</title><rect x="1.7074%" y="1125" width="98.2926%" height="15" fill="rgb(207,104,49)" fg:x="37" fg:w="2130"/><text x="1.9574%" y="1135.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::init (1 samples, 0.05%)</title><rect x="99.9539%" y="1109" width="0.0461%" height="15" fill="rgb(248,211,50)" fg:x="2166" fg:w="1"/><text x="100.2039%" y="1119.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.05%)</title><rect x="99.9539%" y="1093" width="0.0461%" height="15" fill="rgb(217,13,45)" fg:x="2166" fg:w="1"/><text x="100.2039%" y="1103.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.05%)</title><rect x="99.9539%" y="1077" width="0.0461%" height="15" fill="rgb(211,216,49)" fg:x="2166" fg:w="1"/><text x="100.2039%" y="1087.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.05%)</title><rect x="99.9539%" y="1061" width="0.0461%" height="15" fill="rgb(221,58,53)" fg:x="2166" fg:w="1"/><text x="100.2039%" y="1071.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.05%)</title><rect x="99.9539%" y="1045" width="0.0461%" height="15" fill="rgb(220,112,41)" fg:x="2166" fg:w="1"/><text x="100.2039%" y="1055.50"></text></g><g><title>fopen (1 samples, 0.05%)</title><rect x="99.9539%" y="1029" width="0.0461%" height="15" fill="rgb(236,38,28)" fg:x="2166" fg:w="1"/><text x="100.2039%" y="1039.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="99.9539%" y="1013" width="0.0461%" height="15" fill="rgb(227,195,22)" fg:x="2166" fg:w="1"/><text x="100.2039%" y="1023.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="99.9539%" y="997" width="0.0461%" height="15" fill="rgb(214,55,33)" fg:x="2166" fg:w="1"/><text x="100.2039%" y="1007.50"></text></g><g><title>getrandom (1 samples, 0.05%)</title><rect x="99.9539%" y="981" width="0.0461%" height="15" fill="rgb(248,80,13)" fg:x="2166" fg:w="1"/><text x="100.2039%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="99.9539%" y="965" width="0.0461%" height="15" fill="rgb(238,52,6)" fg:x="2166" fg:w="1"/><text x="100.2039%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="99.9539%" y="949" width="0.0461%" height="15" fill="rgb(224,198,47)" fg:x="2166" fg:w="1"/><text x="100.2039%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="99.9539%" y="933" width="0.0461%" height="15" fill="rgb(233,171,20)" fg:x="2166" fg:w="1"/><text x="100.2039%" y="943.50"></text></g></svg></svg>