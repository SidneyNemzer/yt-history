<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="854" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="837.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="837.00"> </text><svg id="frames" x="10" width="1180" total_samples="3873"><g><title>[[stack]] (2 samples, 0.05%)</title><rect x="0.0000%" y="773" width="0.0516%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="783.50"></text></g><g><title>read (2 samples, 0.05%)</title><rect x="0.0000%" y="757" width="0.0516%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="0.0000%" y="741" width="0.0516%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="751.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.05%)</title><rect x="0.3098%" y="693" width="0.0516%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="2"/><text x="0.5598%" y="703.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.3357%" y="677" width="0.0258%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="1"/><text x="0.5857%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.3615%" y="693" width="0.0258%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="1"/><text x="0.6115%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.3615%" y="677" width="0.0258%" height="15" fill="rgb(207,160,47)" fg:x="14" fg:w="1"/><text x="0.6115%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.3615%" y="661" width="0.0258%" height="15" fill="rgb(228,23,34)" fg:x="14" fg:w="1"/><text x="0.6115%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.3615%" y="645" width="0.0258%" height="15" fill="rgb(218,30,26)" fg:x="14" fg:w="1"/><text x="0.6115%" y="655.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.21%)</title><rect x="0.2324%" y="709" width="0.2066%" height="15" fill="rgb(220,122,19)" fg:x="9" fg:w="8"/><text x="0.4824%" y="719.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.05%)</title><rect x="0.3873%" y="693" width="0.0516%" height="15" fill="rgb(250,228,42)" fg:x="15" fg:w="2"/><text x="0.6373%" y="703.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.05%)</title><rect x="0.3873%" y="677" width="0.0516%" height="15" fill="rgb(240,193,28)" fg:x="15" fg:w="2"/><text x="0.6373%" y="687.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.05%)</title><rect x="0.3873%" y="661" width="0.0516%" height="15" fill="rgb(216,20,37)" fg:x="15" fg:w="2"/><text x="0.6373%" y="671.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.4131%" y="645" width="0.0258%" height="15" fill="rgb(206,188,39)" fg:x="16" fg:w="1"/><text x="0.6631%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4131%" y="629" width="0.0258%" height="15" fill="rgb(217,207,13)" fg:x="16" fg:w="1"/><text x="0.6631%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4131%" y="613" width="0.0258%" height="15" fill="rgb(231,73,38)" fg:x="16" fg:w="1"/><text x="0.6631%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4131%" y="597" width="0.0258%" height="15" fill="rgb(225,20,46)" fg:x="16" fg:w="1"/><text x="0.6631%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4131%" y="581" width="0.0258%" height="15" fill="rgb(210,31,41)" fg:x="16" fg:w="1"/><text x="0.6631%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4131%" y="565" width="0.0258%" height="15" fill="rgb(221,200,47)" fg:x="16" fg:w="1"/><text x="0.6631%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4131%" y="549" width="0.0258%" height="15" fill="rgb(226,26,5)" fg:x="16" fg:w="1"/><text x="0.6631%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4131%" y="533" width="0.0258%" height="15" fill="rgb(249,33,26)" fg:x="16" fg:w="1"/><text x="0.6631%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4131%" y="517" width="0.0258%" height="15" fill="rgb(235,183,28)" fg:x="16" fg:w="1"/><text x="0.6631%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4131%" y="501" width="0.0258%" height="15" fill="rgb(221,5,38)" fg:x="16" fg:w="1"/><text x="0.6631%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4131%" y="485" width="0.0258%" height="15" fill="rgb(247,18,42)" fg:x="16" fg:w="1"/><text x="0.6631%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (14 samples, 0.36%)</title><rect x="0.1033%" y="725" width="0.3615%" height="15" fill="rgb(241,131,45)" fg:x="4" fg:w="14"/><text x="0.3533%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4389%" y="709" width="0.0258%" height="15" fill="rgb(249,31,29)" fg:x="17" fg:w="1"/><text x="0.6889%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4389%" y="693" width="0.0258%" height="15" fill="rgb(225,111,53)" fg:x="17" fg:w="1"/><text x="0.6889%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4389%" y="677" width="0.0258%" height="15" fill="rgb(238,160,17)" fg:x="17" fg:w="1"/><text x="0.6889%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4389%" y="661" width="0.0258%" height="15" fill="rgb(214,148,48)" fg:x="17" fg:w="1"/><text x="0.6889%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4389%" y="645" width="0.0258%" height="15" fill="rgb(232,36,49)" fg:x="17" fg:w="1"/><text x="0.6889%" y="655.50"></text></g><g><title>[ld-linux-x86-64.so.2] (17 samples, 0.44%)</title><rect x="0.0775%" y="741" width="0.4389%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="17"/><text x="0.3275%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="0.4648%" y="725" width="0.0516%" height="15" fill="rgb(229,88,8)" fg:x="18" fg:w="2"/><text x="0.7148%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4906%" y="709" width="0.0258%" height="15" fill="rgb(213,181,19)" fg:x="19" fg:w="1"/><text x="0.7406%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4906%" y="693" width="0.0258%" height="15" fill="rgb(254,191,54)" fg:x="19" fg:w="1"/><text x="0.7406%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4906%" y="677" width="0.0258%" height="15" fill="rgb(241,83,37)" fg:x="19" fg:w="1"/><text x="0.7406%" y="687.50"></text></g><g><title>[ld-linux-x86-64.so.2] (21 samples, 0.54%)</title><rect x="0.0516%" y="757" width="0.5422%" height="15" fill="rgb(233,36,39)" fg:x="2" fg:w="21"/><text x="0.3016%" y="767.50"></text></g><g><title>[unknown] (3 samples, 0.08%)</title><rect x="0.5164%" y="741" width="0.0775%" height="15" fill="rgb(226,3,54)" fg:x="20" fg:w="3"/><text x="0.7664%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="0.5422%" y="725" width="0.0516%" height="15" fill="rgb(245,192,40)" fg:x="21" fg:w="2"/><text x="0.7922%" y="735.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="0.5422%" y="709" width="0.0516%" height="15" fill="rgb(238,167,29)" fg:x="21" fg:w="2"/><text x="0.7922%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="0.5422%" y="693" width="0.0516%" height="15" fill="rgb(232,182,51)" fg:x="21" fg:w="2"/><text x="0.7922%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="0.5422%" y="677" width="0.0516%" height="15" fill="rgb(231,60,39)" fg:x="21" fg:w="2"/><text x="0.7922%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.5680%" y="661" width="0.0258%" height="15" fill="rgb(208,69,12)" fg:x="22" fg:w="1"/><text x="0.8180%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.5680%" y="645" width="0.0258%" height="15" fill="rgb(235,93,37)" fg:x="22" fg:w="1"/><text x="0.8180%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.5680%" y="629" width="0.0258%" height="15" fill="rgb(213,116,39)" fg:x="22" fg:w="1"/><text x="0.8180%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.5680%" y="613" width="0.0258%" height="15" fill="rgb(222,207,29)" fg:x="22" fg:w="1"/><text x="0.8180%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (23 samples, 0.59%)</title><rect x="0.0516%" y="773" width="0.5939%" height="15" fill="rgb(206,96,30)" fg:x="2" fg:w="23"/><text x="0.3016%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="0.5939%" y="757" width="0.0516%" height="15" fill="rgb(218,138,4)" fg:x="23" fg:w="2"/><text x="0.8439%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.6197%" y="741" width="0.0258%" height="15" fill="rgb(250,191,14)" fg:x="24" fg:w="1"/><text x="0.8697%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.6197%" y="725" width="0.0258%" height="15" fill="rgb(239,60,40)" fg:x="24" fg:w="1"/><text x="0.8697%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.6197%" y="709" width="0.0258%" height="15" fill="rgb(206,27,48)" fg:x="24" fg:w="1"/><text x="0.8697%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.6197%" y="693" width="0.0258%" height="15" fill="rgb(225,35,8)" fg:x="24" fg:w="1"/><text x="0.8697%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.6197%" y="677" width="0.0258%" height="15" fill="rgb(250,213,24)" fg:x="24" fg:w="1"/><text x="0.8697%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.6455%" y="773" width="0.0258%" height="15" fill="rgb(247,123,22)" fg:x="25" fg:w="1"/><text x="0.8955%" y="783.50"></text></g><g><title>yt_history::model::Models::insert_watched (1 samples, 0.03%)</title><rect x="0.6455%" y="757" width="0.0258%" height="15" fill="rgb(231,138,38)" fg:x="25" fg:w="1"/><text x="0.8955%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="0.6455%" y="741" width="0.0258%" height="15" fill="rgb(231,145,46)" fg:x="25" fg:w="1"/><text x="0.8955%" y="751.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="0.6455%" y="725" width="0.0258%" height="15" fill="rgb(251,118,11)" fg:x="25" fg:w="1"/><text x="0.8955%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.6455%" y="709" width="0.0258%" height="15" fill="rgb(217,147,25)" fg:x="25" fg:w="1"/><text x="0.8955%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Channel&gt;&gt; (1 samples, 0.03%)</title><rect x="0.6713%" y="373" width="0.0258%" height="15" fill="rgb(247,81,37)" fg:x="26" fg:w="1"/><text x="0.9213%" y="383.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="0.6713%" y="357" width="0.0258%" height="15" fill="rgb(209,12,38)" fg:x="26" fg:w="1"/><text x="0.9213%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Channel&gt; (1 samples, 0.03%)</title><rect x="0.6713%" y="341" width="0.0258%" height="15" fill="rgb(227,1,9)" fg:x="26" fg:w="1"/><text x="0.9213%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.03%)</title><rect x="0.6713%" y="325" width="0.0258%" height="15" fill="rgb(248,47,43)" fg:x="26" fg:w="1"/><text x="0.9213%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="0.6713%" y="309" width="0.0258%" height="15" fill="rgb(221,10,30)" fg:x="26" fg:w="1"/><text x="0.9213%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="0.6713%" y="293" width="0.0258%" height="15" fill="rgb(210,229,1)" fg:x="26" fg:w="1"/><text x="0.9213%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="0.6713%" y="277" width="0.0258%" height="15" fill="rgb(222,148,37)" fg:x="26" fg:w="1"/><text x="0.9213%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="0.6713%" y="261" width="0.0258%" height="15" fill="rgb(234,67,33)" fg:x="26" fg:w="1"/><text x="0.9213%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="0.6713%" y="245" width="0.0258%" height="15" fill="rgb(247,98,35)" fg:x="26" fg:w="1"/><text x="0.9213%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Video&gt;&gt; (7 samples, 0.18%)</title><rect x="0.6713%" y="421" width="0.1807%" height="15" fill="rgb(247,138,52)" fg:x="26" fg:w="7"/><text x="0.9213%" y="431.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.18%)</title><rect x="0.6713%" y="405" width="0.1807%" height="15" fill="rgb(213,79,30)" fg:x="26" fg:w="7"/><text x="0.9213%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Video&gt; (7 samples, 0.18%)</title><rect x="0.6713%" y="389" width="0.1807%" height="15" fill="rgb(246,177,23)" fg:x="26" fg:w="7"/><text x="0.9213%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (6 samples, 0.15%)</title><rect x="0.6971%" y="373" width="0.1549%" height="15" fill="rgb(230,62,27)" fg:x="27" fg:w="6"/><text x="0.9471%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6 samples, 0.15%)</title><rect x="0.6971%" y="357" width="0.1549%" height="15" fill="rgb(216,154,8)" fg:x="27" fg:w="6"/><text x="0.9471%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6 samples, 0.15%)</title><rect x="0.6971%" y="341" width="0.1549%" height="15" fill="rgb(244,35,45)" fg:x="27" fg:w="6"/><text x="0.9471%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.15%)</title><rect x="0.6971%" y="325" width="0.1549%" height="15" fill="rgb(251,115,12)" fg:x="27" fg:w="6"/><text x="0.9471%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.15%)</title><rect x="0.6971%" y="309" width="0.1549%" height="15" fill="rgb(240,54,50)" fg:x="27" fg:w="6"/><text x="0.9471%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.15%)</title><rect x="0.6971%" y="293" width="0.1549%" height="15" fill="rgb(233,84,52)" fg:x="27" fg:w="6"/><text x="0.9471%" y="303.50"></text></g><g><title>cfree (6 samples, 0.15%)</title><rect x="0.6971%" y="277" width="0.1549%" height="15" fill="rgb(207,117,47)" fg:x="27" fg:w="6"/><text x="0.9471%" y="287.50"></text></g><g><title>[libc.so.6] (3 samples, 0.08%)</title><rect x="0.7746%" y="261" width="0.0775%" height="15" fill="rgb(249,43,39)" fg:x="30" fg:w="3"/><text x="1.0246%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.23%)</title><rect x="0.6713%" y="501" width="0.2324%" height="15" fill="rgb(209,38,44)" fg:x="26" fg:w="9"/><text x="0.9213%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (9 samples, 0.23%)</title><rect x="0.6713%" y="485" width="0.2324%" height="15" fill="rgb(236,212,23)" fg:x="26" fg:w="9"/><text x="0.9213%" y="495.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (9 samples, 0.23%)</title><rect x="0.6713%" y="469" width="0.2324%" height="15" fill="rgb(242,79,21)" fg:x="26" fg:w="9"/><text x="0.9213%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (9 samples, 0.23%)</title><rect x="0.6713%" y="453" width="0.2324%" height="15" fill="rgb(211,96,35)" fg:x="26" fg:w="9"/><text x="0.9213%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::rc::Rc&lt;yt_history::model::Video&gt;)&gt; (9 samples, 0.23%)</title><rect x="0.6713%" y="437" width="0.2324%" height="15" fill="rgb(253,215,40)" fg:x="26" fg:w="9"/><text x="0.9213%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.05%)</title><rect x="0.8521%" y="421" width="0.0516%" height="15" fill="rgb(211,81,21)" fg:x="33" fg:w="2"/><text x="1.1021%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.05%)</title><rect x="0.8521%" y="405" width="0.0516%" height="15" fill="rgb(208,190,38)" fg:x="33" fg:w="2"/><text x="1.1021%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.05%)</title><rect x="0.8521%" y="389" width="0.0516%" height="15" fill="rgb(235,213,38)" fg:x="33" fg:w="2"/><text x="1.1021%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="0.8521%" y="373" width="0.0516%" height="15" fill="rgb(237,122,38)" fg:x="33" fg:w="2"/><text x="1.1021%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.05%)</title><rect x="0.8521%" y="357" width="0.0516%" height="15" fill="rgb(244,218,35)" fg:x="33" fg:w="2"/><text x="1.1021%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.05%)</title><rect x="0.8521%" y="341" width="0.0516%" height="15" fill="rgb(240,68,47)" fg:x="33" fg:w="2"/><text x="1.1021%" y="351.50"></text></g><g><title>cfree (2 samples, 0.05%)</title><rect x="0.8521%" y="325" width="0.0516%" height="15" fill="rgb(210,16,53)" fg:x="33" fg:w="2"/><text x="1.1021%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (2 samples, 0.05%)</title><rect x="0.9037%" y="501" width="0.0516%" height="15" fill="rgb(235,124,12)" fg:x="35" fg:w="2"/><text x="1.1537%" y="511.50"></text></g><g><title>alloc::slice::stable_sort (2 samples, 0.05%)</title><rect x="0.9037%" y="485" width="0.0516%" height="15" fill="rgb(224,169,11)" fg:x="35" fg:w="2"/><text x="1.1537%" y="495.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.05%)</title><rect x="0.9037%" y="469" width="0.0516%" height="15" fill="rgb(250,166,2)" fg:x="35" fg:w="2"/><text x="1.1537%" y="479.50"></text></g><g><title>core::slice::sort::merge (2 samples, 0.05%)</title><rect x="0.9037%" y="453" width="0.0516%" height="15" fill="rgb(242,216,29)" fg:x="35" fg:w="2"/><text x="1.1537%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (1 samples, 0.03%)</title><rect x="0.9295%" y="437" width="0.0258%" height="15" fill="rgb(230,116,27)" fg:x="36" fg:w="1"/><text x="1.1795%" y="447.50"></text></g><g><title>yt_history::main::{{closure}} (1 samples, 0.03%)</title><rect x="0.9295%" y="421" width="0.0258%" height="15" fill="rgb(228,99,48)" fg:x="36" fg:w="1"/><text x="1.1795%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.03%)</title><rect x="0.9295%" y="405" width="0.0258%" height="15" fill="rgb(253,11,6)" fg:x="36" fg:w="1"/><text x="1.1795%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;)&gt; (2 samples, 0.05%)</title><rect x="0.9553%" y="373" width="0.0516%" height="15" fill="rgb(247,143,39)" fg:x="37" fg:w="2"/><text x="1.2053%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Video&gt;&gt; (2 samples, 0.05%)</title><rect x="0.9553%" y="357" width="0.0516%" height="15" fill="rgb(236,97,10)" fg:x="37" fg:w="2"/><text x="1.2053%" y="367.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="0.9553%" y="341" width="0.0516%" height="15" fill="rgb(233,208,19)" fg:x="37" fg:w="2"/><text x="1.2053%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;)&gt;&gt; (4 samples, 0.10%)</title><rect x="0.9553%" y="501" width="0.1033%" height="15" fill="rgb(216,164,2)" fg:x="37" fg:w="4"/><text x="1.2053%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;),std::collections::hash::map::RandomState&gt;&gt; (4 samples, 0.10%)</title><rect x="0.9553%" y="485" width="0.1033%" height="15" fill="rgb(220,129,5)" fg:x="37" fg:w="4"/><text x="1.2053%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;))&gt;&gt; (4 samples, 0.10%)</title><rect x="0.9553%" y="469" width="0.1033%" height="15" fill="rgb(242,17,10)" fg:x="37" fg:w="4"/><text x="1.2053%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.10%)</title><rect x="0.9553%" y="453" width="0.1033%" height="15" fill="rgb(242,107,0)" fg:x="37" fg:w="4"/><text x="1.2053%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (4 samples, 0.10%)</title><rect x="0.9553%" y="437" width="0.1033%" height="15" fill="rgb(251,28,31)" fg:x="37" fg:w="4"/><text x="1.2053%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (4 samples, 0.10%)</title><rect x="0.9553%" y="421" width="0.1033%" height="15" fill="rgb(233,223,10)" fg:x="37" fg:w="4"/><text x="1.2053%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (4 samples, 0.10%)</title><rect x="0.9553%" y="405" width="0.1033%" height="15" fill="rgb(215,21,27)" fg:x="37" fg:w="4"/><text x="1.2053%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;))&gt; (4 samples, 0.10%)</title><rect x="0.9553%" y="389" width="0.1033%" height="15" fill="rgb(232,23,21)" fg:x="37" fg:w="4"/><text x="1.2053%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.05%)</title><rect x="1.0070%" y="373" width="0.0516%" height="15" fill="rgb(244,5,23)" fg:x="39" fg:w="2"/><text x="1.2570%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.05%)</title><rect x="1.0070%" y="357" width="0.0516%" height="15" fill="rgb(226,81,46)" fg:x="39" fg:w="2"/><text x="1.2570%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.05%)</title><rect x="1.0070%" y="341" width="0.0516%" height="15" fill="rgb(247,70,30)" fg:x="39" fg:w="2"/><text x="1.2570%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="1.0070%" y="325" width="0.0516%" height="15" fill="rgb(212,68,19)" fg:x="39" fg:w="2"/><text x="1.2570%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.05%)</title><rect x="1.0070%" y="309" width="0.0516%" height="15" fill="rgb(240,187,13)" fg:x="39" fg:w="2"/><text x="1.2570%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.05%)</title><rect x="1.0070%" y="293" width="0.0516%" height="15" fill="rgb(223,113,26)" fg:x="39" fg:w="2"/><text x="1.2570%" y="303.50"></text></g><g><title>cfree (2 samples, 0.05%)</title><rect x="1.0070%" y="277" width="0.0516%" height="15" fill="rgb(206,192,2)" fg:x="39" fg:w="2"/><text x="1.2570%" y="287.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="1.0328%" y="261" width="0.0258%" height="15" fill="rgb(241,108,4)" fg:x="40" fg:w="1"/><text x="1.2828%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;yt_history::model::Watched&gt;&gt; (1 samples, 0.03%)</title><rect x="1.0586%" y="485" width="0.0258%" height="15" fill="rgb(247,173,49)" fg:x="41" fg:w="1"/><text x="1.3086%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="1.0586%" y="469" width="0.0258%" height="15" fill="rgb(224,114,35)" fg:x="41" fg:w="1"/><text x="1.3086%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[yt_history::model::Watched]&gt; (1 samples, 0.03%)</title><rect x="1.0586%" y="453" width="0.0258%" height="15" fill="rgb(245,159,27)" fg:x="41" fg:w="1"/><text x="1.3086%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="1.0844%" y="437" width="0.0258%" height="15" fill="rgb(245,172,44)" fg:x="42" fg:w="1"/><text x="1.3344%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.03%)</title><rect x="1.0844%" y="421" width="0.0258%" height="15" fill="rgb(236,23,11)" fg:x="42" fg:w="1"/><text x="1.3344%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.03%)</title><rect x="1.0844%" y="405" width="0.0258%" height="15" fill="rgb(205,117,38)" fg:x="42" fg:w="1"/><text x="1.3344%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.03%)</title><rect x="1.0844%" y="389" width="0.0258%" height="15" fill="rgb(237,72,25)" fg:x="42" fg:w="1"/><text x="1.3344%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::rc::Rc&lt;yt_history::model::Channel&gt;)&gt; (1 samples, 0.03%)</title><rect x="1.0844%" y="373" width="0.0258%" height="15" fill="rgb(244,70,9)" fg:x="42" fg:w="1"/><text x="1.3344%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.03%)</title><rect x="1.0844%" y="357" width="0.0258%" height="15" fill="rgb(217,125,39)" fg:x="42" fg:w="1"/><text x="1.3344%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="1.0844%" y="341" width="0.0258%" height="15" fill="rgb(235,36,10)" fg:x="42" fg:w="1"/><text x="1.3344%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="1.0844%" y="325" width="0.0258%" height="15" fill="rgb(251,123,47)" fg:x="42" fg:w="1"/><text x="1.3344%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="1.0844%" y="309" width="0.0258%" height="15" fill="rgb(221,13,13)" fg:x="42" fg:w="1"/><text x="1.3344%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="1.0844%" y="293" width="0.0258%" height="15" fill="rgb(238,131,9)" fg:x="42" fg:w="1"/><text x="1.3344%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="1.0844%" y="277" width="0.0258%" height="15" fill="rgb(211,50,8)" fg:x="42" fg:w="1"/><text x="1.3344%" y="287.50"></text></g><g><title>cfree (1 samples, 0.03%)</title><rect x="1.0844%" y="261" width="0.0258%" height="15" fill="rgb(245,182,24)" fg:x="42" fg:w="1"/><text x="1.3344%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="1.0844%" y="245" width="0.0258%" height="15" fill="rgb(242,14,37)" fg:x="42" fg:w="1"/><text x="1.3344%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Models&gt; (3 samples, 0.08%)</title><rect x="1.0586%" y="501" width="0.0775%" height="15" fill="rgb(246,228,12)" fg:x="41" fg:w="3"/><text x="1.3086%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,alloc::rc::Rc&lt;yt_history::model::Channel&gt;&gt;&gt; (2 samples, 0.05%)</title><rect x="1.0844%" y="485" width="0.0516%" height="15" fill="rgb(213,55,15)" fg:x="42" fg:w="2"/><text x="1.3344%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,alloc::rc::Rc&lt;yt_history::model::Channel&gt;,std::collections::hash::map::RandomState&gt;&gt; (2 samples, 0.05%)</title><rect x="1.0844%" y="469" width="0.0516%" height="15" fill="rgb(209,9,3)" fg:x="42" fg:w="2"/><text x="1.3344%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,alloc::rc::Rc&lt;yt_history::model::Channel&gt;)&gt;&gt; (2 samples, 0.05%)</title><rect x="1.0844%" y="453" width="0.0516%" height="15" fill="rgb(230,59,30)" fg:x="42" fg:w="2"/><text x="1.3344%" y="463.50"></text></g><g><title>cfree (1 samples, 0.03%)</title><rect x="1.1103%" y="437" width="0.0258%" height="15" fill="rgb(209,121,21)" fg:x="43" fg:w="1"/><text x="1.3603%" y="447.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="1.1103%" y="421" width="0.0258%" height="15" fill="rgb(220,109,13)" fg:x="43" fg:w="1"/><text x="1.3603%" y="431.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="1.1103%" y="405" width="0.0258%" height="15" fill="rgb(232,18,1)" fg:x="43" fg:w="1"/><text x="1.3603%" y="415.50"></text></g><g><title>std::io::stdio::_print (1 samples, 0.03%)</title><rect x="1.1361%" y="501" width="0.0258%" height="15" fill="rgb(215,41,42)" fg:x="44" fg:w="1"/><text x="1.3861%" y="511.50"></text></g><g><title>std::io::stdio::print_to (1 samples, 0.03%)</title><rect x="1.1361%" y="485" width="0.0258%" height="15" fill="rgb(224,123,36)" fg:x="44" fg:w="1"/><text x="1.3861%" y="495.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.03%)</title><rect x="1.1361%" y="469" width="0.0258%" height="15" fill="rgb(240,125,3)" fg:x="44" fg:w="1"/><text x="1.3861%" y="479.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.03%)</title><rect x="1.1361%" y="453" width="0.0258%" height="15" fill="rgb(205,98,50)" fg:x="44" fg:w="1"/><text x="1.3861%" y="463.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.03%)</title><rect x="1.1361%" y="437" width="0.0258%" height="15" fill="rgb(205,185,37)" fg:x="44" fg:w="1"/><text x="1.3861%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.03%)</title><rect x="1.1361%" y="421" width="0.0258%" height="15" fill="rgb(238,207,15)" fg:x="44" fg:w="1"/><text x="1.3861%" y="431.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="1.1361%" y="405" width="0.0258%" height="15" fill="rgb(213,199,42)" fg:x="44" fg:w="1"/><text x="1.3861%" y="415.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.03%)</title><rect x="1.1361%" y="389" width="0.0258%" height="15" fill="rgb(235,201,11)" fg:x="44" fg:w="1"/><text x="1.3861%" y="399.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.03%)</title><rect x="1.1361%" y="373" width="0.0258%" height="15" fill="rgb(207,46,11)" fg:x="44" fg:w="1"/><text x="1.3861%" y="383.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.03%)</title><rect x="1.1361%" y="357" width="0.0258%" height="15" fill="rgb(241,35,35)" fg:x="44" fg:w="1"/><text x="1.3861%" y="367.50"></text></g><g><title>std::sys_common::memchr::memrchr (1 samples, 0.03%)</title><rect x="1.1361%" y="341" width="0.0258%" height="15" fill="rgb(243,32,47)" fg:x="44" fg:w="1"/><text x="1.3861%" y="351.50"></text></g><g><title>std::sys::unix::memchr::memrchr (1 samples, 0.03%)</title><rect x="1.1361%" y="325" width="0.0258%" height="15" fill="rgb(247,202,23)" fg:x="44" fg:w="1"/><text x="1.3861%" y="335.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (1 samples, 0.03%)</title><rect x="1.1361%" y="309" width="0.0258%" height="15" fill="rgb(219,102,11)" fg:x="44" fg:w="1"/><text x="1.3861%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="1.1361%" y="293" width="0.0258%" height="15" fill="rgb(243,110,44)" fg:x="44" fg:w="1"/><text x="1.3861%" y="303.50"></text></g><g><title>cfree (5 samples, 0.13%)</title><rect x="1.1877%" y="421" width="0.1291%" height="15" fill="rgb(222,74,54)" fg:x="46" fg:w="5"/><text x="1.4377%" y="431.50"></text></g><g><title>[libc.so.6] (3 samples, 0.08%)</title><rect x="1.2393%" y="405" width="0.0775%" height="15" fill="rgb(216,99,12)" fg:x="48" fg:w="3"/><text x="1.4893%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.05%)</title><rect x="1.3426%" y="405" width="0.0516%" height="15" fill="rgb(226,22,26)" fg:x="52" fg:w="2"/><text x="1.5926%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.05%)</title><rect x="1.3426%" y="389" width="0.0516%" height="15" fill="rgb(217,163,10)" fg:x="52" fg:w="2"/><text x="1.5926%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.05%)</title><rect x="1.3426%" y="373" width="0.0516%" height="15" fill="rgb(213,25,53)" fg:x="52" fg:w="2"/><text x="1.5926%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="1.3426%" y="357" width="0.0516%" height="15" fill="rgb(252,105,26)" fg:x="52" fg:w="2"/><text x="1.5926%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.05%)</title><rect x="1.3426%" y="341" width="0.0516%" height="15" fill="rgb(220,39,43)" fg:x="52" fg:w="2"/><text x="1.5926%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.05%)</title><rect x="1.3426%" y="325" width="0.0516%" height="15" fill="rgb(229,68,48)" fg:x="52" fg:w="2"/><text x="1.5926%" y="335.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="1.3684%" y="309" width="0.0258%" height="15" fill="rgb(252,8,32)" fg:x="53" fg:w="1"/><text x="1.6184%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="1.3684%" y="293" width="0.0258%" height="15" fill="rgb(223,20,43)" fg:x="53" fg:w="1"/><text x="1.6184%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="1.4201%" y="309" width="0.0258%" height="15" fill="rgb(229,81,49)" fg:x="55" fg:w="1"/><text x="1.6701%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="1.4201%" y="293" width="0.0258%" height="15" fill="rgb(236,28,36)" fg:x="55" fg:w="1"/><text x="1.6701%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.03%)</title><rect x="1.4201%" y="277" width="0.0258%" height="15" fill="rgb(249,185,26)" fg:x="55" fg:w="1"/><text x="1.6701%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="1.4201%" y="261" width="0.0258%" height="15" fill="rgb(249,174,33)" fg:x="55" fg:w="1"/><text x="1.6701%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="1.4201%" y="245" width="0.0258%" height="15" fill="rgb(233,201,37)" fg:x="55" fg:w="1"/><text x="1.6701%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="1.4201%" y="229" width="0.0258%" height="15" fill="rgb(221,78,26)" fg:x="55" fg:w="1"/><text x="1.6701%" y="239.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="1.4201%" y="213" width="0.0258%" height="15" fill="rgb(250,127,30)" fg:x="55" fg:w="1"/><text x="1.6701%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="1.4201%" y="197" width="0.0258%" height="15" fill="rgb(230,49,44)" fg:x="55" fg:w="1"/><text x="1.6701%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="1.4201%" y="181" width="0.0258%" height="15" fill="rgb(229,67,23)" fg:x="55" fg:w="1"/><text x="1.6701%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.08%)</title><rect x="1.3943%" y="389" width="0.0775%" height="15" fill="rgb(249,83,47)" fg:x="54" fg:w="3"/><text x="1.6443%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="1.4201%" y="373" width="0.0516%" height="15" fill="rgb(215,43,3)" fg:x="55" fg:w="2"/><text x="1.6701%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.05%)</title><rect x="1.4201%" y="357" width="0.0516%" height="15" fill="rgb(238,154,13)" fg:x="55" fg:w="2"/><text x="1.6701%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.05%)</title><rect x="1.4201%" y="341" width="0.0516%" height="15" fill="rgb(219,56,2)" fg:x="55" fg:w="2"/><text x="1.6701%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.05%)</title><rect x="1.4201%" y="325" width="0.0516%" height="15" fill="rgb(233,0,4)" fg:x="55" fg:w="2"/><text x="1.6701%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.03%)</title><rect x="1.4459%" y="309" width="0.0258%" height="15" fill="rgb(235,30,7)" fg:x="56" fg:w="1"/><text x="1.6959%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="1.4459%" y="293" width="0.0258%" height="15" fill="rgb(250,79,13)" fg:x="56" fg:w="1"/><text x="1.6959%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="1.4459%" y="277" width="0.0258%" height="15" fill="rgb(211,146,34)" fg:x="56" fg:w="1"/><text x="1.6959%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="1.6008%" y="293" width="0.0258%" height="15" fill="rgb(228,22,38)" fg:x="62" fg:w="1"/><text x="1.8508%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="1.6008%" y="277" width="0.0258%" height="15" fill="rgb(235,168,5)" fg:x="62" fg:w="1"/><text x="1.8508%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="1.6008%" y="261" width="0.0258%" height="15" fill="rgb(221,155,16)" fg:x="62" fg:w="1"/><text x="1.8508%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.13%)</title><rect x="1.5750%" y="325" width="0.1291%" height="15" fill="rgb(215,215,53)" fg:x="61" fg:w="5"/><text x="1.8250%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.13%)</title><rect x="1.5750%" y="309" width="0.1291%" height="15" fill="rgb(223,4,10)" fg:x="61" fg:w="5"/><text x="1.8250%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.08%)</title><rect x="1.6266%" y="293" width="0.0775%" height="15" fill="rgb(234,103,6)" fg:x="63" fg:w="3"/><text x="1.8766%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (3 samples, 0.08%)</title><rect x="1.6266%" y="277" width="0.0775%" height="15" fill="rgb(227,97,0)" fg:x="63" fg:w="3"/><text x="1.8766%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3 samples, 0.08%)</title><rect x="1.6266%" y="261" width="0.0775%" height="15" fill="rgb(234,150,53)" fg:x="63" fg:w="3"/><text x="1.8766%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (3 samples, 0.08%)</title><rect x="1.6266%" y="245" width="0.0775%" height="15" fill="rgb(228,201,54)" fg:x="63" fg:w="3"/><text x="1.8766%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3 samples, 0.08%)</title><rect x="1.6266%" y="229" width="0.0775%" height="15" fill="rgb(222,22,37)" fg:x="63" fg:w="3"/><text x="1.8766%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3 samples, 0.08%)</title><rect x="1.6266%" y="213" width="0.0775%" height="15" fill="rgb(237,53,32)" fg:x="63" fg:w="3"/><text x="1.8766%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.08%)</title><rect x="1.6266%" y="197" width="0.0775%" height="15" fill="rgb(233,25,53)" fg:x="63" fg:w="3"/><text x="1.8766%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.05%)</title><rect x="1.6525%" y="181" width="0.0516%" height="15" fill="rgb(210,40,34)" fg:x="64" fg:w="2"/><text x="1.9025%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="1.6783%" y="165" width="0.0258%" height="15" fill="rgb(241,220,44)" fg:x="65" fg:w="1"/><text x="1.9283%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (8 samples, 0.21%)</title><rect x="1.7299%" y="277" width="0.2066%" height="15" fill="rgb(235,28,35)" fg:x="67" fg:w="8"/><text x="1.9799%" y="287.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (8 samples, 0.21%)</title><rect x="1.7299%" y="261" width="0.2066%" height="15" fill="rgb(210,56,17)" fg:x="67" fg:w="8"/><text x="1.9799%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (8 samples, 0.21%)</title><rect x="1.7299%" y="245" width="0.2066%" height="15" fill="rgb(224,130,29)" fg:x="67" fg:w="8"/><text x="1.9799%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (8 samples, 0.21%)</title><rect x="1.7299%" y="229" width="0.2066%" height="15" fill="rgb(235,212,8)" fg:x="67" fg:w="8"/><text x="1.9799%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8 samples, 0.21%)</title><rect x="1.7299%" y="213" width="0.2066%" height="15" fill="rgb(223,33,50)" fg:x="67" fg:w="8"/><text x="1.9799%" y="223.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (8 samples, 0.21%)</title><rect x="1.7299%" y="197" width="0.2066%" height="15" fill="rgb(219,149,13)" fg:x="67" fg:w="8"/><text x="1.9799%" y="207.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (8 samples, 0.21%)</title><rect x="1.7299%" y="181" width="0.2066%" height="15" fill="rgb(250,156,29)" fg:x="67" fg:w="8"/><text x="1.9799%" y="191.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="1.8848%" y="165" width="0.0516%" height="15" fill="rgb(216,193,19)" fg:x="73" fg:w="2"/><text x="2.1348%" y="175.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.03%)</title><rect x="1.9365%" y="277" width="0.0258%" height="15" fill="rgb(216,135,14)" fg:x="75" fg:w="1"/><text x="2.1865%" y="287.50"></text></g><g><title>yt_history::model::Models::find_channel (22 samples, 0.57%)</title><rect x="1.4717%" y="389" width="0.5680%" height="15" fill="rgb(241,47,5)" fg:x="57" fg:w="22"/><text x="1.7217%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (18 samples, 0.46%)</title><rect x="1.5750%" y="373" width="0.4648%" height="15" fill="rgb(233,42,35)" fg:x="61" fg:w="18"/><text x="1.8250%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (18 samples, 0.46%)</title><rect x="1.5750%" y="357" width="0.4648%" height="15" fill="rgb(231,13,6)" fg:x="61" fg:w="18"/><text x="1.8250%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (18 samples, 0.46%)</title><rect x="1.5750%" y="341" width="0.4648%" height="15" fill="rgb(207,181,40)" fg:x="61" fg:w="18"/><text x="1.8250%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (13 samples, 0.34%)</title><rect x="1.7041%" y="325" width="0.3357%" height="15" fill="rgb(254,173,49)" fg:x="66" fg:w="13"/><text x="1.9541%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (13 samples, 0.34%)</title><rect x="1.7041%" y="309" width="0.3357%" height="15" fill="rgb(221,1,38)" fg:x="66" fg:w="13"/><text x="1.9541%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (13 samples, 0.34%)</title><rect x="1.7041%" y="293" width="0.3357%" height="15" fill="rgb(206,124,46)" fg:x="66" fg:w="13"/><text x="1.9541%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (3 samples, 0.08%)</title><rect x="1.9623%" y="277" width="0.0775%" height="15" fill="rgb(249,21,11)" fg:x="76" fg:w="3"/><text x="2.2123%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3 samples, 0.08%)</title><rect x="1.9623%" y="261" width="0.0775%" height="15" fill="rgb(222,201,40)" fg:x="76" fg:w="3"/><text x="2.2123%" y="271.50"></text></g><g><title>yt_history::model::Models::find_channel (3 samples, 0.08%)</title><rect x="1.9623%" y="245" width="0.0775%" height="15" fill="rgb(235,61,29)" fg:x="76" fg:w="3"/><text x="2.2123%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="2.0398%" y="373" width="0.0258%" height="15" fill="rgb(219,207,3)" fg:x="79" fg:w="1"/><text x="2.2898%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="2.0398%" y="357" width="0.0258%" height="15" fill="rgb(222,56,46)" fg:x="79" fg:w="1"/><text x="2.2898%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.03%)</title><rect x="2.0398%" y="341" width="0.0258%" height="15" fill="rgb(239,76,54)" fg:x="79" fg:w="1"/><text x="2.2898%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.03%)</title><rect x="2.0398%" y="325" width="0.0258%" height="15" fill="rgb(231,124,27)" fg:x="79" fg:w="1"/><text x="2.2898%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.03%)</title><rect x="2.0398%" y="309" width="0.0258%" height="15" fill="rgb(249,195,6)" fg:x="79" fg:w="1"/><text x="2.2898%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="2.0398%" y="293" width="0.0258%" height="15" fill="rgb(237,174,47)" fg:x="79" fg:w="1"/><text x="2.2898%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="2.0398%" y="277" width="0.0258%" height="15" fill="rgb(206,201,31)" fg:x="79" fg:w="1"/><text x="2.2898%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.03%)</title><rect x="2.0398%" y="261" width="0.0258%" height="15" fill="rgb(231,57,52)" fg:x="79" fg:w="1"/><text x="2.2898%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="2.0398%" y="245" width="0.0258%" height="15" fill="rgb(248,177,22)" fg:x="79" fg:w="1"/><text x="2.2898%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="2.0398%" y="229" width="0.0258%" height="15" fill="rgb(215,211,37)" fg:x="79" fg:w="1"/><text x="2.2898%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="2.0398%" y="213" width="0.0258%" height="15" fill="rgb(241,128,51)" fg:x="79" fg:w="1"/><text x="2.2898%" y="223.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="2.0398%" y="197" width="0.0258%" height="15" fill="rgb(227,165,31)" fg:x="79" fg:w="1"/><text x="2.2898%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="2.0398%" y="181" width="0.0258%" height="15" fill="rgb(228,167,24)" fg:x="79" fg:w="1"/><text x="2.2898%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="2.0398%" y="165" width="0.0258%" height="15" fill="rgb(228,143,12)" fg:x="79" fg:w="1"/><text x="2.2898%" y="175.50"></text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.03%)</title><rect x="2.0656%" y="341" width="0.0258%" height="15" fill="rgb(249,149,8)" fg:x="80" fg:w="1"/><text x="2.3156%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="2.0656%" y="325" width="0.0258%" height="15" fill="rgb(243,35,44)" fg:x="80" fg:w="1"/><text x="2.3156%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.03%)</title><rect x="2.0656%" y="309" width="0.0258%" height="15" fill="rgb(246,89,9)" fg:x="80" fg:w="1"/><text x="2.3156%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.03%)</title><rect x="2.0656%" y="293" width="0.0258%" height="15" fill="rgb(233,213,13)" fg:x="80" fg:w="1"/><text x="2.3156%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.03%)</title><rect x="2.0656%" y="277" width="0.0258%" height="15" fill="rgb(233,141,41)" fg:x="80" fg:w="1"/><text x="2.3156%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.03%)</title><rect x="2.0656%" y="261" width="0.0258%" height="15" fill="rgb(239,167,4)" fg:x="80" fg:w="1"/><text x="2.3156%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1 samples, 0.03%)</title><rect x="2.0656%" y="245" width="0.0258%" height="15" fill="rgb(209,217,16)" fg:x="80" fg:w="1"/><text x="2.3156%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1 samples, 0.03%)</title><rect x="2.0656%" y="229" width="0.0258%" height="15" fill="rgb(219,88,35)" fg:x="80" fg:w="1"/><text x="2.3156%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="2.0656%" y="213" width="0.0258%" height="15" fill="rgb(220,193,23)" fg:x="80" fg:w="1"/><text x="2.3156%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="2.0656%" y="197" width="0.0258%" height="15" fill="rgb(230,90,52)" fg:x="80" fg:w="1"/><text x="2.3156%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="2.0656%" y="181" width="0.0258%" height="15" fill="rgb(252,106,19)" fg:x="80" fg:w="1"/><text x="2.3156%" y="191.50"></text></g><g><title>yt_history::model::Models::find_or_create_channel (29 samples, 0.75%)</title><rect x="1.3943%" y="405" width="0.7488%" height="15" fill="rgb(206,74,20)" fg:x="54" fg:w="29"/><text x="1.6443%" y="415.50"></text></g><g><title>yt_history::model::Models::insert_channel (4 samples, 0.10%)</title><rect x="2.0398%" y="389" width="0.1033%" height="15" fill="rgb(230,138,44)" fg:x="79" fg:w="4"/><text x="2.2898%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (3 samples, 0.08%)</title><rect x="2.0656%" y="373" width="0.0775%" height="15" fill="rgb(235,182,43)" fg:x="80" fg:w="3"/><text x="2.3156%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.08%)</title><rect x="2.0656%" y="357" width="0.0775%" height="15" fill="rgb(242,16,51)" fg:x="80" fg:w="3"/><text x="2.3156%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.05%)</title><rect x="2.0914%" y="341" width="0.0516%" height="15" fill="rgb(248,9,4)" fg:x="81" fg:w="2"/><text x="2.3414%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2 samples, 0.05%)</title><rect x="2.0914%" y="325" width="0.0516%" height="15" fill="rgb(210,31,22)" fg:x="81" fg:w="2"/><text x="2.3414%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.05%)</title><rect x="2.0914%" y="309" width="0.0516%" height="15" fill="rgb(239,54,39)" fg:x="81" fg:w="2"/><text x="2.3414%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (2 samples, 0.05%)</title><rect x="2.0914%" y="293" width="0.0516%" height="15" fill="rgb(230,99,41)" fg:x="81" fg:w="2"/><text x="2.3414%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (2 samples, 0.05%)</title><rect x="2.0914%" y="277" width="0.0516%" height="15" fill="rgb(253,106,12)" fg:x="81" fg:w="2"/><text x="2.3414%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (2 samples, 0.05%)</title><rect x="2.0914%" y="261" width="0.0516%" height="15" fill="rgb(213,46,41)" fg:x="81" fg:w="2"/><text x="2.3414%" y="271.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (2 samples, 0.05%)</title><rect x="2.0914%" y="245" width="0.0516%" height="15" fill="rgb(215,133,35)" fg:x="81" fg:w="2"/><text x="2.3414%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.05%)</title><rect x="2.0914%" y="229" width="0.0516%" height="15" fill="rgb(213,28,5)" fg:x="81" fg:w="2"/><text x="2.3414%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.05%)</title><rect x="2.0914%" y="213" width="0.0516%" height="15" fill="rgb(215,77,49)" fg:x="81" fg:w="2"/><text x="2.3414%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.05%)</title><rect x="2.0914%" y="197" width="0.0516%" height="15" fill="rgb(248,100,22)" fg:x="81" fg:w="2"/><text x="2.3414%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (2 samples, 0.05%)</title><rect x="2.0914%" y="181" width="0.0516%" height="15" fill="rgb(208,67,9)" fg:x="81" fg:w="2"/><text x="2.3414%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2 samples, 0.05%)</title><rect x="2.0914%" y="165" width="0.0516%" height="15" fill="rgb(219,133,21)" fg:x="81" fg:w="2"/><text x="2.3414%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (2 samples, 0.05%)</title><rect x="2.0914%" y="149" width="0.0516%" height="15" fill="rgb(246,46,29)" fg:x="81" fg:w="2"/><text x="2.3414%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2 samples, 0.05%)</title><rect x="2.0914%" y="133" width="0.0516%" height="15" fill="rgb(246,185,52)" fg:x="81" fg:w="2"/><text x="2.3414%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2 samples, 0.05%)</title><rect x="2.0914%" y="117" width="0.0516%" height="15" fill="rgb(252,136,11)" fg:x="81" fg:w="2"/><text x="2.3414%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.05%)</title><rect x="2.0914%" y="101" width="0.0516%" height="15" fill="rgb(219,138,53)" fg:x="81" fg:w="2"/><text x="2.3414%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.05%)</title><rect x="2.0914%" y="85" width="0.0516%" height="15" fill="rgb(211,51,23)" fg:x="81" fg:w="2"/><text x="2.3414%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (9 samples, 0.23%)</title><rect x="2.1430%" y="389" width="0.2324%" height="15" fill="rgb(247,221,28)" fg:x="83" fg:w="9"/><text x="2.3930%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (9 samples, 0.23%)</title><rect x="2.1430%" y="373" width="0.2324%" height="15" fill="rgb(251,222,45)" fg:x="83" fg:w="9"/><text x="2.3930%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (9 samples, 0.23%)</title><rect x="2.1430%" y="357" width="0.2324%" height="15" fill="rgb(217,162,53)" fg:x="83" fg:w="9"/><text x="2.3930%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.23%)</title><rect x="2.1430%" y="341" width="0.2324%" height="15" fill="rgb(229,93,14)" fg:x="83" fg:w="9"/><text x="2.3930%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.23%)</title><rect x="2.1430%" y="325" width="0.2324%" height="15" fill="rgb(209,67,49)" fg:x="83" fg:w="9"/><text x="2.3930%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.23%)</title><rect x="2.1430%" y="309" width="0.2324%" height="15" fill="rgb(213,87,29)" fg:x="83" fg:w="9"/><text x="2.3930%" y="319.50"></text></g><g><title>cfree (9 samples, 0.23%)</title><rect x="2.1430%" y="293" width="0.2324%" height="15" fill="rgb(205,151,52)" fg:x="83" fg:w="9"/><text x="2.3930%" y="303.50"></text></g><g><title>[libc.so.6] (9 samples, 0.23%)</title><rect x="2.1430%" y="277" width="0.2324%" height="15" fill="rgb(253,215,39)" fg:x="83" fg:w="9"/><text x="2.3930%" y="287.50"></text></g><g><title>[libc.so.6] (9 samples, 0.23%)</title><rect x="2.1430%" y="261" width="0.2324%" height="15" fill="rgb(221,220,41)" fg:x="83" fg:w="9"/><text x="2.3930%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="2.3754%" y="261" width="0.0258%" height="15" fill="rgb(218,133,21)" fg:x="92" fg:w="1"/><text x="2.6254%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="2.3754%" y="245" width="0.0258%" height="15" fill="rgb(221,193,43)" fg:x="92" fg:w="1"/><text x="2.6254%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.05%)</title><rect x="2.3754%" y="309" width="0.0516%" height="15" fill="rgb(240,128,52)" fg:x="92" fg:w="2"/><text x="2.6254%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.05%)</title><rect x="2.3754%" y="293" width="0.0516%" height="15" fill="rgb(253,114,12)" fg:x="92" fg:w="2"/><text x="2.6254%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.05%)</title><rect x="2.3754%" y="277" width="0.0516%" height="15" fill="rgb(215,223,47)" fg:x="92" fg:w="2"/><text x="2.6254%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.03%)</title><rect x="2.4012%" y="261" width="0.0258%" height="15" fill="rgb(248,225,23)" fg:x="93" fg:w="1"/><text x="2.6512%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="2.4012%" y="245" width="0.0258%" height="15" fill="rgb(250,108,0)" fg:x="93" fg:w="1"/><text x="2.6512%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.08%)</title><rect x="2.3754%" y="341" width="0.0775%" height="15" fill="rgb(228,208,7)" fg:x="92" fg:w="3"/><text x="2.6254%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.08%)</title><rect x="2.3754%" y="325" width="0.0775%" height="15" fill="rgb(244,45,10)" fg:x="92" fg:w="3"/><text x="2.6254%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.03%)</title><rect x="2.4271%" y="309" width="0.0258%" height="15" fill="rgb(207,125,25)" fg:x="94" fg:w="1"/><text x="2.6771%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.03%)</title><rect x="2.4271%" y="293" width="0.0258%" height="15" fill="rgb(210,195,18)" fg:x="94" fg:w="1"/><text x="2.6771%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.03%)</title><rect x="2.4271%" y="277" width="0.0258%" height="15" fill="rgb(249,80,12)" fg:x="94" fg:w="1"/><text x="2.6771%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.03%)</title><rect x="2.4271%" y="261" width="0.0258%" height="15" fill="rgb(221,65,9)" fg:x="94" fg:w="1"/><text x="2.6771%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1 samples, 0.03%)</title><rect x="2.4271%" y="245" width="0.0258%" height="15" fill="rgb(235,49,36)" fg:x="94" fg:w="1"/><text x="2.6771%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1 samples, 0.03%)</title><rect x="2.4271%" y="229" width="0.0258%" height="15" fill="rgb(225,32,20)" fg:x="94" fg:w="1"/><text x="2.6771%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="2.4271%" y="213" width="0.0258%" height="15" fill="rgb(215,141,46)" fg:x="94" fg:w="1"/><text x="2.6771%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="2.4271%" y="197" width="0.0258%" height="15" fill="rgb(250,160,47)" fg:x="94" fg:w="1"/><text x="2.6771%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="2.4787%" y="293" width="0.0258%" height="15" fill="rgb(216,222,40)" fg:x="96" fg:w="1"/><text x="2.7287%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="2.4787%" y="277" width="0.0258%" height="15" fill="rgb(234,217,39)" fg:x="96" fg:w="1"/><text x="2.7287%" y="287.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (11 samples, 0.28%)</title><rect x="2.5045%" y="277" width="0.2840%" height="15" fill="rgb(207,178,40)" fg:x="97" fg:w="11"/><text x="2.7545%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (11 samples, 0.28%)</title><rect x="2.5045%" y="261" width="0.2840%" height="15" fill="rgb(221,136,13)" fg:x="97" fg:w="11"/><text x="2.7545%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (11 samples, 0.28%)</title><rect x="2.5045%" y="245" width="0.2840%" height="15" fill="rgb(249,199,10)" fg:x="97" fg:w="11"/><text x="2.7545%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (11 samples, 0.28%)</title><rect x="2.5045%" y="229" width="0.2840%" height="15" fill="rgb(249,222,13)" fg:x="97" fg:w="11"/><text x="2.7545%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (11 samples, 0.28%)</title><rect x="2.5045%" y="213" width="0.2840%" height="15" fill="rgb(244,185,38)" fg:x="97" fg:w="11"/><text x="2.7545%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (11 samples, 0.28%)</title><rect x="2.5045%" y="197" width="0.2840%" height="15" fill="rgb(236,202,9)" fg:x="97" fg:w="11"/><text x="2.7545%" y="207.50"></text></g><g><title>[libc.so.6] (5 samples, 0.13%)</title><rect x="2.6594%" y="181" width="0.1291%" height="15" fill="rgb(250,229,37)" fg:x="103" fg:w="5"/><text x="2.9094%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (12 samples, 0.31%)</title><rect x="2.5045%" y="293" width="0.3098%" height="15" fill="rgb(206,174,23)" fg:x="97" fg:w="12"/><text x="2.7545%" y="303.50"></text></g><g><title>yt_history::model::Models::find_or_create_video (1 samples, 0.03%)</title><rect x="2.7885%" y="277" width="0.0258%" height="15" fill="rgb(211,33,43)" fg:x="108" fg:w="1"/><text x="3.0385%" y="287.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (21 samples, 0.54%)</title><rect x="2.3754%" y="389" width="0.5422%" height="15" fill="rgb(245,58,50)" fg:x="92" fg:w="21"/><text x="2.6254%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (21 samples, 0.54%)</title><rect x="2.3754%" y="373" width="0.5422%" height="15" fill="rgb(244,68,36)" fg:x="92" fg:w="21"/><text x="2.6254%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (21 samples, 0.54%)</title><rect x="2.3754%" y="357" width="0.5422%" height="15" fill="rgb(232,229,15)" fg:x="92" fg:w="21"/><text x="2.6254%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (18 samples, 0.46%)</title><rect x="2.4529%" y="341" width="0.4648%" height="15" fill="rgb(254,30,23)" fg:x="95" fg:w="18"/><text x="2.7029%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (18 samples, 0.46%)</title><rect x="2.4529%" y="325" width="0.4648%" height="15" fill="rgb(235,160,14)" fg:x="95" fg:w="18"/><text x="2.7029%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (18 samples, 0.46%)</title><rect x="2.4529%" y="309" width="0.4648%" height="15" fill="rgb(212,155,44)" fg:x="95" fg:w="18"/><text x="2.7029%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (4 samples, 0.10%)</title><rect x="2.8144%" y="293" width="0.1033%" height="15" fill="rgb(226,2,50)" fg:x="109" fg:w="4"/><text x="3.0644%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4 samples, 0.10%)</title><rect x="2.8144%" y="277" width="0.1033%" height="15" fill="rgb(234,177,6)" fg:x="109" fg:w="4"/><text x="3.0644%" y="287.50"></text></g><g><title>yt_history::model::Models::find_or_create_video (4 samples, 0.10%)</title><rect x="2.8144%" y="261" width="0.1033%" height="15" fill="rgb(217,24,9)" fg:x="109" fg:w="4"/><text x="3.0644%" y="271.50"></text></g><g><title>yt_history::model::Models::find_or_create_channel (2 samples, 0.05%)</title><rect x="2.9176%" y="389" width="0.0516%" height="15" fill="rgb(220,13,46)" fg:x="113" fg:w="2"/><text x="3.1676%" y="399.50"></text></g><g><title>yt_history::model::Models::find_channel (2 samples, 0.05%)</title><rect x="2.9176%" y="373" width="0.0516%" height="15" fill="rgb(239,221,27)" fg:x="113" fg:w="2"/><text x="3.1676%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.05%)</title><rect x="2.9176%" y="357" width="0.0516%" height="15" fill="rgb(222,198,25)" fg:x="113" fg:w="2"/><text x="3.1676%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.05%)</title><rect x="2.9176%" y="341" width="0.0516%" height="15" fill="rgb(211,99,13)" fg:x="113" fg:w="2"/><text x="3.1676%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.05%)</title><rect x="2.9176%" y="325" width="0.0516%" height="15" fill="rgb(232,111,31)" fg:x="113" fg:w="2"/><text x="3.1676%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.05%)</title><rect x="2.9176%" y="309" width="0.0516%" height="15" fill="rgb(245,82,37)" fg:x="113" fg:w="2"/><text x="3.1676%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.05%)</title><rect x="2.9176%" y="293" width="0.0516%" height="15" fill="rgb(227,149,46)" fg:x="113" fg:w="2"/><text x="3.1676%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.05%)</title><rect x="2.9176%" y="277" width="0.0516%" height="15" fill="rgb(218,36,50)" fg:x="113" fg:w="2"/><text x="3.1676%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (2 samples, 0.05%)</title><rect x="2.9176%" y="261" width="0.0516%" height="15" fill="rgb(226,80,48)" fg:x="113" fg:w="2"/><text x="3.1676%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2 samples, 0.05%)</title><rect x="2.9176%" y="245" width="0.0516%" height="15" fill="rgb(238,224,15)" fg:x="113" fg:w="2"/><text x="3.1676%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (2 samples, 0.05%)</title><rect x="2.9176%" y="229" width="0.0516%" height="15" fill="rgb(241,136,10)" fg:x="113" fg:w="2"/><text x="3.1676%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2 samples, 0.05%)</title><rect x="2.9176%" y="213" width="0.0516%" height="15" fill="rgb(208,32,45)" fg:x="113" fg:w="2"/><text x="3.1676%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2 samples, 0.05%)</title><rect x="2.9176%" y="197" width="0.0516%" height="15" fill="rgb(207,135,9)" fg:x="113" fg:w="2"/><text x="3.1676%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.05%)</title><rect x="2.9176%" y="181" width="0.0516%" height="15" fill="rgb(206,86,44)" fg:x="113" fg:w="2"/><text x="3.1676%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.05%)</title><rect x="2.9176%" y="165" width="0.0516%" height="15" fill="rgb(245,177,15)" fg:x="113" fg:w="2"/><text x="3.1676%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="2.9435%" y="149" width="0.0258%" height="15" fill="rgb(206,64,50)" fg:x="114" fg:w="1"/><text x="3.1935%" y="159.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="2.9693%" y="373" width="0.0258%" height="15" fill="rgb(234,36,40)" fg:x="115" fg:w="1"/><text x="3.2193%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="2.9693%" y="357" width="0.0258%" height="15" fill="rgb(213,64,8)" fg:x="115" fg:w="1"/><text x="3.2193%" y="367.50"></text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.03%)</title><rect x="2.9951%" y="341" width="0.0258%" height="15" fill="rgb(210,75,36)" fg:x="116" fg:w="1"/><text x="3.2451%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="2.9951%" y="325" width="0.0258%" height="15" fill="rgb(229,88,21)" fg:x="116" fg:w="1"/><text x="3.2451%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.03%)</title><rect x="2.9951%" y="309" width="0.0258%" height="15" fill="rgb(252,204,47)" fg:x="116" fg:w="1"/><text x="3.2451%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.03%)</title><rect x="2.9951%" y="293" width="0.0258%" height="15" fill="rgb(208,77,27)" fg:x="116" fg:w="1"/><text x="3.2451%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.03%)</title><rect x="2.9951%" y="277" width="0.0258%" height="15" fill="rgb(221,76,26)" fg:x="116" fg:w="1"/><text x="3.2451%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.03%)</title><rect x="2.9951%" y="261" width="0.0258%" height="15" fill="rgb(225,139,18)" fg:x="116" fg:w="1"/><text x="3.2451%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1 samples, 0.03%)</title><rect x="2.9951%" y="245" width="0.0258%" height="15" fill="rgb(230,137,11)" fg:x="116" fg:w="1"/><text x="3.2451%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1 samples, 0.03%)</title><rect x="2.9951%" y="229" width="0.0258%" height="15" fill="rgb(212,28,1)" fg:x="116" fg:w="1"/><text x="3.2451%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.03%)</title><rect x="2.9951%" y="213" width="0.0258%" height="15" fill="rgb(248,164,17)" fg:x="116" fg:w="1"/><text x="3.2451%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="2.9951%" y="197" width="0.0258%" height="15" fill="rgb(222,171,42)" fg:x="116" fg:w="1"/><text x="3.2451%" y="207.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.03%)</title><rect x="2.9951%" y="181" width="0.0258%" height="15" fill="rgb(243,84,45)" fg:x="116" fg:w="1"/><text x="3.2451%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.03%)</title><rect x="3.0209%" y="341" width="0.0258%" height="15" fill="rgb(252,49,23)" fg:x="117" fg:w="1"/><text x="3.2709%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.03%)</title><rect x="3.0209%" y="325" width="0.0258%" height="15" fill="rgb(215,19,7)" fg:x="117" fg:w="1"/><text x="3.2709%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.03%)</title><rect x="3.0209%" y="309" width="0.0258%" height="15" fill="rgb(238,81,41)" fg:x="117" fg:w="1"/><text x="3.2709%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="3.0209%" y="293" width="0.0258%" height="15" fill="rgb(210,199,37)" fg:x="117" fg:w="1"/><text x="3.2709%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="3.0209%" y="277" width="0.0258%" height="15" fill="rgb(244,192,49)" fg:x="117" fg:w="1"/><text x="3.2709%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.03%)</title><rect x="3.0467%" y="325" width="0.0258%" height="15" fill="rgb(226,211,11)" fg:x="118" fg:w="1"/><text x="3.2967%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.03%)</title><rect x="3.0467%" y="309" width="0.0258%" height="15" fill="rgb(236,162,54)" fg:x="118" fg:w="1"/><text x="3.2967%" y="319.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="3.0467%" y="293" width="0.0258%" height="15" fill="rgb(220,229,9)" fg:x="118" fg:w="1"/><text x="3.2967%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="3.0726%" y="261" width="0.0258%" height="15" fill="rgb(250,87,22)" fg:x="119" fg:w="1"/><text x="3.3226%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="3.0726%" y="245" width="0.0258%" height="15" fill="rgb(239,43,17)" fg:x="119" fg:w="1"/><text x="3.3226%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="3.0726%" y="229" width="0.0258%" height="15" fill="rgb(231,177,25)" fg:x="119" fg:w="1"/><text x="3.3226%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="3.0726%" y="213" width="0.0258%" height="15" fill="rgb(219,179,1)" fg:x="119" fg:w="1"/><text x="3.3226%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="3.0726%" y="197" width="0.0258%" height="15" fill="rgb(238,219,53)" fg:x="119" fg:w="1"/><text x="3.3226%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="3.0726%" y="181" width="0.0258%" height="15" fill="rgb(232,167,36)" fg:x="119" fg:w="1"/><text x="3.3226%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="3.0726%" y="165" width="0.0258%" height="15" fill="rgb(244,19,51)" fg:x="119" fg:w="1"/><text x="3.3226%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="3.0984%" y="149" width="0.0258%" height="15" fill="rgb(224,6,22)" fg:x="120" fg:w="1"/><text x="3.3484%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="3.0984%" y="133" width="0.0258%" height="15" fill="rgb(224,145,5)" fg:x="120" fg:w="1"/><text x="3.3484%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.05%)</title><rect x="3.0984%" y="197" width="0.0516%" height="15" fill="rgb(234,130,49)" fg:x="120" fg:w="2"/><text x="3.3484%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.05%)</title><rect x="3.0984%" y="181" width="0.0516%" height="15" fill="rgb(254,6,2)" fg:x="120" fg:w="2"/><text x="3.3484%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.05%)</title><rect x="3.0984%" y="165" width="0.0516%" height="15" fill="rgb(208,96,46)" fg:x="120" fg:w="2"/><text x="3.3484%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.03%)</title><rect x="3.1242%" y="149" width="0.0258%" height="15" fill="rgb(239,3,39)" fg:x="121" fg:w="1"/><text x="3.3742%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="3.1242%" y="133" width="0.0258%" height="15" fill="rgb(233,210,1)" fg:x="121" fg:w="1"/><text x="3.3742%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (5 samples, 0.13%)</title><rect x="3.0984%" y="261" width="0.1291%" height="15" fill="rgb(244,137,37)" fg:x="120" fg:w="5"/><text x="3.3484%" y="271.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (5 samples, 0.13%)</title><rect x="3.0984%" y="245" width="0.1291%" height="15" fill="rgb(240,136,2)" fg:x="120" fg:w="5"/><text x="3.3484%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.13%)</title><rect x="3.0984%" y="229" width="0.1291%" height="15" fill="rgb(239,18,37)" fg:x="120" fg:w="5"/><text x="3.3484%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.13%)</title><rect x="3.0984%" y="213" width="0.1291%" height="15" fill="rgb(218,185,22)" fg:x="120" fg:w="5"/><text x="3.3484%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.08%)</title><rect x="3.1500%" y="197" width="0.0775%" height="15" fill="rgb(225,218,4)" fg:x="122" fg:w="3"/><text x="3.4000%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (3 samples, 0.08%)</title><rect x="3.1500%" y="181" width="0.0775%" height="15" fill="rgb(230,182,32)" fg:x="122" fg:w="3"/><text x="3.4000%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3 samples, 0.08%)</title><rect x="3.1500%" y="165" width="0.0775%" height="15" fill="rgb(242,56,43)" fg:x="122" fg:w="3"/><text x="3.4000%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (3 samples, 0.08%)</title><rect x="3.1500%" y="149" width="0.0775%" height="15" fill="rgb(233,99,24)" fg:x="122" fg:w="3"/><text x="3.4000%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3 samples, 0.08%)</title><rect x="3.1500%" y="133" width="0.0775%" height="15" fill="rgb(234,209,42)" fg:x="122" fg:w="3"/><text x="3.4000%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3 samples, 0.08%)</title><rect x="3.1500%" y="117" width="0.0775%" height="15" fill="rgb(227,7,12)" fg:x="122" fg:w="3"/><text x="3.4000%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.08%)</title><rect x="3.1500%" y="101" width="0.0775%" height="15" fill="rgb(245,203,43)" fg:x="122" fg:w="3"/><text x="3.4000%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.08%)</title><rect x="3.1500%" y="85" width="0.0775%" height="15" fill="rgb(238,205,33)" fg:x="122" fg:w="3"/><text x="3.4000%" y="95.50"></text></g><g><title>yt_history::model::Models::find_or_create_video (43 samples, 1.11%)</title><rect x="2.1430%" y="405" width="1.1103%" height="15" fill="rgb(231,56,7)" fg:x="83" fg:w="43"/><text x="2.3930%" y="415.50"></text></g><g><title>yt_history::model::Models::insert_video (11 samples, 0.28%)</title><rect x="2.9693%" y="389" width="0.2840%" height="15" fill="rgb(244,186,29)" fg:x="115" fg:w="11"/><text x="3.2193%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (10 samples, 0.26%)</title><rect x="2.9951%" y="373" width="0.2582%" height="15" fill="rgb(234,111,31)" fg:x="116" fg:w="10"/><text x="3.2451%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (10 samples, 0.26%)</title><rect x="2.9951%" y="357" width="0.2582%" height="15" fill="rgb(241,149,10)" fg:x="116" fg:w="10"/><text x="3.2451%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 0.21%)</title><rect x="3.0467%" y="341" width="0.2066%" height="15" fill="rgb(249,206,44)" fg:x="118" fg:w="8"/><text x="3.2967%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (7 samples, 0.18%)</title><rect x="3.0726%" y="325" width="0.1807%" height="15" fill="rgb(251,153,30)" fg:x="119" fg:w="7"/><text x="3.3226%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.18%)</title><rect x="3.0726%" y="309" width="0.1807%" height="15" fill="rgb(239,152,38)" fg:x="119" fg:w="7"/><text x="3.3226%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (7 samples, 0.18%)</title><rect x="3.0726%" y="293" width="0.1807%" height="15" fill="rgb(249,139,47)" fg:x="119" fg:w="7"/><text x="3.3226%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (7 samples, 0.18%)</title><rect x="3.0726%" y="277" width="0.1807%" height="15" fill="rgb(244,64,35)" fg:x="119" fg:w="7"/><text x="3.3226%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (1 samples, 0.03%)</title><rect x="3.2275%" y="261" width="0.0258%" height="15" fill="rgb(216,46,15)" fg:x="125" fg:w="1"/><text x="3.4775%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (1 samples, 0.03%)</title><rect x="3.2275%" y="245" width="0.0258%" height="15" fill="rgb(250,74,19)" fg:x="125" fg:w="1"/><text x="3.4775%" y="255.50"></text></g><g><title>yt_history::parser::html_parser::ModelsParser::insert_row (76 samples, 1.96%)</title><rect x="1.3168%" y="421" width="1.9623%" height="15" fill="rgb(249,42,33)" fg:x="51" fg:w="76"/><text x="1.5668%" y="431.50">y..</text></g><g><title>yt_history::model::Models::insert_watched (1 samples, 0.03%)</title><rect x="3.2533%" y="405" width="0.0258%" height="15" fill="rgb(242,149,17)" fg:x="126" fg:w="1"/><text x="3.5033%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="3.2533%" y="389" width="0.0258%" height="15" fill="rgb(244,29,21)" fg:x="126" fg:w="1"/><text x="3.5033%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="3.2533%" y="373" width="0.0258%" height="15" fill="rgb(220,130,37)" fg:x="126" fg:w="1"/><text x="3.5033%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="3.2533%" y="357" width="0.0258%" height="15" fill="rgb(211,67,2)" fg:x="126" fg:w="1"/><text x="3.5033%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="3.2533%" y="341" width="0.0258%" height="15" fill="rgb(235,68,52)" fg:x="126" fg:w="1"/><text x="3.5033%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="3.2533%" y="325" width="0.0258%" height="15" fill="rgb(246,142,3)" fg:x="126" fg:w="1"/><text x="3.5033%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="3.2533%" y="309" width="0.0258%" height="15" fill="rgb(241,25,7)" fg:x="126" fg:w="1"/><text x="3.5033%" y="319.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="3.2533%" y="293" width="0.0258%" height="15" fill="rgb(242,119,39)" fg:x="126" fg:w="1"/><text x="3.5033%" y="303.50"></text></g><g><title>realloc (1 samples, 0.03%)</title><rect x="3.2533%" y="277" width="0.0258%" height="15" fill="rgb(241,98,45)" fg:x="126" fg:w="1"/><text x="3.5033%" y="287.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="3.2533%" y="261" width="0.0258%" height="15" fill="rgb(254,28,30)" fg:x="126" fg:w="1"/><text x="3.5033%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="3.2533%" y="245" width="0.0258%" height="15" fill="rgb(241,142,54)" fg:x="126" fg:w="1"/><text x="3.5033%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="3.3308%" y="405" width="0.0258%" height="15" fill="rgb(222,85,15)" fg:x="129" fg:w="1"/><text x="3.5808%" y="415.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.05%)</title><rect x="3.3566%" y="389" width="0.0516%" height="15" fill="rgb(210,85,47)" fg:x="130" fg:w="2"/><text x="3.6066%" y="399.50"></text></g><g><title>&lt;chrono::datetime::DateTime&lt;chrono::offset::fixed::FixedOffset&gt; as core::convert::From&lt;chrono::datetime::DateTime&lt;chrono::offset::utc::Utc&gt;&gt;&gt;::from (2 samples, 0.05%)</title><rect x="3.3566%" y="373" width="0.0516%" height="15" fill="rgb(224,206,25)" fg:x="130" fg:w="2"/><text x="3.6066%" y="383.50"></text></g><g><title>chrono::datetime::DateTime&lt;Tz&gt;::with_timezone (2 samples, 0.05%)</title><rect x="3.3566%" y="357" width="0.0516%" height="15" fill="rgb(243,201,19)" fg:x="130" fg:w="2"/><text x="3.6066%" y="367.50"></text></g><g><title>chrono::offset::TimeZone::from_utc_datetime (2 samples, 0.05%)</title><rect x="3.3566%" y="341" width="0.0516%" height="15" fill="rgb(236,59,4)" fg:x="130" fg:w="2"/><text x="3.6066%" y="351.50"></text></g><g><title>chrono::datetime::DateTime&lt;Tz&gt;::from_utc (1 samples, 0.03%)</title><rect x="3.3824%" y="325" width="0.0258%" height="15" fill="rgb(254,179,45)" fg:x="131" fg:w="1"/><text x="3.6324%" y="335.50"></text></g><g><title>&lt;yt_history::parser::html_parser::DataRow as core::default::Default&gt;::default (3 samples, 0.08%)</title><rect x="3.3566%" y="405" width="0.0775%" height="15" fill="rgb(226,14,10)" fg:x="130" fg:w="3"/><text x="3.6066%" y="415.50"></text></g><g><title>alloc::string::String::new (1 samples, 0.03%)</title><rect x="3.4082%" y="389" width="0.0258%" height="15" fill="rgb(244,27,41)" fg:x="132" fg:w="1"/><text x="3.6582%" y="399.50"></text></g><g><title>cfree (2 samples, 0.05%)</title><rect x="3.4340%" y="405" width="0.0516%" height="15" fill="rgb(235,35,32)" fg:x="133" fg:w="2"/><text x="3.6840%" y="415.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="3.4340%" y="389" width="0.0516%" height="15" fill="rgb(218,68,31)" fg:x="133" fg:w="2"/><text x="3.6840%" y="399.50"></text></g><g><title>chrono::format::parse::parse (1 samples, 0.03%)</title><rect x="3.5115%" y="373" width="0.0258%" height="15" fill="rgb(207,120,37)" fg:x="136" fg:w="1"/><text x="3.7615%" y="383.50"></text></g><g><title>&lt;chrono::format::strftime::StrftimeItems as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="4.9316%" y="325" width="0.0258%" height="15" fill="rgb(227,98,0)" fg:x="191" fg:w="1"/><text x="5.1816%" y="335.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.08%)</title><rect x="4.9316%" y="341" width="0.0775%" height="15" fill="rgb(207,7,3)" fg:x="191" fg:w="3"/><text x="5.1816%" y="351.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 0.05%)</title><rect x="4.9574%" y="325" width="0.0516%" height="15" fill="rgb(206,98,19)" fg:x="192" fg:w="2"/><text x="5.2074%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (1 samples, 0.03%)</title><rect x="5.0090%" y="341" width="0.0258%" height="15" fill="rgb(217,5,26)" fg:x="194" fg:w="1"/><text x="5.2590%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (2 samples, 0.05%)</title><rect x="5.0349%" y="341" width="0.0516%" height="15" fill="rgb(235,190,38)" fg:x="195" fg:w="2"/><text x="5.2849%" y="351.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (2 samples, 0.05%)</title><rect x="5.0349%" y="325" width="0.0516%" height="15" fill="rgb(247,86,24)" fg:x="195" fg:w="2"/><text x="5.2849%" y="335.50"></text></g><g><title>core::str::pattern::Searcher::next_match (2 samples, 0.05%)</title><rect x="5.0349%" y="309" width="0.0516%" height="15" fill="rgb(205,101,16)" fg:x="195" fg:w="2"/><text x="5.2849%" y="319.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (2 samples, 0.05%)</title><rect x="5.0349%" y="293" width="0.0516%" height="15" fill="rgb(246,168,33)" fg:x="195" fg:w="2"/><text x="5.2849%" y="303.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="5.0607%" y="277" width="0.0258%" height="15" fill="rgb(231,114,1)" fg:x="196" fg:w="1"/><text x="5.3107%" y="287.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="5.0607%" y="261" width="0.0258%" height="15" fill="rgb(207,184,53)" fg:x="196" fg:w="1"/><text x="5.3107%" y="271.50"></text></g><g><title>&lt;chrono::format::strftime::StrftimeItems as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="5.0607%" y="245" width="0.0258%" height="15" fill="rgb(224,95,51)" fg:x="196" fg:w="1"/><text x="5.3107%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (1 samples, 0.03%)</title><rect x="5.0865%" y="325" width="0.0258%" height="15" fill="rgb(212,188,45)" fg:x="197" fg:w="1"/><text x="5.3365%" y="335.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (1 samples, 0.03%)</title><rect x="5.0865%" y="309" width="0.0258%" height="15" fill="rgb(223,154,38)" fg:x="197" fg:w="1"/><text x="5.3365%" y="319.50"></text></g><g><title>&lt;chrono::format::strftime::StrftimeItems as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.49%)</title><rect x="4.6734%" y="357" width="0.4906%" height="15" fill="rgb(251,22,52)" fg:x="181" fg:w="19"/><text x="4.9234%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (3 samples, 0.08%)</title><rect x="5.0865%" y="341" width="0.0775%" height="15" fill="rgb(229,209,22)" fg:x="197" fg:w="3"/><text x="5.3365%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::index (2 samples, 0.05%)</title><rect x="5.1123%" y="325" width="0.0516%" height="15" fill="rgb(234,138,34)" fg:x="198" fg:w="2"/><text x="5.3623%" y="335.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get (2 samples, 0.05%)</title><rect x="5.1123%" y="309" width="0.0516%" height="15" fill="rgb(212,95,11)" fg:x="198" fg:w="2"/><text x="5.3623%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (1 samples, 0.03%)</title><rect x="5.1381%" y="293" width="0.0258%" height="15" fill="rgb(240,179,47)" fg:x="199" fg:w="1"/><text x="5.3881%" y="303.50"></text></g><g><title>chrono::format::parse::parse (2 samples, 0.05%)</title><rect x="5.1640%" y="357" width="0.0516%" height="15" fill="rgb(240,163,11)" fg:x="200" fg:w="2"/><text x="5.4140%" y="367.50"></text></g><g><title>&lt;i64 as num_traits::cast::ToPrimitive&gt;::to_u32 (1 samples, 0.03%)</title><rect x="5.2156%" y="341" width="0.0258%" height="15" fill="rgb(236,37,12)" fg:x="202" fg:w="1"/><text x="5.4656%" y="351.50"></text></g><g><title>chrono::format::parsed::Parsed::set_minute (2 samples, 0.05%)</title><rect x="5.2156%" y="357" width="0.0516%" height="15" fill="rgb(232,164,16)" fg:x="202" fg:w="2"/><text x="5.4656%" y="367.50"></text></g><g><title>chrono::format::parsed::set_if_consistent (1 samples, 0.03%)</title><rect x="5.2414%" y="341" width="0.0258%" height="15" fill="rgb(244,205,15)" fg:x="203" fg:w="1"/><text x="5.4914%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (1 samples, 0.03%)</title><rect x="5.2672%" y="357" width="0.0258%" height="15" fill="rgb(223,117,47)" fg:x="204" fg:w="1"/><text x="5.5172%" y="367.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (1 samples, 0.03%)</title><rect x="5.2672%" y="341" width="0.0258%" height="15" fill="rgb(244,107,35)" fg:x="204" fg:w="1"/><text x="5.5172%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (1 samples, 0.03%)</title><rect x="5.2672%" y="325" width="0.0258%" height="15" fill="rgb(205,140,8)" fg:x="204" fg:w="1"/><text x="5.5172%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.03%)</title><rect x="5.2672%" y="309" width="0.0258%" height="15" fill="rgb(228,84,46)" fg:x="204" fg:w="1"/><text x="5.5172%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.03%)</title><rect x="5.2672%" y="293" width="0.0258%" height="15" fill="rgb(254,188,9)" fg:x="204" fg:w="1"/><text x="5.5172%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.03%)</title><rect x="5.2672%" y="277" width="0.0258%" height="15" fill="rgb(206,112,54)" fg:x="204" fg:w="1"/><text x="5.5172%" y="287.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (2 samples, 0.05%)</title><rect x="5.3189%" y="261" width="0.0516%" height="15" fill="rgb(216,84,49)" fg:x="206" fg:w="2"/><text x="5.5689%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start::{{closure}} (2 samples, 0.05%)</title><rect x="5.3189%" y="245" width="0.0516%" height="15" fill="rgb(214,194,35)" fg:x="206" fg:w="2"/><text x="5.5689%" y="255.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (2 samples, 0.05%)</title><rect x="5.3189%" y="229" width="0.0516%" height="15" fill="rgb(249,28,3)" fg:x="206" fg:w="2"/><text x="5.5689%" y="239.50"></text></g><g><title>chrono::format::parse::parse (73 samples, 1.88%)</title><rect x="3.5115%" y="389" width="1.8848%" height="15" fill="rgb(222,56,52)" fg:x="136" fg:w="73"/><text x="3.7615%" y="399.50">c..</text></g><g><title>chrono::format::parse::parse_internal (72 samples, 1.86%)</title><rect x="3.5373%" y="373" width="1.8590%" height="15" fill="rgb(245,217,50)" fg:x="137" fg:w="72"/><text x="3.7873%" y="383.50">c..</text></g><g><title>core::str::&lt;impl str&gt;::trim_left (4 samples, 0.10%)</title><rect x="5.2931%" y="357" width="0.1033%" height="15" fill="rgb(213,201,24)" fg:x="205" fg:w="4"/><text x="5.5431%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start (4 samples, 0.10%)</title><rect x="5.2931%" y="341" width="0.1033%" height="15" fill="rgb(248,116,28)" fg:x="205" fg:w="4"/><text x="5.5431%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start_matches (4 samples, 0.10%)</title><rect x="5.2931%" y="325" width="0.1033%" height="15" fill="rgb(219,72,43)" fg:x="205" fg:w="4"/><text x="5.5431%" y="335.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_reject (3 samples, 0.08%)</title><rect x="5.3189%" y="309" width="0.0775%" height="15" fill="rgb(209,138,14)" fg:x="206" fg:w="3"/><text x="5.5689%" y="319.50"></text></g><g><title>core::str::pattern::Searcher::next_reject (3 samples, 0.08%)</title><rect x="5.3189%" y="293" width="0.0775%" height="15" fill="rgb(222,18,33)" fg:x="206" fg:w="3"/><text x="5.5689%" y="303.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (3 samples, 0.08%)</title><rect x="5.3189%" y="277" width="0.0775%" height="15" fill="rgb(213,199,7)" fg:x="206" fg:w="3"/><text x="5.5689%" y="287.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="5.3705%" y="261" width="0.0258%" height="15" fill="rgb(250,110,10)" fg:x="208" fg:w="1"/><text x="5.6205%" y="271.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="5.3705%" y="245" width="0.0258%" height="15" fill="rgb(248,123,6)" fg:x="208" fg:w="1"/><text x="5.6205%" y="255.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start_matches (1 samples, 0.03%)</title><rect x="5.3705%" y="229" width="0.0258%" height="15" fill="rgb(206,91,31)" fg:x="208" fg:w="1"/><text x="5.6205%" y="239.50"></text></g><g><title>chrono::format::parsed::Parsed::new (1 samples, 0.03%)</title><rect x="5.3963%" y="389" width="0.0258%" height="15" fill="rgb(211,154,13)" fg:x="209" fg:w="1"/><text x="5.6463%" y="399.50"></text></g><g><title>&lt;chrono::format::parsed::Parsed as core::default::Default&gt;::default (1 samples, 0.03%)</title><rect x="5.3963%" y="373" width="0.0258%" height="15" fill="rgb(225,148,7)" fg:x="209" fg:w="1"/><text x="5.6463%" y="383.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date::{{closure}} (1 samples, 0.03%)</title><rect x="5.6029%" y="325" width="0.0258%" height="15" fill="rgb(220,160,43)" fg:x="217" fg:w="1"/><text x="5.8529%" y="335.50"></text></g><g><title>chrono::naive::date::NaiveDate::weeks_from (1 samples, 0.03%)</title><rect x="5.6287%" y="325" width="0.0258%" height="15" fill="rgb(213,52,39)" fg:x="218" fg:w="1"/><text x="5.8787%" y="335.50"></text></g><g><title>&lt;chrono::naive::date::NaiveDate as chrono::traits::Datelike&gt;::weekday (1 samples, 0.03%)</title><rect x="5.6287%" y="309" width="0.0258%" height="15" fill="rgb(243,137,7)" fg:x="218" fg:w="1"/><text x="5.8787%" y="319.50"></text></g><g><title>chrono::naive::internals::Of::weekday (1 samples, 0.03%)</title><rect x="5.6287%" y="293" width="0.0258%" height="15" fill="rgb(230,79,13)" fg:x="218" fg:w="1"/><text x="5.8787%" y="303.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_datetime_with_offset (8 samples, 0.21%)</title><rect x="5.4738%" y="373" width="0.2066%" height="15" fill="rgb(247,105,23)" fg:x="212" fg:w="8"/><text x="5.7238%" y="383.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date (4 samples, 0.10%)</title><rect x="5.5771%" y="357" width="0.1033%" height="15" fill="rgb(223,179,41)" fg:x="216" fg:w="4"/><text x="5.8271%" y="367.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date::{{closure}} (3 samples, 0.08%)</title><rect x="5.6029%" y="341" width="0.0775%" height="15" fill="rgb(218,9,34)" fg:x="217" fg:w="3"/><text x="5.8529%" y="351.50"></text></g><g><title>num_integer::div_rem (1 samples, 0.03%)</title><rect x="5.6545%" y="325" width="0.0258%" height="15" fill="rgb(222,106,8)" fg:x="219" fg:w="1"/><text x="5.9045%" y="335.50"></text></g><g><title>&lt;i32 as num_integer::Integer&gt;::div_rem (1 samples, 0.03%)</title><rect x="5.6545%" y="309" width="0.0258%" height="15" fill="rgb(211,220,0)" fg:x="219" fg:w="1"/><text x="5.9045%" y="319.50"></text></g><g><title>time::duration::Duration::num_nanoseconds (1 samples, 0.03%)</title><rect x="5.7320%" y="245" width="0.0258%" height="15" fill="rgb(229,52,16)" fg:x="222" fg:w="1"/><text x="5.9820%" y="255.50"></text></g><g><title>time::duration::Duration::nanos_mod_sec (1 samples, 0.03%)</title><rect x="5.7320%" y="229" width="0.0258%" height="15" fill="rgb(212,155,18)" fg:x="222" fg:w="1"/><text x="5.9820%" y="239.50"></text></g><g><title>chrono::format::parsed::Parsed::to_datetime_with_timezone (14 samples, 0.36%)</title><rect x="5.4222%" y="389" width="0.3615%" height="15" fill="rgb(242,21,14)" fg:x="210" fg:w="14"/><text x="5.6722%" y="399.50"></text></g><g><title>chrono::offset::TimeZone::from_local_datetime (4 samples, 0.10%)</title><rect x="5.6804%" y="373" width="0.1033%" height="15" fill="rgb(222,19,48)" fg:x="220" fg:w="4"/><text x="5.9304%" y="383.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::map (3 samples, 0.08%)</title><rect x="5.7062%" y="357" width="0.0775%" height="15" fill="rgb(232,45,27)" fg:x="221" fg:w="3"/><text x="5.9562%" y="367.50"></text></g><g><title>chrono::offset::TimeZone::from_local_datetime::{{closure}} (2 samples, 0.05%)</title><rect x="5.7320%" y="341" width="0.0516%" height="15" fill="rgb(249,103,42)" fg:x="222" fg:w="2"/><text x="5.9820%" y="351.50"></text></g><g><title>chrono::offset::fixed::&lt;impl core::ops::arith::Sub&lt;chrono::offset::fixed::FixedOffset&gt; for chrono::naive::datetime::NaiveDateTime&gt;::sub (2 samples, 0.05%)</title><rect x="5.7320%" y="325" width="0.0516%" height="15" fill="rgb(246,81,33)" fg:x="222" fg:w="2"/><text x="5.9820%" y="335.50"></text></g><g><title>chrono::offset::fixed::add_with_leapsecond (2 samples, 0.05%)</title><rect x="5.7320%" y="309" width="0.0516%" height="15" fill="rgb(252,33,42)" fg:x="222" fg:w="2"/><text x="5.9820%" y="319.50"></text></g><g><title>&lt;chrono::naive::datetime::NaiveDateTime as core::ops::arith::Add&lt;time::duration::Duration&gt;&gt;::add (2 samples, 0.05%)</title><rect x="5.7320%" y="293" width="0.0516%" height="15" fill="rgb(209,212,41)" fg:x="222" fg:w="2"/><text x="5.9820%" y="303.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_signed (2 samples, 0.05%)</title><rect x="5.7320%" y="277" width="0.0516%" height="15" fill="rgb(207,154,6)" fg:x="222" fg:w="2"/><text x="5.9820%" y="287.50"></text></g><g><title>chrono::naive::time::NaiveTime::overflowing_add_signed (2 samples, 0.05%)</title><rect x="5.7320%" y="261" width="0.0516%" height="15" fill="rgb(223,64,47)" fg:x="222" fg:w="2"/><text x="5.9820%" y="271.50"></text></g><g><title>time::duration::Duration::num_seconds (1 samples, 0.03%)</title><rect x="5.7578%" y="245" width="0.0258%" height="15" fill="rgb(211,161,38)" fg:x="223" fg:w="1"/><text x="6.0078%" y="255.50"></text></g><g><title>chrono::offset::TimeZone::datetime_from_str (90 samples, 2.32%)</title><rect x="3.4857%" y="405" width="2.3238%" height="15" fill="rgb(219,138,40)" fg:x="135" fg:w="90"/><text x="3.7357%" y="415.50">c..</text></g><g><title>chrono::format::strftime::StrftimeItems::new (1 samples, 0.03%)</title><rect x="5.7836%" y="389" width="0.0258%" height="15" fill="rgb(241,228,46)" fg:x="224" fg:w="1"/><text x="6.0336%" y="399.50"></text></g><g><title>chrono::format::strftime::StrftimeItems::with_remainer (1 samples, 0.03%)</title><rect x="5.7836%" y="373" width="0.0258%" height="15" fill="rgb(223,209,38)" fg:x="224" fg:w="1"/><text x="6.0336%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.05%)</title><rect x="5.8095%" y="405" width="0.0516%" height="15" fill="rgb(236,164,45)" fg:x="225" fg:w="2"/><text x="6.0595%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::parser::html_parser::ModelsParser::next_data_row&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;&gt;::{{closure}}&gt; (1 samples, 0.03%)</title><rect x="5.8353%" y="389" width="0.0258%" height="15" fill="rgb(231,15,5)" fg:x="226" fg:w="1"/><text x="6.0853%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.03%)</title><rect x="5.8353%" y="373" width="0.0258%" height="15" fill="rgb(252,35,15)" fg:x="226" fg:w="1"/><text x="6.0853%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="5.8353%" y="357" width="0.0258%" height="15" fill="rgb(248,181,18)" fg:x="226" fg:w="1"/><text x="6.0853%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="5.8353%" y="341" width="0.0258%" height="15" fill="rgb(233,39,42)" fg:x="226" fg:w="1"/><text x="6.0853%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="5.8353%" y="325" width="0.0258%" height="15" fill="rgb(238,110,33)" fg:x="226" fg:w="1"/><text x="6.0853%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="5.8353%" y="309" width="0.0258%" height="15" fill="rgb(233,195,10)" fg:x="226" fg:w="1"/><text x="6.0853%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="5.8353%" y="293" width="0.0258%" height="15" fill="rgb(254,105,3)" fg:x="226" fg:w="1"/><text x="6.0853%" y="303.50"></text></g><g><title>yt_history::parser::html_parser::ModelsParser::peek (2 samples, 0.05%)</title><rect x="5.8611%" y="405" width="0.0516%" height="15" fill="rgb(221,225,9)" fg:x="227" fg:w="2"/><text x="6.1111%" y="415.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (2 samples, 0.05%)</title><rect x="5.8611%" y="389" width="0.0516%" height="15" fill="rgb(224,227,45)" fg:x="227" fg:w="2"/><text x="6.1111%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (2 samples, 0.05%)</title><rect x="5.8611%" y="373" width="0.0516%" height="15" fill="rgb(229,198,43)" fg:x="227" fg:w="2"/><text x="6.1111%" y="383.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (1 samples, 0.03%)</title><rect x="5.8869%" y="357" width="0.0258%" height="15" fill="rgb(206,209,35)" fg:x="228" fg:w="1"/><text x="6.1369%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="5.8869%" y="341" width="0.0258%" height="15" fill="rgb(245,195,53)" fg:x="228" fg:w="1"/><text x="6.1369%" y="351.50"></text></g><g><title>&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="5.8869%" y="325" width="0.0258%" height="15" fill="rgb(240,92,26)" fg:x="228" fg:w="1"/><text x="6.1369%" y="335.50"></text></g><g><title>yt_history::utf8_reader::Utf8Iter&lt;R&gt;::next (1 samples, 0.03%)</title><rect x="5.8869%" y="309" width="0.0258%" height="15" fill="rgb(207,40,23)" fg:x="228" fg:w="1"/><text x="6.1369%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.03%)</title><rect x="5.8869%" y="293" width="0.0258%" height="15" fill="rgb(223,111,35)" fg:x="228" fg:w="1"/><text x="6.1369%" y="303.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="5.8869%" y="277" width="0.0258%" height="15" fill="rgb(229,147,28)" fg:x="228" fg:w="1"/><text x="6.1369%" y="287.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (237 samples, 6.12%)</title><rect x="7.3845%" y="341" width="6.1193%" height="15" fill="rgb(211,29,28)" fg:x="286" fg:w="237"/><text x="7.6345%" y="351.50">&lt;core::o..</text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.08%)</title><rect x="14.3300%" y="309" width="0.0775%" height="15" fill="rgb(228,72,33)" fg:x="555" fg:w="3"/><text x="14.5800%" y="319.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (3 samples, 0.08%)</title><rect x="14.3300%" y="293" width="0.0775%" height="15" fill="rgb(205,214,31)" fg:x="555" fg:w="3"/><text x="14.5800%" y="303.50"></text></g><g><title>&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.08%)</title><rect x="14.3300%" y="277" width="0.0775%" height="15" fill="rgb(224,111,15)" fg:x="555" fg:w="3"/><text x="14.5800%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (7 samples, 0.18%)</title><rect x="14.6398%" y="293" width="0.1807%" height="15" fill="rgb(253,21,26)" fg:x="567" fg:w="7"/><text x="14.8898%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (7 samples, 0.18%)</title><rect x="14.6398%" y="277" width="0.1807%" height="15" fill="rgb(245,139,43)" fg:x="567" fg:w="7"/><text x="14.8898%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (30 samples, 0.77%)</title><rect x="14.4074%" y="309" width="0.7746%" height="15" fill="rgb(252,170,7)" fg:x="558" fg:w="30"/><text x="14.6574%" y="319.50"></text></g><g><title>core::ptr::read (14 samples, 0.36%)</title><rect x="14.8206%" y="293" width="0.3615%" height="15" fill="rgb(231,118,14)" fg:x="574" fg:w="14"/><text x="15.0706%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (51 samples, 1.32%)</title><rect x="15.1820%" y="309" width="1.3168%" height="15" fill="rgb(238,83,0)" fg:x="588" fg:w="51"/><text x="15.4320%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_within (1 samples, 0.03%)</title><rect x="16.4988%" y="309" width="0.0258%" height="15" fill="rgb(221,39,39)" fg:x="639" fg:w="1"/><text x="16.7488%" y="319.50"></text></g><g><title>core::intrinsics::copy (1 samples, 0.03%)</title><rect x="16.4988%" y="293" width="0.0258%" height="15" fill="rgb(222,119,46)" fg:x="639" fg:w="1"/><text x="16.7488%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="16.4988%" y="277" width="0.0258%" height="15" fill="rgb(222,165,49)" fg:x="639" fg:w="1"/><text x="16.7488%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (366 samples, 9.45%)</title><rect x="7.1521%" y="357" width="9.4500%" height="15" fill="rgb(219,113,52)" fg:x="277" fg:w="366"/><text x="7.4021%" y="367.50">&lt;core::iter::a..</text></g><g><title>&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (120 samples, 3.10%)</title><rect x="13.5037%" y="341" width="3.0984%" height="15" fill="rgb(214,7,15)" fg:x="523" fg:w="120"/><text x="13.7537%" y="351.50">&lt;yt..</text></g><g><title>yt_history::utf8_reader::Utf8Iter&lt;R&gt;::next (91 samples, 2.35%)</title><rect x="14.2525%" y="325" width="2.3496%" height="15" fill="rgb(235,32,4)" fg:x="552" fg:w="91"/><text x="14.5025%" y="335.50">y..</text></g><g><title>core::str::converts::from_utf8 (3 samples, 0.08%)</title><rect x="16.5247%" y="309" width="0.0775%" height="15" fill="rgb(238,90,54)" fg:x="640" fg:w="3"/><text x="16.7747%" y="319.50"></text></g><g><title>core::str::validations::run_utf8_validation (3 samples, 0.08%)</title><rect x="16.5247%" y="293" width="0.0775%" height="15" fill="rgb(213,208,19)" fg:x="640" fg:w="3"/><text x="16.7747%" y="303.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (376 samples, 9.71%)</title><rect x="7.1004%" y="389" width="9.7082%" height="15" fill="rgb(233,156,4)" fg:x="275" fg:w="376"/><text x="7.3504%" y="399.50">&lt;&amp;mut I as cor..</text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (376 samples, 9.71%)</title><rect x="7.1004%" y="373" width="9.7082%" height="15" fill="rgb(207,194,5)" fg:x="275" fg:w="376"/><text x="7.3504%" y="383.50">&lt;core::iter::a..</text></g><g><title>core::option::Option&lt;T&gt;::take (8 samples, 0.21%)</title><rect x="16.6021%" y="357" width="0.2066%" height="15" fill="rgb(206,111,30)" fg:x="643" fg:w="8"/><text x="16.8521%" y="367.50"></text></g><g><title>core::mem::replace (8 samples, 0.21%)</title><rect x="16.6021%" y="341" width="0.2066%" height="15" fill="rgb(243,70,54)" fg:x="643" fg:w="8"/><text x="16.8521%" y="351.50"></text></g><g><title>core::ptr::read (3 samples, 0.08%)</title><rect x="16.7312%" y="325" width="0.0775%" height="15" fill="rgb(242,28,8)" fg:x="648" fg:w="3"/><text x="16.9812%" y="335.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (3 samples, 0.08%)</title><rect x="16.7312%" y="309" width="0.0775%" height="15" fill="rgb(219,106,18)" fg:x="648" fg:w="3"/><text x="16.9812%" y="319.50"></text></g><g><title>__rdl_alloc (11 samples, 0.28%)</title><rect x="16.8345%" y="149" width="0.2840%" height="15" fill="rgb(244,222,10)" fg:x="652" fg:w="11"/><text x="17.0845%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.05%)</title><rect x="17.0669%" y="133" width="0.0516%" height="15" fill="rgb(236,179,52)" fg:x="661" fg:w="2"/><text x="17.3169%" y="143.50"></text></g><g><title>__rust_alloc (20 samples, 0.52%)</title><rect x="17.1185%" y="149" width="0.5164%" height="15" fill="rgb(213,23,39)" fg:x="663" fg:w="20"/><text x="17.3685%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (100 samples, 2.58%)</title><rect x="16.8087%" y="245" width="2.5820%" height="15" fill="rgb(238,48,10)" fg:x="651" fg:w="100"/><text x="17.0587%" y="255.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (100 samples, 2.58%)</title><rect x="16.8087%" y="229" width="2.5820%" height="15" fill="rgb(251,196,23)" fg:x="651" fg:w="100"/><text x="17.0587%" y="239.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (100 samples, 2.58%)</title><rect x="16.8087%" y="213" width="2.5820%" height="15" fill="rgb(250,152,24)" fg:x="651" fg:w="100"/><text x="17.0587%" y="223.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (99 samples, 2.56%)</title><rect x="16.8345%" y="197" width="2.5562%" height="15" fill="rgb(209,150,17)" fg:x="652" fg:w="99"/><text x="17.0845%" y="207.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (99 samples, 2.56%)</title><rect x="16.8345%" y="181" width="2.5562%" height="15" fill="rgb(234,202,34)" fg:x="652" fg:w="99"/><text x="17.0845%" y="191.50">al..</text></g><g><title>alloc::alloc::alloc (99 samples, 2.56%)</title><rect x="16.8345%" y="165" width="2.5562%" height="15" fill="rgb(253,148,53)" fg:x="652" fg:w="99"/><text x="17.0845%" y="175.50">al..</text></g><g><title>malloc (68 samples, 1.76%)</title><rect x="17.6349%" y="149" width="1.7557%" height="15" fill="rgb(218,129,16)" fg:x="683" fg:w="68"/><text x="17.8849%" y="159.50"></text></g><g><title>[libc.so.6] (17 samples, 0.44%)</title><rect x="18.9517%" y="133" width="0.4389%" height="15" fill="rgb(216,85,19)" fg:x="734" fg:w="17"/><text x="19.2017%" y="143.50"></text></g><g><title>[libc.so.6] (11 samples, 0.28%)</title><rect x="19.1066%" y="117" width="0.2840%" height="15" fill="rgb(235,228,7)" fg:x="740" fg:w="11"/><text x="19.3566%" y="127.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (133 samples, 3.43%)</title><rect x="16.8087%" y="325" width="3.4340%" height="15" fill="rgb(245,175,0)" fg:x="651" fg:w="133"/><text x="17.0587%" y="335.50">all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (133 samples, 3.43%)</title><rect x="16.8087%" y="309" width="3.4340%" height="15" fill="rgb(208,168,36)" fg:x="651" fg:w="133"/><text x="17.0587%" y="319.50">all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (133 samples, 3.43%)</title><rect x="16.8087%" y="293" width="3.4340%" height="15" fill="rgb(246,171,24)" fg:x="651" fg:w="133"/><text x="17.0587%" y="303.50">all..</text></g><g><title>alloc::slice::hack::to_vec (133 samples, 3.43%)</title><rect x="16.8087%" y="277" width="3.4340%" height="15" fill="rgb(215,142,24)" fg:x="651" fg:w="133"/><text x="17.0587%" y="287.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (133 samples, 3.43%)</title><rect x="16.8087%" y="261" width="3.4340%" height="15" fill="rgb(250,187,7)" fg:x="651" fg:w="133"/><text x="17.0587%" y="271.50">&lt;T ..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (33 samples, 0.85%)</title><rect x="19.3907%" y="245" width="0.8521%" height="15" fill="rgb(228,66,33)" fg:x="751" fg:w="33"/><text x="19.6407%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (33 samples, 0.85%)</title><rect x="19.3907%" y="229" width="0.8521%" height="15" fill="rgb(234,215,21)" fg:x="751" fg:w="33"/><text x="19.6407%" y="239.50"></text></g><g><title>[libc.so.6] (23 samples, 0.59%)</title><rect x="19.6489%" y="213" width="0.5939%" height="15" fill="rgb(222,191,20)" fg:x="761" fg:w="23"/><text x="19.8989%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;mut str&gt;&gt;::from (134 samples, 3.46%)</title><rect x="16.8087%" y="357" width="3.4599%" height="15" fill="rgb(245,79,54)" fg:x="651" fg:w="134"/><text x="17.0587%" y="367.50">&lt;al..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (134 samples, 3.46%)</title><rect x="16.8087%" y="341" width="3.4599%" height="15" fill="rgb(240,10,37)" fg:x="651" fg:w="134"/><text x="17.0587%" y="351.50">all..</text></g><g><title>alloc::string::String::from_utf8_unchecked (1 samples, 0.03%)</title><rect x="20.2427%" y="325" width="0.0258%" height="15" fill="rgb(214,192,32)" fg:x="784" fg:w="1"/><text x="20.4927%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;char&gt;&gt;::from (135 samples, 3.49%)</title><rect x="16.8087%" y="389" width="3.4857%" height="15" fill="rgb(209,36,54)" fg:x="651" fg:w="135"/><text x="17.0587%" y="399.50">&lt;al..</text></g><g><title>&lt;char as alloc::string::ToString&gt;::to_string (135 samples, 3.49%)</title><rect x="16.8087%" y="373" width="3.4857%" height="15" fill="rgb(220,10,11)" fg:x="651" fg:w="135"/><text x="17.0587%" y="383.50">&lt;ch..</text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1 samples, 0.03%)</title><rect x="20.2685%" y="357" width="0.0258%" height="15" fill="rgb(221,106,17)" fg:x="785" fg:w="1"/><text x="20.5185%" y="367.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1 samples, 0.03%)</title><rect x="20.2685%" y="341" width="0.0258%" height="15" fill="rgb(251,142,44)" fg:x="785" fg:w="1"/><text x="20.5185%" y="351.50"></text></g><g><title>core::str::count::count_chars (19 samples, 0.49%)</title><rect x="20.2943%" y="373" width="0.4906%" height="15" fill="rgb(238,13,15)" fg:x="786" fg:w="19"/><text x="20.5443%" y="383.50"></text></g><g><title>core::str::count::char_count_general_case (19 samples, 0.49%)</title><rect x="20.2943%" y="357" width="0.4906%" height="15" fill="rgb(208,107,27)" fg:x="786" fg:w="19"/><text x="20.5443%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (19 samples, 0.49%)</title><rect x="20.2943%" y="341" width="0.4906%" height="15" fill="rgb(205,136,37)" fg:x="786" fg:w="19"/><text x="20.5443%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (19 samples, 0.49%)</title><rect x="20.2943%" y="325" width="0.4906%" height="15" fill="rgb(250,205,27)" fg:x="786" fg:w="19"/><text x="20.5443%" y="335.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (19 samples, 0.49%)</title><rect x="20.2943%" y="309" width="0.4906%" height="15" fill="rgb(210,80,43)" fg:x="786" fg:w="19"/><text x="20.5443%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (19 samples, 0.49%)</title><rect x="20.2943%" y="293" width="0.4906%" height="15" fill="rgb(247,160,36)" fg:x="786" fg:w="19"/><text x="20.5443%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (19 samples, 0.49%)</title><rect x="20.2943%" y="277" width="0.4906%" height="15" fill="rgb(234,13,49)" fg:x="786" fg:w="19"/><text x="20.5443%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.49%)</title><rect x="20.2943%" y="261" width="0.4906%" height="15" fill="rgb(234,122,0)" fg:x="786" fg:w="19"/><text x="20.5443%" y="271.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (20 samples, 0.52%)</title><rect x="20.2943%" y="389" width="0.5164%" height="15" fill="rgb(207,146,38)" fg:x="786" fg:w="20"/><text x="20.5443%" y="399.50"></text></g><g><title>yt_history::parser::html_parser::ModelsParser::read_until (1 samples, 0.03%)</title><rect x="20.7849%" y="373" width="0.0258%" height="15" fill="rgb(207,177,25)" fg:x="805" fg:w="1"/><text x="21.0349%" y="383.50"></text></g><g><title>__rust_dealloc (1 samples, 0.03%)</title><rect x="20.8107%" y="389" width="0.0258%" height="15" fill="rgb(211,178,42)" fg:x="806" fg:w="1"/><text x="21.0607%" y="399.50"></text></g><g><title>alloc::string::String::new (2 samples, 0.05%)</title><rect x="20.8366%" y="389" width="0.0516%" height="15" fill="rgb(230,69,54)" fg:x="807" fg:w="2"/><text x="21.0866%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="20.8882%" y="373" width="0.0258%" height="15" fill="rgb(214,135,41)" fg:x="809" fg:w="1"/><text x="21.1382%" y="383.50"></text></g><g><title>alloc::string::String::push (2 samples, 0.05%)</title><rect x="20.8882%" y="389" width="0.0516%" height="15" fill="rgb(237,67,25)" fg:x="809" fg:w="2"/><text x="21.1382%" y="399.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::len_utf8 (1 samples, 0.03%)</title><rect x="20.9140%" y="373" width="0.0258%" height="15" fill="rgb(222,189,50)" fg:x="810" fg:w="1"/><text x="21.1640%" y="383.50"></text></g><g><title>core::char::methods::len_utf8 (1 samples, 0.03%)</title><rect x="20.9140%" y="357" width="0.0258%" height="15" fill="rgb(245,148,34)" fg:x="810" fg:w="1"/><text x="21.1640%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="20.9398%" y="261" width="0.0258%" height="15" fill="rgb(222,29,6)" fg:x="811" fg:w="1"/><text x="21.1898%" y="271.50"></text></g><g><title>alloc::string::String::with_capacity (9 samples, 0.23%)</title><rect x="20.9398%" y="389" width="0.2324%" height="15" fill="rgb(221,189,43)" fg:x="811" fg:w="9"/><text x="21.1898%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (9 samples, 0.23%)</title><rect x="20.9398%" y="373" width="0.2324%" height="15" fill="rgb(207,36,27)" fg:x="811" fg:w="9"/><text x="21.1898%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.23%)</title><rect x="20.9398%" y="357" width="0.2324%" height="15" fill="rgb(217,90,24)" fg:x="811" fg:w="9"/><text x="21.1898%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.23%)</title><rect x="20.9398%" y="341" width="0.2324%" height="15" fill="rgb(224,66,35)" fg:x="811" fg:w="9"/><text x="21.1898%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.23%)</title><rect x="20.9398%" y="325" width="0.2324%" height="15" fill="rgb(221,13,50)" fg:x="811" fg:w="9"/><text x="21.1898%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.23%)</title><rect x="20.9398%" y="309" width="0.2324%" height="15" fill="rgb(236,68,49)" fg:x="811" fg:w="9"/><text x="21.1898%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.23%)</title><rect x="20.9398%" y="293" width="0.2324%" height="15" fill="rgb(229,146,28)" fg:x="811" fg:w="9"/><text x="21.1898%" y="303.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.23%)</title><rect x="20.9398%" y="277" width="0.2324%" height="15" fill="rgb(225,31,38)" fg:x="811" fg:w="9"/><text x="21.1898%" y="287.50"></text></g><g><title>malloc (8 samples, 0.21%)</title><rect x="20.9657%" y="261" width="0.2066%" height="15" fill="rgb(250,208,3)" fg:x="812" fg:w="8"/><text x="21.2157%" y="271.50"></text></g><g><title>cfree (3 samples, 0.08%)</title><rect x="21.1722%" y="389" width="0.0775%" height="15" fill="rgb(246,54,23)" fg:x="820" fg:w="3"/><text x="21.4222%" y="399.50"></text></g><g><title>[libc.so.6] (3 samples, 0.08%)</title><rect x="21.1722%" y="373" width="0.0775%" height="15" fill="rgb(243,76,11)" fg:x="820" fg:w="3"/><text x="21.4222%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.08%)</title><rect x="21.2497%" y="389" width="0.0775%" height="15" fill="rgb(245,21,50)" fg:x="823" fg:w="3"/><text x="21.4997%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;str&gt;&gt;::eq (3 samples, 0.08%)</title><rect x="21.2497%" y="373" width="0.0775%" height="15" fill="rgb(228,9,43)" fg:x="823" fg:w="3"/><text x="21.4997%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (3 samples, 0.08%)</title><rect x="21.2497%" y="357" width="0.0775%" height="15" fill="rgb(208,100,47)" fg:x="823" fg:w="3"/><text x="21.4997%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.08%)</title><rect x="21.2497%" y="341" width="0.0775%" height="15" fill="rgb(232,26,8)" fg:x="823" fg:w="3"/><text x="21.4997%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3 samples, 0.08%)</title><rect x="21.2497%" y="325" width="0.0775%" height="15" fill="rgb(216,166,38)" fg:x="823" fg:w="3"/><text x="21.4997%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3 samples, 0.08%)</title><rect x="21.2497%" y="309" width="0.0775%" height="15" fill="rgb(251,202,51)" fg:x="823" fg:w="3"/><text x="21.4997%" y="319.50"></text></g><g><title>[libc.so.6] (3 samples, 0.08%)</title><rect x="21.2497%" y="293" width="0.0775%" height="15" fill="rgb(254,216,34)" fg:x="823" fg:w="3"/><text x="21.4997%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::nth (7 samples, 0.18%)</title><rect x="21.3271%" y="389" width="0.1807%" height="15" fill="rgb(251,32,27)" fg:x="826" fg:w="7"/><text x="21.5771%" y="399.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.18%)</title><rect x="21.3271%" y="373" width="0.1807%" height="15" fill="rgb(208,127,28)" fg:x="826" fg:w="7"/><text x="21.5771%" y="383.50"></text></g><g><title>core::str::validations::next_code_point (7 samples, 0.18%)</title><rect x="21.3271%" y="357" width="0.1807%" height="15" fill="rgb(224,137,22)" fg:x="826" fg:w="7"/><text x="21.5771%" y="367.50"></text></g><g><title>__rdl_dealloc (5 samples, 0.13%)</title><rect x="21.5853%" y="293" width="0.1291%" height="15" fill="rgb(254,70,32)" fg:x="836" fg:w="5"/><text x="21.8353%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (5 samples, 0.13%)</title><rect x="21.5853%" y="277" width="0.1291%" height="15" fill="rgb(229,75,37)" fg:x="836" fg:w="5"/><text x="21.8353%" y="287.50"></text></g><g><title>__rust_dealloc (18 samples, 0.46%)</title><rect x="21.7144%" y="293" width="0.4648%" height="15" fill="rgb(252,64,23)" fg:x="841" fg:w="18"/><text x="21.9644%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (243 samples, 6.27%)</title><rect x="21.5079%" y="389" width="6.2742%" height="15" fill="rgb(232,162,48)" fg:x="833" fg:w="243"/><text x="21.7579%" y="399.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (243 samples, 6.27%)</title><rect x="21.5079%" y="373" width="6.2742%" height="15" fill="rgb(246,160,12)" fg:x="833" fg:w="243"/><text x="21.7579%" y="383.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (243 samples, 6.27%)</title><rect x="21.5079%" y="357" width="6.2742%" height="15" fill="rgb(247,166,0)" fg:x="833" fg:w="243"/><text x="21.7579%" y="367.50">core::pt..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (243 samples, 6.27%)</title><rect x="21.5079%" y="341" width="6.2742%" height="15" fill="rgb(249,219,21)" fg:x="833" fg:w="243"/><text x="21.7579%" y="351.50">&lt;alloc::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (243 samples, 6.27%)</title><rect x="21.5079%" y="325" width="6.2742%" height="15" fill="rgb(205,209,3)" fg:x="833" fg:w="243"/><text x="21.7579%" y="335.50">&lt;alloc::..</text></g><g><title>alloc::alloc::dealloc (243 samples, 6.27%)</title><rect x="21.5079%" y="309" width="6.2742%" height="15" fill="rgb(243,44,1)" fg:x="833" fg:w="243"/><text x="21.7579%" y="319.50">alloc::a..</text></g><g><title>cfree (217 samples, 5.60%)</title><rect x="22.1792%" y="293" width="5.6029%" height="15" fill="rgb(206,159,16)" fg:x="859" fg:w="217"/><text x="22.4292%" y="303.50">cfree</text></g><g><title>[libc.so.6] (139 samples, 3.59%)</title><rect x="24.1931%" y="277" width="3.5889%" height="15" fill="rgb(244,77,30)" fg:x="937" fg:w="139"/><text x="24.4431%" y="287.50">[lib..</text></g><g><title>core::str::&lt;impl str&gt;::as_bytes (1 samples, 0.03%)</title><rect x="27.7821%" y="373" width="0.0258%" height="15" fill="rgb(218,69,12)" fg:x="1076" fg:w="1"/><text x="28.0321%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (11 samples, 0.28%)</title><rect x="27.7821%" y="389" width="0.2840%" height="15" fill="rgb(212,87,7)" fg:x="1076" fg:w="11"/><text x="28.0321%" y="399.50"></text></g><g><title>yt_history::parser::html_parser::ModelsParser::read_until (10 samples, 0.26%)</title><rect x="27.8079%" y="373" width="0.2582%" height="15" fill="rgb(245,114,25)" fg:x="1077" fg:w="10"/><text x="28.0579%" y="383.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::last (16 samples, 0.41%)</title><rect x="29.0214%" y="373" width="0.4131%" height="15" fill="rgb(210,61,42)" fg:x="1124" fg:w="16"/><text x="29.2714%" y="383.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (16 samples, 0.41%)</title><rect x="29.0214%" y="357" width="0.4131%" height="15" fill="rgb(211,52,33)" fg:x="1124" fg:w="16"/><text x="29.2714%" y="367.50"></text></g><g><title>core::str::validations::next_code_point_reverse (16 samples, 0.41%)</title><rect x="29.0214%" y="341" width="0.4131%" height="15" fill="rgb(234,58,33)" fg:x="1124" fg:w="16"/><text x="29.2714%" y="351.50"></text></g><g><title>core::str::validations::utf8_is_cont_byte (1 samples, 0.03%)</title><rect x="29.4087%" y="325" width="0.0258%" height="15" fill="rgb(220,115,36)" fg:x="1139" fg:w="1"/><text x="29.6587%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.23%)</title><rect x="29.4345%" y="341" width="0.2324%" height="15" fill="rgb(243,153,54)" fg:x="1140" fg:w="9"/><text x="29.6845%" y="351.50"></text></g><g><title>core::str::validations::utf8_acc_cont_byte (1 samples, 0.03%)</title><rect x="29.6669%" y="341" width="0.0258%" height="15" fill="rgb(251,47,18)" fg:x="1149" fg:w="1"/><text x="29.9169%" y="351.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.28%)</title><rect x="29.4345%" y="373" width="0.2840%" height="15" fill="rgb(242,102,42)" fg:x="1140" fg:w="11"/><text x="29.6845%" y="383.50"></text></g><g><title>core::str::validations::next_code_point (11 samples, 0.28%)</title><rect x="29.4345%" y="357" width="0.2840%" height="15" fill="rgb(234,31,38)" fg:x="1140" fg:w="11"/><text x="29.6845%" y="367.50"></text></g><g><title>core::str::validations::utf8_first_byte (1 samples, 0.03%)</title><rect x="29.6927%" y="341" width="0.0258%" height="15" fill="rgb(221,117,51)" fg:x="1150" fg:w="1"/><text x="29.9427%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.08%)</title><rect x="30.2608%" y="309" width="0.0775%" height="15" fill="rgb(212,20,18)" fg:x="1172" fg:w="3"/><text x="30.5108%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (2 samples, 0.05%)</title><rect x="30.3382%" y="309" width="0.0516%" height="15" fill="rgb(245,133,36)" fg:x="1175" fg:w="2"/><text x="30.5882%" y="319.50"></text></g><g><title>__rdl_realloc (4 samples, 0.10%)</title><rect x="30.4157%" y="245" width="0.1033%" height="15" fill="rgb(212,6,19)" fg:x="1178" fg:w="4"/><text x="30.6657%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.08%)</title><rect x="30.4415%" y="229" width="0.0775%" height="15" fill="rgb(218,1,36)" fg:x="1179" fg:w="3"/><text x="30.6915%" y="239.50"></text></g><g><title>__rust_realloc (1 samples, 0.03%)</title><rect x="30.5190%" y="245" width="0.0258%" height="15" fill="rgb(246,84,54)" fg:x="1182" fg:w="1"/><text x="30.7690%" y="255.50"></text></g><g><title>[libc.so.6] (3 samples, 0.08%)</title><rect x="31.9649%" y="197" width="0.0775%" height="15" fill="rgb(242,110,6)" fg:x="1238" fg:w="3"/><text x="32.2149%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (64 samples, 1.65%)</title><rect x="30.4157%" y="293" width="1.6525%" height="15" fill="rgb(214,47,5)" fg:x="1178" fg:w="64"/><text x="30.6657%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (64 samples, 1.65%)</title><rect x="30.4157%" y="277" width="1.6525%" height="15" fill="rgb(218,159,25)" fg:x="1178" fg:w="64"/><text x="30.6657%" y="287.50"></text></g><g><title>alloc::alloc::realloc (64 samples, 1.65%)</title><rect x="30.4157%" y="261" width="1.6525%" height="15" fill="rgb(215,211,28)" fg:x="1178" fg:w="64"/><text x="30.6657%" y="271.50"></text></g><g><title>realloc (59 samples, 1.52%)</title><rect x="30.5448%" y="245" width="1.5234%" height="15" fill="rgb(238,59,32)" fg:x="1183" fg:w="59"/><text x="30.7948%" y="255.50"></text></g><g><title>[libc.so.6] (49 samples, 1.27%)</title><rect x="30.8030%" y="229" width="1.2652%" height="15" fill="rgb(226,82,3)" fg:x="1193" fg:w="49"/><text x="31.0530%" y="239.50"></text></g><g><title>[libc.so.6] (29 samples, 0.75%)</title><rect x="31.3194%" y="213" width="0.7488%" height="15" fill="rgb(240,164,32)" fg:x="1213" fg:w="29"/><text x="31.5694%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="32.0423%" y="197" width="0.0258%" height="15" fill="rgb(232,46,7)" fg:x="1241" fg:w="1"/><text x="32.2923%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="32.0423%" y="181" width="0.0258%" height="15" fill="rgb(229,129,53)" fg:x="1241" fg:w="1"/><text x="32.2923%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="32.0423%" y="165" width="0.0258%" height="15" fill="rgb(234,188,29)" fg:x="1241" fg:w="1"/><text x="32.2923%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="32.0423%" y="149" width="0.0258%" height="15" fill="rgb(246,141,4)" fg:x="1241" fg:w="1"/><text x="32.2923%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="32.0423%" y="133" width="0.0258%" height="15" fill="rgb(229,23,39)" fg:x="1241" fg:w="1"/><text x="32.2923%" y="143.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3 samples, 0.08%)</title><rect x="32.0682%" y="293" width="0.0775%" height="15" fill="rgb(206,12,3)" fg:x="1242" fg:w="3"/><text x="32.3182%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (77 samples, 1.99%)</title><rect x="30.3899%" y="309" width="1.9881%" height="15" fill="rgb(252,226,20)" fg:x="1177" fg:w="77"/><text x="30.6399%" y="319.50">a..</text></g><g><title>malloc (9 samples, 0.23%)</title><rect x="32.1456%" y="293" width="0.2324%" height="15" fill="rgb(216,123,35)" fg:x="1245" fg:w="9"/><text x="32.3956%" y="303.50"></text></g><g><title>[libc.so.6] (8 samples, 0.21%)</title><rect x="32.1714%" y="277" width="0.2066%" height="15" fill="rgb(212,68,40)" fg:x="1246" fg:w="8"/><text x="32.4214%" y="287.50"></text></g><g><title>[libc.so.6] (3 samples, 0.08%)</title><rect x="32.3005%" y="261" width="0.0775%" height="15" fill="rgb(254,125,32)" fg:x="1251" fg:w="3"/><text x="32.5505%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.03%)</title><rect x="32.3780%" y="309" width="0.0258%" height="15" fill="rgb(253,97,22)" fg:x="1254" fg:w="1"/><text x="32.6280%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.03%)</title><rect x="32.3780%" y="293" width="0.0258%" height="15" fill="rgb(241,101,14)" fg:x="1254" fg:w="1"/><text x="32.6280%" y="303.50"></text></g><g><title>core::cmp::max (3 samples, 0.08%)</title><rect x="32.4038%" y="309" width="0.0775%" height="15" fill="rgb(238,103,29)" fg:x="1255" fg:w="3"/><text x="32.6538%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.08%)</title><rect x="32.4038%" y="293" width="0.0775%" height="15" fill="rgb(233,195,47)" fg:x="1255" fg:w="3"/><text x="32.6538%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (88 samples, 2.27%)</title><rect x="30.2608%" y="341" width="2.2721%" height="15" fill="rgb(246,218,30)" fg:x="1172" fg:w="88"/><text x="30.5108%" y="351.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (88 samples, 2.27%)</title><rect x="30.2608%" y="325" width="2.2721%" height="15" fill="rgb(219,145,47)" fg:x="1172" fg:w="88"/><text x="30.5108%" y="335.50">a..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.05%)</title><rect x="32.4813%" y="309" width="0.0516%" height="15" fill="rgb(243,12,26)" fg:x="1258" fg:w="2"/><text x="32.7313%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.05%)</title><rect x="32.4813%" y="293" width="0.0516%" height="15" fill="rgb(214,87,16)" fg:x="1258" fg:w="2"/><text x="32.7313%" y="303.50"></text></g><g><title>alloc::string::String::push (127 samples, 3.28%)</title><rect x="29.7186%" y="373" width="3.2791%" height="15" fill="rgb(208,99,42)" fg:x="1151" fg:w="127"/><text x="29.9686%" y="383.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (127 samples, 3.28%)</title><rect x="29.7186%" y="357" width="3.2791%" height="15" fill="rgb(253,99,2)" fg:x="1151" fg:w="127"/><text x="29.9686%" y="367.50">all..</text></g><g><title>core::ptr::write (18 samples, 0.46%)</title><rect x="32.5329%" y="341" width="0.4648%" height="15" fill="rgb(220,168,23)" fg:x="1260" fg:w="18"/><text x="32.7829%" y="351.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (12 samples, 0.31%)</title><rect x="32.9977%" y="373" width="0.3098%" height="15" fill="rgb(242,38,24)" fg:x="1278" fg:w="12"/><text x="33.2477%" y="383.50"></text></g><g><title>yt_history::parser::html_parser::ModelsParser::read_until (1,063 samples, 27.45%)</title><rect x="5.9127%" y="405" width="27.4464%" height="15" fill="rgb(225,182,9)" fg:x="229" fg:w="1063"/><text x="6.1627%" y="415.50">yt_history::parser::html_parser::ModelsParse..</text></g><g><title>yt_history::parser::html_parser::push_collapse_whitespace (205 samples, 5.29%)</title><rect x="28.0661%" y="389" width="5.2931%" height="15" fill="rgb(243,178,37)" fg:x="1087" fg:w="205"/><text x="28.3161%" y="399.50">yt_his..</text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.05%)</title><rect x="33.3075%" y="373" width="0.0516%" height="15" fill="rgb(232,139,19)" fg:x="1290" fg:w="2"/><text x="33.5575%" y="383.50"></text></g><g><title>yt_history::parser::html_parser::push_collapse_whitespace::{{closure}} (1 samples, 0.03%)</title><rect x="33.3333%" y="357" width="0.0258%" height="15" fill="rgb(225,201,24)" fg:x="1291" fg:w="1"/><text x="33.5833%" y="367.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (1 samples, 0.03%)</title><rect x="33.3333%" y="341" width="0.0258%" height="15" fill="rgb(221,47,46)" fg:x="1291" fg:w="1"/><text x="33.5833%" y="351.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1,422 samples, 36.72%)</title><rect x="40.0723%" y="341" width="36.7157%" height="15" fill="rgb(249,23,13)" fg:x="1552" fg:w="1422"/><text x="40.3223%" y="351.50">&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::bran..</text></g><g><title>&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.41%)</title><rect x="81.7971%" y="277" width="0.4131%" height="15" fill="rgb(219,9,5)" fg:x="3168" fg:w="16"/><text x="82.0471%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (7 samples, 0.18%)</title><rect x="82.2618%" y="261" width="0.1807%" height="15" fill="rgb(254,171,16)" fg:x="3186" fg:w="7"/><text x="82.5118%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.67%)</title><rect x="81.7971%" y="309" width="0.6713%" height="15" fill="rgb(230,171,20)" fg:x="3168" fg:w="26"/><text x="82.0471%" y="319.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (26 samples, 0.67%)</title><rect x="81.7971%" y="293" width="0.6713%" height="15" fill="rgb(210,71,41)" fg:x="3168" fg:w="26"/><text x="82.0471%" y="303.50"></text></g><g><title>core::str::validations::next_code_point_reverse (10 samples, 0.26%)</title><rect x="82.2102%" y="277" width="0.2582%" height="15" fill="rgb(206,173,20)" fg:x="3184" fg:w="10"/><text x="82.4602%" y="287.50"></text></g><g><title>core::str::validations::utf8_is_cont_byte (1 samples, 0.03%)</title><rect x="82.4426%" y="261" width="0.0258%" height="15" fill="rgb(233,88,34)" fg:x="3193" fg:w="1"/><text x="82.6926%" y="271.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (15 samples, 0.39%)</title><rect x="82.4684%" y="309" width="0.3873%" height="15" fill="rgb(223,209,46)" fg:x="3194" fg:w="15"/><text x="82.7184%" y="319.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (15 samples, 0.39%)</title><rect x="82.4684%" y="293" width="0.3873%" height="15" fill="rgb(250,43,18)" fg:x="3194" fg:w="15"/><text x="82.7184%" y="303.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (15 samples, 0.39%)</title><rect x="82.4684%" y="277" width="0.3873%" height="15" fill="rgb(208,13,10)" fg:x="3194" fg:w="15"/><text x="82.7184%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (15 samples, 0.39%)</title><rect x="82.4684%" y="261" width="0.3873%" height="15" fill="rgb(212,200,36)" fg:x="3194" fg:w="15"/><text x="82.7184%" y="271.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (15 samples, 0.39%)</title><rect x="82.4684%" y="245" width="0.3873%" height="15" fill="rgb(225,90,30)" fg:x="3194" fg:w="15"/><text x="82.7184%" y="255.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (15 samples, 0.39%)</title><rect x="82.4684%" y="229" width="0.3873%" height="15" fill="rgb(236,182,39)" fg:x="3194" fg:w="15"/><text x="82.7184%" y="239.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (15 samples, 0.39%)</title><rect x="82.4684%" y="213" width="0.3873%" height="15" fill="rgb(212,144,35)" fg:x="3194" fg:w="15"/><text x="82.7184%" y="223.50"></text></g><g><title>read (15 samples, 0.39%)</title><rect x="82.4684%" y="197" width="0.3873%" height="15" fill="rgb(228,63,44)" fg:x="3194" fg:w="15"/><text x="82.7184%" y="207.50"></text></g><g><title>[unknown] (15 samples, 0.39%)</title><rect x="82.4684%" y="181" width="0.3873%" height="15" fill="rgb(228,109,6)" fg:x="3194" fg:w="15"/><text x="82.7184%" y="191.50"></text></g><g><title>[unknown] (15 samples, 0.39%)</title><rect x="82.4684%" y="165" width="0.3873%" height="15" fill="rgb(238,117,24)" fg:x="3194" fg:w="15"/><text x="82.7184%" y="175.50"></text></g><g><title>[unknown] (15 samples, 0.39%)</title><rect x="82.4684%" y="149" width="0.3873%" height="15" fill="rgb(242,26,26)" fg:x="3194" fg:w="15"/><text x="82.7184%" y="159.50"></text></g><g><title>[unknown] (15 samples, 0.39%)</title><rect x="82.4684%" y="133" width="0.3873%" height="15" fill="rgb(221,92,48)" fg:x="3194" fg:w="15"/><text x="82.7184%" y="143.50"></text></g><g><title>[unknown] (15 samples, 0.39%)</title><rect x="82.4684%" y="117" width="0.3873%" height="15" fill="rgb(209,209,32)" fg:x="3194" fg:w="15"/><text x="82.7184%" y="127.50"></text></g><g><title>[unknown] (12 samples, 0.31%)</title><rect x="82.5458%" y="101" width="0.3098%" height="15" fill="rgb(221,70,22)" fg:x="3197" fg:w="12"/><text x="82.7958%" y="111.50"></text></g><g><title>[unknown] (12 samples, 0.31%)</title><rect x="82.5458%" y="85" width="0.3098%" height="15" fill="rgb(248,145,5)" fg:x="3197" fg:w="12"/><text x="82.7958%" y="95.50"></text></g><g><title>[unknown] (12 samples, 0.31%)</title><rect x="82.5458%" y="69" width="0.3098%" height="15" fill="rgb(226,116,26)" fg:x="3197" fg:w="12"/><text x="82.7958%" y="79.50"></text></g><g><title>[unknown] (4 samples, 0.10%)</title><rect x="82.7524%" y="53" width="0.1033%" height="15" fill="rgb(244,5,17)" fg:x="3205" fg:w="4"/><text x="83.0024%" y="63.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="82.8040%" y="37" width="0.0516%" height="15" fill="rgb(252,159,33)" fg:x="3207" fg:w="2"/><text x="83.0540%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (78 samples, 2.01%)</title><rect x="82.8557%" y="309" width="2.0139%" height="15" fill="rgb(206,71,0)" fg:x="3209" fg:w="78"/><text x="83.1057%" y="319.50">a..</text></g><g><title>core::ptr::read (73 samples, 1.88%)</title><rect x="82.9848%" y="293" width="1.8848%" height="15" fill="rgb(233,118,54)" fg:x="3214" fg:w="73"/><text x="83.2348%" y="303.50">c..</text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="92.4606%" y="293" width="0.0258%" height="15" fill="rgb(234,83,48)" fg:x="3581" fg:w="1"/><text x="92.7106%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (297 samples, 7.67%)</title><rect x="84.8696%" y="309" width="7.6685%" height="15" fill="rgb(228,3,54)" fg:x="3287" fg:w="297"/><text x="85.1196%" y="319.50">alloc::vec..</text></g><g><title>core::ptr::write (2 samples, 0.05%)</title><rect x="92.4864%" y="293" width="0.0516%" height="15" fill="rgb(226,155,13)" fg:x="3582" fg:w="2"/><text x="92.7364%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_within (1 samples, 0.03%)</title><rect x="92.5381%" y="309" width="0.0258%" height="15" fill="rgb(241,28,37)" fg:x="3584" fg:w="1"/><text x="92.7881%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="92.5381%" y="293" width="0.0258%" height="15" fill="rgb(233,93,10)" fg:x="3584" fg:w="1"/><text x="92.7881%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="92.5381%" y="277" width="0.0258%" height="15" fill="rgb(225,113,19)" fg:x="3584" fg:w="1"/><text x="92.7881%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,039 samples, 52.65%)</title><rect x="40.0465%" y="357" width="52.6465%" height="15" fill="rgb(241,2,18)" fg:x="1551" fg:w="2039"/><text x="40.2965%" y="367.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterato..</text></g><g><title>&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (616 samples, 15.90%)</title><rect x="76.7880%" y="341" width="15.9050%" height="15" fill="rgb(228,207,21)" fg:x="2974" fg:w="616"/><text x="77.0380%" y="351.50">&lt;yt_history::utf8_reader..</text></g><g><title>yt_history::utf8_reader::Utf8Iter&lt;R&gt;::next (424 samples, 10.95%)</title><rect x="81.7454%" y="325" width="10.9476%" height="15" fill="rgb(213,211,35)" fg:x="3166" fg:w="424"/><text x="81.9954%" y="335.50">yt_history::utf8..</text></g><g><title>core::str::converts::from_utf8 (5 samples, 0.13%)</title><rect x="92.5639%" y="309" width="0.1291%" height="15" fill="rgb(209,83,10)" fg:x="3585" fg:w="5"/><text x="92.8139%" y="319.50"></text></g><g><title>core::str::validations::run_utf8_validation (5 samples, 0.13%)</title><rect x="92.5639%" y="293" width="0.1291%" height="15" fill="rgb(209,164,1)" fg:x="3585" fg:w="5"/><text x="92.8139%" y="303.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (2,047 samples, 52.85%)</title><rect x="39.9948%" y="389" width="52.8531%" height="15" fill="rgb(213,184,43)" fg:x="1549" fg:w="2047"/><text x="40.2448%" y="399.50">&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,047 samples, 52.85%)</title><rect x="39.9948%" y="373" width="52.8531%" height="15" fill="rgb(231,61,34)" fg:x="1549" fg:w="2047"/><text x="40.2448%" y="383.50">&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;..</text></g><g><title>core::option::Option&lt;T&gt;::take (6 samples, 0.15%)</title><rect x="92.6930%" y="357" width="0.1549%" height="15" fill="rgb(235,75,3)" fg:x="3590" fg:w="6"/><text x="92.9430%" y="367.50"></text></g><g><title>core::mem::replace (6 samples, 0.15%)</title><rect x="92.6930%" y="341" width="0.1549%" height="15" fill="rgb(220,106,47)" fg:x="3590" fg:w="6"/><text x="92.9430%" y="351.50"></text></g><g><title>core::ptr::read (2 samples, 0.05%)</title><rect x="92.7963%" y="325" width="0.0516%" height="15" fill="rgb(210,196,33)" fg:x="3594" fg:w="2"/><text x="93.0463%" y="335.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (2 samples, 0.05%)</title><rect x="92.7963%" y="309" width="0.0516%" height="15" fill="rgb(229,154,42)" fg:x="3594" fg:w="2"/><text x="93.0463%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="92.8479%" y="389" width="0.0258%" height="15" fill="rgb(228,114,26)" fg:x="3596" fg:w="1"/><text x="93.0979%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="92.8479%" y="373" width="0.0258%" height="15" fill="rgb(208,144,1)" fg:x="3596" fg:w="1"/><text x="93.0979%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.03%)</title><rect x="92.8479%" y="357" width="0.0258%" height="15" fill="rgb(239,112,37)" fg:x="3596" fg:w="1"/><text x="93.0979%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.03%)</title><rect x="92.8479%" y="341" width="0.0258%" height="15" fill="rgb(210,96,50)" fg:x="3596" fg:w="1"/><text x="93.0979%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.03%)</title><rect x="92.8479%" y="325" width="0.0258%" height="15" fill="rgb(222,178,2)" fg:x="3596" fg:w="1"/><text x="93.0979%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="92.8479%" y="309" width="0.0258%" height="15" fill="rgb(226,74,18)" fg:x="3596" fg:w="1"/><text x="93.0979%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="92.8479%" y="293" width="0.0258%" height="15" fill="rgb(225,67,54)" fg:x="3596" fg:w="1"/><text x="93.0979%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.03%)</title><rect x="92.8479%" y="277" width="0.0258%" height="15" fill="rgb(251,92,32)" fg:x="3596" fg:w="1"/><text x="93.0979%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="92.8479%" y="261" width="0.0258%" height="15" fill="rgb(228,149,22)" fg:x="3596" fg:w="1"/><text x="93.0979%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="92.8479%" y="245" width="0.0258%" height="15" fill="rgb(243,54,13)" fg:x="3596" fg:w="1"/><text x="93.0979%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="92.8479%" y="229" width="0.0258%" height="15" fill="rgb(243,180,28)" fg:x="3596" fg:w="1"/><text x="93.0979%" y="239.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="92.8479%" y="213" width="0.0258%" height="15" fill="rgb(208,167,24)" fg:x="3596" fg:w="1"/><text x="93.0979%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="92.8479%" y="197" width="0.0258%" height="15" fill="rgb(245,73,45)" fg:x="3596" fg:w="1"/><text x="93.0979%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (2 samples, 0.05%)</title><rect x="92.8737%" y="389" width="0.0516%" height="15" fill="rgb(237,203,48)" fg:x="3597" fg:w="2"/><text x="93.1237%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (127 samples, 3.28%)</title><rect x="92.9254%" y="261" width="3.2791%" height="15" fill="rgb(211,197,16)" fg:x="3599" fg:w="127"/><text x="93.1754%" y="271.50">&lt;co..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (2 samples, 0.05%)</title><rect x="96.1529%" y="245" width="0.0516%" height="15" fill="rgb(243,99,51)" fg:x="3724" fg:w="2"/><text x="96.4029%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.05%)</title><rect x="96.1529%" y="229" width="0.0516%" height="15" fill="rgb(215,123,29)" fg:x="3724" fg:w="2"/><text x="96.4029%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.05%)</title><rect x="96.1529%" y="213" width="0.0516%" height="15" fill="rgb(239,186,37)" fg:x="3724" fg:w="2"/><text x="96.4029%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::{{closure}} (3 samples, 0.08%)</title><rect x="96.2045%" y="245" width="0.0775%" height="15" fill="rgb(252,136,39)" fg:x="3726" fg:w="3"/><text x="96.4545%" y="255.50"></text></g><g><title>core::str::count::char_count_general_case::{{closure}} (1 samples, 0.03%)</title><rect x="96.2561%" y="229" width="0.0258%" height="15" fill="rgb(223,213,32)" fg:x="3728" fg:w="1"/><text x="96.5061%" y="239.50"></text></g><g><title>core::str::validations::utf8_is_cont_byte (1 samples, 0.03%)</title><rect x="96.2561%" y="213" width="0.0258%" height="15" fill="rgb(233,115,5)" fg:x="3728" fg:w="1"/><text x="96.5061%" y="223.50"></text></g><g><title>core::str::count::count_chars (138 samples, 3.56%)</title><rect x="92.9254%" y="373" width="3.5631%" height="15" fill="rgb(207,226,44)" fg:x="3599" fg:w="138"/><text x="93.1754%" y="383.50">core..</text></g><g><title>core::str::count::char_count_general_case (138 samples, 3.56%)</title><rect x="92.9254%" y="357" width="3.5631%" height="15" fill="rgb(208,126,0)" fg:x="3599" fg:w="138"/><text x="93.1754%" y="367.50">core..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (138 samples, 3.56%)</title><rect x="92.9254%" y="341" width="3.5631%" height="15" fill="rgb(244,66,21)" fg:x="3599" fg:w="138"/><text x="93.1754%" y="351.50">&lt;cor..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (138 samples, 3.56%)</title><rect x="92.9254%" y="325" width="3.5631%" height="15" fill="rgb(222,97,12)" fg:x="3599" fg:w="138"/><text x="93.1754%" y="335.50">core..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (138 samples, 3.56%)</title><rect x="92.9254%" y="309" width="3.5631%" height="15" fill="rgb(219,213,19)" fg:x="3599" fg:w="138"/><text x="93.1754%" y="319.50">&lt;usi..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (138 samples, 3.56%)</title><rect x="92.9254%" y="293" width="3.5631%" height="15" fill="rgb(252,169,30)" fg:x="3599" fg:w="138"/><text x="93.1754%" y="303.50">&lt;cor..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (138 samples, 3.56%)</title><rect x="92.9254%" y="277" width="3.5631%" height="15" fill="rgb(206,32,51)" fg:x="3599" fg:w="138"/><text x="93.1754%" y="287.50">core..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (11 samples, 0.28%)</title><rect x="96.2045%" y="261" width="0.2840%" height="15" fill="rgb(250,172,42)" fg:x="3726" fg:w="11"/><text x="96.4545%" y="271.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (8 samples, 0.21%)</title><rect x="96.2820%" y="245" width="0.2066%" height="15" fill="rgb(209,34,43)" fg:x="3729" fg:w="8"/><text x="96.5320%" y="255.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (140 samples, 3.61%)</title><rect x="92.9254%" y="389" width="3.6148%" height="15" fill="rgb(223,11,35)" fg:x="3599" fg:w="140"/><text x="93.1754%" y="399.50">&lt;cor..</text></g><g><title>yt_history::parser::html_parser::ModelsParser::skip_to (2 samples, 0.05%)</title><rect x="96.4885%" y="373" width="0.0516%" height="15" fill="rgb(251,219,26)" fg:x="3737" fg:w="2"/><text x="96.7385%" y="383.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="96.5401%" y="389" width="0.0258%" height="15" fill="rgb(231,119,3)" fg:x="3739" fg:w="1"/><text x="96.7901%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="96.5401%" y="373" width="0.0258%" height="15" fill="rgb(216,97,11)" fg:x="3739" fg:w="1"/><text x="96.7901%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.05%)</title><rect x="96.5660%" y="373" width="0.0516%" height="15" fill="rgb(223,59,9)" fg:x="3740" fg:w="2"/><text x="96.8160%" y="383.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="96.5918%" y="357" width="0.0258%" height="15" fill="rgb(233,93,31)" fg:x="3741" fg:w="1"/><text x="96.8418%" y="367.50"></text></g><g><title>alloc::string::String::push (3 samples, 0.08%)</title><rect x="96.5660%" y="389" width="0.0775%" height="15" fill="rgb(239,81,33)" fg:x="3740" fg:w="3"/><text x="96.8160%" y="399.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1 samples, 0.03%)</title><rect x="96.6176%" y="373" width="0.0258%" height="15" fill="rgb(213,120,34)" fg:x="3742" fg:w="1"/><text x="96.8676%" y="383.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1 samples, 0.03%)</title><rect x="96.6176%" y="357" width="0.0258%" height="15" fill="rgb(243,49,53)" fg:x="3742" fg:w="1"/><text x="96.8676%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="96.6951%" y="261" width="0.0258%" height="15" fill="rgb(247,216,33)" fg:x="3745" fg:w="1"/><text x="96.9451%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="96.6951%" y="245" width="0.0258%" height="15" fill="rgb(226,26,14)" fg:x="3745" fg:w="1"/><text x="96.9451%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.26%)</title><rect x="96.6692%" y="325" width="0.2582%" height="15" fill="rgb(215,49,53)" fg:x="3744" fg:w="10"/><text x="96.9192%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.23%)</title><rect x="96.6951%" y="309" width="0.2324%" height="15" fill="rgb(245,162,40)" fg:x="3745" fg:w="9"/><text x="96.9451%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.23%)</title><rect x="96.6951%" y="293" width="0.2324%" height="15" fill="rgb(229,68,17)" fg:x="3745" fg:w="9"/><text x="96.9451%" y="303.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.23%)</title><rect x="96.6951%" y="277" width="0.2324%" height="15" fill="rgb(213,182,10)" fg:x="3745" fg:w="9"/><text x="96.9451%" y="287.50"></text></g><g><title>malloc (8 samples, 0.21%)</title><rect x="96.7209%" y="261" width="0.2066%" height="15" fill="rgb(245,125,30)" fg:x="3746" fg:w="8"/><text x="96.9709%" y="271.50"></text></g><g><title>alloc::string::String::with_capacity (12 samples, 0.31%)</title><rect x="96.6434%" y="389" width="0.3098%" height="15" fill="rgb(232,202,2)" fg:x="3743" fg:w="12"/><text x="96.8934%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (11 samples, 0.28%)</title><rect x="96.6692%" y="373" width="0.2840%" height="15" fill="rgb(237,140,51)" fg:x="3744" fg:w="11"/><text x="96.9192%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.28%)</title><rect x="96.6692%" y="357" width="0.2840%" height="15" fill="rgb(236,157,25)" fg:x="3744" fg:w="11"/><text x="96.9192%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.28%)</title><rect x="96.6692%" y="341" width="0.2840%" height="15" fill="rgb(219,209,0)" fg:x="3744" fg:w="11"/><text x="96.9192%" y="351.50"></text></g><g><title>yt_history::parser::html_parser::ModelsParser::skip_to (1 samples, 0.03%)</title><rect x="96.9274%" y="325" width="0.0258%" height="15" fill="rgb(240,116,54)" fg:x="3754" fg:w="1"/><text x="97.1774%" y="335.50"></text></g><g><title>cfree (8 samples, 0.21%)</title><rect x="96.9533%" y="389" width="0.2066%" height="15" fill="rgb(216,10,36)" fg:x="3755" fg:w="8"/><text x="97.2033%" y="399.50"></text></g><g><title>[libc.so.6] (4 samples, 0.10%)</title><rect x="97.0565%" y="373" width="0.1033%" height="15" fill="rgb(222,72,44)" fg:x="3759" fg:w="4"/><text x="97.3065%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (7 samples, 0.18%)</title><rect x="97.1598%" y="389" width="0.1807%" height="15" fill="rgb(232,159,9)" fg:x="3763" fg:w="7"/><text x="97.4098%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;str&gt;&gt;::eq (7 samples, 0.18%)</title><rect x="97.1598%" y="373" width="0.1807%" height="15" fill="rgb(210,39,32)" fg:x="3763" fg:w="7"/><text x="97.4098%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (7 samples, 0.18%)</title><rect x="97.1598%" y="357" width="0.1807%" height="15" fill="rgb(216,194,45)" fg:x="3763" fg:w="7"/><text x="97.4098%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (7 samples, 0.18%)</title><rect x="97.1598%" y="341" width="0.1807%" height="15" fill="rgb(218,18,35)" fg:x="3763" fg:w="7"/><text x="97.4098%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (7 samples, 0.18%)</title><rect x="97.1598%" y="325" width="0.1807%" height="15" fill="rgb(207,83,51)" fg:x="3763" fg:w="7"/><text x="97.4098%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (7 samples, 0.18%)</title><rect x="97.1598%" y="309" width="0.1807%" height="15" fill="rgb(225,63,43)" fg:x="3763" fg:w="7"/><text x="97.4098%" y="319.50"></text></g><g><title>[libc.so.6] (7 samples, 0.18%)</title><rect x="97.1598%" y="293" width="0.1807%" height="15" fill="rgb(207,57,36)" fg:x="3763" fg:w="7"/><text x="97.4098%" y="303.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="97.3406%" y="373" width="0.0258%" height="15" fill="rgb(216,99,33)" fg:x="3770" fg:w="1"/><text x="97.5906%" y="383.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.03%)</title><rect x="97.3406%" y="357" width="0.0258%" height="15" fill="rgb(225,42,16)" fg:x="3770" fg:w="1"/><text x="97.5906%" y="367.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="97.3664%" y="357" width="0.0258%" height="15" fill="rgb(220,201,45)" fg:x="3771" fg:w="1"/><text x="97.6164%" y="367.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.03%)</title><rect x="97.3664%" y="341" width="0.0258%" height="15" fill="rgb(225,33,4)" fg:x="3771" fg:w="1"/><text x="97.6164%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (6 samples, 0.15%)</title><rect x="97.3664%" y="373" width="0.1549%" height="15" fill="rgb(224,33,50)" fg:x="3771" fg:w="6"/><text x="97.6164%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5 samples, 0.13%)</title><rect x="97.3922%" y="357" width="0.1291%" height="15" fill="rgb(246,198,51)" fg:x="3772" fg:w="5"/><text x="97.6422%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5 samples, 0.13%)</title><rect x="97.3922%" y="341" width="0.1291%" height="15" fill="rgb(205,22,4)" fg:x="3772" fg:w="5"/><text x="97.6422%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::nth (9 samples, 0.23%)</title><rect x="97.3406%" y="389" width="0.2324%" height="15" fill="rgb(206,3,8)" fg:x="3770" fg:w="9"/><text x="97.5906%" y="399.50"></text></g><g><title>yt_history::parser::html_parser::ModelsParser::skip_to (2 samples, 0.05%)</title><rect x="97.5213%" y="373" width="0.0516%" height="15" fill="rgb(251,23,15)" fg:x="3777" fg:w="2"/><text x="97.7713%" y="383.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="97.5729%" y="293" width="0.0258%" height="15" fill="rgb(252,88,28)" fg:x="3779" fg:w="1"/><text x="97.8229%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="97.5729%" y="277" width="0.0258%" height="15" fill="rgb(212,127,14)" fg:x="3779" fg:w="1"/><text x="97.8229%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (10 samples, 0.26%)</title><rect x="97.5729%" y="389" width="0.2582%" height="15" fill="rgb(247,145,37)" fg:x="3779" fg:w="10"/><text x="97.8229%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (10 samples, 0.26%)</title><rect x="97.5729%" y="373" width="0.2582%" height="15" fill="rgb(209,117,53)" fg:x="3779" fg:w="10"/><text x="97.8229%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (10 samples, 0.26%)</title><rect x="97.5729%" y="357" width="0.2582%" height="15" fill="rgb(212,90,42)" fg:x="3779" fg:w="10"/><text x="97.8229%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.26%)</title><rect x="97.5729%" y="341" width="0.2582%" height="15" fill="rgb(218,164,37)" fg:x="3779" fg:w="10"/><text x="97.8229%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.26%)</title><rect x="97.5729%" y="325" width="0.2582%" height="15" fill="rgb(246,65,34)" fg:x="3779" fg:w="10"/><text x="97.8229%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.26%)</title><rect x="97.5729%" y="309" width="0.2582%" height="15" fill="rgb(231,100,33)" fg:x="3779" fg:w="10"/><text x="97.8229%" y="319.50"></text></g><g><title>cfree (9 samples, 0.23%)</title><rect x="97.5988%" y="293" width="0.2324%" height="15" fill="rgb(228,126,14)" fg:x="3780" fg:w="9"/><text x="97.8488%" y="303.50"></text></g><g><title>[libc.so.6] (7 samples, 0.18%)</title><rect x="97.6504%" y="277" width="0.1807%" height="15" fill="rgb(215,173,21)" fg:x="3782" fg:w="7"/><text x="97.9004%" y="287.50"></text></g><g><title>yt_history::load_models (3,806 samples, 98.27%)</title><rect x="1.1619%" y="501" width="98.2701%" height="15" fill="rgb(210,6,40)" fg:x="45" fg:w="3806"/><text x="1.4119%" y="511.50">yt_history::load_models</text></g><g><title>yt_history::parse (3,806 samples, 98.27%)</title><rect x="1.1619%" y="485" width="98.2701%" height="15" fill="rgb(212,48,18)" fg:x="45" fg:w="3806"/><text x="1.4119%" y="495.50">yt_history::parse</text></g><g><title>yt_history::parser::parse_file (3,806 samples, 98.27%)</title><rect x="1.1619%" y="469" width="98.2701%" height="15" fill="rgb(230,214,11)" fg:x="45" fg:w="3806"/><text x="1.4119%" y="479.50">yt_history::parser::parse_file</text></g><g><title>yt_history::parser::parser (3,806 samples, 98.27%)</title><rect x="1.1619%" y="453" width="98.2701%" height="15" fill="rgb(254,105,39)" fg:x="45" fg:w="3806"/><text x="1.4119%" y="463.50">yt_history::parser::parser</text></g><g><title>yt_history::parser::html_parser::ModelsParser::parse (3,806 samples, 98.27%)</title><rect x="1.1619%" y="437" width="98.2701%" height="15" fill="rgb(245,158,5)" fg:x="45" fg:w="3806"/><text x="1.4119%" y="447.50">yt_history::parser::html_parser::ModelsParser::parse</text></g><g><title>yt_history::parser::html_parser::ModelsParser::next_data_row (3,724 samples, 96.15%)</title><rect x="3.2791%" y="421" width="96.1529%" height="15" fill="rgb(249,208,11)" fg:x="127" fg:w="3724"/><text x="3.5291%" y="431.50">yt_history::parser::html_parser::ModelsParser::next_data_row</text></g><g><title>yt_history::parser::html_parser::ModelsParser::skip_to (2,559 samples, 66.07%)</title><rect x="33.3592%" y="405" width="66.0728%" height="15" fill="rgb(210,39,28)" fg:x="1292" fg:w="2559"/><text x="33.6092%" y="415.50">yt_history::parser::html_parser::ModelsParser::skip_to</text></g><g><title>core::str::&lt;impl str&gt;::chars (62 samples, 1.60%)</title><rect x="97.8311%" y="389" width="1.6008%" height="15" fill="rgb(211,56,53)" fg:x="3789" fg:w="62"/><text x="98.0811%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::as_bytes (62 samples, 1.60%)</title><rect x="97.8311%" y="373" width="1.6008%" height="15" fill="rgb(226,201,30)" fg:x="3789" fg:w="62"/><text x="98.0811%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="99.5611%" y="405" width="0.0258%" height="15" fill="rgb(239,101,34)" fg:x="3856" fg:w="1"/><text x="99.8111%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="99.5611%" y="389" width="0.0258%" height="15" fill="rgb(226,209,5)" fg:x="3856" fg:w="1"/><text x="99.8111%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.03%)</title><rect x="99.5611%" y="373" width="0.0258%" height="15" fill="rgb(250,105,47)" fg:x="3856" fg:w="1"/><text x="99.8111%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="99.5611%" y="357" width="0.0258%" height="15" fill="rgb(230,72,3)" fg:x="3856" fg:w="1"/><text x="99.8111%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="99.5611%" y="341" width="0.0258%" height="15" fill="rgb(232,218,39)" fg:x="3856" fg:w="1"/><text x="99.8111%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="99.5611%" y="325" width="0.0258%" height="15" fill="rgb(248,166,6)" fg:x="3856" fg:w="1"/><text x="99.8111%" y="335.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="99.5611%" y="309" width="0.0258%" height="15" fill="rgb(247,89,20)" fg:x="3856" fg:w="1"/><text x="99.8111%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (8 samples, 0.21%)</title><rect x="99.4320%" y="485" width="0.2066%" height="15" fill="rgb(248,130,54)" fg:x="3851" fg:w="8"/><text x="99.6820%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.08%)</title><rect x="99.5611%" y="469" width="0.0775%" height="15" fill="rgb(234,196,4)" fg:x="3856" fg:w="3"/><text x="99.8111%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.08%)</title><rect x="99.5611%" y="453" width="0.0775%" height="15" fill="rgb(250,143,31)" fg:x="3856" fg:w="3"/><text x="99.8111%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.08%)</title><rect x="99.5611%" y="437" width="0.0775%" height="15" fill="rgb(211,110,34)" fg:x="3856" fg:w="3"/><text x="99.8111%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.08%)</title><rect x="99.5611%" y="421" width="0.0775%" height="15" fill="rgb(215,124,48)" fg:x="3856" fg:w="3"/><text x="99.8111%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.05%)</title><rect x="99.5869%" y="405" width="0.0516%" height="15" fill="rgb(216,46,13)" fg:x="3857" fg:w="2"/><text x="99.8369%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.05%)</title><rect x="99.5869%" y="389" width="0.0516%" height="15" fill="rgb(205,184,25)" fg:x="3857" fg:w="2"/><text x="99.8369%" y="399.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="99.5869%" y="373" width="0.0516%" height="15" fill="rgb(228,1,10)" fg:x="3857" fg:w="2"/><text x="99.8369%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.08%)</title><rect x="99.6385%" y="485" width="0.0775%" height="15" fill="rgb(213,116,27)" fg:x="3859" fg:w="3"/><text x="99.8885%" y="495.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.03%)</title><rect x="99.7160%" y="373" width="0.0258%" height="15" fill="rgb(241,95,50)" fg:x="3862" fg:w="1"/><text x="99.9660%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.03%)</title><rect x="99.7160%" y="357" width="0.0258%" height="15" fill="rgb(238,48,32)" fg:x="3862" fg:w="1"/><text x="99.9660%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.03%)</title><rect x="99.7160%" y="341" width="0.0258%" height="15" fill="rgb(235,113,49)" fg:x="3862" fg:w="1"/><text x="99.9660%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (3 samples, 0.08%)</title><rect x="99.7160%" y="453" width="0.0775%" height="15" fill="rgb(205,127,43)" fg:x="3862" fg:w="3"/><text x="99.9660%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3 samples, 0.08%)</title><rect x="99.7160%" y="437" width="0.0775%" height="15" fill="rgb(250,162,2)" fg:x="3862" fg:w="3"/><text x="99.9660%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.08%)</title><rect x="99.7160%" y="421" width="0.0775%" height="15" fill="rgb(220,13,41)" fg:x="3862" fg:w="3"/><text x="99.9660%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (3 samples, 0.08%)</title><rect x="99.7160%" y="405" width="0.0775%" height="15" fill="rgb(249,221,25)" fg:x="3862" fg:w="3"/><text x="99.9660%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (3 samples, 0.08%)</title><rect x="99.7160%" y="389" width="0.0775%" height="15" fill="rgb(215,208,19)" fg:x="3862" fg:w="3"/><text x="99.9660%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (2 samples, 0.05%)</title><rect x="99.7418%" y="373" width="0.0516%" height="15" fill="rgb(236,175,2)" fg:x="3863" fg:w="2"/><text x="99.9918%" y="383.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (2 samples, 0.05%)</title><rect x="99.7418%" y="357" width="0.0516%" height="15" fill="rgb(241,52,2)" fg:x="3863" fg:w="2"/><text x="99.9918%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.05%)</title><rect x="99.7418%" y="341" width="0.0516%" height="15" fill="rgb(248,140,14)" fg:x="3863" fg:w="2"/><text x="99.9918%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.05%)</title><rect x="99.7418%" y="325" width="0.0516%" height="15" fill="rgb(253,22,42)" fg:x="3863" fg:w="2"/><text x="99.9918%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.05%)</title><rect x="99.7418%" y="309" width="0.0516%" height="15" fill="rgb(234,61,47)" fg:x="3863" fg:w="2"/><text x="99.9918%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (2 samples, 0.05%)</title><rect x="99.7418%" y="293" width="0.0516%" height="15" fill="rgb(208,226,15)" fg:x="3863" fg:w="2"/><text x="99.9918%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2 samples, 0.05%)</title><rect x="99.7418%" y="277" width="0.0516%" height="15" fill="rgb(217,221,4)" fg:x="3863" fg:w="2"/><text x="99.9918%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (2 samples, 0.05%)</title><rect x="99.7418%" y="261" width="0.0516%" height="15" fill="rgb(212,174,34)" fg:x="3863" fg:w="2"/><text x="99.9918%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2 samples, 0.05%)</title><rect x="99.7418%" y="245" width="0.0516%" height="15" fill="rgb(253,83,4)" fg:x="3863" fg:w="2"/><text x="99.9918%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2 samples, 0.05%)</title><rect x="99.7418%" y="229" width="0.0516%" height="15" fill="rgb(250,195,49)" fg:x="3863" fg:w="2"/><text x="99.9918%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.05%)</title><rect x="99.7418%" y="213" width="0.0516%" height="15" fill="rgb(241,192,25)" fg:x="3863" fg:w="2"/><text x="99.9918%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="99.7676%" y="197" width="0.0258%" height="15" fill="rgb(208,124,10)" fg:x="3864" fg:w="1"/><text x="100.0176%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="99.7676%" y="181" width="0.0258%" height="15" fill="rgb(222,33,0)" fg:x="3864" fg:w="1"/><text x="100.0176%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="99.7934%" y="421" width="0.0258%" height="15" fill="rgb(234,209,28)" fg:x="3865" fg:w="1"/><text x="100.0434%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="99.7934%" y="405" width="0.0258%" height="15" fill="rgb(224,11,23)" fg:x="3865" fg:w="1"/><text x="100.0434%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="99.7934%" y="389" width="0.0258%" height="15" fill="rgb(232,99,1)" fg:x="3865" fg:w="1"/><text x="100.0434%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.03%)</title><rect x="99.7934%" y="373" width="0.0258%" height="15" fill="rgb(237,95,45)" fg:x="3865" fg:w="1"/><text x="100.0434%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="99.7934%" y="357" width="0.0258%" height="15" fill="rgb(208,109,11)" fg:x="3865" fg:w="1"/><text x="100.0434%" y="367.50"></text></g><g><title>hashbrown::map::make_insert_hash (2 samples, 0.05%)</title><rect x="99.7934%" y="453" width="0.0516%" height="15" fill="rgb(216,190,48)" fg:x="3865" fg:w="2"/><text x="100.0434%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.05%)</title><rect x="99.7934%" y="437" width="0.0516%" height="15" fill="rgb(251,171,36)" fg:x="3865" fg:w="2"/><text x="100.0434%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.03%)</title><rect x="99.8193%" y="421" width="0.0258%" height="15" fill="rgb(230,62,22)" fg:x="3866" fg:w="1"/><text x="100.0693%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.03%)</title><rect x="99.8193%" y="405" width="0.0258%" height="15" fill="rgb(225,114,35)" fg:x="3866" fg:w="1"/><text x="100.0693%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.03%)</title><rect x="99.8193%" y="389" width="0.0258%" height="15" fill="rgb(215,118,42)" fg:x="3866" fg:w="1"/><text x="100.0693%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.03%)</title><rect x="99.8193%" y="373" width="0.0258%" height="15" fill="rgb(243,119,21)" fg:x="3866" fg:w="1"/><text x="100.0693%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1 samples, 0.03%)</title><rect x="99.8193%" y="357" width="0.0258%" height="15" fill="rgb(252,177,53)" fg:x="3866" fg:w="1"/><text x="100.0693%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1 samples, 0.03%)</title><rect x="99.8193%" y="341" width="0.0258%" height="15" fill="rgb(237,209,29)" fg:x="3866" fg:w="1"/><text x="100.0693%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="99.8193%" y="325" width="0.0258%" height="15" fill="rgb(212,65,23)" fg:x="3866" fg:w="1"/><text x="100.0693%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="99.8193%" y="309" width="0.0258%" height="15" fill="rgb(230,222,46)" fg:x="3866" fg:w="1"/><text x="100.0693%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="99.8193%" y="293" width="0.0258%" height="15" fill="rgb(215,135,32)" fg:x="3866" fg:w="1"/><text x="100.0693%" y="303.50"></text></g><g><title>std::panic::catch_unwind (3,846 samples, 99.30%)</title><rect x="0.6713%" y="629" width="99.3029%" height="15" fill="rgb(246,101,22)" fg:x="26" fg:w="3846"/><text x="0.9213%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,846 samples, 99.30%)</title><rect x="0.6713%" y="613" width="99.3029%" height="15" fill="rgb(206,107,13)" fg:x="26" fg:w="3846"/><text x="0.9213%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,846 samples, 99.30%)</title><rect x="0.6713%" y="597" width="99.3029%" height="15" fill="rgb(250,100,44)" fg:x="26" fg:w="3846"/><text x="0.9213%" y="607.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3,846 samples, 99.30%)</title><rect x="0.6713%" y="581" width="99.3029%" height="15" fill="rgb(231,147,38)" fg:x="26" fg:w="3846"/><text x="0.9213%" y="591.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (3,846 samples, 99.30%)</title><rect x="0.6713%" y="565" width="99.3029%" height="15" fill="rgb(229,8,40)" fg:x="26" fg:w="3846"/><text x="0.9213%" y="575.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,846 samples, 99.30%)</title><rect x="0.6713%" y="549" width="99.3029%" height="15" fill="rgb(221,135,30)" fg:x="26" fg:w="3846"/><text x="0.9213%" y="559.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (3,846 samples, 99.30%)</title><rect x="0.6713%" y="533" width="99.3029%" height="15" fill="rgb(249,193,18)" fg:x="26" fg:w="3846"/><text x="0.9213%" y="543.50">core::ops::function::FnOnce::call_once</text></g><g><title>yt_history::main (3,846 samples, 99.30%)</title><rect x="0.6713%" y="517" width="99.3029%" height="15" fill="rgb(209,133,39)" fg:x="26" fg:w="3846"/><text x="0.9213%" y="527.50">yt_history::main</text></g><g><title>yt_history::model::Models::count_watched_by_video (21 samples, 0.54%)</title><rect x="99.4320%" y="501" width="0.5422%" height="15" fill="rgb(232,100,14)" fg:x="3851" fg:w="21"/><text x="99.6820%" y="511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (10 samples, 0.26%)</title><rect x="99.7160%" y="485" width="0.2582%" height="15" fill="rgb(224,185,1)" fg:x="3862" fg:w="10"/><text x="99.9660%" y="495.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (10 samples, 0.26%)</title><rect x="99.7160%" y="469" width="0.2582%" height="15" fill="rgb(223,139,8)" fg:x="3862" fg:w="10"/><text x="99.9660%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5 samples, 0.13%)</title><rect x="99.8451%" y="453" width="0.1291%" height="15" fill="rgb(232,213,38)" fg:x="3867" fg:w="5"/><text x="100.0951%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (5 samples, 0.13%)</title><rect x="99.8451%" y="437" width="0.1291%" height="15" fill="rgb(207,94,22)" fg:x="3867" fg:w="5"/><text x="100.0951%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (5 samples, 0.13%)</title><rect x="99.8451%" y="421" width="0.1291%" height="15" fill="rgb(219,183,54)" fg:x="3867" fg:w="5"/><text x="100.0951%" y="431.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (5 samples, 0.13%)</title><rect x="99.8451%" y="405" width="0.1291%" height="15" fill="rgb(216,185,54)" fg:x="3867" fg:w="5"/><text x="100.0951%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (5 samples, 0.13%)</title><rect x="99.8451%" y="389" width="0.1291%" height="15" fill="rgb(254,217,39)" fg:x="3867" fg:w="5"/><text x="100.0951%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (5 samples, 0.13%)</title><rect x="99.8451%" y="373" width="0.1291%" height="15" fill="rgb(240,178,23)" fg:x="3867" fg:w="5"/><text x="100.0951%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.13%)</title><rect x="99.8451%" y="357" width="0.1291%" height="15" fill="rgb(218,11,47)" fg:x="3867" fg:w="5"/><text x="100.0951%" y="367.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (5 samples, 0.13%)</title><rect x="99.8451%" y="341" width="0.1291%" height="15" fill="rgb(218,51,51)" fg:x="3867" fg:w="5"/><text x="100.0951%" y="351.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (5 samples, 0.13%)</title><rect x="99.8451%" y="325" width="0.1291%" height="15" fill="rgb(238,126,27)" fg:x="3867" fg:w="5"/><text x="100.0951%" y="335.50"></text></g><g><title>[libc.so.6] (5 samples, 0.13%)</title><rect x="99.8451%" y="309" width="0.1291%" height="15" fill="rgb(249,202,22)" fg:x="3867" fg:w="5"/><text x="100.0951%" y="319.50"></text></g><g><title>all (3,873 samples, 100%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(254,195,49)" fg:x="0" fg:w="3873"/><text x="0.2500%" y="815.50"></text></g><g><title>yt-history (3,873 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(208,123,14)" fg:x="0" fg:w="3873"/><text x="0.2500%" y="799.50">yt-history</text></g><g><title>_start (3,847 samples, 99.33%)</title><rect x="0.6713%" y="773" width="99.3287%" height="15" fill="rgb(224,200,8)" fg:x="26" fg:w="3847"/><text x="0.9213%" y="783.50">_start</text></g><g><title>__libc_start_main (3,847 samples, 99.33%)</title><rect x="0.6713%" y="757" width="99.3287%" height="15" fill="rgb(217,61,36)" fg:x="26" fg:w="3847"/><text x="0.9213%" y="767.50">__libc_start_main</text></g><g><title>[libc.so.6] (3,847 samples, 99.33%)</title><rect x="0.6713%" y="741" width="99.3287%" height="15" fill="rgb(206,35,45)" fg:x="26" fg:w="3847"/><text x="0.9213%" y="751.50">[libc.so.6]</text></g><g><title>main (3,847 samples, 99.33%)</title><rect x="0.6713%" y="725" width="99.3287%" height="15" fill="rgb(217,65,33)" fg:x="26" fg:w="3847"/><text x="0.9213%" y="735.50">main</text></g><g><title>std::rt::lang_start_internal (3,847 samples, 99.33%)</title><rect x="0.6713%" y="709" width="99.3287%" height="15" fill="rgb(222,158,48)" fg:x="26" fg:w="3847"/><text x="0.9213%" y="719.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (3,847 samples, 99.33%)</title><rect x="0.6713%" y="693" width="99.3287%" height="15" fill="rgb(254,2,54)" fg:x="26" fg:w="3847"/><text x="0.9213%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,847 samples, 99.33%)</title><rect x="0.6713%" y="677" width="99.3287%" height="15" fill="rgb(250,143,38)" fg:x="26" fg:w="3847"/><text x="0.9213%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,847 samples, 99.33%)</title><rect x="0.6713%" y="661" width="99.3287%" height="15" fill="rgb(248,25,0)" fg:x="26" fg:w="3847"/><text x="0.9213%" y="671.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (3,847 samples, 99.33%)</title><rect x="0.6713%" y="645" width="99.3287%" height="15" fill="rgb(206,152,27)" fg:x="26" fg:w="3847"/><text x="0.9213%" y="655.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::init (1 samples, 0.03%)</title><rect x="99.9742%" y="629" width="0.0258%" height="15" fill="rgb(240,77,30)" fg:x="3872" fg:w="1"/><text x="100.2242%" y="639.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.03%)</title><rect x="99.9742%" y="613" width="0.0258%" height="15" fill="rgb(231,5,3)" fg:x="3872" fg:w="1"/><text x="100.2242%" y="623.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.03%)</title><rect x="99.9742%" y="597" width="0.0258%" height="15" fill="rgb(207,226,32)" fg:x="3872" fg:w="1"/><text x="100.2242%" y="607.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.03%)</title><rect x="99.9742%" y="581" width="0.0258%" height="15" fill="rgb(222,207,47)" fg:x="3872" fg:w="1"/><text x="100.2242%" y="591.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.03%)</title><rect x="99.9742%" y="565" width="0.0258%" height="15" fill="rgb(229,115,45)" fg:x="3872" fg:w="1"/><text x="100.2242%" y="575.50"></text></g><g><title>__isoc99_sscanf (1 samples, 0.03%)</title><rect x="99.9742%" y="549" width="0.0258%" height="15" fill="rgb(224,191,6)" fg:x="3872" fg:w="1"/><text x="100.2242%" y="559.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="99.9742%" y="533" width="0.0258%" height="15" fill="rgb(230,227,24)" fg:x="3872" fg:w="1"/><text x="100.2242%" y="543.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="99.9742%" y="517" width="0.0258%" height="15" fill="rgb(228,80,19)" fg:x="3872" fg:w="1"/><text x="100.2242%" y="527.50"></text></g></svg></svg>