<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="789.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="789.00"> </text><svg id="frames" x="10" width="1180" total_samples="16774"><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.02%)</title><rect x="0.0596%" y="645" width="0.0179%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="3"/><text x="0.3096%" y="655.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.04%)</title><rect x="0.0477%" y="661" width="0.0417%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="7"/><text x="0.2977%" y="671.50"></text></g><g><title>[ld-linux-x86-64.so.2] (14 samples, 0.08%)</title><rect x="0.0119%" y="677" width="0.0835%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="14"/><text x="0.2619%" y="687.50"></text></g><g><title>[ld-linux-x86-64.so.2] (16 samples, 0.10%)</title><rect x="0.0060%" y="693" width="0.0954%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="16"/><text x="0.2560%" y="703.50"></text></g><g><title>[ld-linux-x86-64.so.2] (21 samples, 0.13%)</title><rect x="0.0000%" y="709" width="0.1252%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="21"/><text x="0.2500%" y="719.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="0.1013%" y="693" width="0.0238%" height="15" fill="rgb(232,128,0)" fg:x="17" fg:w="4"/><text x="0.3513%" y="703.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="0.1013%" y="677" width="0.0238%" height="15" fill="rgb(207,160,47)" fg:x="17" fg:w="4"/><text x="0.3513%" y="687.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="0.1013%" y="661" width="0.0238%" height="15" fill="rgb(228,23,34)" fg:x="17" fg:w="4"/><text x="0.3513%" y="671.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.1073%" y="645" width="0.0179%" height="15" fill="rgb(218,30,26)" fg:x="18" fg:w="3"/><text x="0.3573%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.1073%" y="629" width="0.0179%" height="15" fill="rgb(220,122,19)" fg:x="18" fg:w="3"/><text x="0.3573%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (22 samples, 0.13%)</title><rect x="0.0000%" y="725" width="0.1312%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="22"/><text x="0.2500%" y="735.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="0.1312%" y="725" width="0.0238%" height="15" fill="rgb(240,193,28)" fg:x="22" fg:w="4"/><text x="0.3812%" y="735.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="0.1431%" y="709" width="0.0119%" height="15" fill="rgb(216,20,37)" fg:x="24" fg:w="2"/><text x="0.3931%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="0.1431%" y="693" width="0.0119%" height="15" fill="rgb(206,188,39)" fg:x="24" fg:w="2"/><text x="0.3931%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Video&gt;&gt; (3 samples, 0.02%)</title><rect x="0.1550%" y="373" width="0.0179%" height="15" fill="rgb(217,207,13)" fg:x="26" fg:w="3"/><text x="0.4050%" y="383.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="0.1550%" y="357" width="0.0179%" height="15" fill="rgb(231,73,38)" fg:x="26" fg:w="3"/><text x="0.4050%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Video&gt; (2 samples, 0.01%)</title><rect x="0.1610%" y="341" width="0.0119%" height="15" fill="rgb(225,20,46)" fg:x="27" fg:w="2"/><text x="0.4110%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.01%)</title><rect x="0.1610%" y="325" width="0.0119%" height="15" fill="rgb(210,31,41)" fg:x="27" fg:w="2"/><text x="0.4110%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.01%)</title><rect x="0.1610%" y="309" width="0.0119%" height="15" fill="rgb(221,200,47)" fg:x="27" fg:w="2"/><text x="0.4110%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.01%)</title><rect x="0.1610%" y="293" width="0.0119%" height="15" fill="rgb(226,26,5)" fg:x="27" fg:w="2"/><text x="0.4110%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="0.1610%" y="277" width="0.0119%" height="15" fill="rgb(249,33,26)" fg:x="27" fg:w="2"/><text x="0.4110%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.01%)</title><rect x="0.1610%" y="261" width="0.0119%" height="15" fill="rgb(235,183,28)" fg:x="27" fg:w="2"/><text x="0.4110%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.01%)</title><rect x="0.1610%" y="245" width="0.0119%" height="15" fill="rgb(221,5,38)" fg:x="27" fg:w="2"/><text x="0.4110%" y="255.50"></text></g><g><title>cfree (2 samples, 0.01%)</title><rect x="0.1610%" y="229" width="0.0119%" height="15" fill="rgb(247,18,42)" fg:x="27" fg:w="2"/><text x="0.4110%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.04%)</title><rect x="0.1550%" y="453" width="0.0417%" height="15" fill="rgb(241,131,45)" fg:x="26" fg:w="7"/><text x="0.4050%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (7 samples, 0.04%)</title><rect x="0.1550%" y="437" width="0.0417%" height="15" fill="rgb(249,31,29)" fg:x="26" fg:w="7"/><text x="0.4050%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (7 samples, 0.04%)</title><rect x="0.1550%" y="421" width="0.0417%" height="15" fill="rgb(225,111,53)" fg:x="26" fg:w="7"/><text x="0.4050%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (7 samples, 0.04%)</title><rect x="0.1550%" y="405" width="0.0417%" height="15" fill="rgb(238,160,17)" fg:x="26" fg:w="7"/><text x="0.4050%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::rc::Rc&lt;yt_history::model::Video&gt;)&gt; (7 samples, 0.04%)</title><rect x="0.1550%" y="389" width="0.0417%" height="15" fill="rgb(214,148,48)" fg:x="26" fg:w="7"/><text x="0.4050%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4 samples, 0.02%)</title><rect x="0.1729%" y="373" width="0.0238%" height="15" fill="rgb(232,36,49)" fg:x="29" fg:w="4"/><text x="0.4229%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.02%)</title><rect x="0.1729%" y="357" width="0.0238%" height="15" fill="rgb(209,103,24)" fg:x="29" fg:w="4"/><text x="0.4229%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.02%)</title><rect x="0.1729%" y="341" width="0.0238%" height="15" fill="rgb(229,88,8)" fg:x="29" fg:w="4"/><text x="0.4229%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="0.1729%" y="325" width="0.0238%" height="15" fill="rgb(213,181,19)" fg:x="29" fg:w="4"/><text x="0.4229%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.02%)</title><rect x="0.1729%" y="309" width="0.0238%" height="15" fill="rgb(254,191,54)" fg:x="29" fg:w="4"/><text x="0.4229%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.02%)</title><rect x="0.1729%" y="293" width="0.0238%" height="15" fill="rgb(241,83,37)" fg:x="29" fg:w="4"/><text x="0.4229%" y="303.50"></text></g><g><title>cfree (4 samples, 0.02%)</title><rect x="0.1729%" y="277" width="0.0238%" height="15" fill="rgb(233,36,39)" fg:x="29" fg:w="4"/><text x="0.4229%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (2 samples, 0.01%)</title><rect x="0.1967%" y="453" width="0.0119%" height="15" fill="rgb(226,3,54)" fg:x="33" fg:w="2"/><text x="0.4467%" y="463.50"></text></g><g><title>alloc::slice::stable_sort (2 samples, 0.01%)</title><rect x="0.1967%" y="437" width="0.0119%" height="15" fill="rgb(245,192,40)" fg:x="33" fg:w="2"/><text x="0.4467%" y="447.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.01%)</title><rect x="0.1967%" y="421" width="0.0119%" height="15" fill="rgb(238,167,29)" fg:x="33" fg:w="2"/><text x="0.4467%" y="431.50"></text></g><g><title>core::slice::sort::merge (2 samples, 0.01%)</title><rect x="0.1967%" y="405" width="0.0119%" height="15" fill="rgb(232,182,51)" fg:x="33" fg:w="2"/><text x="0.4467%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;)&gt;&gt; (2 samples, 0.01%)</title><rect x="0.2087%" y="453" width="0.0119%" height="15" fill="rgb(231,60,39)" fg:x="35" fg:w="2"/><text x="0.4587%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;),std::collections::hash::map::RandomState&gt;&gt; (2 samples, 0.01%)</title><rect x="0.2087%" y="437" width="0.0119%" height="15" fill="rgb(208,69,12)" fg:x="35" fg:w="2"/><text x="0.4587%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;))&gt;&gt; (2 samples, 0.01%)</title><rect x="0.2087%" y="421" width="0.0119%" height="15" fill="rgb(235,93,37)" fg:x="35" fg:w="2"/><text x="0.4587%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="0.2087%" y="405" width="0.0119%" height="15" fill="rgb(213,116,39)" fg:x="35" fg:w="2"/><text x="0.4587%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (2 samples, 0.01%)</title><rect x="0.2087%" y="389" width="0.0119%" height="15" fill="rgb(222,207,29)" fg:x="35" fg:w="2"/><text x="0.4587%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.01%)</title><rect x="0.2087%" y="373" width="0.0119%" height="15" fill="rgb(206,96,30)" fg:x="35" fg:w="2"/><text x="0.4587%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (2 samples, 0.01%)</title><rect x="0.2087%" y="357" width="0.0119%" height="15" fill="rgb(218,138,4)" fg:x="35" fg:w="2"/><text x="0.4587%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;))&gt; (2 samples, 0.01%)</title><rect x="0.2087%" y="341" width="0.0119%" height="15" fill="rgb(250,191,14)" fg:x="35" fg:w="2"/><text x="0.4587%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;)&gt; (2 samples, 0.01%)</title><rect x="0.2087%" y="325" width="0.0119%" height="15" fill="rgb(239,60,40)" fg:x="35" fg:w="2"/><text x="0.4587%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Video&gt;&gt; (2 samples, 0.01%)</title><rect x="0.2087%" y="309" width="0.0119%" height="15" fill="rgb(206,27,48)" fg:x="35" fg:w="2"/><text x="0.4587%" y="319.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="0.2087%" y="293" width="0.0119%" height="15" fill="rgb(225,35,8)" fg:x="35" fg:w="2"/><text x="0.4587%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.02%)</title><rect x="0.2265%" y="405" width="0.0179%" height="15" fill="rgb(250,213,24)" fg:x="38" fg:w="3"/><text x="0.4765%" y="415.50"></text></g><g><title>cfree (2 samples, 0.01%)</title><rect x="0.2444%" y="405" width="0.0119%" height="15" fill="rgb(247,123,22)" fg:x="41" fg:w="2"/><text x="0.4944%" y="415.50"></text></g><g><title>cfree (2 samples, 0.01%)</title><rect x="0.2623%" y="389" width="0.0119%" height="15" fill="rgb(231,138,38)" fg:x="44" fg:w="2"/><text x="0.5123%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (4 samples, 0.02%)</title><rect x="0.5842%" y="325" width="0.0238%" height="15" fill="rgb(231,145,46)" fg:x="98" fg:w="4"/><text x="0.8342%" y="335.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (4 samples, 0.02%)</title><rect x="0.5842%" y="309" width="0.0238%" height="15" fill="rgb(251,118,11)" fg:x="98" fg:w="4"/><text x="0.8342%" y="319.50"></text></g><g><title>core::str::pattern::Searcher::next_match (4 samples, 0.02%)</title><rect x="0.5842%" y="293" width="0.0238%" height="15" fill="rgb(217,147,25)" fg:x="98" fg:w="4"/><text x="0.8342%" y="303.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (4 samples, 0.02%)</title><rect x="0.5842%" y="277" width="0.0238%" height="15" fill="rgb(247,81,37)" fg:x="98" fg:w="4"/><text x="0.8342%" y="287.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="0.5902%" y="261" width="0.0179%" height="15" fill="rgb(209,12,38)" fg:x="99" fg:w="3"/><text x="0.8402%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (3 samples, 0.02%)</title><rect x="0.6081%" y="309" width="0.0179%" height="15" fill="rgb(227,1,9)" fg:x="102" fg:w="3"/><text x="0.8581%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (3 samples, 0.02%)</title><rect x="0.6081%" y="293" width="0.0179%" height="15" fill="rgb(248,47,43)" fg:x="102" fg:w="3"/><text x="0.8581%" y="303.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (2 samples, 0.01%)</title><rect x="0.6140%" y="277" width="0.0119%" height="15" fill="rgb(221,10,30)" fg:x="103" fg:w="2"/><text x="0.8640%" y="287.50"></text></g><g><title>&lt;chrono::format::strftime::StrftimeItems as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.14%)</title><rect x="0.4948%" y="341" width="0.1371%" height="15" fill="rgb(210,229,1)" fg:x="83" fg:w="23"/><text x="0.7448%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (4 samples, 0.02%)</title><rect x="0.6081%" y="325" width="0.0238%" height="15" fill="rgb(222,148,37)" fg:x="102" fg:w="4"/><text x="0.8581%" y="335.50"></text></g><g><title>chrono::format::scan::number (2 samples, 0.01%)</title><rect x="0.6558%" y="341" width="0.0119%" height="15" fill="rgb(234,67,33)" fg:x="110" fg:w="2"/><text x="0.9058%" y="351.50"></text></g><g><title>chrono::format::scan::short_month0 (4 samples, 0.02%)</title><rect x="0.6677%" y="341" width="0.0238%" height="15" fill="rgb(247,98,35)" fg:x="112" fg:w="4"/><text x="0.9177%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_left (5 samples, 0.03%)</title><rect x="0.6915%" y="341" width="0.0298%" height="15" fill="rgb(247,138,52)" fg:x="116" fg:w="5"/><text x="0.9415%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start (5 samples, 0.03%)</title><rect x="0.6915%" y="325" width="0.0298%" height="15" fill="rgb(213,79,30)" fg:x="116" fg:w="5"/><text x="0.9415%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start_matches (5 samples, 0.03%)</title><rect x="0.6915%" y="309" width="0.0298%" height="15" fill="rgb(246,177,23)" fg:x="116" fg:w="5"/><text x="0.9415%" y="319.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_reject (4 samples, 0.02%)</title><rect x="0.6975%" y="293" width="0.0238%" height="15" fill="rgb(230,62,27)" fg:x="117" fg:w="4"/><text x="0.9475%" y="303.50"></text></g><g><title>core::str::pattern::Searcher::next_reject (4 samples, 0.02%)</title><rect x="0.6975%" y="277" width="0.0238%" height="15" fill="rgb(216,154,8)" fg:x="117" fg:w="4"/><text x="0.9475%" y="287.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (4 samples, 0.02%)</title><rect x="0.6975%" y="261" width="0.0238%" height="15" fill="rgb(244,35,45)" fg:x="117" fg:w="4"/><text x="0.9475%" y="271.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="0.7035%" y="245" width="0.0179%" height="15" fill="rgb(251,115,12)" fg:x="118" fg:w="3"/><text x="0.9535%" y="255.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="0.7094%" y="229" width="0.0119%" height="15" fill="rgb(240,54,50)" fg:x="119" fg:w="2"/><text x="0.9594%" y="239.50"></text></g><g><title>chrono::format::parse::parse (76 samples, 0.45%)</title><rect x="0.2742%" y="373" width="0.4531%" height="15" fill="rgb(233,84,52)" fg:x="46" fg:w="76"/><text x="0.5242%" y="383.50"></text></g><g><title>chrono::format::parse::parse_internal (74 samples, 0.44%)</title><rect x="0.2862%" y="357" width="0.4412%" height="15" fill="rgb(207,117,47)" fg:x="48" fg:w="74"/><text x="0.5362%" y="367.50"></text></g><g><title>chrono::naive::date::NaiveDate::weeks_from (2 samples, 0.01%)</title><rect x="0.7571%" y="309" width="0.0119%" height="15" fill="rgb(249,43,39)" fg:x="127" fg:w="2"/><text x="1.0071%" y="319.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date::{{closure}} (5 samples, 0.03%)</title><rect x="0.7452%" y="325" width="0.0298%" height="15" fill="rgb(209,38,44)" fg:x="125" fg:w="5"/><text x="0.9952%" y="335.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_mdf (2 samples, 0.01%)</title><rect x="0.7750%" y="309" width="0.0119%" height="15" fill="rgb(236,212,23)" fg:x="130" fg:w="2"/><text x="1.0250%" y="319.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_of (2 samples, 0.01%)</title><rect x="0.7750%" y="293" width="0.0119%" height="15" fill="rgb(242,79,21)" fg:x="130" fg:w="2"/><text x="1.0250%" y="303.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (2 samples, 0.01%)</title><rect x="0.7750%" y="277" width="0.0119%" height="15" fill="rgb(211,96,35)" fg:x="130" fg:w="2"/><text x="1.0250%" y="287.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date (10 samples, 0.06%)</title><rect x="0.7392%" y="341" width="0.0596%" height="15" fill="rgb(253,215,40)" fg:x="124" fg:w="10"/><text x="0.9892%" y="351.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (4 samples, 0.02%)</title><rect x="0.7750%" y="325" width="0.0238%" height="15" fill="rgb(211,81,21)" fg:x="130" fg:w="4"/><text x="1.0250%" y="335.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_datetime_with_offset (13 samples, 0.08%)</title><rect x="0.7273%" y="357" width="0.0775%" height="15" fill="rgb(208,190,38)" fg:x="122" fg:w="13"/><text x="0.9773%" y="367.50"></text></g><g><title>chrono::offset::TimeZone::datetime_from_str (95 samples, 0.57%)</title><rect x="0.2742%" y="389" width="0.5664%" height="15" fill="rgb(235,213,38)" fg:x="46" fg:w="95"/><text x="0.5242%" y="399.50"></text></g><g><title>chrono::format::parsed::Parsed::to_datetime_with_timezone (19 samples, 0.11%)</title><rect x="0.7273%" y="373" width="0.1133%" height="15" fill="rgb(237,122,38)" fg:x="122" fg:w="19"/><text x="0.9773%" y="383.50"></text></g><g><title>chrono::offset::TimeZone::from_local_datetime (6 samples, 0.04%)</title><rect x="0.8048%" y="357" width="0.0358%" height="15" fill="rgb(244,218,35)" fg:x="135" fg:w="6"/><text x="1.0548%" y="367.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::map (5 samples, 0.03%)</title><rect x="0.8108%" y="341" width="0.0298%" height="15" fill="rgb(240,68,47)" fg:x="136" fg:w="5"/><text x="1.0608%" y="351.50"></text></g><g><title>chrono::offset::TimeZone::from_local_datetime::{{closure}} (5 samples, 0.03%)</title><rect x="0.8108%" y="325" width="0.0298%" height="15" fill="rgb(210,16,53)" fg:x="136" fg:w="5"/><text x="1.0608%" y="335.50"></text></g><g><title>chrono::offset::fixed::&lt;impl core::ops::arith::Sub&lt;chrono::offset::fixed::FixedOffset&gt; for chrono::naive::datetime::NaiveDateTime&gt;::sub (5 samples, 0.03%)</title><rect x="0.8108%" y="309" width="0.0298%" height="15" fill="rgb(235,124,12)" fg:x="136" fg:w="5"/><text x="1.0608%" y="319.50"></text></g><g><title>chrono::offset::fixed::add_with_leapsecond (5 samples, 0.03%)</title><rect x="0.8108%" y="293" width="0.0298%" height="15" fill="rgb(224,169,11)" fg:x="136" fg:w="5"/><text x="1.0608%" y="303.50"></text></g><g><title>&lt;chrono::naive::datetime::NaiveDateTime as core::ops::arith::Add&lt;time::duration::Duration&gt;&gt;::add (5 samples, 0.03%)</title><rect x="0.8108%" y="277" width="0.0298%" height="15" fill="rgb(250,166,2)" fg:x="136" fg:w="5"/><text x="1.0608%" y="287.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_signed (4 samples, 0.02%)</title><rect x="0.8167%" y="261" width="0.0238%" height="15" fill="rgb(242,216,29)" fg:x="137" fg:w="4"/><text x="1.0667%" y="271.50"></text></g><g><title>chrono::naive::time::NaiveTime::overflowing_add_signed (4 samples, 0.02%)</title><rect x="0.8167%" y="245" width="0.0238%" height="15" fill="rgb(230,116,27)" fg:x="137" fg:w="4"/><text x="1.0667%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.01%)</title><rect x="0.8406%" y="389" width="0.0119%" height="15" fill="rgb(228,99,48)" fg:x="141" fg:w="2"/><text x="1.0906%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="0.9062%" y="341" width="0.0119%" height="15" fill="rgb(253,11,6)" fg:x="152" fg:w="2"/><text x="1.1562%" y="351.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 0.08%)</title><rect x="0.9598%" y="325" width="0.0775%" height="15" fill="rgb(247,143,39)" fg:x="161" fg:w="13"/><text x="1.2098%" y="335.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (11 samples, 0.07%)</title><rect x="0.9717%" y="309" width="0.0656%" height="15" fill="rgb(236,97,10)" fg:x="163" fg:w="11"/><text x="1.2217%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (328 samples, 1.96%)</title><rect x="1.1923%" y="309" width="1.9554%" height="15" fill="rgb(233,208,19)" fg:x="200" fg:w="328"/><text x="1.4423%" y="319.50">c..</text></g><g><title>core::cmp::PartialEq::ne (328 samples, 1.96%)</title><rect x="1.1923%" y="293" width="1.9554%" height="15" fill="rgb(216,164,2)" fg:x="200" fg:w="328"/><text x="1.4423%" y="303.50">c..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (328 samples, 1.96%)</title><rect x="1.1923%" y="277" width="1.9554%" height="15" fill="rgb(220,129,5)" fg:x="200" fg:w="328"/><text x="1.4423%" y="287.50">&lt;..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (328 samples, 1.96%)</title><rect x="1.1923%" y="261" width="1.9554%" height="15" fill="rgb(242,17,10)" fg:x="200" fg:w="328"/><text x="1.4423%" y="271.50">c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (328 samples, 1.96%)</title><rect x="1.1923%" y="245" width="1.9554%" height="15" fill="rgb(242,107,0)" fg:x="200" fg:w="328"/><text x="1.4423%" y="255.50">c..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (328 samples, 1.96%)</title><rect x="1.1923%" y="229" width="1.9554%" height="15" fill="rgb(251,28,31)" fg:x="200" fg:w="328"/><text x="1.4423%" y="239.50">c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (328 samples, 1.96%)</title><rect x="1.1923%" y="213" width="1.9554%" height="15" fill="rgb(233,223,10)" fg:x="200" fg:w="328"/><text x="1.4423%" y="223.50">&lt;..</text></g><g><title>[libc.so.6] (310 samples, 1.85%)</title><rect x="1.2996%" y="197" width="1.8481%" height="15" fill="rgb(215,21,27)" fg:x="218" fg:w="310"/><text x="1.5496%" y="207.50">[..</text></g><g><title>yt_history::model::Models::find_channel (386 samples, 2.30%)</title><rect x="0.8644%" y="373" width="2.3012%" height="15" fill="rgb(232,23,21)" fg:x="145" fg:w="386"/><text x="1.1144%" y="383.50">y..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (386 samples, 2.30%)</title><rect x="0.8644%" y="357" width="2.3012%" height="15" fill="rgb(244,5,23)" fg:x="145" fg:w="386"/><text x="1.1144%" y="367.50">&lt;..</text></g><g><title>yt_history::model::Models::find_channel::{{closure}} (377 samples, 2.25%)</title><rect x="0.9181%" y="341" width="2.2475%" height="15" fill="rgb(226,81,46)" fg:x="154" fg:w="377"/><text x="1.1681%" y="351.50">y..</text></g><g><title>yt_history::model::WhereChannel::matches (357 samples, 2.13%)</title><rect x="1.0373%" y="325" width="2.1283%" height="15" fill="rgb(247,70,30)" fg:x="174" fg:w="357"/><text x="1.2873%" y="335.50">y..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3 samples, 0.02%)</title><rect x="3.1477%" y="309" width="0.0179%" height="15" fill="rgb(212,68,19)" fg:x="528" fg:w="3"/><text x="3.3977%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3 samples, 0.02%)</title><rect x="3.1477%" y="293" width="0.0179%" height="15" fill="rgb(240,187,13)" fg:x="528" fg:w="3"/><text x="3.3977%" y="303.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="3.1537%" y="277" width="0.0119%" height="15" fill="rgb(223,113,26)" fg:x="529" fg:w="2"/><text x="3.4037%" y="287.50"></text></g><g><title>yt_history::model::Models::find_or_create_channel (389 samples, 2.32%)</title><rect x="0.8525%" y="389" width="2.3191%" height="15" fill="rgb(206,192,2)" fg:x="143" fg:w="389"/><text x="1.1025%" y="399.50">y..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (7 samples, 0.04%)</title><rect x="3.1835%" y="373" width="0.0417%" height="15" fill="rgb(241,108,4)" fg:x="534" fg:w="7"/><text x="3.4335%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (7 samples, 0.04%)</title><rect x="3.1835%" y="357" width="0.0417%" height="15" fill="rgb(247,173,49)" fg:x="534" fg:w="7"/><text x="3.4335%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (7 samples, 0.04%)</title><rect x="3.1835%" y="341" width="0.0417%" height="15" fill="rgb(224,114,35)" fg:x="534" fg:w="7"/><text x="3.4335%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.04%)</title><rect x="3.1835%" y="325" width="0.0417%" height="15" fill="rgb(245,159,27)" fg:x="534" fg:w="7"/><text x="3.4335%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.04%)</title><rect x="3.1835%" y="309" width="0.0417%" height="15" fill="rgb(245,172,44)" fg:x="534" fg:w="7"/><text x="3.4335%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.04%)</title><rect x="3.1835%" y="293" width="0.0417%" height="15" fill="rgb(236,23,11)" fg:x="534" fg:w="7"/><text x="3.4335%" y="303.50"></text></g><g><title>cfree (7 samples, 0.04%)</title><rect x="3.1835%" y="277" width="0.0417%" height="15" fill="rgb(205,117,38)" fg:x="534" fg:w="7"/><text x="3.4335%" y="287.50"></text></g><g><title>[libc.so.6] (6 samples, 0.04%)</title><rect x="3.1895%" y="261" width="0.0358%" height="15" fill="rgb(237,72,25)" fg:x="535" fg:w="6"/><text x="3.4395%" y="271.50"></text></g><g><title>[libc.so.6] (6 samples, 0.04%)</title><rect x="3.1895%" y="245" width="0.0358%" height="15" fill="rgb(244,70,9)" fg:x="535" fg:w="6"/><text x="3.4395%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.03%)</title><rect x="3.2252%" y="325" width="0.0298%" height="15" fill="rgb(217,125,39)" fg:x="541" fg:w="5"/><text x="3.4752%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.02%)</title><rect x="3.2312%" y="309" width="0.0238%" height="15" fill="rgb(235,36,10)" fg:x="542" fg:w="4"/><text x="3.4812%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.02%)</title><rect x="3.2372%" y="293" width="0.0179%" height="15" fill="rgb(251,123,47)" fg:x="543" fg:w="3"/><text x="3.4872%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (3 samples, 0.02%)</title><rect x="3.2372%" y="277" width="0.0179%" height="15" fill="rgb(221,13,13)" fg:x="543" fg:w="3"/><text x="3.4872%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3 samples, 0.02%)</title><rect x="3.2372%" y="261" width="0.0179%" height="15" fill="rgb(238,131,9)" fg:x="543" fg:w="3"/><text x="3.4872%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (3 samples, 0.02%)</title><rect x="3.2372%" y="245" width="0.0179%" height="15" fill="rgb(211,50,8)" fg:x="543" fg:w="3"/><text x="3.4872%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3 samples, 0.02%)</title><rect x="3.2372%" y="229" width="0.0179%" height="15" fill="rgb(245,182,24)" fg:x="543" fg:w="3"/><text x="3.4872%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3 samples, 0.02%)</title><rect x="3.2372%" y="213" width="0.0179%" height="15" fill="rgb(242,14,37)" fg:x="543" fg:w="3"/><text x="3.4872%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="3.2372%" y="197" width="0.0179%" height="15" fill="rgb(246,228,12)" fg:x="543" fg:w="3"/><text x="3.4872%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.02%)</title><rect x="3.2372%" y="181" width="0.0179%" height="15" fill="rgb(213,55,15)" fg:x="543" fg:w="3"/><text x="3.4872%" y="191.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (13 samples, 0.08%)</title><rect x="3.2610%" y="261" width="0.0775%" height="15" fill="rgb(209,9,3)" fg:x="547" fg:w="13"/><text x="3.5110%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (13 samples, 0.08%)</title><rect x="3.2610%" y="245" width="0.0775%" height="15" fill="rgb(230,59,30)" fg:x="547" fg:w="13"/><text x="3.5110%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (13 samples, 0.08%)</title><rect x="3.2610%" y="229" width="0.0775%" height="15" fill="rgb(209,121,21)" fg:x="547" fg:w="13"/><text x="3.5110%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.08%)</title><rect x="3.2610%" y="213" width="0.0775%" height="15" fill="rgb(220,109,13)" fg:x="547" fg:w="13"/><text x="3.5110%" y="223.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (13 samples, 0.08%)</title><rect x="3.2610%" y="197" width="0.0775%" height="15" fill="rgb(232,18,1)" fg:x="547" fg:w="13"/><text x="3.5110%" y="207.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (13 samples, 0.08%)</title><rect x="3.2610%" y="181" width="0.0775%" height="15" fill="rgb(215,41,42)" fg:x="547" fg:w="13"/><text x="3.5110%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (14 samples, 0.08%)</title><rect x="3.2610%" y="277" width="0.0835%" height="15" fill="rgb(224,123,36)" fg:x="547" fg:w="14"/><text x="3.5110%" y="287.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (21 samples, 0.13%)</title><rect x="3.2252%" y="373" width="0.1252%" height="15" fill="rgb(240,125,3)" fg:x="541" fg:w="21"/><text x="3.4752%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (21 samples, 0.13%)</title><rect x="3.2252%" y="357" width="0.1252%" height="15" fill="rgb(205,98,50)" fg:x="541" fg:w="21"/><text x="3.4752%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (21 samples, 0.13%)</title><rect x="3.2252%" y="341" width="0.1252%" height="15" fill="rgb(205,185,37)" fg:x="541" fg:w="21"/><text x="3.4752%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (16 samples, 0.10%)</title><rect x="3.2550%" y="325" width="0.0954%" height="15" fill="rgb(238,207,15)" fg:x="546" fg:w="16"/><text x="3.5050%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (16 samples, 0.10%)</title><rect x="3.2550%" y="309" width="0.0954%" height="15" fill="rgb(213,199,42)" fg:x="546" fg:w="16"/><text x="3.5050%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (16 samples, 0.10%)</title><rect x="3.2550%" y="293" width="0.0954%" height="15" fill="rgb(235,201,11)" fg:x="546" fg:w="16"/><text x="3.5050%" y="303.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="3.3802%" y="309" width="0.0238%" height="15" fill="rgb(207,46,11)" fg:x="567" fg:w="4"/><text x="3.6302%" y="319.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (4 samples, 0.02%)</title><rect x="3.3802%" y="293" width="0.0238%" height="15" fill="rgb(241,35,35)" fg:x="567" fg:w="4"/><text x="3.6302%" y="303.50"></text></g><g><title>yt_history::model::Models::find_or_create_channel (126 samples, 0.75%)</title><rect x="3.3504%" y="373" width="0.7512%" height="15" fill="rgb(243,32,47)" fg:x="562" fg:w="126"/><text x="3.6004%" y="383.50"></text></g><g><title>yt_history::model::Models::find_channel (126 samples, 0.75%)</title><rect x="3.3504%" y="357" width="0.7512%" height="15" fill="rgb(247,202,23)" fg:x="562" fg:w="126"/><text x="3.6004%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (126 samples, 0.75%)</title><rect x="3.3504%" y="341" width="0.7512%" height="15" fill="rgb(219,102,11)" fg:x="562" fg:w="126"/><text x="3.6004%" y="351.50"></text></g><g><title>yt_history::model::Models::find_channel::{{closure}} (124 samples, 0.74%)</title><rect x="3.3623%" y="325" width="0.7392%" height="15" fill="rgb(243,110,44)" fg:x="564" fg:w="124"/><text x="3.6123%" y="335.50"></text></g><g><title>yt_history::model::WhereChannel::matches (117 samples, 0.70%)</title><rect x="3.4041%" y="309" width="0.6975%" height="15" fill="rgb(222,74,54)" fg:x="571" fg:w="117"/><text x="3.6541%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (111 samples, 0.66%)</title><rect x="3.4398%" y="293" width="0.6617%" height="15" fill="rgb(216,99,12)" fg:x="577" fg:w="111"/><text x="3.6898%" y="303.50"></text></g><g><title>core::cmp::PartialEq::ne (111 samples, 0.66%)</title><rect x="3.4398%" y="277" width="0.6617%" height="15" fill="rgb(226,22,26)" fg:x="577" fg:w="111"/><text x="3.6898%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (111 samples, 0.66%)</title><rect x="3.4398%" y="261" width="0.6617%" height="15" fill="rgb(217,163,10)" fg:x="577" fg:w="111"/><text x="3.6898%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (111 samples, 0.66%)</title><rect x="3.4398%" y="245" width="0.6617%" height="15" fill="rgb(213,25,53)" fg:x="577" fg:w="111"/><text x="3.6898%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (111 samples, 0.66%)</title><rect x="3.4398%" y="229" width="0.6617%" height="15" fill="rgb(252,105,26)" fg:x="577" fg:w="111"/><text x="3.6898%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (111 samples, 0.66%)</title><rect x="3.4398%" y="213" width="0.6617%" height="15" fill="rgb(220,39,43)" fg:x="577" fg:w="111"/><text x="3.6898%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (111 samples, 0.66%)</title><rect x="3.4398%" y="197" width="0.6617%" height="15" fill="rgb(229,68,48)" fg:x="577" fg:w="111"/><text x="3.6898%" y="207.50"></text></g><g><title>[libc.so.6] (104 samples, 0.62%)</title><rect x="3.4816%" y="181" width="0.6200%" height="15" fill="rgb(252,8,32)" fg:x="584" fg:w="104"/><text x="3.7316%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="4.1016%" y="357" width="0.0238%" height="15" fill="rgb(223,20,43)" fg:x="688" fg:w="4"/><text x="4.3516%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="4.1016%" y="341" width="0.0238%" height="15" fill="rgb(229,81,49)" fg:x="688" fg:w="4"/><text x="4.3516%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.02%)</title><rect x="4.1016%" y="325" width="0.0238%" height="15" fill="rgb(236,28,36)" fg:x="688" fg:w="4"/><text x="4.3516%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.02%)</title><rect x="4.1016%" y="309" width="0.0238%" height="15" fill="rgb(249,185,26)" fg:x="688" fg:w="4"/><text x="4.3516%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.02%)</title><rect x="4.1016%" y="293" width="0.0238%" height="15" fill="rgb(249,174,33)" fg:x="688" fg:w="4"/><text x="4.3516%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="4.1016%" y="277" width="0.0238%" height="15" fill="rgb(233,201,37)" fg:x="688" fg:w="4"/><text x="4.3516%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="4.1016%" y="261" width="0.0238%" height="15" fill="rgb(221,78,26)" fg:x="688" fg:w="4"/><text x="4.3516%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.02%)</title><rect x="4.1016%" y="245" width="0.0238%" height="15" fill="rgb(250,127,30)" fg:x="688" fg:w="4"/><text x="4.3516%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.02%)</title><rect x="4.1016%" y="229" width="0.0238%" height="15" fill="rgb(230,49,44)" fg:x="688" fg:w="4"/><text x="4.3516%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.02%)</title><rect x="4.1016%" y="213" width="0.0238%" height="15" fill="rgb(229,67,23)" fg:x="688" fg:w="4"/><text x="4.3516%" y="223.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.02%)</title><rect x="4.1016%" y="197" width="0.0238%" height="15" fill="rgb(249,83,47)" fg:x="688" fg:w="4"/><text x="4.3516%" y="207.50"></text></g><g><title>malloc (4 samples, 0.02%)</title><rect x="4.1016%" y="181" width="0.0238%" height="15" fill="rgb(215,43,3)" fg:x="688" fg:w="4"/><text x="4.3516%" y="191.50"></text></g><g><title>[libc.so.6] (4 samples, 0.02%)</title><rect x="4.1016%" y="165" width="0.0238%" height="15" fill="rgb(238,154,13)" fg:x="688" fg:w="4"/><text x="4.3516%" y="175.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="4.1075%" y="149" width="0.0179%" height="15" fill="rgb(219,56,2)" fg:x="689" fg:w="3"/><text x="4.3575%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.01%)</title><rect x="4.1493%" y="309" width="0.0119%" height="15" fill="rgb(233,0,4)" fg:x="696" fg:w="2"/><text x="4.3993%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.01%)</title><rect x="4.1493%" y="293" width="0.0119%" height="15" fill="rgb(235,30,7)" fg:x="696" fg:w="2"/><text x="4.3993%" y="303.50"></text></g><g><title>core::ptr::write (2 samples, 0.01%)</title><rect x="4.1493%" y="277" width="0.0119%" height="15" fill="rgb(250,79,13)" fg:x="696" fg:w="2"/><text x="4.3993%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (5 samples, 0.03%)</title><rect x="4.1612%" y="245" width="0.0298%" height="15" fill="rgb(211,146,34)" fg:x="698" fg:w="5"/><text x="4.4112%" y="255.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (5 samples, 0.03%)</title><rect x="4.1612%" y="229" width="0.0298%" height="15" fill="rgb(228,22,38)" fg:x="698" fg:w="5"/><text x="4.4112%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.03%)</title><rect x="4.1612%" y="213" width="0.0298%" height="15" fill="rgb(235,168,5)" fg:x="698" fg:w="5"/><text x="4.4112%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.03%)</title><rect x="4.1612%" y="197" width="0.0298%" height="15" fill="rgb(221,155,16)" fg:x="698" fg:w="5"/><text x="4.4112%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.03%)</title><rect x="4.1612%" y="181" width="0.0298%" height="15" fill="rgb(215,215,53)" fg:x="698" fg:w="5"/><text x="4.4112%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (5 samples, 0.03%)</title><rect x="4.1612%" y="165" width="0.0298%" height="15" fill="rgb(223,4,10)" fg:x="698" fg:w="5"/><text x="4.4112%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (5 samples, 0.03%)</title><rect x="4.1612%" y="149" width="0.0298%" height="15" fill="rgb(234,103,6)" fg:x="698" fg:w="5"/><text x="4.4112%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (5 samples, 0.03%)</title><rect x="4.1612%" y="133" width="0.0298%" height="15" fill="rgb(227,97,0)" fg:x="698" fg:w="5"/><text x="4.4112%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (5 samples, 0.03%)</title><rect x="4.1612%" y="117" width="0.0298%" height="15" fill="rgb(234,150,53)" fg:x="698" fg:w="5"/><text x="4.4112%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (5 samples, 0.03%)</title><rect x="4.1612%" y="101" width="0.0298%" height="15" fill="rgb(228,201,54)" fg:x="698" fg:w="5"/><text x="4.4112%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.03%)</title><rect x="4.1612%" y="85" width="0.0298%" height="15" fill="rgb(222,22,37)" fg:x="698" fg:w="5"/><text x="4.4112%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.03%)</title><rect x="4.1612%" y="69" width="0.0298%" height="15" fill="rgb(237,53,32)" fg:x="698" fg:w="5"/><text x="4.4112%" y="79.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (11 samples, 0.07%)</title><rect x="4.1314%" y="357" width="0.0656%" height="15" fill="rgb(233,25,53)" fg:x="693" fg:w="11"/><text x="4.3814%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11 samples, 0.07%)</title><rect x="4.1314%" y="341" width="0.0656%" height="15" fill="rgb(210,40,34)" fg:x="693" fg:w="11"/><text x="4.3814%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 0.05%)</title><rect x="4.1493%" y="325" width="0.0477%" height="15" fill="rgb(241,220,44)" fg:x="696" fg:w="8"/><text x="4.3993%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (6 samples, 0.04%)</title><rect x="4.1612%" y="309" width="0.0358%" height="15" fill="rgb(235,28,35)" fg:x="698" fg:w="6"/><text x="4.4112%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.04%)</title><rect x="4.1612%" y="293" width="0.0358%" height="15" fill="rgb(210,56,17)" fg:x="698" fg:w="6"/><text x="4.4112%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (6 samples, 0.04%)</title><rect x="4.1612%" y="277" width="0.0358%" height="15" fill="rgb(224,130,29)" fg:x="698" fg:w="6"/><text x="4.4112%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (6 samples, 0.04%)</title><rect x="4.1612%" y="261" width="0.0358%" height="15" fill="rgb(235,212,8)" fg:x="698" fg:w="6"/><text x="4.4112%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="4.2208%" y="325" width="0.0119%" height="15" fill="rgb(223,33,50)" fg:x="708" fg:w="2"/><text x="4.4708%" y="335.50"></text></g><g><title>yt_history::model::Models::find_or_create_video (322 samples, 1.92%)</title><rect x="3.1716%" y="389" width="1.9196%" height="15" fill="rgb(219,149,13)" fg:x="532" fg:w="322"/><text x="3.4216%" y="399.50">y..</text></g><g><title>yt_history::model::Models::insert_video (166 samples, 0.99%)</title><rect x="4.1016%" y="373" width="0.9896%" height="15" fill="rgb(250,156,29)" fg:x="688" fg:w="166"/><text x="4.3516%" y="383.50"></text></g><g><title>yt_history::model::Models::find_channel (150 samples, 0.89%)</title><rect x="4.1970%" y="357" width="0.8942%" height="15" fill="rgb(216,193,19)" fg:x="704" fg:w="150"/><text x="4.4470%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (150 samples, 0.89%)</title><rect x="4.1970%" y="341" width="0.8942%" height="15" fill="rgb(216,135,14)" fg:x="704" fg:w="150"/><text x="4.4470%" y="351.50"></text></g><g><title>yt_history::model::Models::find_channel::{{closure}} (144 samples, 0.86%)</title><rect x="4.2327%" y="325" width="0.8585%" height="15" fill="rgb(241,47,5)" fg:x="710" fg:w="144"/><text x="4.4827%" y="335.50"></text></g><g><title>yt_history::model::WhereChannel::matches (141 samples, 0.84%)</title><rect x="4.2506%" y="309" width="0.8406%" height="15" fill="rgb(233,42,35)" fg:x="713" fg:w="141"/><text x="4.5006%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (135 samples, 0.80%)</title><rect x="4.2864%" y="293" width="0.8048%" height="15" fill="rgb(231,13,6)" fg:x="719" fg:w="135"/><text x="4.5364%" y="303.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::cmp::PartialEq&gt;::eq (135 samples, 0.80%)</title><rect x="4.2864%" y="277" width="0.8048%" height="15" fill="rgb(207,181,40)" fg:x="719" fg:w="135"/><text x="4.5364%" y="287.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as alloc::rc::RcEqIdent&lt;T&gt;&gt;::eq (135 samples, 0.80%)</title><rect x="4.2864%" y="261" width="0.8048%" height="15" fill="rgb(254,173,49)" fg:x="719" fg:w="135"/><text x="4.5364%" y="271.50"></text></g><g><title>&lt;yt_history::model::Channel as core::cmp::PartialEq&gt;::eq (135 samples, 0.80%)</title><rect x="4.2864%" y="245" width="0.8048%" height="15" fill="rgb(221,1,38)" fg:x="719" fg:w="135"/><text x="4.5364%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (130 samples, 0.78%)</title><rect x="4.3162%" y="229" width="0.7750%" height="15" fill="rgb(206,124,46)" fg:x="724" fg:w="130"/><text x="4.5662%" y="239.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (130 samples, 0.78%)</title><rect x="4.3162%" y="213" width="0.7750%" height="15" fill="rgb(249,21,11)" fg:x="724" fg:w="130"/><text x="4.5662%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (130 samples, 0.78%)</title><rect x="4.3162%" y="197" width="0.7750%" height="15" fill="rgb(222,201,40)" fg:x="724" fg:w="130"/><text x="4.5662%" y="207.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (130 samples, 0.78%)</title><rect x="4.3162%" y="181" width="0.7750%" height="15" fill="rgb(235,61,29)" fg:x="724" fg:w="130"/><text x="4.5662%" y="191.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (130 samples, 0.78%)</title><rect x="4.3162%" y="165" width="0.7750%" height="15" fill="rgb(219,207,3)" fg:x="724" fg:w="130"/><text x="4.5662%" y="175.50"></text></g><g><title>[libc.so.6] (125 samples, 0.75%)</title><rect x="4.3460%" y="149" width="0.7452%" height="15" fill="rgb(222,56,46)" fg:x="729" fg:w="125"/><text x="4.5960%" y="159.50"></text></g><g><title>yt_history::models_parser::ModelsParser::insert_row (814 samples, 4.85%)</title><rect x="0.2563%" y="405" width="4.8527%" height="15" fill="rgb(239,76,54)" fg:x="43" fg:w="814"/><text x="0.5063%" y="415.50">yt_his..</text></g><g><title>yt_history::model::Models::insert_watched (3 samples, 0.02%)</title><rect x="5.0912%" y="389" width="0.0179%" height="15" fill="rgb(231,124,27)" fg:x="854" fg:w="3"/><text x="5.3412%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.01%)</title><rect x="5.0972%" y="373" width="0.0119%" height="15" fill="rgb(249,195,6)" fg:x="855" fg:w="2"/><text x="5.3472%" y="383.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (4 samples, 0.02%)</title><rect x="5.1329%" y="341" width="0.0238%" height="15" fill="rgb(237,174,47)" fg:x="861" fg:w="4"/><text x="5.3829%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="5.1329%" y="325" width="0.0238%" height="15" fill="rgb(206,201,31)" fg:x="861" fg:w="4"/><text x="5.3829%" y="335.50"></text></g><g><title>&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="5.1389%" y="309" width="0.0179%" height="15" fill="rgb(231,57,52)" fg:x="862" fg:w="3"/><text x="5.3889%" y="319.50"></text></g><g><title>yt_history::models_parser::ModelsParser::peek (8 samples, 0.05%)</title><rect x="5.1329%" y="389" width="0.0477%" height="15" fill="rgb(248,177,22)" fg:x="861" fg:w="8"/><text x="5.3829%" y="399.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (8 samples, 0.05%)</title><rect x="5.1329%" y="373" width="0.0477%" height="15" fill="rgb(215,211,37)" fg:x="861" fg:w="8"/><text x="5.3829%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (8 samples, 0.05%)</title><rect x="5.1329%" y="357" width="0.0477%" height="15" fill="rgb(241,128,51)" fg:x="861" fg:w="8"/><text x="5.3829%" y="367.50"></text></g><g><title>core::mem::replace (4 samples, 0.02%)</title><rect x="5.1568%" y="341" width="0.0238%" height="15" fill="rgb(227,165,31)" fg:x="865" fg:w="4"/><text x="5.4068%" y="351.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (229 samples, 1.37%)</title><rect x="6.6770%" y="325" width="1.3652%" height="15" fill="rgb(228,167,24)" fg:x="1120" fg:w="229"/><text x="6.9270%" y="335.50"></text></g><g><title>&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.07%)</title><rect x="8.2270%" y="309" width="0.0656%" height="15" fill="rgb(228,143,12)" fg:x="1380" fg:w="11"/><text x="8.4770%" y="319.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.08%)</title><rect x="9.0199%" y="293" width="0.0775%" height="15" fill="rgb(249,149,8)" fg:x="1513" fg:w="13"/><text x="9.2699%" y="303.50"></text></g><g><title>core::str::validations::next_code_point (13 samples, 0.08%)</title><rect x="9.0199%" y="277" width="0.0775%" height="15" fill="rgb(243,35,44)" fg:x="1513" fg:w="13"/><text x="9.2699%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.06%)</title><rect x="9.0378%" y="261" width="0.0596%" height="15" fill="rgb(246,89,9)" fg:x="1516" fg:w="10"/><text x="9.2878%" y="271.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.02%)</title><rect x="9.3120%" y="277" width="0.0238%" height="15" fill="rgb(233,213,13)" fg:x="1562" fg:w="4"/><text x="9.5620%" y="287.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (9 samples, 0.05%)</title><rect x="9.3359%" y="277" width="0.0537%" height="15" fill="rgb(233,141,41)" fg:x="1566" fg:w="9"/><text x="9.5859%" y="287.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (9 samples, 0.05%)</title><rect x="9.3359%" y="261" width="0.0537%" height="15" fill="rgb(239,167,4)" fg:x="1566" fg:w="9"/><text x="9.5859%" y="271.50"></text></g><g><title>core::cmp::min (2 samples, 0.01%)</title><rect x="9.3776%" y="245" width="0.0119%" height="15" fill="rgb(209,217,16)" fg:x="1573" fg:w="2"/><text x="9.6276%" y="255.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.01%)</title><rect x="9.3776%" y="229" width="0.0119%" height="15" fill="rgb(219,88,35)" fg:x="1573" fg:w="2"/><text x="9.6276%" y="239.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (3 samples, 0.02%)</title><rect x="9.3895%" y="277" width="0.0179%" height="15" fill="rgb(220,193,23)" fg:x="1575" fg:w="3"/><text x="9.6395%" y="287.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (3 samples, 0.02%)</title><rect x="9.3895%" y="261" width="0.0179%" height="15" fill="rgb(230,90,52)" fg:x="1575" fg:w="3"/><text x="9.6395%" y="271.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (3 samples, 0.02%)</title><rect x="9.3895%" y="245" width="0.0179%" height="15" fill="rgb(252,106,19)" fg:x="1575" fg:w="3"/><text x="9.6395%" y="255.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (3 samples, 0.02%)</title><rect x="9.3895%" y="229" width="0.0179%" height="15" fill="rgb(206,74,20)" fg:x="1575" fg:w="3"/><text x="9.6395%" y="239.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (3 samples, 0.02%)</title><rect x="9.3895%" y="213" width="0.0179%" height="15" fill="rgb(230,138,44)" fg:x="1575" fg:w="3"/><text x="9.6395%" y="223.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (3 samples, 0.02%)</title><rect x="9.3895%" y="197" width="0.0179%" height="15" fill="rgb(235,182,43)" fg:x="1575" fg:w="3"/><text x="9.6395%" y="207.50"></text></g><g><title>read (3 samples, 0.02%)</title><rect x="9.3895%" y="181" width="0.0179%" height="15" fill="rgb(242,16,51)" fg:x="1575" fg:w="3"/><text x="9.6395%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="9.3955%" y="165" width="0.0119%" height="15" fill="rgb(248,9,4)" fg:x="1576" fg:w="2"/><text x="9.6455%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="9.3955%" y="149" width="0.0119%" height="15" fill="rgb(210,31,22)" fg:x="1576" fg:w="2"/><text x="9.6455%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="9.3955%" y="133" width="0.0119%" height="15" fill="rgb(239,54,39)" fg:x="1576" fg:w="2"/><text x="9.6455%" y="143.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="9.3955%" y="117" width="0.0119%" height="15" fill="rgb(230,99,41)" fg:x="1576" fg:w="2"/><text x="9.6455%" y="127.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="9.3955%" y="101" width="0.0119%" height="15" fill="rgb(253,106,12)" fg:x="1576" fg:w="2"/><text x="9.6455%" y="111.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.02%)</title><rect x="9.4074%" y="277" width="0.0238%" height="15" fill="rgb(213,46,41)" fg:x="1578" fg:w="4"/><text x="9.6574%" y="287.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (72 samples, 0.43%)</title><rect x="9.0974%" y="293" width="0.4292%" height="15" fill="rgb(215,133,35)" fg:x="1526" fg:w="72"/><text x="9.3474%" y="303.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (15 samples, 0.09%)</title><rect x="9.4372%" y="277" width="0.0894%" height="15" fill="rgb(213,28,5)" fg:x="1583" fg:w="15"/><text x="9.6872%" y="287.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (4 samples, 0.02%)</title><rect x="9.5266%" y="293" width="0.0238%" height="15" fill="rgb(215,77,49)" fg:x="1598" fg:w="4"/><text x="9.7766%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.02%)</title><rect x="9.5266%" y="277" width="0.0238%" height="15" fill="rgb(248,100,22)" fg:x="1598" fg:w="4"/><text x="9.7766%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.02%)</title><rect x="9.5266%" y="261" width="0.0238%" height="15" fill="rgb(208,67,9)" fg:x="1598" fg:w="4"/><text x="9.7766%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.02%)</title><rect x="9.5266%" y="245" width="0.0238%" height="15" fill="rgb(219,133,21)" fg:x="1598" fg:w="4"/><text x="9.7766%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (8 samples, 0.05%)</title><rect x="9.5505%" y="261" width="0.0477%" height="15" fill="rgb(246,46,29)" fg:x="1602" fg:w="8"/><text x="9.8005%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (7 samples, 0.04%)</title><rect x="9.5565%" y="245" width="0.0417%" height="15" fill="rgb(246,185,52)" fg:x="1603" fg:w="7"/><text x="9.8065%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (7 samples, 0.04%)</title><rect x="9.5565%" y="229" width="0.0417%" height="15" fill="rgb(252,136,11)" fg:x="1603" fg:w="7"/><text x="9.8065%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.02%)</title><rect x="9.5803%" y="213" width="0.0179%" height="15" fill="rgb(219,138,53)" fg:x="1607" fg:w="3"/><text x="9.8303%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.02%)</title><rect x="9.5803%" y="197" width="0.0179%" height="15" fill="rgb(211,51,23)" fg:x="1607" fg:w="3"/><text x="9.8303%" y="207.50"></text></g><g><title>core::array::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T: N]&gt;::index_mut (15 samples, 0.09%)</title><rect x="9.5505%" y="293" width="0.0894%" height="15" fill="rgb(247,221,28)" fg:x="1602" fg:w="15"/><text x="9.8005%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (15 samples, 0.09%)</title><rect x="9.5505%" y="277" width="0.0894%" height="15" fill="rgb(251,222,45)" fg:x="1602" fg:w="15"/><text x="9.8005%" y="287.50"></text></g><g><title>&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.04%)</title><rect x="9.5982%" y="261" width="0.0417%" height="15" fill="rgb(217,162,53)" fg:x="1610" fg:w="7"/><text x="9.8482%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (4 samples, 0.02%)</title><rect x="9.6399%" y="293" width="0.0238%" height="15" fill="rgb(229,93,14)" fg:x="1617" fg:w="4"/><text x="9.8899%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_within (6 samples, 0.04%)</title><rect x="9.6638%" y="293" width="0.0358%" height="15" fill="rgb(209,67,49)" fg:x="1621" fg:w="6"/><text x="9.9138%" y="303.50"></text></g><g><title>core::intrinsics::copy (6 samples, 0.04%)</title><rect x="9.6638%" y="277" width="0.0358%" height="15" fill="rgb(213,87,29)" fg:x="1621" fg:w="6"/><text x="9.9138%" y="287.50"></text></g><g><title>core::str::converts::from_utf8 (5 samples, 0.03%)</title><rect x="9.8247%" y="277" width="0.0298%" height="15" fill="rgb(205,151,52)" fg:x="1648" fg:w="5"/><text x="10.0747%" y="287.50"></text></g><g><title>&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (370 samples, 2.21%)</title><rect x="8.0422%" y="325" width="2.2058%" height="15" fill="rgb(253,215,39)" fg:x="1349" fg:w="370"/><text x="8.2922%" y="335.50">&lt;..</text></g><g><title>yt_history::utf8_reader::Utf8Iter&lt;R&gt;::next (328 samples, 1.96%)</title><rect x="8.2926%" y="309" width="1.9554%" height="15" fill="rgb(221,220,41)" fg:x="1391" fg:w="328"/><text x="8.5426%" y="319.50">y..</text></g><g><title>core::str::converts::from_utf8 (92 samples, 0.55%)</title><rect x="9.6995%" y="293" width="0.5485%" height="15" fill="rgb(218,133,21)" fg:x="1627" fg:w="92"/><text x="9.9495%" y="303.50"></text></g><g><title>core::str::validations::run_utf8_validation (66 samples, 0.39%)</title><rect x="9.8545%" y="277" width="0.3935%" height="15" fill="rgb(221,193,43)" fg:x="1653" fg:w="66"/><text x="10.1045%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (606 samples, 3.61%)</title><rect x="6.6770%" y="341" width="3.6127%" height="15" fill="rgb(240,128,52)" fg:x="1120" fg:w="606"/><text x="6.9270%" y="351.50">&lt;cor..</text></g><g><title>yt_history::models_parser::ModelsParser::read_until (7 samples, 0.04%)</title><rect x="10.2480%" y="325" width="0.0417%" height="15" fill="rgb(253,114,12)" fg:x="1719" fg:w="7"/><text x="10.4980%" y="335.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (618 samples, 3.68%)</title><rect x="6.6591%" y="373" width="3.6843%" height="15" fill="rgb(215,223,47)" fg:x="1117" fg:w="618"/><text x="6.9091%" y="383.50">&lt;&amp;mu..</text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (618 samples, 3.68%)</title><rect x="6.6591%" y="357" width="3.6843%" height="15" fill="rgb(248,225,23)" fg:x="1117" fg:w="618"/><text x="6.9091%" y="367.50">&lt;cor..</text></g><g><title>core::option::Option&lt;T&gt;::take (9 samples, 0.05%)</title><rect x="10.2897%" y="341" width="0.0537%" height="15" fill="rgb(250,108,0)" fg:x="1726" fg:w="9"/><text x="10.5397%" y="351.50"></text></g><g><title>core::mem::replace (9 samples, 0.05%)</title><rect x="10.2897%" y="325" width="0.0537%" height="15" fill="rgb(228,208,7)" fg:x="1726" fg:w="9"/><text x="10.5397%" y="335.50"></text></g><g><title>core::ptr::read (2 samples, 0.01%)</title><rect x="10.3315%" y="309" width="0.0119%" height="15" fill="rgb(244,45,10)" fg:x="1733" fg:w="2"/><text x="10.5815%" y="319.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (2 samples, 0.01%)</title><rect x="10.3315%" y="293" width="0.0119%" height="15" fill="rgb(207,125,25)" fg:x="1733" fg:w="2"/><text x="10.5815%" y="303.50"></text></g><g><title>__rdl_alloc (11 samples, 0.07%)</title><rect x="10.3434%" y="133" width="0.0656%" height="15" fill="rgb(210,195,18)" fg:x="1735" fg:w="11"/><text x="10.5934%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.01%)</title><rect x="10.3970%" y="117" width="0.0119%" height="15" fill="rgb(249,80,12)" fg:x="1744" fg:w="2"/><text x="10.6470%" y="127.50"></text></g><g><title>__rust_alloc (27 samples, 0.16%)</title><rect x="10.4090%" y="133" width="0.1610%" height="15" fill="rgb(221,65,9)" fg:x="1746" fg:w="27"/><text x="10.6590%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (102 samples, 0.61%)</title><rect x="10.3434%" y="229" width="0.6081%" height="15" fill="rgb(235,49,36)" fg:x="1735" fg:w="102"/><text x="10.5934%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (102 samples, 0.61%)</title><rect x="10.3434%" y="213" width="0.6081%" height="15" fill="rgb(225,32,20)" fg:x="1735" fg:w="102"/><text x="10.5934%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (102 samples, 0.61%)</title><rect x="10.3434%" y="197" width="0.6081%" height="15" fill="rgb(215,141,46)" fg:x="1735" fg:w="102"/><text x="10.5934%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (102 samples, 0.61%)</title><rect x="10.3434%" y="181" width="0.6081%" height="15" fill="rgb(250,160,47)" fg:x="1735" fg:w="102"/><text x="10.5934%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (102 samples, 0.61%)</title><rect x="10.3434%" y="165" width="0.6081%" height="15" fill="rgb(216,222,40)" fg:x="1735" fg:w="102"/><text x="10.5934%" y="175.50"></text></g><g><title>alloc::alloc::alloc (102 samples, 0.61%)</title><rect x="10.3434%" y="149" width="0.6081%" height="15" fill="rgb(234,217,39)" fg:x="1735" fg:w="102"/><text x="10.5934%" y="159.50"></text></g><g><title>malloc (64 samples, 0.38%)</title><rect x="10.5699%" y="133" width="0.3815%" height="15" fill="rgb(207,178,40)" fg:x="1773" fg:w="64"/><text x="10.8199%" y="143.50"></text></g><g><title>[libc.so.6] (15 samples, 0.09%)</title><rect x="10.8620%" y="117" width="0.0894%" height="15" fill="rgb(221,136,13)" fg:x="1822" fg:w="15"/><text x="11.1120%" y="127.50"></text></g><g><title>[libc.so.6] (12 samples, 0.07%)</title><rect x="10.8799%" y="101" width="0.0715%" height="15" fill="rgb(249,199,10)" fg:x="1825" fg:w="12"/><text x="11.1299%" y="111.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (126 samples, 0.75%)</title><rect x="10.3434%" y="309" width="0.7512%" height="15" fill="rgb(249,222,13)" fg:x="1735" fg:w="126"/><text x="10.5934%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (126 samples, 0.75%)</title><rect x="10.3434%" y="293" width="0.7512%" height="15" fill="rgb(244,185,38)" fg:x="1735" fg:w="126"/><text x="10.5934%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (126 samples, 0.75%)</title><rect x="10.3434%" y="277" width="0.7512%" height="15" fill="rgb(236,202,9)" fg:x="1735" fg:w="126"/><text x="10.5934%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (126 samples, 0.75%)</title><rect x="10.3434%" y="261" width="0.7512%" height="15" fill="rgb(250,229,37)" fg:x="1735" fg:w="126"/><text x="10.5934%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (126 samples, 0.75%)</title><rect x="10.3434%" y="245" width="0.7512%" height="15" fill="rgb(206,174,23)" fg:x="1735" fg:w="126"/><text x="10.5934%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (24 samples, 0.14%)</title><rect x="10.9515%" y="229" width="0.1431%" height="15" fill="rgb(211,33,43)" fg:x="1837" fg:w="24"/><text x="11.2015%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.14%)</title><rect x="10.9515%" y="213" width="0.1431%" height="15" fill="rgb(245,58,50)" fg:x="1837" fg:w="24"/><text x="11.2015%" y="223.50"></text></g><g><title>[libc.so.6] (16 samples, 0.10%)</title><rect x="10.9992%" y="197" width="0.0954%" height="15" fill="rgb(244,68,36)" fg:x="1845" fg:w="16"/><text x="11.2492%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;char&gt;&gt;::from (128 samples, 0.76%)</title><rect x="10.3434%" y="373" width="0.7631%" height="15" fill="rgb(232,229,15)" fg:x="1735" fg:w="128"/><text x="10.5934%" y="383.50"></text></g><g><title>&lt;char as alloc::string::ToString&gt;::to_string (128 samples, 0.76%)</title><rect x="10.3434%" y="357" width="0.7631%" height="15" fill="rgb(254,30,23)" fg:x="1735" fg:w="128"/><text x="10.5934%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;mut str&gt;&gt;::from (128 samples, 0.76%)</title><rect x="10.3434%" y="341" width="0.7631%" height="15" fill="rgb(235,160,14)" fg:x="1735" fg:w="128"/><text x="10.5934%" y="351.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (128 samples, 0.76%)</title><rect x="10.3434%" y="325" width="0.7631%" height="15" fill="rgb(212,155,44)" fg:x="1735" fg:w="128"/><text x="10.5934%" y="335.50"></text></g><g><title>alloc::string::String::from_utf8_unchecked (2 samples, 0.01%)</title><rect x="11.0946%" y="309" width="0.0119%" height="15" fill="rgb(226,2,50)" fg:x="1861" fg:w="2"/><text x="11.3446%" y="319.50"></text></g><g><title>core::str::count::count_chars (29 samples, 0.17%)</title><rect x="11.1065%" y="357" width="0.1729%" height="15" fill="rgb(234,177,6)" fg:x="1863" fg:w="29"/><text x="11.3565%" y="367.50"></text></g><g><title>core::str::count::char_count_general_case (19 samples, 0.11%)</title><rect x="11.1661%" y="341" width="0.1133%" height="15" fill="rgb(217,24,9)" fg:x="1873" fg:w="19"/><text x="11.4161%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (19 samples, 0.11%)</title><rect x="11.1661%" y="325" width="0.1133%" height="15" fill="rgb(220,13,46)" fg:x="1873" fg:w="19"/><text x="11.4161%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (19 samples, 0.11%)</title><rect x="11.1661%" y="309" width="0.1133%" height="15" fill="rgb(239,221,27)" fg:x="1873" fg:w="19"/><text x="11.4161%" y="319.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (19 samples, 0.11%)</title><rect x="11.1661%" y="293" width="0.1133%" height="15" fill="rgb(222,198,25)" fg:x="1873" fg:w="19"/><text x="11.4161%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (19 samples, 0.11%)</title><rect x="11.1661%" y="277" width="0.1133%" height="15" fill="rgb(211,99,13)" fg:x="1873" fg:w="19"/><text x="11.4161%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (19 samples, 0.11%)</title><rect x="11.1661%" y="261" width="0.1133%" height="15" fill="rgb(232,111,31)" fg:x="1873" fg:w="19"/><text x="11.4161%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.11%)</title><rect x="11.1661%" y="245" width="0.1133%" height="15" fill="rgb(245,82,37)" fg:x="1873" fg:w="19"/><text x="11.4161%" y="255.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (32 samples, 0.19%)</title><rect x="11.1065%" y="373" width="0.1908%" height="15" fill="rgb(227,149,46)" fg:x="1863" fg:w="32"/><text x="11.3565%" y="383.50"></text></g><g><title>yt_history::models_parser::ModelsParser::read_until (3 samples, 0.02%)</title><rect x="11.2794%" y="357" width="0.0179%" height="15" fill="rgb(218,36,50)" fg:x="1892" fg:w="3"/><text x="11.5294%" y="367.50"></text></g><g><title>__rdl_alloc (2 samples, 0.01%)</title><rect x="11.3271%" y="293" width="0.0119%" height="15" fill="rgb(226,80,48)" fg:x="1900" fg:w="2"/><text x="11.5771%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.05%)</title><rect x="11.3211%" y="309" width="0.0477%" height="15" fill="rgb(238,224,15)" fg:x="1899" fg:w="8"/><text x="11.5711%" y="319.50"></text></g><g><title>malloc (4 samples, 0.02%)</title><rect x="11.3449%" y="293" width="0.0238%" height="15" fill="rgb(241,136,10)" fg:x="1903" fg:w="4"/><text x="11.5949%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.06%)</title><rect x="11.3151%" y="341" width="0.0596%" height="15" fill="rgb(208,32,45)" fg:x="1898" fg:w="10"/><text x="11.5651%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (10 samples, 0.06%)</title><rect x="11.3151%" y="325" width="0.0596%" height="15" fill="rgb(207,135,9)" fg:x="1898" fg:w="10"/><text x="11.5651%" y="335.50"></text></g><g><title>alloc::string::String::push (14 samples, 0.08%)</title><rect x="11.3032%" y="373" width="0.0835%" height="15" fill="rgb(206,86,44)" fg:x="1896" fg:w="14"/><text x="11.5532%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (14 samples, 0.08%)</title><rect x="11.3032%" y="357" width="0.0835%" height="15" fill="rgb(245,177,15)" fg:x="1896" fg:w="14"/><text x="11.5532%" y="367.50"></text></g><g><title>core::ptr::write (2 samples, 0.01%)</title><rect x="11.3747%" y="341" width="0.0119%" height="15" fill="rgb(206,64,50)" fg:x="1908" fg:w="2"/><text x="11.6247%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::nth (11 samples, 0.07%)</title><rect x="11.3926%" y="373" width="0.0656%" height="15" fill="rgb(234,36,40)" fg:x="1911" fg:w="11"/><text x="11.6426%" y="383.50"></text></g><g><title>yt_history::models_parser::ModelsParser::read_until (10 samples, 0.06%)</title><rect x="11.3986%" y="357" width="0.0596%" height="15" fill="rgb(213,64,8)" fg:x="1912" fg:w="10"/><text x="11.6486%" y="367.50"></text></g><g><title>__rdl_dealloc (8 samples, 0.05%)</title><rect x="11.4821%" y="277" width="0.0477%" height="15" fill="rgb(210,75,36)" fg:x="1926" fg:w="8"/><text x="11.7321%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (8 samples, 0.05%)</title><rect x="11.4821%" y="261" width="0.0477%" height="15" fill="rgb(229,88,21)" fg:x="1926" fg:w="8"/><text x="11.7321%" y="271.50"></text></g><g><title>__rust_dealloc (23 samples, 0.14%)</title><rect x="11.5297%" y="277" width="0.1371%" height="15" fill="rgb(252,204,47)" fg:x="1934" fg:w="23"/><text x="11.7797%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (152 samples, 0.91%)</title><rect x="11.4582%" y="373" width="0.9062%" height="15" fill="rgb(208,77,27)" fg:x="1922" fg:w="152"/><text x="11.7082%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (152 samples, 0.91%)</title><rect x="11.4582%" y="357" width="0.9062%" height="15" fill="rgb(221,76,26)" fg:x="1922" fg:w="152"/><text x="11.7082%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (152 samples, 0.91%)</title><rect x="11.4582%" y="341" width="0.9062%" height="15" fill="rgb(225,139,18)" fg:x="1922" fg:w="152"/><text x="11.7082%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (152 samples, 0.91%)</title><rect x="11.4582%" y="325" width="0.9062%" height="15" fill="rgb(230,137,11)" fg:x="1922" fg:w="152"/><text x="11.7082%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (152 samples, 0.91%)</title><rect x="11.4582%" y="309" width="0.9062%" height="15" fill="rgb(212,28,1)" fg:x="1922" fg:w="152"/><text x="11.7082%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (152 samples, 0.91%)</title><rect x="11.4582%" y="293" width="0.9062%" height="15" fill="rgb(248,164,17)" fg:x="1922" fg:w="152"/><text x="11.7082%" y="303.50"></text></g><g><title>cfree (117 samples, 0.70%)</title><rect x="11.6669%" y="277" width="0.6975%" height="15" fill="rgb(222,171,42)" fg:x="1957" fg:w="117"/><text x="11.9169%" y="287.50"></text></g><g><title>[libc.so.6] (83 samples, 0.49%)</title><rect x="11.8696%" y="261" width="0.4948%" height="15" fill="rgb(243,84,45)" fg:x="1991" fg:w="83"/><text x="12.1196%" y="271.50"></text></g><g><title>yt_history::models_parser::&lt;impl core::convert::From&lt;yt_history::utf8_reader::NextUtf8&gt; for core::result::Result&lt;char,yt_history::models_parser::ParseError&gt;&gt;::from (35 samples, 0.21%)</title><rect x="12.3644%" y="373" width="0.2087%" height="15" fill="rgb(252,49,23)" fg:x="2074" fg:w="35"/><text x="12.6144%" y="383.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::last (10 samples, 0.06%)</title><rect x="12.7936%" y="357" width="0.0596%" height="15" fill="rgb(215,19,7)" fg:x="2146" fg:w="10"/><text x="13.0436%" y="367.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (10 samples, 0.06%)</title><rect x="12.7936%" y="341" width="0.0596%" height="15" fill="rgb(238,81,41)" fg:x="2146" fg:w="10"/><text x="13.0436%" y="351.50"></text></g><g><title>core::str::validations::next_code_point_reverse (10 samples, 0.06%)</title><rect x="12.7936%" y="325" width="0.0596%" height="15" fill="rgb(210,199,37)" fg:x="2146" fg:w="10"/><text x="13.0436%" y="335.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.05%)</title><rect x="12.8532%" y="357" width="0.0477%" height="15" fill="rgb(244,192,49)" fg:x="2156" fg:w="8"/><text x="13.1032%" y="367.50"></text></g><g><title>core::str::validations::next_code_point (8 samples, 0.05%)</title><rect x="12.8532%" y="341" width="0.0477%" height="15" fill="rgb(226,211,11)" fg:x="2156" fg:w="8"/><text x="13.1032%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.04%)</title><rect x="12.8651%" y="325" width="0.0358%" height="15" fill="rgb(236,162,54)" fg:x="2158" fg:w="6"/><text x="13.1151%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.02%)</title><rect x="13.0261%" y="293" width="0.0238%" height="15" fill="rgb(220,229,9)" fg:x="2185" fg:w="4"/><text x="13.2761%" y="303.50"></text></g><g><title>__rdl_realloc (7 samples, 0.04%)</title><rect x="13.0917%" y="229" width="0.0417%" height="15" fill="rgb(250,87,22)" fg:x="2196" fg:w="7"/><text x="13.3417%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (7 samples, 0.04%)</title><rect x="13.0917%" y="213" width="0.0417%" height="15" fill="rgb(239,43,17)" fg:x="2196" fg:w="7"/><text x="13.3417%" y="223.50"></text></g><g><title>[libc.so.6] (27 samples, 0.16%)</title><rect x="13.2944%" y="197" width="0.1610%" height="15" fill="rgb(231,177,25)" fg:x="2230" fg:w="27"/><text x="13.5444%" y="207.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="13.4375%" y="181" width="0.0179%" height="15" fill="rgb(219,179,1)" fg:x="2254" fg:w="3"/><text x="13.6875%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (62 samples, 0.37%)</title><rect x="13.0917%" y="277" width="0.3696%" height="15" fill="rgb(238,219,53)" fg:x="2196" fg:w="62"/><text x="13.3417%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (62 samples, 0.37%)</title><rect x="13.0917%" y="261" width="0.3696%" height="15" fill="rgb(232,167,36)" fg:x="2196" fg:w="62"/><text x="13.3417%" y="271.50"></text></g><g><title>alloc::alloc::realloc (62 samples, 0.37%)</title><rect x="13.0917%" y="245" width="0.3696%" height="15" fill="rgb(244,19,51)" fg:x="2196" fg:w="62"/><text x="13.3417%" y="255.50"></text></g><g><title>realloc (54 samples, 0.32%)</title><rect x="13.1394%" y="229" width="0.3219%" height="15" fill="rgb(224,6,22)" fg:x="2204" fg:w="54"/><text x="13.3894%" y="239.50"></text></g><g><title>[libc.so.6] (43 samples, 0.26%)</title><rect x="13.2050%" y="213" width="0.2563%" height="15" fill="rgb(224,145,5)" fg:x="2215" fg:w="43"/><text x="13.4550%" y="223.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.01%)</title><rect x="13.4673%" y="277" width="0.0119%" height="15" fill="rgb(234,130,49)" fg:x="2259" fg:w="2"/><text x="13.7173%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (92 samples, 0.55%)</title><rect x="13.0559%" y="293" width="0.5485%" height="15" fill="rgb(254,6,2)" fg:x="2190" fg:w="92"/><text x="13.3059%" y="303.50"></text></g><g><title>malloc (21 samples, 0.13%)</title><rect x="13.4792%" y="277" width="0.1252%" height="15" fill="rgb(208,96,46)" fg:x="2261" fg:w="21"/><text x="13.7292%" y="287.50"></text></g><g><title>[libc.so.6] (13 samples, 0.08%)</title><rect x="13.5269%" y="261" width="0.0775%" height="15" fill="rgb(239,3,39)" fg:x="2269" fg:w="13"/><text x="13.7769%" y="271.50"></text></g><g><title>[libc.so.6] (7 samples, 0.04%)</title><rect x="13.5627%" y="245" width="0.0417%" height="15" fill="rgb(233,210,1)" fg:x="2275" fg:w="7"/><text x="13.8127%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.01%)</title><rect x="13.6044%" y="293" width="0.0119%" height="15" fill="rgb(244,137,37)" fg:x="2282" fg:w="2"/><text x="13.8544%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (2 samples, 0.01%)</title><rect x="13.6044%" y="277" width="0.0119%" height="15" fill="rgb(240,136,2)" fg:x="2282" fg:w="2"/><text x="13.8544%" y="287.50"></text></g><g><title>core::cmp::max (3 samples, 0.02%)</title><rect x="13.6163%" y="293" width="0.0179%" height="15" fill="rgb(239,18,37)" fg:x="2284" fg:w="3"/><text x="13.8663%" y="303.50"></text></g><g><title>core::cmp::Ord::max (3 samples, 0.02%)</title><rect x="13.6163%" y="277" width="0.0179%" height="15" fill="rgb(218,185,22)" fg:x="2284" fg:w="3"/><text x="13.8663%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (111 samples, 0.66%)</title><rect x="12.9903%" y="325" width="0.6617%" height="15" fill="rgb(225,218,4)" fg:x="2179" fg:w="111"/><text x="13.2403%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (108 samples, 0.64%)</title><rect x="13.0082%" y="309" width="0.6439%" height="15" fill="rgb(230,182,32)" fg:x="2182" fg:w="108"/><text x="13.2582%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.02%)</title><rect x="13.6342%" y="293" width="0.0179%" height="15" fill="rgb(242,56,43)" fg:x="2287" fg:w="3"/><text x="13.8842%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (3 samples, 0.02%)</title><rect x="13.6342%" y="277" width="0.0179%" height="15" fill="rgb(233,99,24)" fg:x="2287" fg:w="3"/><text x="13.8842%" y="287.50"></text></g><g><title>alloc::string::String::push (137 samples, 0.82%)</title><rect x="12.9009%" y="357" width="0.8167%" height="15" fill="rgb(234,209,42)" fg:x="2164" fg:w="137"/><text x="13.1509%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (137 samples, 0.82%)</title><rect x="12.9009%" y="341" width="0.8167%" height="15" fill="rgb(227,7,12)" fg:x="2164" fg:w="137"/><text x="13.1509%" y="351.50"></text></g><g><title>core::ptr::write (11 samples, 0.07%)</title><rect x="13.6521%" y="325" width="0.0656%" height="15" fill="rgb(245,203,43)" fg:x="2290" fg:w="11"/><text x="13.9021%" y="335.50"></text></g><g><title>yt_history::models_parser::ModelsParser::read_until (1,442 samples, 8.60%)</title><rect x="5.1806%" y="389" width="8.5966%" height="15" fill="rgb(238,205,33)" fg:x="869" fg:w="1442"/><text x="5.4306%" y="399.50">yt_history::..</text></g><g><title>yt_history::models_parser::push_collapse_whitespace (202 samples, 1.20%)</title><rect x="12.5730%" y="373" width="1.2042%" height="15" fill="rgb(231,56,7)" fg:x="2109" fg:w="202"/><text x="12.8230%" y="383.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (10 samples, 0.06%)</title><rect x="13.7177%" y="357" width="0.0596%" height="15" fill="rgb(244,186,29)" fg:x="2301" fg:w="10"/><text x="13.9677%" y="367.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1,214 samples, 7.24%)</title><rect x="23.0833%" y="325" width="7.2374%" height="15" fill="rgb(234,111,31)" fg:x="3872" fg:w="1214"/><text x="23.3333%" y="335.50">&lt;core::opt..</text></g><g><title>&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 0.39%)</title><rect x="32.1927%" y="309" width="0.3875%" height="15" fill="rgb(241,149,10)" fg:x="5400" fg:w="65"/><text x="32.4427%" y="319.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (278 samples, 1.66%)</title><rect x="35.0900%" y="293" width="1.6573%" height="15" fill="rgb(249,206,44)" fg:x="5886" fg:w="278"/><text x="35.3400%" y="303.50"></text></g><g><title>core::str::validations::next_code_point (278 samples, 1.66%)</title><rect x="35.0900%" y="277" width="1.6573%" height="15" fill="rgb(251,153,30)" fg:x="5886" fg:w="278"/><text x="35.3400%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (100 samples, 0.60%)</title><rect x="36.1512%" y="261" width="0.5962%" height="15" fill="rgb(239,152,38)" fg:x="6064" fg:w="100"/><text x="36.4012%" y="271.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="38.3033%" y="277" width="0.0119%" height="15" fill="rgb(249,139,47)" fg:x="6425" fg:w="2"/><text x="38.5533%" y="287.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (58 samples, 0.35%)</title><rect x="38.3152%" y="277" width="0.3458%" height="15" fill="rgb(244,64,35)" fg:x="6427" fg:w="58"/><text x="38.5652%" y="287.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (58 samples, 0.35%)</title><rect x="38.3152%" y="261" width="0.3458%" height="15" fill="rgb(216,46,15)" fg:x="6427" fg:w="58"/><text x="38.5652%" y="271.50"></text></g><g><title>core::cmp::min (2 samples, 0.01%)</title><rect x="38.6491%" y="245" width="0.0119%" height="15" fill="rgb(250,74,19)" fg:x="6483" fg:w="2"/><text x="38.8991%" y="255.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.01%)</title><rect x="38.6491%" y="229" width="0.0119%" height="15" fill="rgb(249,42,33)" fg:x="6483" fg:w="2"/><text x="38.8991%" y="239.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="38.6610%" y="181" width="0.0119%" height="15" fill="rgb(242,149,17)" fg:x="6485" fg:w="2"/><text x="38.9110%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="38.6610%" y="165" width="0.0119%" height="15" fill="rgb(244,29,21)" fg:x="6485" fg:w="2"/><text x="38.9110%" y="175.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (11 samples, 0.07%)</title><rect x="38.6610%" y="277" width="0.0656%" height="15" fill="rgb(220,130,37)" fg:x="6485" fg:w="11"/><text x="38.9110%" y="287.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (11 samples, 0.07%)</title><rect x="38.6610%" y="261" width="0.0656%" height="15" fill="rgb(211,67,2)" fg:x="6485" fg:w="11"/><text x="38.9110%" y="271.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (11 samples, 0.07%)</title><rect x="38.6610%" y="245" width="0.0656%" height="15" fill="rgb(235,68,52)" fg:x="6485" fg:w="11"/><text x="38.9110%" y="255.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (11 samples, 0.07%)</title><rect x="38.6610%" y="229" width="0.0656%" height="15" fill="rgb(246,142,3)" fg:x="6485" fg:w="11"/><text x="38.9110%" y="239.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (11 samples, 0.07%)</title><rect x="38.6610%" y="213" width="0.0656%" height="15" fill="rgb(241,25,7)" fg:x="6485" fg:w="11"/><text x="38.9110%" y="223.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (11 samples, 0.07%)</title><rect x="38.6610%" y="197" width="0.0656%" height="15" fill="rgb(242,119,39)" fg:x="6485" fg:w="11"/><text x="38.9110%" y="207.50"></text></g><g><title>read (9 samples, 0.05%)</title><rect x="38.6729%" y="181" width="0.0537%" height="15" fill="rgb(241,98,45)" fg:x="6487" fg:w="9"/><text x="38.9229%" y="191.50"></text></g><g><title>[unknown] (9 samples, 0.05%)</title><rect x="38.6729%" y="165" width="0.0537%" height="15" fill="rgb(254,28,30)" fg:x="6487" fg:w="9"/><text x="38.9229%" y="175.50"></text></g><g><title>[unknown] (9 samples, 0.05%)</title><rect x="38.6729%" y="149" width="0.0537%" height="15" fill="rgb(241,142,54)" fg:x="6487" fg:w="9"/><text x="38.9229%" y="159.50"></text></g><g><title>[unknown] (9 samples, 0.05%)</title><rect x="38.6729%" y="133" width="0.0537%" height="15" fill="rgb(222,85,15)" fg:x="6487" fg:w="9"/><text x="38.9229%" y="143.50"></text></g><g><title>[unknown] (9 samples, 0.05%)</title><rect x="38.6729%" y="117" width="0.0537%" height="15" fill="rgb(210,85,47)" fg:x="6487" fg:w="9"/><text x="38.9229%" y="127.50"></text></g><g><title>[unknown] (9 samples, 0.05%)</title><rect x="38.6729%" y="101" width="0.0537%" height="15" fill="rgb(224,206,25)" fg:x="6487" fg:w="9"/><text x="38.9229%" y="111.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="38.7028%" y="85" width="0.0238%" height="15" fill="rgb(243,201,19)" fg:x="6492" fg:w="4"/><text x="38.9528%" y="95.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="38.7087%" y="69" width="0.0179%" height="15" fill="rgb(236,59,4)" fg:x="6493" fg:w="3"/><text x="38.9587%" y="79.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="38.7147%" y="53" width="0.0119%" height="15" fill="rgb(254,179,45)" fg:x="6494" fg:w="2"/><text x="38.9647%" y="63.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="38.7147%" y="37" width="0.0119%" height="15" fill="rgb(226,14,10)" fg:x="6494" fg:w="2"/><text x="38.9647%" y="47.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (5 samples, 0.03%)</title><rect x="38.7266%" y="277" width="0.0298%" height="15" fill="rgb(244,27,41)" fg:x="6496" fg:w="5"/><text x="38.9766%" y="287.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::filled (2 samples, 0.01%)</title><rect x="38.7564%" y="277" width="0.0119%" height="15" fill="rgb(235,35,32)" fg:x="6501" fg:w="2"/><text x="39.0064%" y="287.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (419 samples, 2.50%)</title><rect x="36.7473%" y="293" width="2.4979%" height="15" fill="rgb(218,68,31)" fg:x="6164" fg:w="419"/><text x="36.9973%" y="303.50">&lt;s..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (79 samples, 0.47%)</title><rect x="38.7743%" y="277" width="0.4710%" height="15" fill="rgb(207,120,37)" fg:x="6504" fg:w="79"/><text x="39.0243%" y="287.50"></text></g><g><title>core::cmp::min (4 samples, 0.02%)</title><rect x="39.2214%" y="261" width="0.0238%" height="15" fill="rgb(227,98,0)" fg:x="6579" fg:w="4"/><text x="39.4714%" y="271.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.02%)</title><rect x="39.2214%" y="245" width="0.0238%" height="15" fill="rgb(207,7,3)" fg:x="6579" fg:w="4"/><text x="39.4714%" y="255.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (21 samples, 0.13%)</title><rect x="39.2453%" y="293" width="0.1252%" height="15" fill="rgb(206,98,19)" fg:x="6583" fg:w="21"/><text x="39.4953%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (21 samples, 0.13%)</title><rect x="39.2453%" y="277" width="0.1252%" height="15" fill="rgb(217,5,26)" fg:x="6583" fg:w="21"/><text x="39.4953%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (21 samples, 0.13%)</title><rect x="39.2453%" y="261" width="0.1252%" height="15" fill="rgb(235,190,38)" fg:x="6583" fg:w="21"/><text x="39.4953%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (21 samples, 0.13%)</title><rect x="39.2453%" y="245" width="0.1252%" height="15" fill="rgb(247,86,24)" fg:x="6583" fg:w="21"/><text x="39.4953%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (5 samples, 0.03%)</title><rect x="39.3705%" y="261" width="0.0298%" height="15" fill="rgb(205,101,16)" fg:x="6604" fg:w="5"/><text x="39.6205%" y="271.50"></text></g><g><title>core::array::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T: N]&gt;::index_mut (57 samples, 0.34%)</title><rect x="39.3705%" y="293" width="0.3398%" height="15" fill="rgb(246,168,33)" fg:x="6604" fg:w="57"/><text x="39.6205%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (57 samples, 0.34%)</title><rect x="39.3705%" y="277" width="0.3398%" height="15" fill="rgb(231,114,1)" fg:x="6604" fg:w="57"/><text x="39.6205%" y="287.50"></text></g><g><title>&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.31%)</title><rect x="39.4003%" y="261" width="0.3100%" height="15" fill="rgb(207,184,53)" fg:x="6609" fg:w="52"/><text x="39.6503%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (4 samples, 0.02%)</title><rect x="39.7162%" y="293" width="0.0238%" height="15" fill="rgb(224,95,51)" fg:x="6662" fg:w="4"/><text x="39.9662%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_within (12 samples, 0.07%)</title><rect x="39.7401%" y="293" width="0.0715%" height="15" fill="rgb(212,188,45)" fg:x="6666" fg:w="12"/><text x="39.9901%" y="303.50"></text></g><g><title>core::intrinsics::copy (12 samples, 0.07%)</title><rect x="39.7401%" y="277" width="0.0715%" height="15" fill="rgb(223,154,38)" fg:x="6666" fg:w="12"/><text x="39.9901%" y="287.50"></text></g><g><title>core::str::converts::from_utf8 (57 samples, 0.34%)</title><rect x="40.5091%" y="277" width="0.3398%" height="15" fill="rgb(251,22,52)" fg:x="6795" fg:w="57"/><text x="40.7591%" y="287.50"></text></g><g><title>&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,058 samples, 12.27%)</title><rect x="30.3207%" y="325" width="12.2690%" height="15" fill="rgb(229,209,22)" fg:x="5086" fg:w="2058"/><text x="30.5707%" y="335.50">&lt;yt_history::utf8_..</text></g><g><title>yt_history::utf8_reader::Utf8Iter&lt;R&gt;::next (1,679 samples, 10.01%)</title><rect x="32.5802%" y="309" width="10.0095%" height="15" fill="rgb(234,138,34)" fg:x="5465" fg:w="1679"/><text x="32.8302%" y="319.50">yt_history::ut..</text></g><g><title>core::str::converts::from_utf8 (466 samples, 2.78%)</title><rect x="39.8116%" y="293" width="2.7781%" height="15" fill="rgb(212,95,11)" fg:x="6678" fg:w="466"/><text x="40.0616%" y="303.50">co..</text></g><g><title>core::str::validations::run_utf8_validation (292 samples, 1.74%)</title><rect x="40.8489%" y="277" width="1.7408%" height="15" fill="rgb(240,179,47)" fg:x="6852" fg:w="292"/><text x="41.0989%" y="287.50"></text></g><g><title>core::str::validations::utf8_char_width (2 samples, 0.01%)</title><rect x="42.5778%" y="261" width="0.0119%" height="15" fill="rgb(240,163,11)" fg:x="7142" fg:w="2"/><text x="42.8278%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,322 samples, 19.80%)</title><rect x="23.0833%" y="341" width="19.8045%" height="15" fill="rgb(236,37,12)" fg:x="3872" fg:w="3322"/><text x="23.3333%" y="351.50">&lt;core::iter::adapters::enumerat..</text></g><g><title>yt_history::models_parser::ModelsParser::skip_to (50 samples, 0.30%)</title><rect x="42.5897%" y="325" width="0.2981%" height="15" fill="rgb(232,164,16)" fg:x="7144" fg:w="50"/><text x="42.8397%" y="335.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (3,339 samples, 19.91%)</title><rect x="23.0237%" y="373" width="19.9058%" height="15" fill="rgb(244,205,15)" fg:x="3862" fg:w="3339"/><text x="23.2737%" y="383.50">&lt;&amp;mut I as core::iter::traits::..</text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,339 samples, 19.91%)</title><rect x="23.0237%" y="357" width="19.9058%" height="15" fill="rgb(223,117,47)" fg:x="3862" fg:w="3339"/><text x="23.2737%" y="367.50">&lt;core::iter::adapters::peekable..</text></g><g><title>core::option::Option&lt;T&gt;::take (7 samples, 0.04%)</title><rect x="42.8878%" y="341" width="0.0417%" height="15" fill="rgb(244,107,35)" fg:x="7194" fg:w="7"/><text x="43.1378%" y="351.50"></text></g><g><title>core::mem::replace (7 samples, 0.04%)</title><rect x="42.8878%" y="325" width="0.0417%" height="15" fill="rgb(205,140,8)" fg:x="7194" fg:w="7"/><text x="43.1378%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.04%)</title><rect x="42.9295%" y="373" width="0.0417%" height="15" fill="rgb(228,84,46)" fg:x="7201" fg:w="7"/><text x="43.1795%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.04%)</title><rect x="42.9355%" y="357" width="0.0358%" height="15" fill="rgb(254,188,9)" fg:x="7202" fg:w="6"/><text x="43.1855%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.04%)</title><rect x="42.9355%" y="341" width="0.0358%" height="15" fill="rgb(206,112,54)" fg:x="7202" fg:w="6"/><text x="43.1855%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.04%)</title><rect x="42.9355%" y="325" width="0.0358%" height="15" fill="rgb(216,84,49)" fg:x="7202" fg:w="6"/><text x="43.1855%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.04%)</title><rect x="42.9355%" y="309" width="0.0358%" height="15" fill="rgb(214,194,35)" fg:x="7202" fg:w="6"/><text x="43.1855%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.04%)</title><rect x="42.9355%" y="293" width="0.0358%" height="15" fill="rgb(249,28,3)" fg:x="7202" fg:w="6"/><text x="43.1855%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.04%)</title><rect x="42.9355%" y="277" width="0.0358%" height="15" fill="rgb(222,56,52)" fg:x="7202" fg:w="6"/><text x="43.1855%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.04%)</title><rect x="42.9355%" y="261" width="0.0358%" height="15" fill="rgb(245,217,50)" fg:x="7202" fg:w="6"/><text x="43.1855%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.04%)</title><rect x="42.9355%" y="245" width="0.0358%" height="15" fill="rgb(213,201,24)" fg:x="7202" fg:w="6"/><text x="43.1855%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.04%)</title><rect x="42.9355%" y="229" width="0.0358%" height="15" fill="rgb(248,116,28)" fg:x="7202" fg:w="6"/><text x="43.1855%" y="239.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.04%)</title><rect x="42.9355%" y="213" width="0.0358%" height="15" fill="rgb(219,72,43)" fg:x="7202" fg:w="6"/><text x="43.1855%" y="223.50"></text></g><g><title>malloc (6 samples, 0.04%)</title><rect x="42.9355%" y="197" width="0.0358%" height="15" fill="rgb(209,138,14)" fg:x="7202" fg:w="6"/><text x="43.1855%" y="207.50"></text></g><g><title>[libc.so.6] (6 samples, 0.04%)</title><rect x="42.9355%" y="181" width="0.0358%" height="15" fill="rgb(222,18,33)" fg:x="7202" fg:w="6"/><text x="43.1855%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (56 samples, 0.33%)</title><rect x="42.9713%" y="373" width="0.3339%" height="15" fill="rgb(213,199,7)" fg:x="7208" fg:w="56"/><text x="43.2213%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.02%)</title><rect x="43.3051%" y="373" width="0.0179%" height="15" fill="rgb(250,110,10)" fg:x="7264" fg:w="3"/><text x="43.5551%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (131 samples, 0.78%)</title><rect x="43.3707%" y="245" width="0.7810%" height="15" fill="rgb(248,123,6)" fg:x="7275" fg:w="131"/><text x="43.6207%" y="255.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (2 samples, 0.01%)</title><rect x="44.1397%" y="229" width="0.0119%" height="15" fill="rgb(206,91,31)" fg:x="7404" fg:w="2"/><text x="44.3897%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.01%)</title><rect x="44.1397%" y="213" width="0.0119%" height="15" fill="rgb(211,154,13)" fg:x="7404" fg:w="2"/><text x="44.3897%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.01%)</title><rect x="44.1397%" y="197" width="0.0119%" height="15" fill="rgb(225,148,7)" fg:x="7404" fg:w="2"/><text x="44.3897%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::{{closure}} (3 samples, 0.02%)</title><rect x="44.1517%" y="229" width="0.0179%" height="15" fill="rgb(220,160,43)" fg:x="7406" fg:w="3"/><text x="44.4017%" y="239.50"></text></g><g><title>core::str::count::count_chars (144 samples, 0.86%)</title><rect x="43.3230%" y="357" width="0.8585%" height="15" fill="rgb(213,52,39)" fg:x="7267" fg:w="144"/><text x="43.5730%" y="367.50"></text></g><g><title>core::str::count::char_count_general_case (137 samples, 0.82%)</title><rect x="43.3647%" y="341" width="0.8167%" height="15" fill="rgb(243,137,7)" fg:x="7274" fg:w="137"/><text x="43.6147%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (137 samples, 0.82%)</title><rect x="43.3647%" y="325" width="0.8167%" height="15" fill="rgb(230,79,13)" fg:x="7274" fg:w="137"/><text x="43.6147%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (137 samples, 0.82%)</title><rect x="43.3647%" y="309" width="0.8167%" height="15" fill="rgb(247,105,23)" fg:x="7274" fg:w="137"/><text x="43.6147%" y="319.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (137 samples, 0.82%)</title><rect x="43.3647%" y="293" width="0.8167%" height="15" fill="rgb(223,179,41)" fg:x="7274" fg:w="137"/><text x="43.6147%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (137 samples, 0.82%)</title><rect x="43.3647%" y="277" width="0.8167%" height="15" fill="rgb(218,9,34)" fg:x="7274" fg:w="137"/><text x="43.6147%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (137 samples, 0.82%)</title><rect x="43.3647%" y="261" width="0.8167%" height="15" fill="rgb(222,106,8)" fg:x="7274" fg:w="137"/><text x="43.6147%" y="271.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (5 samples, 0.03%)</title><rect x="44.1517%" y="245" width="0.0298%" height="15" fill="rgb(211,220,0)" fg:x="7406" fg:w="5"/><text x="44.4017%" y="255.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (2 samples, 0.01%)</title><rect x="44.1695%" y="229" width="0.0119%" height="15" fill="rgb(229,52,16)" fg:x="7409" fg:w="2"/><text x="44.4195%" y="239.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (180 samples, 1.07%)</title><rect x="43.3230%" y="373" width="1.0731%" height="15" fill="rgb(212,155,18)" fg:x="7267" fg:w="180"/><text x="43.5730%" y="383.50"></text></g><g><title>yt_history::models_parser::ModelsParser::skip_to (36 samples, 0.21%)</title><rect x="44.1815%" y="357" width="0.2146%" height="15" fill="rgb(242,21,14)" fg:x="7411" fg:w="36"/><text x="44.4315%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="44.3961%" y="373" width="0.0119%" height="15" fill="rgb(222,19,48)" fg:x="7447" fg:w="2"/><text x="44.6461%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (63 samples, 0.38%)</title><rect x="46.3396%" y="309" width="0.3756%" height="15" fill="rgb(232,45,27)" fg:x="7773" fg:w="63"/><text x="46.5896%" y="319.50"></text></g><g><title>__rdl_alloc (66 samples, 0.39%)</title><rect x="47.5259%" y="181" width="0.3935%" height="15" fill="rgb(249,103,42)" fg:x="7972" fg:w="66"/><text x="47.7759%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (14 samples, 0.08%)</title><rect x="47.8359%" y="165" width="0.0835%" height="15" fill="rgb(246,81,33)" fg:x="8024" fg:w="14"/><text x="48.0859%" y="175.50"></text></g><g><title>__rust_alloc (58 samples, 0.35%)</title><rect x="47.9194%" y="181" width="0.3458%" height="15" fill="rgb(252,33,42)" fg:x="8038" fg:w="58"/><text x="48.1694%" y="191.50"></text></g><g><title>alloc::string::String::with_capacity (616 samples, 3.67%)</title><rect x="46.7152%" y="309" width="3.6724%" height="15" fill="rgb(209,212,41)" fg:x="7836" fg:w="616"/><text x="46.9652%" y="319.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (615 samples, 3.67%)</title><rect x="46.7211%" y="293" width="3.6664%" height="15" fill="rgb(207,154,6)" fg:x="7837" fg:w="615"/><text x="46.9711%" y="303.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (615 samples, 3.67%)</title><rect x="46.7211%" y="277" width="3.6664%" height="15" fill="rgb(223,64,47)" fg:x="7837" fg:w="615"/><text x="46.9711%" y="287.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (615 samples, 3.67%)</title><rect x="46.7211%" y="261" width="3.6664%" height="15" fill="rgb(211,161,38)" fg:x="7837" fg:w="615"/><text x="46.9711%" y="271.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (615 samples, 3.67%)</title><rect x="46.7211%" y="245" width="3.6664%" height="15" fill="rgb(219,138,40)" fg:x="7837" fg:w="615"/><text x="46.9711%" y="255.50">allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (550 samples, 3.28%)</title><rect x="47.1086%" y="229" width="3.2789%" height="15" fill="rgb(241,228,46)" fg:x="7902" fg:w="550"/><text x="47.3586%" y="239.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (550 samples, 3.28%)</title><rect x="47.1086%" y="213" width="3.2789%" height="15" fill="rgb(223,209,38)" fg:x="7902" fg:w="550"/><text x="47.3586%" y="223.50">all..</text></g><g><title>alloc::alloc::alloc (550 samples, 3.28%)</title><rect x="47.1086%" y="197" width="3.2789%" height="15" fill="rgb(236,164,45)" fg:x="7902" fg:w="550"/><text x="47.3586%" y="207.50">all..</text></g><g><title>malloc (356 samples, 2.12%)</title><rect x="48.2652%" y="181" width="2.1223%" height="15" fill="rgb(231,15,5)" fg:x="8096" fg:w="356"/><text x="48.5152%" y="191.50">m..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (186 samples, 1.11%)</title><rect x="50.3994%" y="293" width="1.1089%" height="15" fill="rgb(252,35,15)" fg:x="8454" fg:w="186"/><text x="50.6494%" y="303.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (186 samples, 1.11%)</title><rect x="50.3994%" y="277" width="1.1089%" height="15" fill="rgb(248,181,18)" fg:x="8454" fg:w="186"/><text x="50.6494%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (186 samples, 1.11%)</title><rect x="50.3994%" y="261" width="1.1089%" height="15" fill="rgb(233,39,42)" fg:x="8454" fg:w="186"/><text x="50.6494%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (186 samples, 1.11%)</title><rect x="50.3994%" y="245" width="1.1089%" height="15" fill="rgb(238,110,33)" fg:x="8454" fg:w="186"/><text x="50.6494%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (186 samples, 1.11%)</title><rect x="50.3994%" y="229" width="1.1089%" height="15" fill="rgb(233,195,10)" fg:x="8454" fg:w="186"/><text x="50.6494%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (11 samples, 0.07%)</title><rect x="51.4427%" y="213" width="0.0656%" height="15" fill="rgb(254,105,3)" fg:x="8629" fg:w="11"/><text x="51.6927%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (11 samples, 0.07%)</title><rect x="51.4427%" y="197" width="0.0656%" height="15" fill="rgb(221,225,9)" fg:x="8629" fg:w="11"/><text x="51.6927%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (11 samples, 0.07%)</title><rect x="51.4427%" y="181" width="0.0656%" height="15" fill="rgb(224,227,45)" fg:x="8629" fg:w="11"/><text x="51.6927%" y="191.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (189 samples, 1.13%)</title><rect x="50.3875%" y="309" width="1.1267%" height="15" fill="rgb(229,198,43)" fg:x="8452" fg:w="189"/><text x="50.6375%" y="319.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (157 samples, 0.94%)</title><rect x="61.2078%" y="277" width="0.9360%" height="15" fill="rgb(206,209,35)" fg:x="10267" fg:w="157"/><text x="61.4578%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (538 samples, 3.21%)</title><rect x="68.9937%" y="181" width="3.2073%" height="15" fill="rgb(245,195,53)" fg:x="11573" fg:w="538"/><text x="69.2437%" y="191.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (274 samples, 1.63%)</title><rect x="70.5675%" y="165" width="1.6335%" height="15" fill="rgb(240,92,26)" fg:x="11837" fg:w="274"/><text x="70.8175%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (205 samples, 1.22%)</title><rect x="70.9789%" y="149" width="1.2221%" height="15" fill="rgb(207,40,23)" fg:x="11906" fg:w="205"/><text x="71.2289%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (64 samples, 0.38%)</title><rect x="71.8195%" y="133" width="0.3815%" height="15" fill="rgb(223,111,35)" fg:x="12047" fg:w="64"/><text x="72.0695%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,698 samples, 10.12%)</title><rect x="72.2010%" y="181" width="10.1228%" height="15" fill="rgb(229,147,28)" fg:x="12111" fg:w="1698"/><text x="72.4510%" y="191.50">core::intrinsic..</text></g><g><title>[libc.so.6] (1,686 samples, 10.05%)</title><rect x="72.2726%" y="165" width="10.0513%" height="15" fill="rgb(211,29,28)" fg:x="12123" fg:w="1686"/><text x="72.5226%" y="175.50">[libc.so.6]</text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3,410 samples, 20.33%)</title><rect x="62.1438%" y="277" width="20.3291%" height="15" fill="rgb(228,72,33)" fg:x="10424" fg:w="3410"/><text x="62.3938%" y="287.50">&lt;&amp;mut W as core::fmt::Write&gt;::wr..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2,528 samples, 15.07%)</title><rect x="67.4019%" y="261" width="15.0709%" height="15" fill="rgb(205,214,31)" fg:x="11306" fg:w="2528"/><text x="67.6519%" y="271.50">&lt;alloc::string::String ..</text></g><g><title>alloc::string::String::push_str (2,528 samples, 15.07%)</title><rect x="67.4019%" y="245" width="15.0709%" height="15" fill="rgb(224,111,15)" fg:x="11306" fg:w="2528"/><text x="67.6519%" y="255.50">alloc::string::String::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2,528 samples, 15.07%)</title><rect x="67.4019%" y="229" width="15.0709%" height="15" fill="rgb(253,21,26)" fg:x="11306" fg:w="2528"/><text x="67.6519%" y="239.50">alloc::vec::Vec&lt;T,A&gt;::e..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2,528 samples, 15.07%)</title><rect x="67.4019%" y="213" width="15.0709%" height="15" fill="rgb(245,139,43)" fg:x="11306" fg:w="2528"/><text x="67.6519%" y="223.50">&lt;alloc::vec::Vec&lt;T,A&gt; a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2,528 samples, 15.07%)</title><rect x="67.4019%" y="197" width="15.0709%" height="15" fill="rgb(252,170,7)" fg:x="11306" fg:w="2528"/><text x="67.6519%" y="207.50">alloc::vec::Vec&lt;T,A&gt;::a..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (25 samples, 0.15%)</title><rect x="82.3238%" y="181" width="0.1490%" height="15" fill="rgb(231,118,14)" fg:x="13809" fg:w="25"/><text x="82.5738%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (25 samples, 0.15%)</title><rect x="82.3238%" y="165" width="0.1490%" height="15" fill="rgb(238,83,0)" fg:x="13809" fg:w="25"/><text x="82.5738%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (125 samples, 0.75%)</title><rect x="82.4729%" y="277" width="0.7452%" height="15" fill="rgb(221,39,39)" fg:x="13834" fg:w="125"/><text x="82.7229%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (67 samples, 0.40%)</title><rect x="82.8186%" y="261" width="0.3994%" height="15" fill="rgb(222,119,46)" fg:x="13892" fg:w="67"/><text x="83.0686%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (99 samples, 0.59%)</title><rect x="83.2181%" y="277" width="0.5902%" height="15" fill="rgb(222,165,49)" fg:x="13959" fg:w="99"/><text x="83.4681%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (99 samples, 0.59%)</title><rect x="83.2181%" y="261" width="0.5902%" height="15" fill="rgb(219,113,52)" fg:x="13959" fg:w="99"/><text x="83.4681%" y="271.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (140 samples, 0.83%)</title><rect x="83.8083%" y="277" width="0.8346%" height="15" fill="rgb(214,7,15)" fg:x="14058" fg:w="140"/><text x="84.0583%" y="287.50"></text></g><g><title>core::fmt::Formatter::new (3 samples, 0.02%)</title><rect x="84.6429%" y="277" width="0.0179%" height="15" fill="rgb(235,32,4)" fg:x="14198" fg:w="3"/><text x="84.8929%" y="287.50"></text></g><g><title>core::fmt::Formatter::pad (408 samples, 2.43%)</title><rect x="84.6608%" y="277" width="2.4323%" height="15" fill="rgb(238,90,54)" fg:x="14201" fg:w="408"/><text x="84.9108%" y="287.50">co..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3 samples, 0.02%)</title><rect x="87.0931%" y="277" width="0.0179%" height="15" fill="rgb(213,208,19)" fg:x="14609" fg:w="3"/><text x="87.3431%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3 samples, 0.02%)</title><rect x="87.0931%" y="261" width="0.0179%" height="15" fill="rgb(233,156,4)" fg:x="14609" fg:w="3"/><text x="87.3431%" y="271.50"></text></g><g><title>core::fmt::Write::write_fmt (6,041 samples, 36.01%)</title><rect x="51.5142%" y="309" width="36.0141%" height="15" fill="rgb(207,194,5)" fg:x="8641" fg:w="6041"/><text x="51.7642%" y="319.50">core::fmt::Write::write_fmt</text></g><g><title>core::fmt::write (5,349 samples, 31.89%)</title><rect x="55.6397%" y="293" width="31.8886%" height="15" fill="rgb(206,111,30)" fg:x="9333" fg:w="5349"/><text x="55.8897%" y="303.50">core::fmt::write</text></g><g><title>core::str::&lt;impl str&gt;::is_empty (70 samples, 0.42%)</title><rect x="87.1110%" y="277" width="0.4173%" height="15" fill="rgb(243,70,54)" fg:x="14612" fg:w="70"/><text x="87.3610%" y="287.50"></text></g><g><title>alloc::fmt::format (7,277 samples, 43.38%)</title><rect x="44.4080%" y="373" width="43.3826%" height="15" fill="rgb(242,28,8)" fg:x="7449" fg:w="7277"/><text x="44.6580%" y="383.50">alloc::fmt::format</text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (7,277 samples, 43.38%)</title><rect x="44.4080%" y="357" width="43.3826%" height="15" fill="rgb(219,106,18)" fg:x="7449" fg:w="7277"/><text x="44.6580%" y="367.50">core::option::Option&lt;T&gt;::map_or_else</text></g><g><title>alloc::fmt::format::{{closure}} (7,277 samples, 43.38%)</title><rect x="44.4080%" y="341" width="43.3826%" height="15" fill="rgb(244,222,10)" fg:x="7449" fg:w="7277"/><text x="44.6580%" y="351.50">alloc::fmt::format::{{closure}}</text></g><g><title>alloc::fmt::format::format_inner (7,208 samples, 42.97%)</title><rect x="44.8194%" y="325" width="42.9713%" height="15" fill="rgb(236,179,52)" fg:x="7518" fg:w="7208"/><text x="45.0694%" y="335.50">alloc::fmt::format::format_inner</text></g><g><title>core::result::Result&lt;T,E&gt;::expect (44 samples, 0.26%)</title><rect x="87.5283%" y="309" width="0.2623%" height="15" fill="rgb(213,23,39)" fg:x="14682" fg:w="44"/><text x="87.7783%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.02%)</title><rect x="87.8026%" y="245" width="0.0179%" height="15" fill="rgb(238,48,10)" fg:x="14728" fg:w="3"/><text x="88.0526%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.02%)</title><rect x="87.8026%" y="229" width="0.0179%" height="15" fill="rgb(251,196,23)" fg:x="14728" fg:w="3"/><text x="88.0526%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.02%)</title><rect x="87.8026%" y="213" width="0.0179%" height="15" fill="rgb(250,152,24)" fg:x="14728" fg:w="3"/><text x="88.0526%" y="223.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.02%)</title><rect x="87.8026%" y="197" width="0.0179%" height="15" fill="rgb(209,150,17)" fg:x="14728" fg:w="3"/><text x="88.0526%" y="207.50"></text></g><g><title>realloc (2 samples, 0.01%)</title><rect x="87.8085%" y="181" width="0.0119%" height="15" fill="rgb(234,202,34)" fg:x="14729" fg:w="2"/><text x="88.0585%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5 samples, 0.03%)</title><rect x="87.7966%" y="309" width="0.0298%" height="15" fill="rgb(253,148,53)" fg:x="14727" fg:w="5"/><text x="88.0466%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.03%)</title><rect x="87.7966%" y="293" width="0.0298%" height="15" fill="rgb(218,129,16)" fg:x="14727" fg:w="5"/><text x="88.0466%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.03%)</title><rect x="87.7966%" y="277" width="0.0298%" height="15" fill="rgb(216,85,19)" fg:x="14727" fg:w="5"/><text x="88.0466%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.03%)</title><rect x="87.7966%" y="261" width="0.0298%" height="15" fill="rgb(235,228,7)" fg:x="14727" fg:w="5"/><text x="88.0466%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (9 samples, 0.05%)</title><rect x="87.7906%" y="357" width="0.0537%" height="15" fill="rgb(245,175,0)" fg:x="14726" fg:w="9"/><text x="88.0406%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.05%)</title><rect x="87.7906%" y="341" width="0.0537%" height="15" fill="rgb(208,168,36)" fg:x="14726" fg:w="9"/><text x="88.0406%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (9 samples, 0.05%)</title><rect x="87.7906%" y="325" width="0.0537%" height="15" fill="rgb(246,171,24)" fg:x="14726" fg:w="9"/><text x="88.0406%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.01%)</title><rect x="87.8324%" y="309" width="0.0119%" height="15" fill="rgb(215,142,24)" fg:x="14733" fg:w="2"/><text x="88.0824%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.01%)</title><rect x="87.8324%" y="293" width="0.0119%" height="15" fill="rgb(250,187,7)" fg:x="14733" fg:w="2"/><text x="88.0824%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.02%)</title><rect x="87.8860%" y="293" width="0.0179%" height="15" fill="rgb(228,66,33)" fg:x="14742" fg:w="3"/><text x="88.1360%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.02%)</title><rect x="87.8860%" y="277" width="0.0179%" height="15" fill="rgb(234,215,21)" fg:x="14742" fg:w="3"/><text x="88.1360%" y="287.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.02%)</title><rect x="87.8860%" y="261" width="0.0179%" height="15" fill="rgb(222,191,20)" fg:x="14742" fg:w="3"/><text x="88.1360%" y="271.50"></text></g><g><title>realloc (3 samples, 0.02%)</title><rect x="87.8860%" y="245" width="0.0179%" height="15" fill="rgb(245,79,54)" fg:x="14742" fg:w="3"/><text x="88.1360%" y="255.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="87.8920%" y="229" width="0.0119%" height="15" fill="rgb(240,10,37)" fg:x="14743" fg:w="2"/><text x="88.1420%" y="239.50"></text></g><g><title>__rdl_alloc (4 samples, 0.02%)</title><rect x="87.9039%" y="293" width="0.0238%" height="15" fill="rgb(214,192,32)" fg:x="14745" fg:w="4"/><text x="88.1539%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.02%)</title><rect x="87.9099%" y="277" width="0.0179%" height="15" fill="rgb(209,36,54)" fg:x="14746" fg:w="3"/><text x="88.1599%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (23 samples, 0.14%)</title><rect x="87.8562%" y="309" width="0.1371%" height="15" fill="rgb(220,10,11)" fg:x="14737" fg:w="23"/><text x="88.1062%" y="319.50"></text></g><g><title>malloc (9 samples, 0.05%)</title><rect x="87.9397%" y="293" width="0.0537%" height="15" fill="rgb(221,106,17)" fg:x="14751" fg:w="9"/><text x="88.1897%" y="303.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="87.9814%" y="277" width="0.0119%" height="15" fill="rgb(251,142,44)" fg:x="14758" fg:w="2"/><text x="88.2314%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (24 samples, 0.14%)</title><rect x="87.8562%" y="341" width="0.1431%" height="15" fill="rgb(238,13,15)" fg:x="14737" fg:w="24"/><text x="88.1062%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (24 samples, 0.14%)</title><rect x="87.8562%" y="325" width="0.1431%" height="15" fill="rgb(208,107,27)" fg:x="14737" fg:w="24"/><text x="88.1062%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (27 samples, 0.16%)</title><rect x="87.8443%" y="357" width="0.1610%" height="15" fill="rgb(205,136,37)" fg:x="14735" fg:w="27"/><text x="88.0943%" y="367.50"></text></g><g><title>alloc::string::String::push (37 samples, 0.22%)</title><rect x="87.7906%" y="373" width="0.2206%" height="15" fill="rgb(250,205,27)" fg:x="14726" fg:w="37"/><text x="88.0406%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (10 samples, 0.06%)</title><rect x="88.0112%" y="373" width="0.0596%" height="15" fill="rgb(210,80,43)" fg:x="14763" fg:w="10"/><text x="88.2612%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;str&gt;&gt;::eq (10 samples, 0.06%)</title><rect x="88.0112%" y="357" width="0.0596%" height="15" fill="rgb(247,160,36)" fg:x="14763" fg:w="10"/><text x="88.2612%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (10 samples, 0.06%)</title><rect x="88.0112%" y="341" width="0.0596%" height="15" fill="rgb(234,13,49)" fg:x="14763" fg:w="10"/><text x="88.2612%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (10 samples, 0.06%)</title><rect x="88.0112%" y="325" width="0.0596%" height="15" fill="rgb(234,122,0)" fg:x="14763" fg:w="10"/><text x="88.2612%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (10 samples, 0.06%)</title><rect x="88.0112%" y="309" width="0.0596%" height="15" fill="rgb(207,146,38)" fg:x="14763" fg:w="10"/><text x="88.2612%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (10 samples, 0.06%)</title><rect x="88.0112%" y="293" width="0.0596%" height="15" fill="rgb(207,177,25)" fg:x="14763" fg:w="10"/><text x="88.2612%" y="303.50"></text></g><g><title>[libc.so.6] (9 samples, 0.05%)</title><rect x="88.0172%" y="277" width="0.0537%" height="15" fill="rgb(211,178,42)" fg:x="14764" fg:w="9"/><text x="88.2672%" y="287.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="88.0708%" y="357" width="0.0238%" height="15" fill="rgb(230,69,54)" fg:x="14773" fg:w="4"/><text x="88.3208%" y="367.50"></text></g><g><title>core::str::validations::next_code_point (4 samples, 0.02%)</title><rect x="88.0708%" y="341" width="0.0238%" height="15" fill="rgb(214,135,41)" fg:x="14773" fg:w="4"/><text x="88.3208%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="88.0947%" y="341" width="0.0119%" height="15" fill="rgb(237,67,25)" fg:x="14777" fg:w="2"/><text x="88.3447%" y="351.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.04%)</title><rect x="88.1066%" y="341" width="0.0417%" height="15" fill="rgb(222,189,50)" fg:x="14779" fg:w="7"/><text x="88.3566%" y="351.50"></text></g><g><title>core::str::validations::next_code_point (7 samples, 0.04%)</title><rect x="88.1066%" y="325" width="0.0417%" height="15" fill="rgb(245,148,34)" fg:x="14779" fg:w="7"/><text x="88.3566%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="88.1304%" y="309" width="0.0179%" height="15" fill="rgb(222,29,6)" fg:x="14783" fg:w="3"/><text x="88.3804%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.01%)</title><rect x="88.1483%" y="341" width="0.0119%" height="15" fill="rgb(221,189,43)" fg:x="14786" fg:w="2"/><text x="88.3983%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.01%)</title><rect x="88.1483%" y="325" width="0.0119%" height="15" fill="rgb(207,36,27)" fg:x="14786" fg:w="2"/><text x="88.3983%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (13 samples, 0.08%)</title><rect x="88.0947%" y="357" width="0.0775%" height="15" fill="rgb(217,90,24)" fg:x="14777" fg:w="13"/><text x="88.3447%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (2 samples, 0.01%)</title><rect x="88.1602%" y="341" width="0.0119%" height="15" fill="rgb(224,66,35)" fg:x="14788" fg:w="2"/><text x="88.4102%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::nth (66 samples, 0.39%)</title><rect x="88.0708%" y="373" width="0.3935%" height="15" fill="rgb(221,13,50)" fg:x="14773" fg:w="66"/><text x="88.3208%" y="383.50"></text></g><g><title>yt_history::models_parser::ModelsParser::skip_to (49 samples, 0.29%)</title><rect x="88.1722%" y="357" width="0.2921%" height="15" fill="rgb(236,68,49)" fg:x="14790" fg:w="49"/><text x="88.4222%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (58 samples, 0.35%)</title><rect x="88.4643%" y="373" width="0.3458%" height="15" fill="rgb(229,146,28)" fg:x="14839" fg:w="58"/><text x="88.7143%" y="383.50"></text></g><g><title>__rdl_dealloc (65 samples, 0.39%)</title><rect x="89.6685%" y="277" width="0.3875%" height="15" fill="rgb(225,31,38)" fg:x="15041" fg:w="65"/><text x="89.9185%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (65 samples, 0.39%)</title><rect x="89.6685%" y="261" width="0.3875%" height="15" fill="rgb(250,208,3)" fg:x="15041" fg:w="65"/><text x="89.9185%" y="271.50"></text></g><g><title>__rust_dealloc (74 samples, 0.44%)</title><rect x="90.0560%" y="277" width="0.4412%" height="15" fill="rgb(246,54,23)" fg:x="15106" fg:w="74"/><text x="90.3060%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,463 samples, 8.72%)</title><rect x="88.8160%" y="309" width="8.7218%" height="15" fill="rgb(243,76,11)" fg:x="14898" fg:w="1463"/><text x="89.0660%" y="319.50">&lt;alloc::allo..</text></g><g><title>alloc::alloc::dealloc (1,463 samples, 8.72%)</title><rect x="88.8160%" y="293" width="8.7218%" height="15" fill="rgb(245,21,50)" fg:x="14898" fg:w="1463"/><text x="89.0660%" y="303.50">alloc::alloc..</text></g><g><title>cfree (1,181 samples, 7.04%)</title><rect x="90.4972%" y="277" width="7.0407%" height="15" fill="rgb(228,9,43)" fg:x="15180" fg:w="1181"/><text x="90.7472%" y="287.50">cfree</text></g><g><title>[libc.so.6] (902 samples, 5.38%)</title><rect x="92.1605%" y="261" width="5.3774%" height="15" fill="rgb(208,100,47)" fg:x="15459" fg:w="902"/><text x="92.4105%" y="271.50">[libc.s..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,590 samples, 9.48%)</title><rect x="88.8101%" y="373" width="9.4790%" height="15" fill="rgb(232,26,8)" fg:x="14897" fg:w="1590"/><text x="89.0601%" y="383.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,590 samples, 9.48%)</title><rect x="88.8101%" y="357" width="9.4790%" height="15" fill="rgb(216,166,38)" fg:x="14897" fg:w="1590"/><text x="89.0601%" y="367.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,590 samples, 9.48%)</title><rect x="88.8101%" y="341" width="9.4790%" height="15" fill="rgb(251,202,51)" fg:x="14897" fg:w="1590"/><text x="89.0601%" y="351.50">core::ptr::dro..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,590 samples, 9.48%)</title><rect x="88.8101%" y="325" width="9.4790%" height="15" fill="rgb(254,216,34)" fg:x="14897" fg:w="1590"/><text x="89.0601%" y="335.50">&lt;alloc::raw_ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (126 samples, 0.75%)</title><rect x="97.5379%" y="309" width="0.7512%" height="15" fill="rgb(251,32,27)" fg:x="16361" fg:w="126"/><text x="97.7879%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (3 samples, 0.02%)</title><rect x="98.2890%" y="373" width="0.0179%" height="15" fill="rgb(208,127,28)" fg:x="16487" fg:w="3"/><text x="98.5390%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::as_bytes (3 samples, 0.02%)</title><rect x="98.2890%" y="357" width="0.0179%" height="15" fill="rgb(224,137,22)" fg:x="16487" fg:w="3"/><text x="98.5390%" y="367.50"></text></g><g><title>yt_history::models_parser::&lt;impl core::convert::From&lt;yt_history::utf8_reader::NextUtf8&gt; for core::result::Result&lt;char,yt_history::models_parser::ParseError&gt;&gt;::from (260 samples, 1.55%)</title><rect x="98.3069%" y="373" width="1.5500%" height="15" fill="rgb(254,70,32)" fg:x="16490" fg:w="260"/><text x="98.5569%" y="383.50"></text></g><g><title>yt_history::load_models (16,713 samples, 99.64%)</title><rect x="0.2265%" y="453" width="99.6363%" height="15" fill="rgb(229,75,37)" fg:x="38" fg:w="16713"/><text x="0.4765%" y="463.50">yt_history::load_models</text></g><g><title>yt_history::parse (16,713 samples, 99.64%)</title><rect x="0.2265%" y="437" width="99.6363%" height="15" fill="rgb(252,64,23)" fg:x="38" fg:w="16713"/><text x="0.4765%" y="447.50">yt_history::parse</text></g><g><title>yt_history::models_parser::ModelsParser::parse (16,713 samples, 99.64%)</title><rect x="0.2265%" y="421" width="99.6363%" height="15" fill="rgb(232,162,48)" fg:x="38" fg:w="16713"/><text x="0.4765%" y="431.50">yt_history::models_parser::ModelsParser::parse</text></g><g><title>yt_history::models_parser::ModelsParser::next_data_row (15,894 samples, 94.75%)</title><rect x="5.1091%" y="405" width="94.7538%" height="15" fill="rgb(246,160,12)" fg:x="857" fg:w="15894"/><text x="5.3591%" y="415.50">yt_history::models_parser::ModelsParser::next_data_row</text></g><g><title>yt_history::models_parser::ModelsParser::skip_to (14,440 samples, 86.09%)</title><rect x="13.7773%" y="389" width="86.0856%" height="15" fill="rgb(247,166,0)" fg:x="2311" fg:w="14440"/><text x="14.0273%" y="399.50">yt_history::models_parser::ModelsParser::skip_to</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="99.8629%" y="357" width="0.0238%" height="15" fill="rgb(249,219,21)" fg:x="16751" fg:w="4"/><text x="100.1129%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="99.8629%" y="341" width="0.0238%" height="15" fill="rgb(205,209,3)" fg:x="16751" fg:w="4"/><text x="100.1129%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.02%)</title><rect x="99.8629%" y="325" width="0.0238%" height="15" fill="rgb(243,44,1)" fg:x="16751" fg:w="4"/><text x="100.1129%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.02%)</title><rect x="99.8688%" y="309" width="0.0179%" height="15" fill="rgb(206,159,16)" fg:x="16752" fg:w="3"/><text x="100.1188%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="99.8688%" y="293" width="0.0179%" height="15" fill="rgb(244,77,30)" fg:x="16752" fg:w="3"/><text x="100.1188%" y="303.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.02%)</title><rect x="99.8688%" y="277" width="0.0179%" height="15" fill="rgb(218,69,12)" fg:x="16752" fg:w="3"/><text x="100.1188%" y="287.50"></text></g><g><title>malloc (3 samples, 0.02%)</title><rect x="99.8688%" y="261" width="0.0179%" height="15" fill="rgb(212,87,7)" fg:x="16752" fg:w="3"/><text x="100.1188%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.05%)</title><rect x="99.8629%" y="437" width="0.0537%" height="15" fill="rgb(245,114,25)" fg:x="16751" fg:w="9"/><text x="100.1129%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.05%)</title><rect x="99.8629%" y="421" width="0.0537%" height="15" fill="rgb(210,61,42)" fg:x="16751" fg:w="9"/><text x="100.1129%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.05%)</title><rect x="99.8629%" y="405" width="0.0537%" height="15" fill="rgb(211,52,33)" fg:x="16751" fg:w="9"/><text x="100.1129%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.05%)</title><rect x="99.8629%" y="389" width="0.0537%" height="15" fill="rgb(234,58,33)" fg:x="16751" fg:w="9"/><text x="100.1129%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.05%)</title><rect x="99.8629%" y="373" width="0.0537%" height="15" fill="rgb(220,115,36)" fg:x="16751" fg:w="9"/><text x="100.1129%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (5 samples, 0.03%)</title><rect x="99.8867%" y="357" width="0.0298%" height="15" fill="rgb(243,153,54)" fg:x="16755" fg:w="5"/><text x="100.1367%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.03%)</title><rect x="99.8867%" y="341" width="0.0298%" height="15" fill="rgb(251,47,18)" fg:x="16755" fg:w="5"/><text x="100.1367%" y="351.50"></text></g><g><title>[libc.so.6] (5 samples, 0.03%)</title><rect x="99.8867%" y="325" width="0.0298%" height="15" fill="rgb(242,102,42)" fg:x="16755" fg:w="5"/><text x="100.1367%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.01%)</title><rect x="99.9225%" y="325" width="0.0119%" height="15" fill="rgb(234,31,38)" fg:x="16761" fg:w="2"/><text x="100.1725%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.9225%" y="309" width="0.0119%" height="15" fill="rgb(221,117,51)" fg:x="16761" fg:w="2"/><text x="100.1725%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.9225%" y="293" width="0.0119%" height="15" fill="rgb(212,20,18)" fg:x="16761" fg:w="2"/><text x="100.1725%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.9225%" y="277" width="0.0119%" height="15" fill="rgb(245,133,36)" fg:x="16761" fg:w="2"/><text x="100.1725%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.9225%" y="261" width="0.0119%" height="15" fill="rgb(212,6,19)" fg:x="16761" fg:w="2"/><text x="100.1725%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.9225%" y="245" width="0.0119%" height="15" fill="rgb(218,1,36)" fg:x="16761" fg:w="2"/><text x="100.1725%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.9225%" y="229" width="0.0119%" height="15" fill="rgb(246,84,54)" fg:x="16761" fg:w="2"/><text x="100.1725%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.9225%" y="213" width="0.0119%" height="15" fill="rgb(242,110,6)" fg:x="16761" fg:w="2"/><text x="100.1725%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.9225%" y="197" width="0.0119%" height="15" fill="rgb(214,47,5)" fg:x="16761" fg:w="2"/><text x="100.1725%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (5 samples, 0.03%)</title><rect x="99.9225%" y="405" width="0.0298%" height="15" fill="rgb(218,159,25)" fg:x="16761" fg:w="5"/><text x="100.1725%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (5 samples, 0.03%)</title><rect x="99.9225%" y="389" width="0.0298%" height="15" fill="rgb(215,211,28)" fg:x="16761" fg:w="5"/><text x="100.1725%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.03%)</title><rect x="99.9225%" y="373" width="0.0298%" height="15" fill="rgb(238,59,32)" fg:x="16761" fg:w="5"/><text x="100.1725%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (5 samples, 0.03%)</title><rect x="99.9225%" y="357" width="0.0298%" height="15" fill="rgb(226,82,3)" fg:x="16761" fg:w="5"/><text x="100.1725%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (5 samples, 0.03%)</title><rect x="99.9225%" y="341" width="0.0298%" height="15" fill="rgb(240,164,32)" fg:x="16761" fg:w="5"/><text x="100.1725%" y="351.50"></text></g><g><title>hashbrown::map::make_insert_hash (2 samples, 0.01%)</title><rect x="99.9523%" y="405" width="0.0119%" height="15" fill="rgb(232,46,7)" fg:x="16766" fg:w="2"/><text x="100.2023%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="99.9523%" y="389" width="0.0119%" height="15" fill="rgb(229,129,53)" fg:x="16766" fg:w="2"/><text x="100.2023%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.01%)</title><rect x="99.9523%" y="373" width="0.0119%" height="15" fill="rgb(234,188,29)" fg:x="16766" fg:w="2"/><text x="100.2023%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (3 samples, 0.02%)</title><rect x="99.9642%" y="373" width="0.0179%" height="15" fill="rgb(246,141,4)" fg:x="16768" fg:w="3"/><text x="100.2142%" y="383.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (2 samples, 0.01%)</title><rect x="99.9702%" y="357" width="0.0119%" height="15" fill="rgb(229,23,39)" fg:x="16769" fg:w="2"/><text x="100.2202%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="99.9702%" y="341" width="0.0119%" height="15" fill="rgb(206,12,3)" fg:x="16769" fg:w="2"/><text x="100.2202%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (2 samples, 0.01%)</title><rect x="99.9702%" y="325" width="0.0119%" height="15" fill="rgb(252,226,20)" fg:x="16769" fg:w="2"/><text x="100.2202%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.01%)</title><rect x="99.9702%" y="309" width="0.0119%" height="15" fill="rgb(216,123,35)" fg:x="16769" fg:w="2"/><text x="100.2202%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.01%)</title><rect x="99.9702%" y="293" width="0.0119%" height="15" fill="rgb(212,68,40)" fg:x="16769" fg:w="2"/><text x="100.2202%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.01%)</title><rect x="99.9702%" y="277" width="0.0119%" height="15" fill="rgb(254,125,32)" fg:x="16769" fg:w="2"/><text x="100.2202%" y="287.50"></text></g><g><title>std::panic::catch_unwind (16,747 samples, 99.84%)</title><rect x="0.1550%" y="581" width="99.8390%" height="15" fill="rgb(253,97,22)" fg:x="26" fg:w="16747"/><text x="0.4050%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (16,747 samples, 99.84%)</title><rect x="0.1550%" y="565" width="99.8390%" height="15" fill="rgb(241,101,14)" fg:x="26" fg:w="16747"/><text x="0.4050%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (16,747 samples, 99.84%)</title><rect x="0.1550%" y="549" width="99.8390%" height="15" fill="rgb(238,103,29)" fg:x="26" fg:w="16747"/><text x="0.4050%" y="559.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (16,747 samples, 99.84%)</title><rect x="0.1550%" y="533" width="99.8390%" height="15" fill="rgb(233,195,47)" fg:x="26" fg:w="16747"/><text x="0.4050%" y="543.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (16,747 samples, 99.84%)</title><rect x="0.1550%" y="517" width="99.8390%" height="15" fill="rgb(246,218,30)" fg:x="26" fg:w="16747"/><text x="0.4050%" y="527.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (16,747 samples, 99.84%)</title><rect x="0.1550%" y="501" width="99.8390%" height="15" fill="rgb(219,145,47)" fg:x="26" fg:w="16747"/><text x="0.4050%" y="511.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (16,747 samples, 99.84%)</title><rect x="0.1550%" y="485" width="99.8390%" height="15" fill="rgb(243,12,26)" fg:x="26" fg:w="16747"/><text x="0.4050%" y="495.50">core::ops::function::FnOnce::call_once</text></g><g><title>yt_history::main (16,747 samples, 99.84%)</title><rect x="0.1550%" y="469" width="99.8390%" height="15" fill="rgb(214,87,16)" fg:x="26" fg:w="16747"/><text x="0.4050%" y="479.50">yt_history::main</text></g><g><title>yt_history::model::Models::count_watched_by_video (22 samples, 0.13%)</title><rect x="99.8629%" y="453" width="0.1312%" height="15" fill="rgb(208,99,42)" fg:x="16751" fg:w="22"/><text x="100.1129%" y="463.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (13 samples, 0.08%)</title><rect x="99.9165%" y="437" width="0.0775%" height="15" fill="rgb(253,99,2)" fg:x="16760" fg:w="13"/><text x="100.1665%" y="447.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (12 samples, 0.07%)</title><rect x="99.9225%" y="421" width="0.0715%" height="15" fill="rgb(220,168,23)" fg:x="16761" fg:w="12"/><text x="100.1725%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5 samples, 0.03%)</title><rect x="99.9642%" y="405" width="0.0298%" height="15" fill="rgb(242,38,24)" fg:x="16768" fg:w="5"/><text x="100.2142%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (5 samples, 0.03%)</title><rect x="99.9642%" y="389" width="0.0298%" height="15" fill="rgb(225,182,9)" fg:x="16768" fg:w="5"/><text x="100.2142%" y="399.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.01%)</title><rect x="99.9821%" y="373" width="0.0119%" height="15" fill="rgb(243,178,37)" fg:x="16771" fg:w="2"/><text x="100.2321%" y="383.50"></text></g><g><title>all (16,774 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(232,139,19)" fg:x="0" fg:w="16774"/><text x="0.2500%" y="767.50"></text></g><g><title>yt-history (16,774 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(225,201,24)" fg:x="0" fg:w="16774"/><text x="0.2500%" y="751.50">yt-history</text></g><g><title>_start (16,748 samples, 99.84%)</title><rect x="0.1550%" y="725" width="99.8450%" height="15" fill="rgb(221,47,46)" fg:x="26" fg:w="16748"/><text x="0.4050%" y="735.50">_start</text></g><g><title>__libc_start_main (16,748 samples, 99.84%)</title><rect x="0.1550%" y="709" width="99.8450%" height="15" fill="rgb(249,23,13)" fg:x="26" fg:w="16748"/><text x="0.4050%" y="719.50">__libc_start_main</text></g><g><title>[libc.so.6] (16,748 samples, 99.84%)</title><rect x="0.1550%" y="693" width="99.8450%" height="15" fill="rgb(219,9,5)" fg:x="26" fg:w="16748"/><text x="0.4050%" y="703.50">[libc.so.6]</text></g><g><title>main (16,748 samples, 99.84%)</title><rect x="0.1550%" y="677" width="99.8450%" height="15" fill="rgb(254,171,16)" fg:x="26" fg:w="16748"/><text x="0.4050%" y="687.50">main</text></g><g><title>std::rt::lang_start_internal (16,748 samples, 99.84%)</title><rect x="0.1550%" y="661" width="99.8450%" height="15" fill="rgb(230,171,20)" fg:x="26" fg:w="16748"/><text x="0.4050%" y="671.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (16,748 samples, 99.84%)</title><rect x="0.1550%" y="645" width="99.8450%" height="15" fill="rgb(210,71,41)" fg:x="26" fg:w="16748"/><text x="0.4050%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (16,748 samples, 99.84%)</title><rect x="0.1550%" y="629" width="99.8450%" height="15" fill="rgb(206,173,20)" fg:x="26" fg:w="16748"/><text x="0.4050%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (16,748 samples, 99.84%)</title><rect x="0.1550%" y="613" width="99.8450%" height="15" fill="rgb(233,88,34)" fg:x="26" fg:w="16748"/><text x="0.4050%" y="623.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (16,748 samples, 99.84%)</title><rect x="0.1550%" y="597" width="99.8450%" height="15" fill="rgb(223,209,46)" fg:x="26" fg:w="16748"/><text x="0.4050%" y="607.50">std::rt::lang_start_internal::{{closure}}</text></g></svg></svg>