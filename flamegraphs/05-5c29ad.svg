<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="966" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="949.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="949.00"> </text><svg id="frames" x="10" width="1180" total_samples="3387"><g><title>[ld-linux-x86-64.so.2] (11 samples, 0.32%)</title><rect x="0.0886%" y="837" width="0.3248%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="11"/><text x="0.3386%" y="847.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.18%)</title><rect x="0.2362%" y="821" width="0.1771%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="6"/><text x="0.4862%" y="831.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4 samples, 0.12%)</title><rect x="0.2952%" y="805" width="0.1181%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="4"/><text x="0.5452%" y="815.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4 samples, 0.12%)</title><rect x="0.2952%" y="789" width="0.1181%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="4"/><text x="0.5452%" y="799.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.06%)</title><rect x="0.3543%" y="773" width="0.0590%" height="15" fill="rgb(208,68,35)" fg:x="12" fg:w="2"/><text x="0.6043%" y="783.50"></text></g><g><title>[ld-linux-x86-64.so.2] (15 samples, 0.44%)</title><rect x="0.0295%" y="853" width="0.4429%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="15"/><text x="0.2795%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="0.4133%" y="837" width="0.0590%" height="15" fill="rgb(207,160,47)" fg:x="14" fg:w="2"/><text x="0.6633%" y="847.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="0.4133%" y="821" width="0.0590%" height="15" fill="rgb(228,23,34)" fg:x="14" fg:w="2"/><text x="0.6633%" y="831.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="0.4133%" y="805" width="0.0590%" height="15" fill="rgb(218,30,26)" fg:x="14" fg:w="2"/><text x="0.6633%" y="815.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="0.4133%" y="789" width="0.0590%" height="15" fill="rgb(220,122,19)" fg:x="14" fg:w="2"/><text x="0.6633%" y="799.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="0.4133%" y="773" width="0.0590%" height="15" fill="rgb(250,228,42)" fg:x="14" fg:w="2"/><text x="0.6633%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4429%" y="757" width="0.0295%" height="15" fill="rgb(240,193,28)" fg:x="15" fg:w="1"/><text x="0.6929%" y="767.50"></text></g><g><title>[ld-linux-x86-64.so.2] (19 samples, 0.56%)</title><rect x="0.0000%" y="869" width="0.5610%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="19"/><text x="0.2500%" y="879.50"></text></g><g><title>[unknown] (3 samples, 0.09%)</title><rect x="0.4724%" y="853" width="0.0886%" height="15" fill="rgb(206,188,39)" fg:x="16" fg:w="3"/><text x="0.7224%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.5314%" y="837" width="0.0295%" height="15" fill="rgb(217,207,13)" fg:x="18" fg:w="1"/><text x="0.7814%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.5314%" y="821" width="0.0295%" height="15" fill="rgb(231,73,38)" fg:x="18" fg:w="1"/><text x="0.7814%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.5314%" y="805" width="0.0295%" height="15" fill="rgb(225,20,46)" fg:x="18" fg:w="1"/><text x="0.7814%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.5314%" y="789" width="0.0295%" height="15" fill="rgb(210,31,41)" fg:x="18" fg:w="1"/><text x="0.7814%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.5314%" y="773" width="0.0295%" height="15" fill="rgb(221,200,47)" fg:x="18" fg:w="1"/><text x="0.7814%" y="783.50"></text></g><g><title>[ld-linux-x86-64.so.2] (21 samples, 0.62%)</title><rect x="0.0000%" y="885" width="0.6200%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="21"/><text x="0.2500%" y="895.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="0.5610%" y="869" width="0.0590%" height="15" fill="rgb(249,33,26)" fg:x="19" fg:w="2"/><text x="0.8110%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.5905%" y="853" width="0.0295%" height="15" fill="rgb(235,183,28)" fg:x="20" fg:w="1"/><text x="0.8405%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.5905%" y="837" width="0.0295%" height="15" fill="rgb(221,5,38)" fg:x="20" fg:w="1"/><text x="0.8405%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.5905%" y="821" width="0.0295%" height="15" fill="rgb(247,18,42)" fg:x="20" fg:w="1"/><text x="0.8405%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.5905%" y="805" width="0.0295%" height="15" fill="rgb(241,131,45)" fg:x="20" fg:w="1"/><text x="0.8405%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.5905%" y="789" width="0.0295%" height="15" fill="rgb(249,31,29)" fg:x="20" fg:w="1"/><text x="0.8405%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.6495%" y="869" width="0.0295%" height="15" fill="rgb(225,111,53)" fg:x="22" fg:w="1"/><text x="0.8995%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.6495%" y="853" width="0.0295%" height="15" fill="rgb(238,160,17)" fg:x="22" fg:w="1"/><text x="0.8995%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.6495%" y="837" width="0.0295%" height="15" fill="rgb(214,148,48)" fg:x="22" fg:w="1"/><text x="0.8995%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.6495%" y="821" width="0.0295%" height="15" fill="rgb(232,36,49)" fg:x="22" fg:w="1"/><text x="0.8995%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.6495%" y="805" width="0.0295%" height="15" fill="rgb(209,103,24)" fg:x="22" fg:w="1"/><text x="0.8995%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.6495%" y="789" width="0.0295%" height="15" fill="rgb(229,88,8)" fg:x="22" fg:w="1"/><text x="0.8995%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.6495%" y="773" width="0.0295%" height="15" fill="rgb(213,181,19)" fg:x="22" fg:w="1"/><text x="0.8995%" y="783.50"></text></g><g><title>_fini (3 samples, 0.09%)</title><rect x="0.6791%" y="869" width="0.0886%" height="15" fill="rgb(254,191,54)" fg:x="23" fg:w="3"/><text x="0.9291%" y="879.50"></text></g><g><title>read (3 samples, 0.09%)</title><rect x="0.6791%" y="853" width="0.0886%" height="15" fill="rgb(241,83,37)" fg:x="23" fg:w="3"/><text x="0.9291%" y="863.50"></text></g><g><title>[unknown] (3 samples, 0.09%)</title><rect x="0.6791%" y="837" width="0.0886%" height="15" fill="rgb(233,36,39)" fg:x="23" fg:w="3"/><text x="0.9291%" y="847.50"></text></g><g><title>[unknown] (6 samples, 0.18%)</title><rect x="0.6200%" y="885" width="0.1771%" height="15" fill="rgb(226,3,54)" fg:x="21" fg:w="6"/><text x="0.8700%" y="895.50"></text></g><g><title>realloc (1 samples, 0.03%)</title><rect x="0.7676%" y="869" width="0.0295%" height="15" fill="rgb(245,192,40)" fg:x="26" fg:w="1"/><text x="1.0176%" y="879.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="0.7676%" y="853" width="0.0295%" height="15" fill="rgb(238,167,29)" fg:x="26" fg:w="1"/><text x="1.0176%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.7676%" y="837" width="0.0295%" height="15" fill="rgb(232,182,51)" fg:x="26" fg:w="1"/><text x="1.0176%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="0.7972%" y="501" width="0.0295%" height="15" fill="rgb(231,60,39)" fg:x="27" fg:w="1"/><text x="1.0472%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="0.7972%" y="485" width="0.0295%" height="15" fill="rgb(208,69,12)" fg:x="27" fg:w="1"/><text x="1.0472%" y="495.50"></text></g><g><title>cfree (1 samples, 0.03%)</title><rect x="0.7972%" y="469" width="0.0295%" height="15" fill="rgb(235,93,37)" fg:x="27" fg:w="1"/><text x="1.0472%" y="479.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="0.7972%" y="453" width="0.0295%" height="15" fill="rgb(213,116,39)" fg:x="27" fg:w="1"/><text x="1.0472%" y="463.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="0.8267%" y="389" width="0.0295%" height="15" fill="rgb(222,207,29)" fg:x="28" fg:w="1"/><text x="1.0767%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="0.8267%" y="373" width="0.0295%" height="15" fill="rgb(206,96,30)" fg:x="28" fg:w="1"/><text x="1.0767%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Video&gt;&gt; (5 samples, 0.15%)</title><rect x="0.7972%" y="533" width="0.1476%" height="15" fill="rgb(218,138,4)" fg:x="27" fg:w="5"/><text x="1.0472%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.15%)</title><rect x="0.7972%" y="517" width="0.1476%" height="15" fill="rgb(250,191,14)" fg:x="27" fg:w="5"/><text x="1.0472%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Video&gt; (4 samples, 0.12%)</title><rect x="0.8267%" y="501" width="0.1181%" height="15" fill="rgb(239,60,40)" fg:x="28" fg:w="4"/><text x="1.0767%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4 samples, 0.12%)</title><rect x="0.8267%" y="485" width="0.1181%" height="15" fill="rgb(206,27,48)" fg:x="28" fg:w="4"/><text x="1.0767%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.12%)</title><rect x="0.8267%" y="469" width="0.1181%" height="15" fill="rgb(225,35,8)" fg:x="28" fg:w="4"/><text x="1.0767%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.12%)</title><rect x="0.8267%" y="453" width="0.1181%" height="15" fill="rgb(250,213,24)" fg:x="28" fg:w="4"/><text x="1.0767%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.12%)</title><rect x="0.8267%" y="437" width="0.1181%" height="15" fill="rgb(247,123,22)" fg:x="28" fg:w="4"/><text x="1.0767%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.12%)</title><rect x="0.8267%" y="421" width="0.1181%" height="15" fill="rgb(231,138,38)" fg:x="28" fg:w="4"/><text x="1.0767%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.12%)</title><rect x="0.8267%" y="405" width="0.1181%" height="15" fill="rgb(231,145,46)" fg:x="28" fg:w="4"/><text x="1.0767%" y="415.50"></text></g><g><title>cfree (3 samples, 0.09%)</title><rect x="0.8562%" y="389" width="0.0886%" height="15" fill="rgb(251,118,11)" fg:x="29" fg:w="3"/><text x="1.1062%" y="399.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="0.9153%" y="373" width="0.0295%" height="15" fill="rgb(217,147,25)" fg:x="31" fg:w="1"/><text x="1.1653%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.21%)</title><rect x="0.7972%" y="613" width="0.2067%" height="15" fill="rgb(247,81,37)" fg:x="27" fg:w="7"/><text x="1.0472%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (7 samples, 0.21%)</title><rect x="0.7972%" y="597" width="0.2067%" height="15" fill="rgb(209,12,38)" fg:x="27" fg:w="7"/><text x="1.0472%" y="607.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (7 samples, 0.21%)</title><rect x="0.7972%" y="581" width="0.2067%" height="15" fill="rgb(227,1,9)" fg:x="27" fg:w="7"/><text x="1.0472%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (7 samples, 0.21%)</title><rect x="0.7972%" y="565" width="0.2067%" height="15" fill="rgb(248,47,43)" fg:x="27" fg:w="7"/><text x="1.0472%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::rc::Rc&lt;yt_history::model::Video&gt;)&gt; (7 samples, 0.21%)</title><rect x="0.7972%" y="549" width="0.2067%" height="15" fill="rgb(221,10,30)" fg:x="27" fg:w="7"/><text x="1.0472%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.06%)</title><rect x="0.9448%" y="533" width="0.0590%" height="15" fill="rgb(210,229,1)" fg:x="32" fg:w="2"/><text x="1.1948%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.06%)</title><rect x="0.9448%" y="517" width="0.0590%" height="15" fill="rgb(222,148,37)" fg:x="32" fg:w="2"/><text x="1.1948%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.06%)</title><rect x="0.9448%" y="501" width="0.0590%" height="15" fill="rgb(234,67,33)" fg:x="32" fg:w="2"/><text x="1.1948%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="0.9448%" y="485" width="0.0590%" height="15" fill="rgb(247,98,35)" fg:x="32" fg:w="2"/><text x="1.1948%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.06%)</title><rect x="0.9448%" y="469" width="0.0590%" height="15" fill="rgb(247,138,52)" fg:x="32" fg:w="2"/><text x="1.1948%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.06%)</title><rect x="0.9448%" y="453" width="0.0590%" height="15" fill="rgb(213,79,30)" fg:x="32" fg:w="2"/><text x="1.1948%" y="463.50"></text></g><g><title>cfree (2 samples, 0.06%)</title><rect x="0.9448%" y="437" width="0.0590%" height="15" fill="rgb(246,177,23)" fg:x="32" fg:w="2"/><text x="1.1948%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Models&gt; (1 samples, 0.03%)</title><rect x="1.0038%" y="613" width="0.0295%" height="15" fill="rgb(230,62,27)" fg:x="34" fg:w="1"/><text x="1.2538%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;yt_history::model::Watched&gt;&gt; (1 samples, 0.03%)</title><rect x="1.0038%" y="597" width="0.0295%" height="15" fill="rgb(216,154,8)" fg:x="34" fg:w="1"/><text x="1.2538%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="1.0038%" y="581" width="0.0295%" height="15" fill="rgb(244,35,45)" fg:x="34" fg:w="1"/><text x="1.2538%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[yt_history::model::Watched]&gt; (1 samples, 0.03%)</title><rect x="1.0038%" y="565" width="0.0295%" height="15" fill="rgb(251,115,12)" fg:x="34" fg:w="1"/><text x="1.2538%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Watched&gt; (1 samples, 0.03%)</title><rect x="1.0038%" y="549" width="0.0295%" height="15" fill="rgb(240,54,50)" fg:x="34" fg:w="1"/><text x="1.2538%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Video&gt;&gt; (1 samples, 0.03%)</title><rect x="1.0038%" y="533" width="0.0295%" height="15" fill="rgb(233,84,52)" fg:x="34" fg:w="1"/><text x="1.2538%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="1.0038%" y="517" width="0.0295%" height="15" fill="rgb(207,117,47)" fg:x="34" fg:w="1"/><text x="1.2538%" y="527.50"></text></g><g><title>__rdl_alloc (2 samples, 0.06%)</title><rect x="1.1810%" y="389" width="0.0590%" height="15" fill="rgb(249,43,39)" fg:x="40" fg:w="2"/><text x="1.4310%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="1.2105%" y="373" width="0.0295%" height="15" fill="rgb(209,38,44)" fg:x="41" fg:w="1"/><text x="1.4605%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.24%)</title><rect x="1.1810%" y="485" width="0.2362%" height="15" fill="rgb(236,212,23)" fg:x="40" fg:w="8"/><text x="1.4310%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.24%)</title><rect x="1.1810%" y="469" width="0.2362%" height="15" fill="rgb(242,79,21)" fg:x="40" fg:w="8"/><text x="1.4310%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.24%)</title><rect x="1.1810%" y="453" width="0.2362%" height="15" fill="rgb(211,96,35)" fg:x="40" fg:w="8"/><text x="1.4310%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.24%)</title><rect x="1.1810%" y="437" width="0.2362%" height="15" fill="rgb(253,215,40)" fg:x="40" fg:w="8"/><text x="1.4310%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.24%)</title><rect x="1.1810%" y="421" width="0.2362%" height="15" fill="rgb(211,81,21)" fg:x="40" fg:w="8"/><text x="1.4310%" y="431.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.24%)</title><rect x="1.1810%" y="405" width="0.2362%" height="15" fill="rgb(208,190,38)" fg:x="40" fg:w="8"/><text x="1.4310%" y="415.50"></text></g><g><title>malloc (6 samples, 0.18%)</title><rect x="1.2400%" y="389" width="0.1771%" height="15" fill="rgb(235,213,38)" fg:x="42" fg:w="6"/><text x="1.4900%" y="399.50"></text></g><g><title>[libc.so.6] (2 samples, 0.06%)</title><rect x="1.3581%" y="373" width="0.0590%" height="15" fill="rgb(237,122,38)" fg:x="46" fg:w="2"/><text x="1.6081%" y="383.50"></text></g><g><title>[libc.so.6] (2 samples, 0.06%)</title><rect x="1.3581%" y="357" width="0.0590%" height="15" fill="rgb(244,218,35)" fg:x="46" fg:w="2"/><text x="1.6081%" y="367.50"></text></g><g><title>&lt;yt_history::DataRow as core::clone::Clone&gt;::clone (11 samples, 0.32%)</title><rect x="1.1219%" y="581" width="0.3248%" height="15" fill="rgb(240,68,47)" fg:x="38" fg:w="11"/><text x="1.3719%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (10 samples, 0.30%)</title><rect x="1.1515%" y="565" width="0.2952%" height="15" fill="rgb(210,16,53)" fg:x="39" fg:w="10"/><text x="1.4015%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.27%)</title><rect x="1.1810%" y="549" width="0.2657%" height="15" fill="rgb(235,124,12)" fg:x="40" fg:w="9"/><text x="1.4310%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.27%)</title><rect x="1.1810%" y="533" width="0.2657%" height="15" fill="rgb(224,169,11)" fg:x="40" fg:w="9"/><text x="1.4310%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.27%)</title><rect x="1.1810%" y="517" width="0.2657%" height="15" fill="rgb(250,166,2)" fg:x="40" fg:w="9"/><text x="1.4310%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.27%)</title><rect x="1.1810%" y="501" width="0.2657%" height="15" fill="rgb(242,216,29)" fg:x="40" fg:w="9"/><text x="1.4310%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.03%)</title><rect x="1.4172%" y="485" width="0.0295%" height="15" fill="rgb(230,116,27)" fg:x="48" fg:w="1"/><text x="1.6672%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="1.4172%" y="469" width="0.0295%" height="15" fill="rgb(228,99,48)" fg:x="48" fg:w="1"/><text x="1.6672%" y="479.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="1.4172%" y="453" width="0.0295%" height="15" fill="rgb(253,11,6)" fg:x="48" fg:w="1"/><text x="1.6672%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.06%)</title><rect x="1.4467%" y="485" width="0.0590%" height="15" fill="rgb(247,143,39)" fg:x="49" fg:w="2"/><text x="1.6967%" y="495.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.03%)</title><rect x="1.5353%" y="405" width="0.0295%" height="15" fill="rgb(236,97,10)" fg:x="52" fg:w="1"/><text x="1.7853%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Debug&gt;::fmt (2 samples, 0.06%)</title><rect x="1.6239%" y="389" width="0.0590%" height="15" fill="rgb(233,208,19)" fg:x="55" fg:w="2"/><text x="1.8739%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="1.6534%" y="373" width="0.0295%" height="15" fill="rgb(216,164,2)" fg:x="56" fg:w="1"/><text x="1.9034%" y="383.50"></text></g><g><title>&lt;core::char::EscapeDefault as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.15%)</title><rect x="2.5686%" y="357" width="0.1476%" height="15" fill="rgb(220,129,5)" fg:x="87" fg:w="5"/><text x="2.8186%" y="367.50"></text></g><g><title>&lt;core::char::EscapeUnicode as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.12%)</title><rect x="2.5982%" y="341" width="0.1181%" height="15" fill="rgb(242,17,10)" fg:x="88" fg:w="4"/><text x="2.8482%" y="351.50"></text></g><g><title>&lt;core::char::EscapeDebug as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.18%)</title><rect x="2.5686%" y="373" width="0.1771%" height="15" fill="rgb(242,107,0)" fg:x="87" fg:w="6"/><text x="2.8186%" y="383.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (1 samples, 0.03%)</title><rect x="2.7163%" y="357" width="0.0295%" height="15" fill="rgb(251,28,31)" fg:x="92" fg:w="1"/><text x="2.9663%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.06%)</title><rect x="3.3363%" y="229" width="0.0590%" height="15" fill="rgb(233,223,10)" fg:x="113" fg:w="2"/><text x="3.5863%" y="239.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (15 samples, 0.44%)</title><rect x="3.1296%" y="325" width="0.4429%" height="15" fill="rgb(215,21,27)" fg:x="106" fg:w="15"/><text x="3.3796%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (9 samples, 0.27%)</title><rect x="3.3068%" y="309" width="0.2657%" height="15" fill="rgb(232,23,21)" fg:x="112" fg:w="9"/><text x="3.5568%" y="319.50"></text></g><g><title>alloc::string::String::push_str (9 samples, 0.27%)</title><rect x="3.3068%" y="293" width="0.2657%" height="15" fill="rgb(244,5,23)" fg:x="112" fg:w="9"/><text x="3.5568%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (9 samples, 0.27%)</title><rect x="3.3068%" y="277" width="0.2657%" height="15" fill="rgb(226,81,46)" fg:x="112" fg:w="9"/><text x="3.5568%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.27%)</title><rect x="3.3068%" y="261" width="0.2657%" height="15" fill="rgb(247,70,30)" fg:x="112" fg:w="9"/><text x="3.5568%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (9 samples, 0.27%)</title><rect x="3.3068%" y="245" width="0.2657%" height="15" fill="rgb(212,68,19)" fg:x="112" fg:w="9"/><text x="3.5568%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.18%)</title><rect x="3.3953%" y="229" width="0.1771%" height="15" fill="rgb(240,187,13)" fg:x="115" fg:w="6"/><text x="3.6453%" y="239.50"></text></g><g><title>[libc.so.6] (6 samples, 0.18%)</title><rect x="3.3953%" y="213" width="0.1771%" height="15" fill="rgb(223,113,26)" fg:x="115" fg:w="6"/><text x="3.6453%" y="223.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="3.5725%" y="309" width="0.0295%" height="15" fill="rgb(206,192,2)" fg:x="121" fg:w="1"/><text x="3.8225%" y="319.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.09%)</title><rect x="3.5725%" y="325" width="0.0886%" height="15" fill="rgb(241,108,4)" fg:x="121" fg:w="3"/><text x="3.8225%" y="335.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (2 samples, 0.06%)</title><rect x="3.6020%" y="309" width="0.0590%" height="15" fill="rgb(247,173,49)" fg:x="122" fg:w="2"/><text x="3.8520%" y="319.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.03%)</title><rect x="3.6315%" y="293" width="0.0295%" height="15" fill="rgb(224,114,35)" fg:x="123" fg:w="1"/><text x="3.8815%" y="303.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.03%)</title><rect x="3.6315%" y="277" width="0.0295%" height="15" fill="rgb(245,159,27)" fg:x="123" fg:w="1"/><text x="3.8815%" y="287.50"></text></g><g><title>core::slice::memchr::memchr_naive (1 samples, 0.03%)</title><rect x="3.6315%" y="261" width="0.0295%" height="15" fill="rgb(245,172,44)" fg:x="123" fg:w="1"/><text x="3.8815%" y="271.50"></text></g><g><title>&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (32 samples, 0.94%)</title><rect x="2.7458%" y="373" width="0.9448%" height="15" fill="rgb(236,23,11)" fg:x="93" fg:w="32"/><text x="2.9958%" y="383.50"></text></g><g><title>core::fmt::Write::write_char (29 samples, 0.86%)</title><rect x="2.8344%" y="357" width="0.8562%" height="15" fill="rgb(205,117,38)" fg:x="96" fg:w="29"/><text x="3.0844%" y="367.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (26 samples, 0.77%)</title><rect x="2.9229%" y="341" width="0.7676%" height="15" fill="rgb(237,72,25)" fg:x="99" fg:w="26"/><text x="3.1729%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::ends_with (1 samples, 0.03%)</title><rect x="3.6611%" y="325" width="0.0295%" height="15" fill="rgb(244,70,9)" fg:x="124" fg:w="1"/><text x="3.9111%" y="335.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_suffix_of (1 samples, 0.03%)</title><rect x="3.6611%" y="309" width="0.0295%" height="15" fill="rgb(217,125,39)" fg:x="124" fg:w="1"/><text x="3.9111%" y="319.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (1 samples, 0.03%)</title><rect x="3.6611%" y="293" width="0.0295%" height="15" fill="rgb(235,36,10)" fg:x="124" fg:w="1"/><text x="3.9111%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (1 samples, 0.03%)</title><rect x="3.6611%" y="277" width="0.0295%" height="15" fill="rgb(251,123,47)" fg:x="124" fg:w="1"/><text x="3.9111%" y="287.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (1 samples, 0.03%)</title><rect x="3.6906%" y="341" width="0.0295%" height="15" fill="rgb(221,13,13)" fg:x="125" fg:w="1"/><text x="3.9406%" y="351.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.27%)</title><rect x="3.6906%" y="373" width="0.2657%" height="15" fill="rgb(238,131,9)" fg:x="125" fg:w="9"/><text x="3.9406%" y="383.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.27%)</title><rect x="3.6906%" y="357" width="0.2657%" height="15" fill="rgb(211,50,8)" fg:x="125" fg:w="9"/><text x="3.9406%" y="367.50"></text></g><g><title>core::str::validations::next_code_point (8 samples, 0.24%)</title><rect x="3.7201%" y="341" width="0.2362%" height="15" fill="rgb(245,182,24)" fg:x="126" fg:w="8"/><text x="3.9701%" y="351.50"></text></g><g><title>core::str::validations::utf8_first_byte (3 samples, 0.09%)</title><rect x="3.8677%" y="325" width="0.0886%" height="15" fill="rgb(242,14,37)" fg:x="131" fg:w="3"/><text x="4.1177%" y="335.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (2 samples, 0.06%)</title><rect x="3.9563%" y="373" width="0.0590%" height="15" fill="rgb(246,228,12)" fg:x="134" fg:w="2"/><text x="4.2063%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (7 samples, 0.21%)</title><rect x="5.5211%" y="309" width="0.2067%" height="15" fill="rgb(213,55,15)" fg:x="187" fg:w="7"/><text x="5.7711%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (7 samples, 0.21%)</title><rect x="5.5211%" y="293" width="0.2067%" height="15" fill="rgb(209,9,3)" fg:x="187" fg:w="7"/><text x="5.7711%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (7 samples, 0.21%)</title><rect x="5.5211%" y="277" width="0.2067%" height="15" fill="rgb(230,59,30)" fg:x="187" fg:w="7"/><text x="5.7711%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (111 samples, 3.28%)</title><rect x="9.1231%" y="261" width="3.2772%" height="15" fill="rgb(209,121,21)" fg:x="309" fg:w="111"/><text x="9.3731%" y="271.50">cor..</text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key (242 samples, 7.14%)</title><rect x="5.7278%" y="309" width="7.1450%" height="15" fill="rgb(220,109,13)" fg:x="194" fg:w="242"/><text x="5.9778%" y="319.50">core::slic..</text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (242 samples, 7.14%)</title><rect x="5.7278%" y="293" width="7.1450%" height="15" fill="rgb(232,18,1)" fg:x="194" fg:w="242"/><text x="5.9778%" y="303.50">core::slic..</text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key::{{closure}} (127 samples, 3.75%)</title><rect x="9.1231%" y="277" width="3.7496%" height="15" fill="rgb(215,41,42)" fg:x="309" fg:w="127"/><text x="9.3731%" y="287.50">core..</text></g><g><title>core::unicode::unicode_data::skip_search::{{closure}} (16 samples, 0.47%)</title><rect x="12.4004%" y="261" width="0.4724%" height="15" fill="rgb(224,123,36)" fg:x="420" fg:w="16"/><text x="12.6504%" y="271.50"></text></g><g><title>&lt;&amp;u32 as core::ops::bit::Shl&lt;i32&gt;&gt;::shl (16 samples, 0.47%)</title><rect x="12.4004%" y="245" width="0.4724%" height="15" fill="rgb(240,125,3)" fg:x="420" fg:w="16"/><text x="12.6504%" y="255.50"></text></g><g><title>&lt;u32 as core::ops::bit::Shl&lt;i32&gt;&gt;::shl (16 samples, 0.47%)</title><rect x="12.4004%" y="229" width="0.4724%" height="15" fill="rgb(205,98,50)" fg:x="420" fg:w="16"/><text x="12.6504%" y="239.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_grapheme_extended (297 samples, 8.77%)</title><rect x="4.4287%" y="357" width="8.7688%" height="15" fill="rgb(205,185,37)" fg:x="150" fg:w="297"/><text x="4.6787%" y="367.50">core::char::..</text></g><g><title>core::unicode::unicode_data::grapheme_extend::lookup (294 samples, 8.68%)</title><rect x="4.5173%" y="341" width="8.6802%" height="15" fill="rgb(238,207,15)" fg:x="153" fg:w="294"/><text x="4.7673%" y="351.50">core::unicod..</text></g><g><title>core::unicode::unicode_data::skip_search (270 samples, 7.97%)</title><rect x="5.2259%" y="325" width="7.9717%" height="15" fill="rgb(213,199,42)" fg:x="177" fg:w="270"/><text x="5.4759%" y="335.50">core::unico..</text></g><g><title>core::unicode::unicode_data::decode_length (11 samples, 0.32%)</title><rect x="12.8727%" y="309" width="0.3248%" height="15" fill="rgb(235,201,11)" fg:x="436" fg:w="11"/><text x="13.1227%" y="319.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (380 samples, 11.22%)</title><rect x="4.0154%" y="373" width="11.2194%" height="15" fill="rgb(207,46,11)" fg:x="136" fg:w="380"/><text x="4.2654%" y="383.50">core::char::metho..</text></g><g><title>core::unicode::printable::is_printable (69 samples, 2.04%)</title><rect x="13.1975%" y="357" width="2.0372%" height="15" fill="rgb(241,35,35)" fg:x="447" fg:w="69"/><text x="13.4475%" y="367.50">c..</text></g><g><title>core::unicode::printable::check (8 samples, 0.24%)</title><rect x="14.9985%" y="341" width="0.2362%" height="15" fill="rgb(243,32,47)" fg:x="508" fg:w="8"/><text x="15.2485%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="15.1757%" y="325" width="0.0590%" height="15" fill="rgb(247,202,23)" fg:x="514" fg:w="2"/><text x="15.4257%" y="335.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.03%)</title><rect x="15.2052%" y="309" width="0.0295%" height="15" fill="rgb(219,102,11)" fg:x="515" fg:w="1"/><text x="15.4552%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="15.2052%" y="293" width="0.0295%" height="15" fill="rgb(243,110,44)" fg:x="515" fg:w="1"/><text x="15.4552%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="15.2052%" y="277" width="0.0295%" height="15" fill="rgb(222,74,54)" fg:x="515" fg:w="1"/><text x="15.4552%" y="287.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::len_utf8 (1 samples, 0.03%)</title><rect x="15.2347%" y="373" width="0.0295%" height="15" fill="rgb(216,99,12)" fg:x="516" fg:w="1"/><text x="15.4847%" y="383.50"></text></g><g><title>core::char::methods::len_utf8 (1 samples, 0.03%)</title><rect x="15.2347%" y="357" width="0.0295%" height="15" fill="rgb(226,22,26)" fg:x="516" fg:w="1"/><text x="15.4847%" y="367.50"></text></g><g><title>__rdl_realloc (1 samples, 0.03%)</title><rect x="15.6185%" y="117" width="0.0295%" height="15" fill="rgb(217,163,10)" fg:x="529" fg:w="1"/><text x="15.8685%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.03%)</title><rect x="15.6185%" y="101" width="0.0295%" height="15" fill="rgb(213,25,53)" fg:x="529" fg:w="1"/><text x="15.8685%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (7 samples, 0.21%)</title><rect x="15.5300%" y="245" width="0.2067%" height="15" fill="rgb(252,105,26)" fg:x="526" fg:w="7"/><text x="15.7800%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.15%)</title><rect x="15.5890%" y="229" width="0.1476%" height="15" fill="rgb(220,39,43)" fg:x="528" fg:w="5"/><text x="15.8390%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.15%)</title><rect x="15.5890%" y="213" width="0.1476%" height="15" fill="rgb(229,68,48)" fg:x="528" fg:w="5"/><text x="15.8390%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.15%)</title><rect x="15.5890%" y="197" width="0.1476%" height="15" fill="rgb(252,8,32)" fg:x="528" fg:w="5"/><text x="15.8390%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.15%)</title><rect x="15.5890%" y="181" width="0.1476%" height="15" fill="rgb(223,20,43)" fg:x="528" fg:w="5"/><text x="15.8390%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4 samples, 0.12%)</title><rect x="15.6185%" y="165" width="0.1181%" height="15" fill="rgb(229,81,49)" fg:x="529" fg:w="4"/><text x="15.8685%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4 samples, 0.12%)</title><rect x="15.6185%" y="149" width="0.1181%" height="15" fill="rgb(236,28,36)" fg:x="529" fg:w="4"/><text x="15.8685%" y="159.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.12%)</title><rect x="15.6185%" y="133" width="0.1181%" height="15" fill="rgb(249,185,26)" fg:x="529" fg:w="4"/><text x="15.8685%" y="143.50"></text></g><g><title>realloc (3 samples, 0.09%)</title><rect x="15.6481%" y="117" width="0.0886%" height="15" fill="rgb(249,174,33)" fg:x="530" fg:w="3"/><text x="15.8981%" y="127.50"></text></g><g><title>[libc.so.6] (3 samples, 0.09%)</title><rect x="15.6481%" y="101" width="0.0886%" height="15" fill="rgb(233,201,37)" fg:x="530" fg:w="3"/><text x="15.8981%" y="111.50"></text></g><g><title>[libc.so.6] (3 samples, 0.09%)</title><rect x="15.6481%" y="85" width="0.0886%" height="15" fill="rgb(221,78,26)" fg:x="530" fg:w="3"/><text x="15.8981%" y="95.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="15.7071%" y="69" width="0.0295%" height="15" fill="rgb(250,127,30)" fg:x="532" fg:w="1"/><text x="15.9571%" y="79.50"></text></g><g><title>__default_morecore (1 samples, 0.03%)</title><rect x="15.7071%" y="53" width="0.0295%" height="15" fill="rgb(230,49,44)" fg:x="532" fg:w="1"/><text x="15.9571%" y="63.50"></text></g><g><title>__sbrk (1 samples, 0.03%)</title><rect x="15.7071%" y="37" width="0.0295%" height="15" fill="rgb(229,67,23)" fg:x="532" fg:w="1"/><text x="15.9571%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (13 samples, 0.38%)</title><rect x="15.3823%" y="341" width="0.3838%" height="15" fill="rgb(249,83,47)" fg:x="521" fg:w="13"/><text x="15.6323%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (9 samples, 0.27%)</title><rect x="15.5004%" y="325" width="0.2657%" height="15" fill="rgb(215,43,3)" fg:x="525" fg:w="9"/><text x="15.7504%" y="335.50"></text></g><g><title>alloc::string::String::push_str (9 samples, 0.27%)</title><rect x="15.5004%" y="309" width="0.2657%" height="15" fill="rgb(238,154,13)" fg:x="525" fg:w="9"/><text x="15.7504%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (9 samples, 0.27%)</title><rect x="15.5004%" y="293" width="0.2657%" height="15" fill="rgb(219,56,2)" fg:x="525" fg:w="9"/><text x="15.7504%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.27%)</title><rect x="15.5004%" y="277" width="0.2657%" height="15" fill="rgb(233,0,4)" fg:x="525" fg:w="9"/><text x="15.7504%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (9 samples, 0.27%)</title><rect x="15.5004%" y="261" width="0.2657%" height="15" fill="rgb(235,30,7)" fg:x="525" fg:w="9"/><text x="15.7504%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="15.7366%" y="245" width="0.0295%" height="15" fill="rgb(250,79,13)" fg:x="533" fg:w="1"/><text x="15.9866%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="15.7366%" y="229" width="0.0295%" height="15" fill="rgb(211,146,34)" fg:x="533" fg:w="1"/><text x="15.9866%" y="239.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="15.7662%" y="325" width="0.0295%" height="15" fill="rgb(228,22,38)" fg:x="534" fg:w="1"/><text x="16.0162%" y="335.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (1 samples, 0.03%)</title><rect x="16.0024%" y="261" width="0.0295%" height="15" fill="rgb(235,168,5)" fg:x="542" fg:w="1"/><text x="16.2524%" y="271.50"></text></g><g><title>core::slice::memchr::memchr_aligned (6 samples, 0.18%)</title><rect x="15.9138%" y="277" width="0.1771%" height="15" fill="rgb(221,155,16)" fg:x="539" fg:w="6"/><text x="16.1638%" y="287.50"></text></g><g><title>core::slice::memchr::memchr_naive (2 samples, 0.06%)</title><rect x="16.0319%" y="261" width="0.0590%" height="15" fill="rgb(215,215,53)" fg:x="543" fg:w="2"/><text x="16.2819%" y="271.50"></text></g><g><title>core::fmt::Formatter::write_str (31 samples, 0.92%)</title><rect x="15.2642%" y="373" width="0.9153%" height="15" fill="rgb(223,4,10)" fg:x="517" fg:w="31"/><text x="15.5142%" y="383.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (30 samples, 0.89%)</title><rect x="15.2938%" y="357" width="0.8857%" height="15" fill="rgb(234,103,6)" fg:x="518" fg:w="30"/><text x="15.5438%" y="367.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.41%)</title><rect x="15.7662%" y="341" width="0.4133%" height="15" fill="rgb(227,97,0)" fg:x="534" fg:w="14"/><text x="16.0162%" y="351.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (13 samples, 0.38%)</title><rect x="15.7957%" y="325" width="0.3838%" height="15" fill="rgb(234,150,53)" fg:x="535" fg:w="13"/><text x="16.0457%" y="335.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (11 samples, 0.32%)</title><rect x="15.8547%" y="309" width="0.3248%" height="15" fill="rgb(228,201,54)" fg:x="537" fg:w="11"/><text x="16.1047%" y="319.50"></text></g><g><title>core::slice::memchr::memchr (10 samples, 0.30%)</title><rect x="15.8843%" y="293" width="0.2952%" height="15" fill="rgb(222,22,37)" fg:x="538" fg:w="10"/><text x="16.1343%" y="303.50"></text></g><g><title>core::slice::memchr::memchr_naive (3 samples, 0.09%)</title><rect x="16.0909%" y="277" width="0.0886%" height="15" fill="rgb(237,53,32)" fg:x="545" fg:w="3"/><text x="16.3409%" y="287.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::index (1 samples, 0.03%)</title><rect x="16.1795%" y="357" width="0.0295%" height="15" fill="rgb(233,25,53)" fg:x="548" fg:w="1"/><text x="16.4295%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.03%)</title><rect x="16.1795%" y="341" width="0.0295%" height="15" fill="rgb(210,40,34)" fg:x="548" fg:w="1"/><text x="16.4295%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (1 samples, 0.03%)</title><rect x="16.1795%" y="325" width="0.0295%" height="15" fill="rgb(241,220,44)" fg:x="548" fg:w="1"/><text x="16.4295%" y="335.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_utf8_char_boundary (1 samples, 0.03%)</title><rect x="16.1795%" y="309" width="0.0295%" height="15" fill="rgb(235,28,35)" fg:x="548" fg:w="1"/><text x="16.4295%" y="319.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (1 samples, 0.03%)</title><rect x="16.2090%" y="341" width="0.0295%" height="15" fill="rgb(210,56,17)" fg:x="549" fg:w="1"/><text x="16.4590%" y="351.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (496 samples, 14.64%)</title><rect x="1.6829%" y="389" width="14.6442%" height="15" fill="rgb(224,130,29)" fg:x="57" fg:w="496"/><text x="1.9329%" y="399.50">&lt;str as core::fmt::Deb..</text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (5 samples, 0.15%)</title><rect x="16.1795%" y="373" width="0.1476%" height="15" fill="rgb(235,212,8)" fg:x="548" fg:w="5"/><text x="16.4295%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (4 samples, 0.12%)</title><rect x="16.2090%" y="357" width="0.1181%" height="15" fill="rgb(223,33,50)" fg:x="549" fg:w="4"/><text x="16.4590%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (3 samples, 0.09%)</title><rect x="16.2386%" y="341" width="0.0886%" height="15" fill="rgb(219,149,13)" fg:x="550" fg:w="3"/><text x="16.4886%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (3 samples, 0.09%)</title><rect x="16.2386%" y="325" width="0.0886%" height="15" fill="rgb(250,156,29)" fg:x="550" fg:w="3"/><text x="16.4886%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="16.3271%" y="373" width="0.0295%" height="15" fill="rgb(216,193,19)" fg:x="553" fg:w="1"/><text x="16.5771%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="16.3271%" y="357" width="0.0295%" height="15" fill="rgb(216,135,14)" fg:x="553" fg:w="1"/><text x="16.5771%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.03%)</title><rect x="16.3271%" y="341" width="0.0295%" height="15" fill="rgb(241,47,5)" fg:x="553" fg:w="1"/><text x="16.5771%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="16.3271%" y="325" width="0.0295%" height="15" fill="rgb(233,42,35)" fg:x="553" fg:w="1"/><text x="16.5771%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="16.3271%" y="309" width="0.0295%" height="15" fill="rgb(231,13,6)" fg:x="553" fg:w="1"/><text x="16.5771%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="16.3271%" y="293" width="0.0295%" height="15" fill="rgb(207,181,40)" fg:x="553" fg:w="1"/><text x="16.5771%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="16.3271%" y="277" width="0.0295%" height="15" fill="rgb(254,173,49)" fg:x="553" fg:w="1"/><text x="16.5771%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="16.3271%" y="261" width="0.0295%" height="15" fill="rgb(221,1,38)" fg:x="553" fg:w="1"/><text x="16.5771%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.03%)</title><rect x="16.9176%" y="261" width="0.0295%" height="15" fill="rgb(206,124,46)" fg:x="573" fg:w="1"/><text x="17.1676%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.03%)</title><rect x="16.9767%" y="229" width="0.0295%" height="15" fill="rgb(249,21,11)" fg:x="575" fg:w="1"/><text x="17.2267%" y="239.50"></text></g><g><title>__rdl_realloc (1 samples, 0.03%)</title><rect x="17.0652%" y="133" width="0.0295%" height="15" fill="rgb(222,201,40)" fg:x="578" fg:w="1"/><text x="17.3152%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.03%)</title><rect x="17.0652%" y="117" width="0.0295%" height="15" fill="rgb(235,61,29)" fg:x="578" fg:w="1"/><text x="17.3152%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.18%)</title><rect x="17.0652%" y="197" width="0.1771%" height="15" fill="rgb(219,207,3)" fg:x="578" fg:w="6"/><text x="17.3152%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (6 samples, 0.18%)</title><rect x="17.0652%" y="181" width="0.1771%" height="15" fill="rgb(222,56,46)" fg:x="578" fg:w="6"/><text x="17.3152%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (6 samples, 0.18%)</title><rect x="17.0652%" y="165" width="0.1771%" height="15" fill="rgb(239,76,54)" fg:x="578" fg:w="6"/><text x="17.3152%" y="175.50"></text></g><g><title>alloc::alloc::realloc (6 samples, 0.18%)</title><rect x="17.0652%" y="149" width="0.1771%" height="15" fill="rgb(231,124,27)" fg:x="578" fg:w="6"/><text x="17.3152%" y="159.50"></text></g><g><title>realloc (5 samples, 0.15%)</title><rect x="17.0948%" y="133" width="0.1476%" height="15" fill="rgb(249,195,6)" fg:x="579" fg:w="5"/><text x="17.3448%" y="143.50"></text></g><g><title>[libc.so.6] (5 samples, 0.15%)</title><rect x="17.0948%" y="117" width="0.1476%" height="15" fill="rgb(237,174,47)" fg:x="579" fg:w="5"/><text x="17.3448%" y="127.50"></text></g><g><title>[libc.so.6] (4 samples, 0.12%)</title><rect x="17.1243%" y="101" width="0.1181%" height="15" fill="rgb(206,201,31)" fg:x="580" fg:w="4"/><text x="17.3743%" y="111.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="17.2129%" y="85" width="0.0295%" height="15" fill="rgb(231,57,52)" fg:x="583" fg:w="1"/><text x="17.4629%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (11 samples, 0.32%)</title><rect x="16.9472%" y="261" width="0.3248%" height="15" fill="rgb(248,177,22)" fg:x="574" fg:w="11"/><text x="17.1972%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.30%)</title><rect x="16.9767%" y="245" width="0.2952%" height="15" fill="rgb(215,211,37)" fg:x="575" fg:w="10"/><text x="17.2267%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.27%)</title><rect x="17.0062%" y="229" width="0.2657%" height="15" fill="rgb(241,128,51)" fg:x="576" fg:w="9"/><text x="17.2562%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.27%)</title><rect x="17.0062%" y="213" width="0.2657%" height="15" fill="rgb(227,165,31)" fg:x="576" fg:w="9"/><text x="17.2562%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.03%)</title><rect x="17.2424%" y="197" width="0.0295%" height="15" fill="rgb(228,167,24)" fg:x="584" fg:w="1"/><text x="17.4924%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.03%)</title><rect x="17.2424%" y="181" width="0.0295%" height="15" fill="rgb(228,143,12)" fg:x="584" fg:w="1"/><text x="17.4924%" y="191.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (25 samples, 0.74%)</title><rect x="16.7995%" y="357" width="0.7381%" height="15" fill="rgb(249,149,8)" fg:x="569" fg:w="25"/><text x="17.0495%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (21 samples, 0.62%)</title><rect x="16.9176%" y="341" width="0.6200%" height="15" fill="rgb(243,35,44)" fg:x="573" fg:w="21"/><text x="17.1676%" y="351.50"></text></g><g><title>alloc::string::String::push_str (21 samples, 0.62%)</title><rect x="16.9176%" y="325" width="0.6200%" height="15" fill="rgb(246,89,9)" fg:x="573" fg:w="21"/><text x="17.1676%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (21 samples, 0.62%)</title><rect x="16.9176%" y="309" width="0.6200%" height="15" fill="rgb(233,213,13)" fg:x="573" fg:w="21"/><text x="17.1676%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (21 samples, 0.62%)</title><rect x="16.9176%" y="293" width="0.6200%" height="15" fill="rgb(233,141,41)" fg:x="573" fg:w="21"/><text x="17.1676%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (21 samples, 0.62%)</title><rect x="16.9176%" y="277" width="0.6200%" height="15" fill="rgb(239,167,4)" fg:x="573" fg:w="21"/><text x="17.1676%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.27%)</title><rect x="17.2719%" y="261" width="0.2657%" height="15" fill="rgb(209,217,16)" fg:x="585" fg:w="9"/><text x="17.5219%" y="271.50"></text></g><g><title>[libc.so.6] (9 samples, 0.27%)</title><rect x="17.2719%" y="245" width="0.2657%" height="15" fill="rgb(219,88,35)" fg:x="585" fg:w="9"/><text x="17.5219%" y="255.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (2 samples, 0.06%)</title><rect x="17.5376%" y="341" width="0.0590%" height="15" fill="rgb(220,193,23)" fg:x="594" fg:w="2"/><text x="17.7876%" y="351.50"></text></g><g><title>core::fmt::Formatter::write_str (50 samples, 1.48%)</title><rect x="16.3271%" y="389" width="1.4762%" height="15" fill="rgb(230,90,52)" fg:x="553" fg:w="50"/><text x="16.5771%" y="399.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (49 samples, 1.45%)</title><rect x="16.3567%" y="373" width="1.4467%" height="15" fill="rgb(252,106,19)" fg:x="554" fg:w="49"/><text x="16.6067%" y="383.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.27%)</title><rect x="17.5376%" y="357" width="0.2657%" height="15" fill="rgb(206,74,20)" fg:x="594" fg:w="9"/><text x="17.7876%" y="367.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (7 samples, 0.21%)</title><rect x="17.5967%" y="341" width="0.2067%" height="15" fill="rgb(230,138,44)" fg:x="596" fg:w="7"/><text x="17.8467%" y="351.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4 samples, 0.12%)</title><rect x="17.6853%" y="325" width="0.1181%" height="15" fill="rgb(235,182,43)" fg:x="599" fg:w="4"/><text x="17.9353%" y="335.50"></text></g><g><title>core::slice::memchr::memchr (4 samples, 0.12%)</title><rect x="17.6853%" y="309" width="0.1181%" height="15" fill="rgb(242,16,51)" fg:x="599" fg:w="4"/><text x="17.9353%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_naive (4 samples, 0.12%)</title><rect x="17.6853%" y="293" width="0.1181%" height="15" fill="rgb(248,9,4)" fg:x="599" fg:w="4"/><text x="17.9353%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.09%)</title><rect x="17.9215%" y="357" width="0.0886%" height="15" fill="rgb(210,31,22)" fg:x="607" fg:w="3"/><text x="18.1715%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.06%)</title><rect x="17.9510%" y="341" width="0.0590%" height="15" fill="rgb(239,54,39)" fg:x="608" fg:w="2"/><text x="18.2010%" y="351.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.06%)</title><rect x="17.9510%" y="325" width="0.0590%" height="15" fill="rgb(230,99,41)" fg:x="608" fg:w="2"/><text x="18.2010%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.06%)</title><rect x="17.9510%" y="309" width="0.0590%" height="15" fill="rgb(253,106,12)" fg:x="608" fg:w="2"/><text x="18.2010%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.06%)</title><rect x="17.9510%" y="293" width="0.0590%" height="15" fill="rgb(213,46,41)" fg:x="608" fg:w="2"/><text x="18.2010%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.06%)</title><rect x="17.9510%" y="277" width="0.0590%" height="15" fill="rgb(215,133,35)" fg:x="608" fg:w="2"/><text x="18.2010%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="17.9805%" y="261" width="0.0295%" height="15" fill="rgb(213,28,5)" fg:x="609" fg:w="1"/><text x="18.2305%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="17.9805%" y="245" width="0.0295%" height="15" fill="rgb(215,77,49)" fg:x="609" fg:w="1"/><text x="18.2305%" y="255.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="18.0100%" y="341" width="0.0295%" height="15" fill="rgb(248,100,22)" fg:x="610" fg:w="1"/><text x="18.2600%" y="351.50"></text></g><g><title>core::fmt::Write::write_char (9 samples, 0.27%)</title><rect x="17.8034%" y="389" width="0.2657%" height="15" fill="rgb(208,67,9)" fg:x="603" fg:w="9"/><text x="18.0534%" y="399.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (6 samples, 0.18%)</title><rect x="17.8919%" y="373" width="0.1771%" height="15" fill="rgb(219,133,21)" fg:x="606" fg:w="6"/><text x="18.1419%" y="383.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="18.0100%" y="357" width="0.0590%" height="15" fill="rgb(246,46,29)" fg:x="610" fg:w="2"/><text x="18.2600%" y="367.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (1 samples, 0.03%)</title><rect x="18.0396%" y="341" width="0.0295%" height="15" fill="rgb(246,185,52)" fg:x="611" fg:w="1"/><text x="18.2896%" y="351.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (562 samples, 16.59%)</title><rect x="1.5058%" y="437" width="16.5929%" height="15" fill="rgb(252,136,11)" fg:x="51" fg:w="562"/><text x="1.7558%" y="447.50">core::fmt::builders::Debug..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (561 samples, 16.56%)</title><rect x="1.5353%" y="421" width="16.5633%" height="15" fill="rgb(219,138,53)" fg:x="52" fg:w="561"/><text x="1.7853%" y="431.50">core::result::Result&lt;T,E&gt;:..</text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (560 samples, 16.53%)</title><rect x="1.5648%" y="405" width="16.5338%" height="15" fill="rgb(211,51,23)" fg:x="53" fg:w="560"/><text x="1.8148%" y="415.50">core::fmt::builders::Debug..</text></g><g><title>core::fmt::builders::PadAdapter::wrap (1 samples, 0.03%)</title><rect x="18.0691%" y="389" width="0.0295%" height="15" fill="rgb(247,221,28)" fg:x="612" fg:w="1"/><text x="18.3191%" y="399.50"></text></g><g><title>core::fmt::Formatter::wrap_buf (1 samples, 0.03%)</title><rect x="18.0691%" y="373" width="0.0295%" height="15" fill="rgb(251,222,45)" fg:x="612" fg:w="1"/><text x="18.3191%" y="383.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish (1 samples, 0.03%)</title><rect x="18.0986%" y="437" width="0.0295%" height="15" fill="rgb(217,162,53)" fg:x="613" fg:w="1"/><text x="18.3486%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.03%)</title><rect x="18.0986%" y="421" width="0.0295%" height="15" fill="rgb(229,93,14)" fg:x="613" fg:w="1"/><text x="18.3486%" y="431.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field5_finish (1 samples, 0.03%)</title><rect x="18.0986%" y="405" width="0.0295%" height="15" fill="rgb(209,67,49)" fg:x="613" fg:w="1"/><text x="18.3486%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="18.0986%" y="389" width="0.0295%" height="15" fill="rgb(213,87,29)" fg:x="613" fg:w="1"/><text x="18.3486%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="18.0986%" y="373" width="0.0295%" height="15" fill="rgb(205,151,52)" fg:x="613" fg:w="1"/><text x="18.3486%" y="383.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.03%)</title><rect x="18.0986%" y="357" width="0.0295%" height="15" fill="rgb(253,215,39)" fg:x="613" fg:w="1"/><text x="18.3486%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="18.0986%" y="341" width="0.0295%" height="15" fill="rgb(221,220,41)" fg:x="613" fg:w="1"/><text x="18.3486%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="18.0986%" y="325" width="0.0295%" height="15" fill="rgb(218,133,21)" fg:x="613" fg:w="1"/><text x="18.3486%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="18.0986%" y="309" width="0.0295%" height="15" fill="rgb(221,193,43)" fg:x="613" fg:w="1"/><text x="18.3486%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="18.0986%" y="293" width="0.0295%" height="15" fill="rgb(240,128,52)" fg:x="613" fg:w="1"/><text x="18.3486%" y="303.50"></text></g><g><title>core::fmt::run (565 samples, 16.68%)</title><rect x="1.5058%" y="485" width="16.6814%" height="15" fill="rgb(253,114,12)" fg:x="51" fg:w="565"/><text x="1.7558%" y="495.50">core::fmt::run</text></g><g><title>&lt;yt_history::DataRow as core::fmt::Debug&gt;::fmt (565 samples, 16.68%)</title><rect x="1.5058%" y="469" width="16.6814%" height="15" fill="rgb(215,223,47)" fg:x="51" fg:w="565"/><text x="1.7558%" y="479.50">&lt;yt_history::DataRow as co..</text></g><g><title>core::fmt::Formatter::debug_struct_field5_finish (565 samples, 16.68%)</title><rect x="1.5058%" y="453" width="16.6814%" height="15" fill="rgb(248,225,23)" fg:x="51" fg:w="565"/><text x="1.7558%" y="463.50">core::fmt::Formatter::debu..</text></g><g><title>core::fmt::builders::debug_struct_new (2 samples, 0.06%)</title><rect x="18.1281%" y="437" width="0.0590%" height="15" fill="rgb(250,108,0)" fg:x="614" fg:w="2"/><text x="18.3781%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_str (2 samples, 0.06%)</title><rect x="18.1281%" y="421" width="0.0590%" height="15" fill="rgb(228,208,7)" fg:x="614" fg:w="2"/><text x="18.3781%" y="431.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.06%)</title><rect x="18.1281%" y="405" width="0.0590%" height="15" fill="rgb(244,45,10)" fg:x="614" fg:w="2"/><text x="18.3781%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="18.1577%" y="389" width="0.0295%" height="15" fill="rgb(207,125,25)" fg:x="615" fg:w="1"/><text x="18.4077%" y="399.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.03%)</title><rect x="18.1577%" y="373" width="0.0295%" height="15" fill="rgb(210,195,18)" fg:x="615" fg:w="1"/><text x="18.4077%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="18.1577%" y="357" width="0.0295%" height="15" fill="rgb(249,80,12)" fg:x="615" fg:w="1"/><text x="18.4077%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="18.1577%" y="341" width="0.0295%" height="15" fill="rgb(221,65,9)" fg:x="615" fg:w="1"/><text x="18.4077%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="18.1577%" y="325" width="0.0295%" height="15" fill="rgb(235,49,36)" fg:x="615" fg:w="1"/><text x="18.4077%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="18.1577%" y="309" width="0.0295%" height="15" fill="rgb(225,32,20)" fg:x="615" fg:w="1"/><text x="18.4077%" y="319.50"></text></g><g><title>alloc::fmt::format (568 samples, 16.77%)</title><rect x="1.4467%" y="581" width="16.7700%" height="15" fill="rgb(215,141,46)" fg:x="49" fg:w="568"/><text x="1.6967%" y="591.50">alloc::fmt::format</text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (568 samples, 16.77%)</title><rect x="1.4467%" y="565" width="16.7700%" height="15" fill="rgb(250,160,47)" fg:x="49" fg:w="568"/><text x="1.6967%" y="575.50">core::option::Option&lt;T&gt;::m..</text></g><g><title>alloc::fmt::format::{{closure}} (568 samples, 16.77%)</title><rect x="1.4467%" y="549" width="16.7700%" height="15" fill="rgb(216,222,40)" fg:x="49" fg:w="568"/><text x="1.6967%" y="559.50">alloc::fmt::format::{{clos..</text></g><g><title>alloc::fmt::format::format_inner (568 samples, 16.77%)</title><rect x="1.4467%" y="533" width="16.7700%" height="15" fill="rgb(234,217,39)" fg:x="49" fg:w="568"/><text x="1.6967%" y="543.50">alloc::fmt::format::format..</text></g><g><title>core::fmt::Write::write_fmt (568 samples, 16.77%)</title><rect x="1.4467%" y="517" width="16.7700%" height="15" fill="rgb(207,178,40)" fg:x="49" fg:w="568"/><text x="1.6967%" y="527.50">core::fmt::Write::write_fmt</text></g><g><title>core::fmt::write (568 samples, 16.77%)</title><rect x="1.4467%" y="501" width="16.7700%" height="15" fill="rgb(221,136,13)" fg:x="49" fg:w="568"/><text x="1.6967%" y="511.50">core::fmt::write</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.03%)</title><rect x="18.1872%" y="485" width="0.0295%" height="15" fill="rgb(249,199,10)" fg:x="616" fg:w="1"/><text x="18.4372%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.03%)</title><rect x="18.1872%" y="469" width="0.0295%" height="15" fill="rgb(249,222,13)" fg:x="616" fg:w="1"/><text x="18.4372%" y="479.50"></text></g><g><title>chrono::format::parse::parse (1 samples, 0.03%)</title><rect x="18.2462%" y="549" width="0.0295%" height="15" fill="rgb(244,185,38)" fg:x="618" fg:w="1"/><text x="18.4962%" y="559.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.09%)</title><rect x="19.6044%" y="517" width="0.0886%" height="15" fill="rgb(236,202,9)" fg:x="664" fg:w="3"/><text x="19.8544%" y="527.50"></text></g><g><title>core::str::validations::next_code_point (3 samples, 0.09%)</title><rect x="19.6044%" y="501" width="0.0886%" height="15" fill="rgb(250,229,37)" fg:x="664" fg:w="3"/><text x="19.8544%" y="511.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (1 samples, 0.03%)</title><rect x="19.6929%" y="517" width="0.0295%" height="15" fill="rgb(206,174,23)" fg:x="667" fg:w="1"/><text x="19.9429%" y="527.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (1 samples, 0.03%)</title><rect x="19.7225%" y="501" width="0.0295%" height="15" fill="rgb(211,33,43)" fg:x="668" fg:w="1"/><text x="19.9725%" y="511.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (1 samples, 0.03%)</title><rect x="19.7225%" y="485" width="0.0295%" height="15" fill="rgb(245,58,50)" fg:x="668" fg:w="1"/><text x="19.9725%" y="495.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (1 samples, 0.03%)</title><rect x="19.7225%" y="469" width="0.0295%" height="15" fill="rgb(244,68,36)" fg:x="668" fg:w="1"/><text x="19.9725%" y="479.50"></text></g><g><title>&lt;chrono::format::strftime::StrftimeItems as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.62%)</title><rect x="19.1615%" y="533" width="0.6200%" height="15" fill="rgb(232,229,15)" fg:x="649" fg:w="21"/><text x="19.4115%" y="543.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (2 samples, 0.06%)</title><rect x="19.7225%" y="517" width="0.0590%" height="15" fill="rgb(254,30,23)" fg:x="668" fg:w="2"/><text x="19.9725%" y="527.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::index (1 samples, 0.03%)</title><rect x="19.7520%" y="501" width="0.0295%" height="15" fill="rgb(235,160,14)" fg:x="669" fg:w="1"/><text x="20.0020%" y="511.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get (1 samples, 0.03%)</title><rect x="19.7520%" y="485" width="0.0295%" height="15" fill="rgb(212,155,44)" fg:x="669" fg:w="1"/><text x="20.0020%" y="495.50"></text></g><g><title>chrono::format::parsed::Parsed::set_minute (1 samples, 0.03%)</title><rect x="19.7815%" y="533" width="0.0295%" height="15" fill="rgb(226,2,50)" fg:x="670" fg:w="1"/><text x="20.0315%" y="543.50"></text></g><g><title>&lt;i64 as num_traits::cast::ToPrimitive&gt;::to_u32 (1 samples, 0.03%)</title><rect x="19.7815%" y="517" width="0.0295%" height="15" fill="rgb(234,177,6)" fg:x="670" fg:w="1"/><text x="20.0315%" y="527.50"></text></g><g><title>chrono::format::parsed::Parsed::set_second (1 samples, 0.03%)</title><rect x="19.8110%" y="533" width="0.0295%" height="15" fill="rgb(217,24,9)" fg:x="671" fg:w="1"/><text x="20.0610%" y="543.50"></text></g><g><title>chrono::format::parsed::set_if_consistent (1 samples, 0.03%)</title><rect x="19.8110%" y="517" width="0.0295%" height="15" fill="rgb(220,13,46)" fg:x="671" fg:w="1"/><text x="20.0610%" y="527.50"></text></g><g><title>core::cmp::min (1 samples, 0.03%)</title><rect x="19.8406%" y="517" width="0.0295%" height="15" fill="rgb(239,221,27)" fg:x="672" fg:w="1"/><text x="20.0906%" y="527.50"></text></g><g><title>chrono::format::parse::parse (1 samples, 0.03%)</title><rect x="19.8406%" y="501" width="0.0295%" height="15" fill="rgb(222,198,25)" fg:x="672" fg:w="1"/><text x="20.0906%" y="511.50"></text></g><g><title>chrono::format::scan::number (2 samples, 0.06%)</title><rect x="19.8406%" y="533" width="0.0590%" height="15" fill="rgb(211,99,13)" fg:x="672" fg:w="2"/><text x="20.0906%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1 samples, 0.03%)</title><rect x="19.8701%" y="517" width="0.0295%" height="15" fill="rgb(232,111,31)" fg:x="673" fg:w="1"/><text x="20.1201%" y="527.50"></text></g><g><title>chrono::format::scan::number::{{closure}} (1 samples, 0.03%)</title><rect x="19.8701%" y="501" width="0.0295%" height="15" fill="rgb(245,82,37)" fg:x="673" fg:w="1"/><text x="20.1201%" y="511.50"></text></g><g><title>chrono::format::scan::short_month0 (1 samples, 0.03%)</title><rect x="19.8996%" y="533" width="0.0295%" height="15" fill="rgb(227,149,46)" fg:x="674" fg:w="1"/><text x="20.1496%" y="543.50"></text></g><g><title>chrono::format::scan::timezone_name_skip (1 samples, 0.03%)</title><rect x="19.9291%" y="533" width="0.0295%" height="15" fill="rgb(218,36,50)" fg:x="675" fg:w="1"/><text x="20.1791%" y="543.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_left_matches (1 samples, 0.03%)</title><rect x="19.9291%" y="517" width="0.0295%" height="15" fill="rgb(226,80,48)" fg:x="675" fg:w="1"/><text x="20.1791%" y="527.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start_matches (1 samples, 0.03%)</title><rect x="19.9291%" y="501" width="0.0295%" height="15" fill="rgb(238,224,15)" fg:x="675" fg:w="1"/><text x="20.1791%" y="511.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_reject (1 samples, 0.03%)</title><rect x="19.9291%" y="485" width="0.0295%" height="15" fill="rgb(241,136,10)" fg:x="675" fg:w="1"/><text x="20.1791%" y="495.50"></text></g><g><title>core::str::pattern::Searcher::next_reject (1 samples, 0.03%)</title><rect x="19.9291%" y="469" width="0.0295%" height="15" fill="rgb(208,32,45)" fg:x="675" fg:w="1"/><text x="20.1791%" y="479.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (1 samples, 0.03%)</title><rect x="19.9291%" y="453" width="0.0295%" height="15" fill="rgb(207,135,9)" fg:x="675" fg:w="1"/><text x="20.1791%" y="463.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="19.9291%" y="437" width="0.0295%" height="15" fill="rgb(206,86,44)" fg:x="675" fg:w="1"/><text x="20.1791%" y="447.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="19.9291%" y="421" width="0.0295%" height="15" fill="rgb(245,177,15)" fg:x="675" fg:w="1"/><text x="20.1791%" y="431.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.03%)</title><rect x="19.9291%" y="405" width="0.0295%" height="15" fill="rgb(206,64,50)" fg:x="675" fg:w="1"/><text x="20.1791%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.03%)</title><rect x="19.9587%" y="533" width="0.0295%" height="15" fill="rgb(234,36,40)" fg:x="676" fg:w="1"/><text x="20.2087%" y="543.50"></text></g><g><title>chrono::format::parse::parse (63 samples, 1.86%)</title><rect x="18.2167%" y="565" width="1.8601%" height="15" fill="rgb(213,64,8)" fg:x="617" fg:w="63"/><text x="18.4667%" y="575.50">c..</text></g><g><title>chrono::format::parse::parse_internal (61 samples, 1.80%)</title><rect x="18.2758%" y="549" width="1.8010%" height="15" fill="rgb(210,75,36)" fg:x="619" fg:w="61"/><text x="18.5258%" y="559.50">c..</text></g><g><title>core::str::&lt;impl str&gt;::trim_left (3 samples, 0.09%)</title><rect x="19.9882%" y="533" width="0.0886%" height="15" fill="rgb(229,88,21)" fg:x="677" fg:w="3"/><text x="20.2382%" y="543.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start (3 samples, 0.09%)</title><rect x="19.9882%" y="517" width="0.0886%" height="15" fill="rgb(252,204,47)" fg:x="677" fg:w="3"/><text x="20.2382%" y="527.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start_matches (2 samples, 0.06%)</title><rect x="20.0177%" y="501" width="0.0590%" height="15" fill="rgb(208,77,27)" fg:x="678" fg:w="2"/><text x="20.2677%" y="511.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_reject (2 samples, 0.06%)</title><rect x="20.0177%" y="485" width="0.0590%" height="15" fill="rgb(221,76,26)" fg:x="678" fg:w="2"/><text x="20.2677%" y="495.50"></text></g><g><title>core::str::pattern::Searcher::next_reject (2 samples, 0.06%)</title><rect x="20.0177%" y="469" width="0.0590%" height="15" fill="rgb(225,139,18)" fg:x="678" fg:w="2"/><text x="20.2677%" y="479.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (2 samples, 0.06%)</title><rect x="20.0177%" y="453" width="0.0590%" height="15" fill="rgb(230,137,11)" fg:x="678" fg:w="2"/><text x="20.2677%" y="463.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="20.0177%" y="437" width="0.0590%" height="15" fill="rgb(212,28,1)" fg:x="678" fg:w="2"/><text x="20.2677%" y="447.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="20.0177%" y="421" width="0.0590%" height="15" fill="rgb(248,164,17)" fg:x="678" fg:w="2"/><text x="20.2677%" y="431.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 0.06%)</title><rect x="20.0177%" y="405" width="0.0590%" height="15" fill="rgb(222,171,42)" fg:x="678" fg:w="2"/><text x="20.2677%" y="415.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date::resolve_year (2 samples, 0.06%)</title><rect x="20.1653%" y="517" width="0.0590%" height="15" fill="rgb(243,84,45)" fg:x="683" fg:w="2"/><text x="20.4153%" y="527.50"></text></g><g><title>&lt;chrono::naive::date::NaiveDate as chrono::traits::Datelike&gt;::iso_week (1 samples, 0.03%)</title><rect x="20.2244%" y="501" width="0.0295%" height="15" fill="rgb(252,49,23)" fg:x="685" fg:w="1"/><text x="20.4744%" y="511.50"></text></g><g><title>chrono::naive::isoweek::iso_week_from_yof (1 samples, 0.03%)</title><rect x="20.2244%" y="485" width="0.0295%" height="15" fill="rgb(215,19,7)" fg:x="685" fg:w="1"/><text x="20.4744%" y="495.50"></text></g><g><title>chrono::naive::internals::Of::isoweekdate_raw (1 samples, 0.03%)</title><rect x="20.2244%" y="469" width="0.0295%" height="15" fill="rgb(238,81,41)" fg:x="685" fg:w="1"/><text x="20.4744%" y="479.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date::{{closure}} (2 samples, 0.06%)</title><rect x="20.2244%" y="517" width="0.0590%" height="15" fill="rgb(210,199,37)" fg:x="685" fg:w="2"/><text x="20.4744%" y="527.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date::{{closure}} (1 samples, 0.03%)</title><rect x="20.2539%" y="501" width="0.0295%" height="15" fill="rgb(244,192,49)" fg:x="686" fg:w="1"/><text x="20.5039%" y="511.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_mdf (2 samples, 0.06%)</title><rect x="20.2834%" y="501" width="0.0590%" height="15" fill="rgb(226,211,11)" fg:x="687" fg:w="2"/><text x="20.5334%" y="511.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_of (2 samples, 0.06%)</title><rect x="20.2834%" y="485" width="0.0590%" height="15" fill="rgb(236,162,54)" fg:x="687" fg:w="2"/><text x="20.5334%" y="495.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (2 samples, 0.06%)</title><rect x="20.2834%" y="469" width="0.0590%" height="15" fill="rgb(220,229,9)" fg:x="687" fg:w="2"/><text x="20.5334%" y="479.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date (2 samples, 0.06%)</title><rect x="20.2834%" y="453" width="0.0590%" height="15" fill="rgb(250,87,22)" fg:x="687" fg:w="2"/><text x="20.5334%" y="463.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date (8 samples, 0.24%)</title><rect x="20.1358%" y="533" width="0.2362%" height="15" fill="rgb(239,43,17)" fg:x="682" fg:w="8"/><text x="20.3858%" y="543.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (3 samples, 0.09%)</title><rect x="20.2834%" y="517" width="0.0886%" height="15" fill="rgb(231,177,25)" fg:x="687" fg:w="3"/><text x="20.5334%" y="527.50"></text></g><g><title>chrono::naive::internals::Mdf::new (1 samples, 0.03%)</title><rect x="20.3425%" y="501" width="0.0295%" height="15" fill="rgb(219,179,1)" fg:x="689" fg:w="1"/><text x="20.5925%" y="511.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_datetime_with_offset (10 samples, 0.30%)</title><rect x="20.1358%" y="549" width="0.2952%" height="15" fill="rgb(238,219,53)" fg:x="682" fg:w="10"/><text x="20.3858%" y="559.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_time (2 samples, 0.06%)</title><rect x="20.3720%" y="533" width="0.0590%" height="15" fill="rgb(232,167,36)" fg:x="690" fg:w="2"/><text x="20.6220%" y="543.50"></text></g><g><title>chrono::naive::time::NaiveTime::from_hms_nano_opt (1 samples, 0.03%)</title><rect x="20.4015%" y="517" width="0.0295%" height="15" fill="rgb(244,19,51)" fg:x="691" fg:w="1"/><text x="20.6515%" y="527.50"></text></g><g><title>&lt;chrono::offset::utc::Utc as chrono::offset::TimeZone&gt;::offset_from_local_datetime (1 samples, 0.03%)</title><rect x="20.4311%" y="533" width="0.0295%" height="15" fill="rgb(224,6,22)" fg:x="692" fg:w="1"/><text x="20.6811%" y="543.50"></text></g><g><title>&lt;chrono::offset::utc::Utc as chrono::offset::Offset&gt;::fix (1 samples, 0.03%)</title><rect x="20.4606%" y="501" width="0.0295%" height="15" fill="rgb(224,145,5)" fg:x="693" fg:w="1"/><text x="20.7106%" y="511.50"></text></g><g><title>&lt;time::duration::Duration as core::ops::arith::Sub&gt;::sub (1 samples, 0.03%)</title><rect x="20.5787%" y="421" width="0.0295%" height="15" fill="rgb(234,130,49)" fg:x="697" fg:w="1"/><text x="20.8287%" y="431.50"></text></g><g><title>chrono::format::parsed::Parsed::to_datetime_with_timezone (19 samples, 0.56%)</title><rect x="20.0768%" y="565" width="0.5610%" height="15" fill="rgb(254,6,2)" fg:x="680" fg:w="19"/><text x="20.3268%" y="575.50"></text></g><g><title>chrono::offset::TimeZone::from_local_datetime (7 samples, 0.21%)</title><rect x="20.4311%" y="549" width="0.2067%" height="15" fill="rgb(208,96,46)" fg:x="692" fg:w="7"/><text x="20.6811%" y="559.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::map (6 samples, 0.18%)</title><rect x="20.4606%" y="533" width="0.1771%" height="15" fill="rgb(239,3,39)" fg:x="693" fg:w="6"/><text x="20.7106%" y="543.50"></text></g><g><title>chrono::offset::TimeZone::from_local_datetime::{{closure}} (6 samples, 0.18%)</title><rect x="20.4606%" y="517" width="0.1771%" height="15" fill="rgb(233,210,1)" fg:x="693" fg:w="6"/><text x="20.7106%" y="527.50"></text></g><g><title>chrono::offset::fixed::&lt;impl core::ops::arith::Sub&lt;chrono::offset::fixed::FixedOffset&gt; for chrono::naive::datetime::NaiveDateTime&gt;::sub (5 samples, 0.15%)</title><rect x="20.4901%" y="501" width="0.1476%" height="15" fill="rgb(244,137,37)" fg:x="694" fg:w="5"/><text x="20.7401%" y="511.50"></text></g><g><title>chrono::offset::fixed::add_with_leapsecond (5 samples, 0.15%)</title><rect x="20.4901%" y="485" width="0.1476%" height="15" fill="rgb(240,136,2)" fg:x="694" fg:w="5"/><text x="20.7401%" y="495.50"></text></g><g><title>&lt;chrono::naive::datetime::NaiveDateTime as core::ops::arith::Add&lt;time::duration::Duration&gt;&gt;::add (5 samples, 0.15%)</title><rect x="20.4901%" y="469" width="0.1476%" height="15" fill="rgb(239,18,37)" fg:x="694" fg:w="5"/><text x="20.7401%" y="479.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_signed (5 samples, 0.15%)</title><rect x="20.4901%" y="453" width="0.1476%" height="15" fill="rgb(218,185,22)" fg:x="694" fg:w="5"/><text x="20.7401%" y="463.50"></text></g><g><title>chrono::naive::time::NaiveTime::overflowing_add_signed (3 samples, 0.09%)</title><rect x="20.5492%" y="437" width="0.0886%" height="15" fill="rgb(225,218,4)" fg:x="696" fg:w="3"/><text x="20.7992%" y="447.50"></text></g><g><title>time::duration::Duration::num_seconds (1 samples, 0.03%)</title><rect x="20.6082%" y="421" width="0.0295%" height="15" fill="rgb(230,182,32)" fg:x="698" fg:w="1"/><text x="20.8582%" y="431.50"></text></g><g><title>chrono::offset::TimeZone::datetime_from_str (83 samples, 2.45%)</title><rect x="18.2167%" y="581" width="2.4505%" height="15" fill="rgb(242,56,43)" fg:x="617" fg:w="83"/><text x="18.4667%" y="591.50">ch..</text></g><g><title>chrono::format::strftime::StrftimeItems::new (1 samples, 0.03%)</title><rect x="20.6377%" y="565" width="0.0295%" height="15" fill="rgb(233,99,24)" fg:x="699" fg:w="1"/><text x="20.8877%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (14 samples, 0.41%)</title><rect x="20.6673%" y="581" width="0.4133%" height="15" fill="rgb(234,209,42)" fg:x="700" fg:w="14"/><text x="20.9173%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (14 samples, 0.41%)</title><rect x="20.6673%" y="565" width="0.4133%" height="15" fill="rgb(227,7,12)" fg:x="700" fg:w="14"/><text x="20.9173%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (14 samples, 0.41%)</title><rect x="20.6673%" y="549" width="0.4133%" height="15" fill="rgb(245,203,43)" fg:x="700" fg:w="14"/><text x="20.9173%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.41%)</title><rect x="20.6673%" y="533" width="0.4133%" height="15" fill="rgb(238,205,33)" fg:x="700" fg:w="14"/><text x="20.9173%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.41%)</title><rect x="20.6673%" y="517" width="0.4133%" height="15" fill="rgb(231,56,7)" fg:x="700" fg:w="14"/><text x="20.9173%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.41%)</title><rect x="20.6673%" y="501" width="0.4133%" height="15" fill="rgb(244,186,29)" fg:x="700" fg:w="14"/><text x="20.9173%" y="511.50"></text></g><g><title>cfree (14 samples, 0.41%)</title><rect x="20.6673%" y="485" width="0.4133%" height="15" fill="rgb(234,111,31)" fg:x="700" fg:w="14"/><text x="20.9173%" y="495.50"></text></g><g><title>[libc.so.6] (12 samples, 0.35%)</title><rect x="20.7263%" y="469" width="0.3543%" height="15" fill="rgb(241,149,10)" fg:x="702" fg:w="12"/><text x="20.9763%" y="479.50"></text></g><g><title>[libc.so.6] (9 samples, 0.27%)</title><rect x="20.8149%" y="453" width="0.2657%" height="15" fill="rgb(249,206,44)" fg:x="705" fg:w="9"/><text x="21.0649%" y="463.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="21.0511%" y="437" width="0.0295%" height="15" fill="rgb(251,153,30)" fg:x="713" fg:w="1"/><text x="21.3011%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::DataRow&gt; (3 samples, 0.09%)</title><rect x="21.0806%" y="581" width="0.0886%" height="15" fill="rgb(239,152,38)" fg:x="714" fg:w="3"/><text x="21.3306%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 0.09%)</title><rect x="21.0806%" y="565" width="0.0886%" height="15" fill="rgb(249,139,47)" fg:x="714" fg:w="3"/><text x="21.3306%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.09%)</title><rect x="21.0806%" y="549" width="0.0886%" height="15" fill="rgb(244,64,35)" fg:x="714" fg:w="3"/><text x="21.3306%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.09%)</title><rect x="21.0806%" y="533" width="0.0886%" height="15" fill="rgb(216,46,15)" fg:x="714" fg:w="3"/><text x="21.3306%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.09%)</title><rect x="21.0806%" y="517" width="0.0886%" height="15" fill="rgb(250,74,19)" fg:x="714" fg:w="3"/><text x="21.3306%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.09%)</title><rect x="21.0806%" y="501" width="0.0886%" height="15" fill="rgb(249,42,33)" fg:x="714" fg:w="3"/><text x="21.3306%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.09%)</title><rect x="21.0806%" y="485" width="0.0886%" height="15" fill="rgb(242,149,17)" fg:x="714" fg:w="3"/><text x="21.3306%" y="495.50"></text></g><g><title>cfree (3 samples, 0.09%)</title><rect x="21.0806%" y="469" width="0.0886%" height="15" fill="rgb(244,29,21)" fg:x="714" fg:w="3"/><text x="21.3306%" y="479.50"></text></g><g><title>[libc.so.6] (2 samples, 0.06%)</title><rect x="21.1101%" y="453" width="0.0590%" height="15" fill="rgb(220,130,37)" fg:x="715" fg:w="2"/><text x="21.3601%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.03%)</title><rect x="21.3168%" y="357" width="0.0295%" height="15" fill="rgb(211,67,2)" fg:x="722" fg:w="1"/><text x="21.5668%" y="367.50"></text></g><g><title>__rdl_realloc (1 samples, 0.03%)</title><rect x="21.4054%" y="293" width="0.0295%" height="15" fill="rgb(235,68,52)" fg:x="725" fg:w="1"/><text x="21.6554%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.03%)</title><rect x="21.4054%" y="277" width="0.0295%" height="15" fill="rgb(246,142,3)" fg:x="725" fg:w="1"/><text x="21.6554%" y="287.50"></text></g><g><title>__rust_realloc (1 samples, 0.03%)</title><rect x="21.4349%" y="293" width="0.0295%" height="15" fill="rgb(241,25,7)" fg:x="726" fg:w="1"/><text x="21.6849%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 0.27%)</title><rect x="21.3758%" y="341" width="0.2657%" height="15" fill="rgb(242,119,39)" fg:x="724" fg:w="9"/><text x="21.6258%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.27%)</title><rect x="21.3758%" y="325" width="0.2657%" height="15" fill="rgb(241,98,45)" fg:x="724" fg:w="9"/><text x="21.6258%" y="335.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.27%)</title><rect x="21.3758%" y="309" width="0.2657%" height="15" fill="rgb(254,28,30)" fg:x="724" fg:w="9"/><text x="21.6258%" y="319.50"></text></g><g><title>realloc (6 samples, 0.18%)</title><rect x="21.4644%" y="293" width="0.1771%" height="15" fill="rgb(241,142,54)" fg:x="727" fg:w="6"/><text x="21.7144%" y="303.50"></text></g><g><title>[libc.so.6] (5 samples, 0.15%)</title><rect x="21.4939%" y="277" width="0.1476%" height="15" fill="rgb(222,85,15)" fg:x="728" fg:w="5"/><text x="21.7439%" y="287.50"></text></g><g><title>[libc.so.6] (4 samples, 0.12%)</title><rect x="21.5235%" y="261" width="0.1181%" height="15" fill="rgb(210,85,47)" fg:x="729" fg:w="4"/><text x="21.7735%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.03%)</title><rect x="21.6416%" y="341" width="0.0295%" height="15" fill="rgb(224,206,25)" fg:x="733" fg:w="1"/><text x="21.8916%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 0.41%)</title><rect x="21.3463%" y="357" width="0.4133%" height="15" fill="rgb(243,201,19)" fg:x="723" fg:w="14"/><text x="21.5963%" y="367.50"></text></g><g><title>malloc (3 samples, 0.09%)</title><rect x="21.6711%" y="341" width="0.0886%" height="15" fill="rgb(236,59,4)" fg:x="734" fg:w="3"/><text x="21.9211%" y="351.50"></text></g><g><title>[libc.so.6] (2 samples, 0.06%)</title><rect x="21.7006%" y="325" width="0.0590%" height="15" fill="rgb(254,179,45)" fg:x="735" fg:w="2"/><text x="21.9506%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (17 samples, 0.50%)</title><rect x="21.2873%" y="389" width="0.5019%" height="15" fill="rgb(226,14,10)" fg:x="721" fg:w="17"/><text x="21.5373%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (17 samples, 0.50%)</title><rect x="21.2873%" y="373" width="0.5019%" height="15" fill="rgb(244,27,41)" fg:x="721" fg:w="17"/><text x="21.5373%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.03%)</title><rect x="21.7597%" y="357" width="0.0295%" height="15" fill="rgb(235,35,32)" fg:x="737" fg:w="1"/><text x="22.0097%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.03%)</title><rect x="21.7597%" y="341" width="0.0295%" height="15" fill="rgb(218,68,31)" fg:x="737" fg:w="1"/><text x="22.0097%" y="351.50"></text></g><g><title>yt_history::filter_ascii (23 samples, 0.68%)</title><rect x="21.1692%" y="581" width="0.6791%" height="15" fill="rgb(207,120,37)" fg:x="717" fg:w="23"/><text x="21.4192%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (23 samples, 0.68%)</title><rect x="21.1692%" y="565" width="0.6791%" height="15" fill="rgb(227,98,0)" fg:x="717" fg:w="23"/><text x="21.4192%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (23 samples, 0.68%)</title><rect x="21.1692%" y="549" width="0.6791%" height="15" fill="rgb(207,7,3)" fg:x="717" fg:w="23"/><text x="21.4192%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (23 samples, 0.68%)</title><rect x="21.1692%" y="533" width="0.6791%" height="15" fill="rgb(206,98,19)" fg:x="717" fg:w="23"/><text x="21.4192%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (23 samples, 0.68%)</title><rect x="21.1692%" y="517" width="0.6791%" height="15" fill="rgb(217,5,26)" fg:x="717" fg:w="23"/><text x="21.4192%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23 samples, 0.68%)</title><rect x="21.1692%" y="501" width="0.6791%" height="15" fill="rgb(235,190,38)" fg:x="717" fg:w="23"/><text x="21.4192%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (23 samples, 0.68%)</title><rect x="21.1692%" y="485" width="0.6791%" height="15" fill="rgb(247,86,24)" fg:x="717" fg:w="23"/><text x="21.4192%" y="495.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::{{closure}} (23 samples, 0.68%)</title><rect x="21.1692%" y="469" width="0.6791%" height="15" fill="rgb(205,101,16)" fg:x="717" fg:w="23"/><text x="21.4192%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (23 samples, 0.68%)</title><rect x="21.1692%" y="453" width="0.6791%" height="15" fill="rgb(246,168,33)" fg:x="717" fg:w="23"/><text x="21.4192%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::{{closure}} (23 samples, 0.68%)</title><rect x="21.1692%" y="437" width="0.6791%" height="15" fill="rgb(231,114,1)" fg:x="717" fg:w="23"/><text x="21.4192%" y="447.50"></text></g><g><title>alloc::string::String::push (23 samples, 0.68%)</title><rect x="21.1692%" y="421" width="0.6791%" height="15" fill="rgb(207,184,53)" fg:x="717" fg:w="23"/><text x="21.4192%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (23 samples, 0.68%)</title><rect x="21.1692%" y="405" width="0.6791%" height="15" fill="rgb(224,95,51)" fg:x="717" fg:w="23"/><text x="21.4192%" y="415.50"></text></g><g><title>core::ptr::write (2 samples, 0.06%)</title><rect x="21.7892%" y="389" width="0.0590%" height="15" fill="rgb(212,188,45)" fg:x="738" fg:w="2"/><text x="22.0392%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.18%)</title><rect x="22.2321%" y="533" width="0.1771%" height="15" fill="rgb(223,154,38)" fg:x="753" fg:w="6"/><text x="22.4821%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.21%)</title><rect x="22.6749%" y="517" width="0.2067%" height="15" fill="rgb(251,22,52)" fg:x="768" fg:w="7"/><text x="22.9249%" y="527.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (6 samples, 0.18%)</title><rect x="22.7045%" y="501" width="0.1771%" height="15" fill="rgb(229,209,22)" fg:x="769" fg:w="6"/><text x="22.9545%" y="511.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.03%)</title><rect x="22.8521%" y="485" width="0.0295%" height="15" fill="rgb(234,138,34)" fg:x="774" fg:w="1"/><text x="23.1021%" y="495.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.03%)</title><rect x="22.8521%" y="469" width="0.0295%" height="15" fill="rgb(212,95,11)" fg:x="774" fg:w="1"/><text x="23.1021%" y="479.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="22.8521%" y="453" width="0.0295%" height="15" fill="rgb(240,179,47)" fg:x="774" fg:w="1"/><text x="23.1021%" y="463.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="22.8521%" y="437" width="0.0295%" height="15" fill="rgb(240,163,11)" fg:x="774" fg:w="1"/><text x="23.1021%" y="447.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="23.4426%" y="501" width="0.0590%" height="15" fill="rgb(236,37,12)" fg:x="794" fg:w="2"/><text x="23.6926%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (231 samples, 6.82%)</title><rect x="23.5016%" y="501" width="6.8202%" height="15" fill="rgb(232,164,16)" fg:x="796" fg:w="231"/><text x="23.7516%" y="511.50">core::cmp..</text></g><g><title>core::cmp::PartialEq::ne (231 samples, 6.82%)</title><rect x="23.5016%" y="485" width="6.8202%" height="15" fill="rgb(244,205,15)" fg:x="796" fg:w="231"/><text x="23.7516%" y="495.50">core::cmp..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (231 samples, 6.82%)</title><rect x="23.5016%" y="469" width="6.8202%" height="15" fill="rgb(223,117,47)" fg:x="796" fg:w="231"/><text x="23.7516%" y="479.50">&lt;alloc::s..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (231 samples, 6.82%)</title><rect x="23.5016%" y="453" width="6.8202%" height="15" fill="rgb(244,107,35)" fg:x="796" fg:w="231"/><text x="23.7516%" y="463.50">core::str..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (231 samples, 6.82%)</title><rect x="23.5016%" y="437" width="6.8202%" height="15" fill="rgb(205,140,8)" fg:x="796" fg:w="231"/><text x="23.7516%" y="447.50">core::cmp..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (231 samples, 6.82%)</title><rect x="23.5016%" y="421" width="6.8202%" height="15" fill="rgb(228,84,46)" fg:x="796" fg:w="231"/><text x="23.7516%" y="431.50">core::sli..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (231 samples, 6.82%)</title><rect x="23.5016%" y="405" width="6.8202%" height="15" fill="rgb(254,188,9)" fg:x="796" fg:w="231"/><text x="23.7516%" y="415.50">&lt;[A] as c..</text></g><g><title>[libc.so.6] (220 samples, 6.50%)</title><rect x="23.8264%" y="389" width="6.4954%" height="15" fill="rgb(206,112,54)" fg:x="807" fg:w="220"/><text x="24.0764%" y="399.50">[libc.so...</text></g><g><title>yt_history::model::Models::find_or_create_channel (289 samples, 8.53%)</title><rect x="21.8482%" y="581" width="8.5326%" height="15" fill="rgb(216,84,49)" fg:x="740" fg:w="289"/><text x="22.0982%" y="591.50">yt_history::..</text></g><g><title>yt_history::model::Models::find_channel (288 samples, 8.50%)</title><rect x="21.8778%" y="565" width="8.5031%" height="15" fill="rgb(214,194,35)" fg:x="741" fg:w="288"/><text x="22.1278%" y="575.50">yt_history::..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (288 samples, 8.50%)</title><rect x="21.8778%" y="549" width="8.5031%" height="15" fill="rgb(249,28,3)" fg:x="741" fg:w="288"/><text x="22.1278%" y="559.50">&lt;core::slice..</text></g><g><title>yt_history::model::Models::find_channel::{{closure}} (270 samples, 7.97%)</title><rect x="22.4092%" y="533" width="7.9717%" height="15" fill="rgb(222,56,52)" fg:x="759" fg:w="270"/><text x="22.6592%" y="543.50">yt_history:..</text></g><g><title>yt_history::model::WhereChannel::matches (254 samples, 7.50%)</title><rect x="22.8816%" y="517" width="7.4993%" height="15" fill="rgb(245,217,50)" fg:x="775" fg:w="254"/><text x="23.1316%" y="527.50">yt_history..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.06%)</title><rect x="30.3218%" y="501" width="0.0590%" height="15" fill="rgb(213,201,24)" fg:x="1027" fg:w="2"/><text x="30.5718%" y="511.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.06%)</title><rect x="30.3218%" y="485" width="0.0590%" height="15" fill="rgb(248,116,28)" fg:x="1027" fg:w="2"/><text x="30.5718%" y="495.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="30.3513%" y="469" width="0.0295%" height="15" fill="rgb(219,72,43)" fg:x="1028" fg:w="1"/><text x="30.6013%" y="479.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="30.3809%" y="565" width="0.0295%" height="15" fill="rgb(209,138,14)" fg:x="1029" fg:w="1"/><text x="30.6309%" y="575.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (1 samples, 0.03%)</title><rect x="30.3809%" y="549" width="0.0295%" height="15" fill="rgb(222,18,33)" fg:x="1029" fg:w="1"/><text x="30.6309%" y="559.50"></text></g><g><title>__rust_dealloc (1 samples, 0.03%)</title><rect x="30.4104%" y="565" width="0.0295%" height="15" fill="rgb(213,199,7)" fg:x="1030" fg:w="1"/><text x="30.6604%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.03%)</title><rect x="30.4399%" y="565" width="0.0295%" height="15" fill="rgb(250,110,10)" fg:x="1031" fg:w="1"/><text x="30.6899%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="30.4399%" y="549" width="0.0295%" height="15" fill="rgb(248,123,6)" fg:x="1031" fg:w="1"/><text x="30.6899%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="30.4399%" y="533" width="0.0295%" height="15" fill="rgb(206,91,31)" fg:x="1031" fg:w="1"/><text x="30.6899%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="30.4399%" y="517" width="0.0295%" height="15" fill="rgb(211,154,13)" fg:x="1031" fg:w="1"/><text x="30.6899%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="30.4399%" y="501" width="0.0295%" height="15" fill="rgb(225,148,7)" fg:x="1031" fg:w="1"/><text x="30.6899%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="30.4399%" y="485" width="0.0295%" height="15" fill="rgb(220,160,43)" fg:x="1031" fg:w="1"/><text x="30.6899%" y="495.50"></text></g><g><title>cfree (1 samples, 0.03%)</title><rect x="30.4399%" y="469" width="0.0295%" height="15" fill="rgb(213,52,39)" fg:x="1031" fg:w="1"/><text x="30.6899%" y="479.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="30.4399%" y="453" width="0.0295%" height="15" fill="rgb(243,137,7)" fg:x="1031" fg:w="1"/><text x="30.6899%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.06%)</title><rect x="30.5285%" y="437" width="0.0590%" height="15" fill="rgb(230,79,13)" fg:x="1034" fg:w="2"/><text x="30.7785%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.06%)</title><rect x="30.5285%" y="421" width="0.0590%" height="15" fill="rgb(247,105,23)" fg:x="1034" fg:w="2"/><text x="30.7785%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.15%)</title><rect x="30.4990%" y="485" width="0.1476%" height="15" fill="rgb(223,179,41)" fg:x="1033" fg:w="5"/><text x="30.7490%" y="495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.15%)</title><rect x="30.4990%" y="469" width="0.1476%" height="15" fill="rgb(218,9,34)" fg:x="1033" fg:w="5"/><text x="30.7490%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.15%)</title><rect x="30.4990%" y="453" width="0.1476%" height="15" fill="rgb(222,106,8)" fg:x="1033" fg:w="5"/><text x="30.7490%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.06%)</title><rect x="30.5875%" y="437" width="0.0590%" height="15" fill="rgb(211,220,0)" fg:x="1036" fg:w="2"/><text x="30.8375%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.06%)</title><rect x="30.5875%" y="421" width="0.0590%" height="15" fill="rgb(229,52,16)" fg:x="1036" fg:w="2"/><text x="30.8375%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="30.6466%" y="389" width="0.0590%" height="15" fill="rgb(212,155,18)" fg:x="1038" fg:w="2"/><text x="30.8966%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.06%)</title><rect x="30.6466%" y="373" width="0.0590%" height="15" fill="rgb(242,21,14)" fg:x="1038" fg:w="2"/><text x="30.8966%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.06%)</title><rect x="30.6466%" y="357" width="0.0590%" height="15" fill="rgb(222,19,48)" fg:x="1038" fg:w="2"/><text x="30.8966%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 0.30%)</title><rect x="30.4694%" y="517" width="0.2952%" height="15" fill="rgb(232,45,27)" fg:x="1032" fg:w="10"/><text x="30.7194%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.30%)</title><rect x="30.4694%" y="501" width="0.2952%" height="15" fill="rgb(249,103,42)" fg:x="1032" fg:w="10"/><text x="30.7194%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.12%)</title><rect x="30.6466%" y="485" width="0.1181%" height="15" fill="rgb(246,81,33)" fg:x="1038" fg:w="4"/><text x="30.8966%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (4 samples, 0.12%)</title><rect x="30.6466%" y="469" width="0.1181%" height="15" fill="rgb(252,33,42)" fg:x="1038" fg:w="4"/><text x="30.8966%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (4 samples, 0.12%)</title><rect x="30.6466%" y="453" width="0.1181%" height="15" fill="rgb(209,212,41)" fg:x="1038" fg:w="4"/><text x="30.8966%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (4 samples, 0.12%)</title><rect x="30.6466%" y="437" width="0.1181%" height="15" fill="rgb(207,154,6)" fg:x="1038" fg:w="4"/><text x="30.8966%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (4 samples, 0.12%)</title><rect x="30.6466%" y="421" width="0.1181%" height="15" fill="rgb(223,64,47)" fg:x="1038" fg:w="4"/><text x="30.8966%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (4 samples, 0.12%)</title><rect x="30.6466%" y="405" width="0.1181%" height="15" fill="rgb(211,161,38)" fg:x="1038" fg:w="4"/><text x="30.8966%" y="415.50"></text></g><g><title>core::hash::Hasher::write_u8 (2 samples, 0.06%)</title><rect x="30.7056%" y="389" width="0.0590%" height="15" fill="rgb(219,138,40)" fg:x="1040" fg:w="2"/><text x="30.9556%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="30.7056%" y="373" width="0.0590%" height="15" fill="rgb(241,228,46)" fg:x="1040" fg:w="2"/><text x="30.9556%" y="383.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.06%)</title><rect x="30.7056%" y="357" width="0.0590%" height="15" fill="rgb(223,209,38)" fg:x="1040" fg:w="2"/><text x="30.9556%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="30.7647%" y="469" width="0.0295%" height="15" fill="rgb(236,164,45)" fg:x="1042" fg:w="1"/><text x="31.0147%" y="479.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="30.7647%" y="453" width="0.0295%" height="15" fill="rgb(231,15,5)" fg:x="1042" fg:w="1"/><text x="31.0147%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (8 samples, 0.24%)</title><rect x="30.7942%" y="469" width="0.2362%" height="15" fill="rgb(252,35,15)" fg:x="1043" fg:w="8"/><text x="31.0442%" y="479.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (8 samples, 0.24%)</title><rect x="30.7942%" y="453" width="0.2362%" height="15" fill="rgb(248,181,18)" fg:x="1043" fg:w="8"/><text x="31.0442%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (8 samples, 0.24%)</title><rect x="30.7942%" y="437" width="0.2362%" height="15" fill="rgb(233,39,42)" fg:x="1043" fg:w="8"/><text x="31.0442%" y="447.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (8 samples, 0.24%)</title><rect x="30.7942%" y="421" width="0.2362%" height="15" fill="rgb(238,110,33)" fg:x="1043" fg:w="8"/><text x="31.0442%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8 samples, 0.24%)</title><rect x="30.7942%" y="405" width="0.2362%" height="15" fill="rgb(233,195,10)" fg:x="1043" fg:w="8"/><text x="31.0442%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (8 samples, 0.24%)</title><rect x="30.7942%" y="389" width="0.2362%" height="15" fill="rgb(254,105,3)" fg:x="1043" fg:w="8"/><text x="31.0442%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (8 samples, 0.24%)</title><rect x="30.7942%" y="373" width="0.2362%" height="15" fill="rgb(221,225,9)" fg:x="1043" fg:w="8"/><text x="31.0442%" y="383.50"></text></g><g><title>[libc.so.6] (2 samples, 0.06%)</title><rect x="30.9714%" y="357" width="0.0590%" height="15" fill="rgb(224,227,45)" fg:x="1049" fg:w="2"/><text x="31.2214%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (3 samples, 0.09%)</title><rect x="31.0304%" y="469" width="0.0886%" height="15" fill="rgb(229,198,43)" fg:x="1051" fg:w="3"/><text x="31.2804%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3 samples, 0.09%)</title><rect x="31.0304%" y="453" width="0.0886%" height="15" fill="rgb(206,209,35)" fg:x="1051" fg:w="3"/><text x="31.2804%" y="463.50"></text></g><g><title>yt_history::model::Models::find_or_create_video (3 samples, 0.09%)</title><rect x="31.0304%" y="437" width="0.0886%" height="15" fill="rgb(245,195,53)" fg:x="1051" fg:w="3"/><text x="31.2804%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (23 samples, 0.68%)</title><rect x="30.4694%" y="565" width="0.6791%" height="15" fill="rgb(240,92,26)" fg:x="1032" fg:w="23"/><text x="30.7194%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (23 samples, 0.68%)</title><rect x="30.4694%" y="549" width="0.6791%" height="15" fill="rgb(207,40,23)" fg:x="1032" fg:w="23"/><text x="30.7194%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (23 samples, 0.68%)</title><rect x="30.4694%" y="533" width="0.6791%" height="15" fill="rgb(223,111,35)" fg:x="1032" fg:w="23"/><text x="30.7194%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (13 samples, 0.38%)</title><rect x="30.7647%" y="517" width="0.3838%" height="15" fill="rgb(229,147,28)" fg:x="1042" fg:w="13"/><text x="31.0147%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (13 samples, 0.38%)</title><rect x="30.7647%" y="501" width="0.3838%" height="15" fill="rgb(211,29,28)" fg:x="1042" fg:w="13"/><text x="31.0147%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (13 samples, 0.38%)</title><rect x="30.7647%" y="485" width="0.3838%" height="15" fill="rgb(228,72,33)" fg:x="1042" fg:w="13"/><text x="31.0147%" y="495.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.03%)</title><rect x="31.1190%" y="469" width="0.0295%" height="15" fill="rgb(205,214,31)" fg:x="1054" fg:w="1"/><text x="31.3690%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="31.1190%" y="453" width="0.0295%" height="15" fill="rgb(224,111,15)" fg:x="1054" fg:w="1"/><text x="31.3690%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="31.1190%" y="437" width="0.0295%" height="15" fill="rgb(253,21,26)" fg:x="1054" fg:w="1"/><text x="31.3690%" y="447.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.09%)</title><rect x="31.4733%" y="501" width="0.0886%" height="15" fill="rgb(245,139,43)" fg:x="1066" fg:w="3"/><text x="31.7233%" y="511.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (3 samples, 0.09%)</title><rect x="31.4733%" y="485" width="0.0886%" height="15" fill="rgb(252,170,7)" fg:x="1066" fg:w="3"/><text x="31.7233%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="31.9161%" y="485" width="0.0295%" height="15" fill="rgb(231,118,14)" fg:x="1081" fg:w="1"/><text x="32.1661%" y="495.50"></text></g><g><title>yt_history::model::Models::find_or_create_channel (121 samples, 3.57%)</title><rect x="31.1485%" y="565" width="3.5725%" height="15" fill="rgb(238,83,0)" fg:x="1055" fg:w="121"/><text x="31.3985%" y="575.50">yt_h..</text></g><g><title>yt_history::model::Models::find_channel (121 samples, 3.57%)</title><rect x="31.1485%" y="549" width="3.5725%" height="15" fill="rgb(221,39,39)" fg:x="1055" fg:w="121"/><text x="31.3985%" y="559.50">yt_h..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (121 samples, 3.57%)</title><rect x="31.1485%" y="533" width="3.5725%" height="15" fill="rgb(222,119,46)" fg:x="1055" fg:w="121"/><text x="31.3985%" y="543.50">&lt;cor..</text></g><g><title>yt_history::model::Models::find_channel::{{closure}} (118 samples, 3.48%)</title><rect x="31.2371%" y="517" width="3.4839%" height="15" fill="rgb(222,165,49)" fg:x="1058" fg:w="118"/><text x="31.4871%" y="527.50">yt_..</text></g><g><title>yt_history::model::WhereChannel::matches (107 samples, 3.16%)</title><rect x="31.5619%" y="501" width="3.1591%" height="15" fill="rgb(219,113,52)" fg:x="1069" fg:w="107"/><text x="31.8119%" y="511.50">yt_..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (94 samples, 2.78%)</title><rect x="31.9457%" y="485" width="2.7753%" height="15" fill="rgb(214,7,15)" fg:x="1082" fg:w="94"/><text x="32.1957%" y="495.50">co..</text></g><g><title>core::cmp::PartialEq::ne (94 samples, 2.78%)</title><rect x="31.9457%" y="469" width="2.7753%" height="15" fill="rgb(235,32,4)" fg:x="1082" fg:w="94"/><text x="32.1957%" y="479.50">co..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (94 samples, 2.78%)</title><rect x="31.9457%" y="453" width="2.7753%" height="15" fill="rgb(238,90,54)" fg:x="1082" fg:w="94"/><text x="32.1957%" y="463.50">&lt;a..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (94 samples, 2.78%)</title><rect x="31.9457%" y="437" width="2.7753%" height="15" fill="rgb(213,208,19)" fg:x="1082" fg:w="94"/><text x="32.1957%" y="447.50">co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (94 samples, 2.78%)</title><rect x="31.9457%" y="421" width="2.7753%" height="15" fill="rgb(233,156,4)" fg:x="1082" fg:w="94"/><text x="32.1957%" y="431.50">co..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (94 samples, 2.78%)</title><rect x="31.9457%" y="405" width="2.7753%" height="15" fill="rgb(207,194,5)" fg:x="1082" fg:w="94"/><text x="32.1957%" y="415.50">co..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (94 samples, 2.78%)</title><rect x="31.9457%" y="389" width="2.7753%" height="15" fill="rgb(206,111,30)" fg:x="1082" fg:w="94"/><text x="32.1957%" y="399.50">&lt;[..</text></g><g><title>[libc.so.6] (87 samples, 2.57%)</title><rect x="32.1523%" y="373" width="2.5686%" height="15" fill="rgb(243,70,54)" fg:x="1089" fg:w="87"/><text x="32.4023%" y="383.50">[l..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="34.7210%" y="549" width="0.0295%" height="15" fill="rgb(242,28,8)" fg:x="1176" fg:w="1"/><text x="34.9710%" y="559.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (1 samples, 0.03%)</title><rect x="34.7210%" y="533" width="0.0295%" height="15" fill="rgb(219,106,18)" fg:x="1176" fg:w="1"/><text x="34.9710%" y="543.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.03%)</title><rect x="34.7210%" y="517" width="0.0295%" height="15" fill="rgb(244,222,10)" fg:x="1176" fg:w="1"/><text x="34.9710%" y="527.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.03%)</title><rect x="34.7210%" y="501" width="0.0295%" height="15" fill="rgb(236,179,52)" fg:x="1176" fg:w="1"/><text x="34.9710%" y="511.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="34.7210%" y="485" width="0.0295%" height="15" fill="rgb(213,23,39)" fg:x="1176" fg:w="1"/><text x="34.9710%" y="495.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="34.7210%" y="469" width="0.0295%" height="15" fill="rgb(238,48,10)" fg:x="1176" fg:w="1"/><text x="34.9710%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="34.7505%" y="549" width="0.0295%" height="15" fill="rgb(251,196,23)" fg:x="1177" fg:w="1"/><text x="35.0005%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="34.7505%" y="533" width="0.0295%" height="15" fill="rgb(250,152,24)" fg:x="1177" fg:w="1"/><text x="35.0005%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.03%)</title><rect x="34.7505%" y="517" width="0.0295%" height="15" fill="rgb(209,150,17)" fg:x="1177" fg:w="1"/><text x="35.0005%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.03%)</title><rect x="34.7505%" y="501" width="0.0295%" height="15" fill="rgb(234,202,34)" fg:x="1177" fg:w="1"/><text x="35.0005%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.03%)</title><rect x="34.7505%" y="485" width="0.0295%" height="15" fill="rgb(253,148,53)" fg:x="1177" fg:w="1"/><text x="35.0005%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="34.7505%" y="469" width="0.0295%" height="15" fill="rgb(218,129,16)" fg:x="1177" fg:w="1"/><text x="35.0005%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="34.7505%" y="453" width="0.0295%" height="15" fill="rgb(216,85,19)" fg:x="1177" fg:w="1"/><text x="35.0005%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.03%)</title><rect x="34.7505%" y="437" width="0.0295%" height="15" fill="rgb(235,228,7)" fg:x="1177" fg:w="1"/><text x="35.0005%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="34.7505%" y="421" width="0.0295%" height="15" fill="rgb(245,175,0)" fg:x="1177" fg:w="1"/><text x="35.0005%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="34.7505%" y="405" width="0.0295%" height="15" fill="rgb(208,168,36)" fg:x="1177" fg:w="1"/><text x="35.0005%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="34.7505%" y="389" width="0.0295%" height="15" fill="rgb(246,171,24)" fg:x="1177" fg:w="1"/><text x="35.0005%" y="399.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="34.7505%" y="373" width="0.0295%" height="15" fill="rgb(215,142,24)" fg:x="1177" fg:w="1"/><text x="35.0005%" y="383.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="34.7505%" y="357" width="0.0295%" height="15" fill="rgb(250,187,7)" fg:x="1177" fg:w="1"/><text x="35.0005%" y="367.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="34.7800%" y="549" width="0.0295%" height="15" fill="rgb(228,66,33)" fg:x="1178" fg:w="1"/><text x="35.0300%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="34.7800%" y="533" width="0.0295%" height="15" fill="rgb(234,215,21)" fg:x="1178" fg:w="1"/><text x="35.0300%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="34.8391%" y="437" width="0.0590%" height="15" fill="rgb(222,191,20)" fg:x="1180" fg:w="2"/><text x="35.0891%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="34.8391%" y="421" width="0.0590%" height="15" fill="rgb(245,79,54)" fg:x="1180" fg:w="2"/><text x="35.0891%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="34.8686%" y="405" width="0.0295%" height="15" fill="rgb(240,10,37)" fg:x="1181" fg:w="1"/><text x="35.1186%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="34.8686%" y="389" width="0.0295%" height="15" fill="rgb(214,192,32)" fg:x="1181" fg:w="1"/><text x="35.1186%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="34.8686%" y="373" width="0.0295%" height="15" fill="rgb(209,36,54)" fg:x="1181" fg:w="1"/><text x="35.1186%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="34.8686%" y="357" width="0.0295%" height="15" fill="rgb(220,10,11)" fg:x="1181" fg:w="1"/><text x="35.1186%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="34.8686%" y="341" width="0.0295%" height="15" fill="rgb(221,106,17)" fg:x="1181" fg:w="1"/><text x="35.1186%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="34.8686%" y="325" width="0.0295%" height="15" fill="rgb(251,142,44)" fg:x="1181" fg:w="1"/><text x="35.1186%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="34.8686%" y="309" width="0.0295%" height="15" fill="rgb(238,13,15)" fg:x="1181" fg:w="1"/><text x="35.1186%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="34.8686%" y="293" width="0.0295%" height="15" fill="rgb(208,107,27)" fg:x="1181" fg:w="1"/><text x="35.1186%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="34.8686%" y="277" width="0.0295%" height="15" fill="rgb(205,136,37)" fg:x="1181" fg:w="1"/><text x="35.1186%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3 samples, 0.09%)</title><rect x="34.8391%" y="501" width="0.0886%" height="15" fill="rgb(250,205,27)" fg:x="1180" fg:w="3"/><text x="35.0891%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.09%)</title><rect x="34.8391%" y="485" width="0.0886%" height="15" fill="rgb(210,80,43)" fg:x="1180" fg:w="3"/><text x="35.0891%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (3 samples, 0.09%)</title><rect x="34.8391%" y="469" width="0.0886%" height="15" fill="rgb(247,160,36)" fg:x="1180" fg:w="3"/><text x="35.0891%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (3 samples, 0.09%)</title><rect x="34.8391%" y="453" width="0.0886%" height="15" fill="rgb(234,13,49)" fg:x="1180" fg:w="3"/><text x="35.0891%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (1 samples, 0.03%)</title><rect x="34.8981%" y="437" width="0.0295%" height="15" fill="rgb(234,122,0)" fg:x="1182" fg:w="1"/><text x="35.1481%" y="447.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (1 samples, 0.03%)</title><rect x="34.8981%" y="421" width="0.0295%" height="15" fill="rgb(207,146,38)" fg:x="1182" fg:w="1"/><text x="35.1481%" y="431.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="34.8981%" y="405" width="0.0295%" height="15" fill="rgb(207,177,25)" fg:x="1182" fg:w="1"/><text x="35.1481%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="34.8981%" y="389" width="0.0295%" height="15" fill="rgb(211,178,42)" fg:x="1182" fg:w="1"/><text x="35.1481%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.03%)</title><rect x="34.8981%" y="373" width="0.0295%" height="15" fill="rgb(230,69,54)" fg:x="1182" fg:w="1"/><text x="35.1481%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.03%)</title><rect x="34.8981%" y="357" width="0.0295%" height="15" fill="rgb(214,135,41)" fg:x="1182" fg:w="1"/><text x="35.1481%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.03%)</title><rect x="34.8981%" y="341" width="0.0295%" height="15" fill="rgb(237,67,25)" fg:x="1182" fg:w="1"/><text x="35.1481%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.03%)</title><rect x="34.8981%" y="325" width="0.0295%" height="15" fill="rgb(222,189,50)" fg:x="1182" fg:w="1"/><text x="35.1481%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1 samples, 0.03%)</title><rect x="34.8981%" y="309" width="0.0295%" height="15" fill="rgb(245,148,34)" fg:x="1182" fg:w="1"/><text x="35.1481%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1 samples, 0.03%)</title><rect x="34.8981%" y="293" width="0.0295%" height="15" fill="rgb(222,29,6)" fg:x="1182" fg:w="1"/><text x="35.1481%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="34.8981%" y="277" width="0.0295%" height="15" fill="rgb(221,189,43)" fg:x="1182" fg:w="1"/><text x="35.1481%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="34.8981%" y="261" width="0.0295%" height="15" fill="rgb(207,36,27)" fg:x="1182" fg:w="1"/><text x="35.1481%" y="271.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (5 samples, 0.15%)</title><rect x="34.8096%" y="549" width="0.1476%" height="15" fill="rgb(217,90,24)" fg:x="1179" fg:w="5"/><text x="35.0596%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.15%)</title><rect x="34.8096%" y="533" width="0.1476%" height="15" fill="rgb(224,66,35)" fg:x="1179" fg:w="5"/><text x="35.0596%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (4 samples, 0.12%)</title><rect x="34.8391%" y="517" width="0.1181%" height="15" fill="rgb(221,13,50)" fg:x="1180" fg:w="4"/><text x="35.0891%" y="527.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (1 samples, 0.03%)</title><rect x="34.9277%" y="501" width="0.0295%" height="15" fill="rgb(236,68,49)" fg:x="1183" fg:w="1"/><text x="35.1777%" y="511.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="34.9277%" y="485" width="0.0295%" height="15" fill="rgb(229,146,28)" fg:x="1183" fg:w="1"/><text x="35.1777%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="35.0458%" y="517" width="0.0295%" height="15" fill="rgb(225,31,38)" fg:x="1187" fg:w="1"/><text x="35.2958%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="35.1343%" y="485" width="0.0295%" height="15" fill="rgb(250,208,3)" fg:x="1190" fg:w="1"/><text x="35.3843%" y="495.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (1 samples, 0.03%)</title><rect x="35.1343%" y="469" width="0.0295%" height="15" fill="rgb(246,54,23)" fg:x="1190" fg:w="1"/><text x="35.3843%" y="479.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.03%)</title><rect x="35.1343%" y="453" width="0.0295%" height="15" fill="rgb(243,76,11)" fg:x="1190" fg:w="1"/><text x="35.3843%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.03%)</title><rect x="35.1343%" y="437" width="0.0295%" height="15" fill="rgb(245,21,50)" fg:x="1190" fg:w="1"/><text x="35.3843%" y="447.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="35.1343%" y="421" width="0.0295%" height="15" fill="rgb(228,9,43)" fg:x="1190" fg:w="1"/><text x="35.3843%" y="431.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="35.1343%" y="405" width="0.0295%" height="15" fill="rgb(208,100,47)" fg:x="1190" fg:w="1"/><text x="35.3843%" y="415.50"></text></g><g><title>yt_history::model::Models::find_or_create_video (260 samples, 7.68%)</title><rect x="30.3809%" y="581" width="7.6764%" height="15" fill="rgb(232,26,8)" fg:x="1029" fg:w="260"/><text x="30.6309%" y="591.50">yt_history:..</text></g><g><title>yt_history::model::Models::insert_video (113 samples, 3.34%)</title><rect x="34.7210%" y="565" width="3.3363%" height="15" fill="rgb(216,166,38)" fg:x="1176" fg:w="113"/><text x="34.9710%" y="575.50">yt_..</text></g><g><title>yt_history::model::Models::find_channel (105 samples, 3.10%)</title><rect x="34.9572%" y="549" width="3.1001%" height="15" fill="rgb(251,202,51)" fg:x="1184" fg:w="105"/><text x="35.2072%" y="559.50">yt_..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (105 samples, 3.10%)</title><rect x="34.9572%" y="533" width="3.1001%" height="15" fill="rgb(254,216,34)" fg:x="1184" fg:w="105"/><text x="35.2072%" y="543.50">&lt;co..</text></g><g><title>yt_history::model::Models::find_channel::{{closure}} (101 samples, 2.98%)</title><rect x="35.0753%" y="517" width="2.9820%" height="15" fill="rgb(251,32,27)" fg:x="1188" fg:w="101"/><text x="35.3253%" y="527.50">yt_..</text></g><g><title>yt_history::model::WhereChannel::matches (100 samples, 2.95%)</title><rect x="35.1048%" y="501" width="2.9525%" height="15" fill="rgb(208,127,28)" fg:x="1189" fg:w="100"/><text x="35.3548%" y="511.50">yt_..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (98 samples, 2.89%)</title><rect x="35.1639%" y="485" width="2.8934%" height="15" fill="rgb(224,137,22)" fg:x="1191" fg:w="98"/><text x="35.4139%" y="495.50">co..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::cmp::PartialEq&gt;::eq (98 samples, 2.89%)</title><rect x="35.1639%" y="469" width="2.8934%" height="15" fill="rgb(254,70,32)" fg:x="1191" fg:w="98"/><text x="35.4139%" y="479.50">&lt;a..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as alloc::rc::RcEqIdent&lt;T&gt;&gt;::eq (98 samples, 2.89%)</title><rect x="35.1639%" y="453" width="2.8934%" height="15" fill="rgb(229,75,37)" fg:x="1191" fg:w="98"/><text x="35.4139%" y="463.50">&lt;a..</text></g><g><title>&lt;yt_history::model::Channel as core::cmp::PartialEq&gt;::eq (98 samples, 2.89%)</title><rect x="35.1639%" y="437" width="2.8934%" height="15" fill="rgb(252,64,23)" fg:x="1191" fg:w="98"/><text x="35.4139%" y="447.50">&lt;y..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (94 samples, 2.78%)</title><rect x="35.2820%" y="421" width="2.7753%" height="15" fill="rgb(232,162,48)" fg:x="1195" fg:w="94"/><text x="35.5320%" y="431.50">&lt;a..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (94 samples, 2.78%)</title><rect x="35.2820%" y="405" width="2.7753%" height="15" fill="rgb(246,160,12)" fg:x="1195" fg:w="94"/><text x="35.5320%" y="415.50">co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (94 samples, 2.78%)</title><rect x="35.2820%" y="389" width="2.7753%" height="15" fill="rgb(247,166,0)" fg:x="1195" fg:w="94"/><text x="35.5320%" y="399.50">co..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (94 samples, 2.78%)</title><rect x="35.2820%" y="373" width="2.7753%" height="15" fill="rgb(249,219,21)" fg:x="1195" fg:w="94"/><text x="35.5320%" y="383.50">co..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (94 samples, 2.78%)</title><rect x="35.2820%" y="357" width="2.7753%" height="15" fill="rgb(205,209,3)" fg:x="1195" fg:w="94"/><text x="35.5320%" y="367.50">&lt;[..</text></g><g><title>[libc.so.6] (92 samples, 2.72%)</title><rect x="35.3410%" y="341" width="2.7163%" height="15" fill="rgb(243,44,1)" fg:x="1197" fg:w="92"/><text x="35.5910%" y="351.50">[l..</text></g><g><title>yt_history::model::Models::insert_watched (2 samples, 0.06%)</title><rect x="38.0573%" y="581" width="0.0590%" height="15" fill="rgb(206,159,16)" fg:x="1289" fg:w="2"/><text x="38.3073%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="38.0868%" y="565" width="0.0295%" height="15" fill="rgb(244,77,30)" fg:x="1290" fg:w="1"/><text x="38.3368%" y="575.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="38.0868%" y="549" width="0.0295%" height="15" fill="rgb(218,69,12)" fg:x="1290" fg:w="1"/><text x="38.3368%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.0868%" y="533" width="0.0295%" height="15" fill="rgb(212,87,7)" fg:x="1290" fg:w="1"/><text x="38.3368%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.0868%" y="517" width="0.0295%" height="15" fill="rgb(245,114,25)" fg:x="1290" fg:w="1"/><text x="38.3368%" y="527.50"></text></g><g><title>__rdl_alloc (2 samples, 0.06%)</title><rect x="38.2049%" y="341" width="0.0590%" height="15" fill="rgb(210,61,42)" fg:x="1294" fg:w="2"/><text x="38.4549%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="38.2344%" y="325" width="0.0295%" height="15" fill="rgb(211,52,33)" fg:x="1295" fg:w="1"/><text x="38.4844%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (15 samples, 0.44%)</title><rect x="38.1754%" y="549" width="0.4429%" height="15" fill="rgb(234,58,33)" fg:x="1293" fg:w="15"/><text x="38.4254%" y="559.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (15 samples, 0.44%)</title><rect x="38.1754%" y="533" width="0.4429%" height="15" fill="rgb(220,115,36)" fg:x="1293" fg:w="15"/><text x="38.4254%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (15 samples, 0.44%)</title><rect x="38.1754%" y="517" width="0.4429%" height="15" fill="rgb(243,153,54)" fg:x="1293" fg:w="15"/><text x="38.4254%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (15 samples, 0.44%)</title><rect x="38.1754%" y="501" width="0.4429%" height="15" fill="rgb(251,47,18)" fg:x="1293" fg:w="15"/><text x="38.4254%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.44%)</title><rect x="38.1754%" y="485" width="0.4429%" height="15" fill="rgb(242,102,42)" fg:x="1293" fg:w="15"/><text x="38.4254%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.44%)</title><rect x="38.1754%" y="469" width="0.4429%" height="15" fill="rgb(234,31,38)" fg:x="1293" fg:w="15"/><text x="38.4254%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.44%)</title><rect x="38.1754%" y="453" width="0.4429%" height="15" fill="rgb(221,117,51)" fg:x="1293" fg:w="15"/><text x="38.4254%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15 samples, 0.44%)</title><rect x="38.1754%" y="437" width="0.4429%" height="15" fill="rgb(212,20,18)" fg:x="1293" fg:w="15"/><text x="38.4254%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15 samples, 0.44%)</title><rect x="38.1754%" y="421" width="0.4429%" height="15" fill="rgb(245,133,36)" fg:x="1293" fg:w="15"/><text x="38.4254%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.44%)</title><rect x="38.1754%" y="405" width="0.4429%" height="15" fill="rgb(212,6,19)" fg:x="1293" fg:w="15"/><text x="38.4254%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.41%)</title><rect x="38.2049%" y="389" width="0.4133%" height="15" fill="rgb(218,1,36)" fg:x="1294" fg:w="14"/><text x="38.4549%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.41%)</title><rect x="38.2049%" y="373" width="0.4133%" height="15" fill="rgb(246,84,54)" fg:x="1294" fg:w="14"/><text x="38.4549%" y="383.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.41%)</title><rect x="38.2049%" y="357" width="0.4133%" height="15" fill="rgb(242,110,6)" fg:x="1294" fg:w="14"/><text x="38.4549%" y="367.50"></text></g><g><title>malloc (12 samples, 0.35%)</title><rect x="38.2640%" y="341" width="0.3543%" height="15" fill="rgb(214,47,5)" fg:x="1296" fg:w="12"/><text x="38.5140%" y="351.50"></text></g><g><title>[libc.so.6] (3 samples, 0.09%)</title><rect x="38.5297%" y="325" width="0.0886%" height="15" fill="rgb(218,159,25)" fg:x="1305" fg:w="3"/><text x="38.7797%" y="335.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="38.6182%" y="309" width="0.0295%" height="15" fill="rgb(215,211,28)" fg:x="1308" fg:w="1"/><text x="38.8682%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="38.6182%" y="293" width="0.0295%" height="15" fill="rgb(238,59,32)" fg:x="1308" fg:w="1"/><text x="38.8682%" y="303.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="38.6478%" y="309" width="0.0295%" height="15" fill="rgb(226,82,3)" fg:x="1309" fg:w="1"/><text x="38.8978%" y="319.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (20 samples, 0.59%)</title><rect x="38.1754%" y="565" width="0.5905%" height="15" fill="rgb(240,164,32)" fg:x="1293" fg:w="20"/><text x="38.4254%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;char&gt;&gt;::from (5 samples, 0.15%)</title><rect x="38.6182%" y="549" width="0.1476%" height="15" fill="rgb(232,46,7)" fg:x="1308" fg:w="5"/><text x="38.8682%" y="559.50"></text></g><g><title>&lt;char as alloc::string::ToString&gt;::to_string (5 samples, 0.15%)</title><rect x="38.6182%" y="533" width="0.1476%" height="15" fill="rgb(229,129,53)" fg:x="1308" fg:w="5"/><text x="38.8682%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;mut str&gt;&gt;::from (5 samples, 0.15%)</title><rect x="38.6182%" y="517" width="0.1476%" height="15" fill="rgb(234,188,29)" fg:x="1308" fg:w="5"/><text x="38.8682%" y="527.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (5 samples, 0.15%)</title><rect x="38.6182%" y="501" width="0.1476%" height="15" fill="rgb(246,141,4)" fg:x="1308" fg:w="5"/><text x="38.8682%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (5 samples, 0.15%)</title><rect x="38.6182%" y="485" width="0.1476%" height="15" fill="rgb(229,23,39)" fg:x="1308" fg:w="5"/><text x="38.8682%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (5 samples, 0.15%)</title><rect x="38.6182%" y="469" width="0.1476%" height="15" fill="rgb(206,12,3)" fg:x="1308" fg:w="5"/><text x="38.8682%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.15%)</title><rect x="38.6182%" y="453" width="0.1476%" height="15" fill="rgb(252,226,20)" fg:x="1308" fg:w="5"/><text x="38.8682%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.15%)</title><rect x="38.6182%" y="437" width="0.1476%" height="15" fill="rgb(216,123,35)" fg:x="1308" fg:w="5"/><text x="38.8682%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.15%)</title><rect x="38.6182%" y="421" width="0.1476%" height="15" fill="rgb(212,68,40)" fg:x="1308" fg:w="5"/><text x="38.8682%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.15%)</title><rect x="38.6182%" y="405" width="0.1476%" height="15" fill="rgb(254,125,32)" fg:x="1308" fg:w="5"/><text x="38.8682%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.15%)</title><rect x="38.6182%" y="389" width="0.1476%" height="15" fill="rgb(253,97,22)" fg:x="1308" fg:w="5"/><text x="38.8682%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.15%)</title><rect x="38.6182%" y="373" width="0.1476%" height="15" fill="rgb(241,101,14)" fg:x="1308" fg:w="5"/><text x="38.8682%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.15%)</title><rect x="38.6182%" y="357" width="0.1476%" height="15" fill="rgb(238,103,29)" fg:x="1308" fg:w="5"/><text x="38.8682%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.15%)</title><rect x="38.6182%" y="341" width="0.1476%" height="15" fill="rgb(233,195,47)" fg:x="1308" fg:w="5"/><text x="38.8682%" y="351.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.15%)</title><rect x="38.6182%" y="325" width="0.1476%" height="15" fill="rgb(246,218,30)" fg:x="1308" fg:w="5"/><text x="38.8682%" y="335.50"></text></g><g><title>malloc (3 samples, 0.09%)</title><rect x="38.6773%" y="309" width="0.0886%" height="15" fill="rgb(219,145,47)" fg:x="1310" fg:w="3"/><text x="38.9273%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="38.7363%" y="293" width="0.0295%" height="15" fill="rgb(243,12,26)" fg:x="1312" fg:w="1"/><text x="38.9863%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.09%)</title><rect x="38.7659%" y="565" width="0.0886%" height="15" fill="rgb(214,87,16)" fg:x="1313" fg:w="3"/><text x="39.0159%" y="575.50"></text></g><g><title>&lt;yt_history::DataRow as core::default::Default&gt;::default (1 samples, 0.03%)</title><rect x="38.8544%" y="565" width="0.0295%" height="15" fill="rgb(208,99,42)" fg:x="1316" fg:w="1"/><text x="39.1044%" y="575.50"></text></g><g><title>&lt;core::str::iter::MatchIndices&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.86%)</title><rect x="38.9725%" y="549" width="0.8562%" height="15" fill="rgb(253,99,2)" fg:x="1320" fg:w="29"/><text x="39.2225%" y="559.50"></text></g><g><title>core::str::iter::MatchIndicesInternal&lt;P&gt;::next (29 samples, 0.86%)</title><rect x="38.9725%" y="533" width="0.8562%" height="15" fill="rgb(220,168,23)" fg:x="1320" fg:w="29"/><text x="39.2225%" y="543.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (29 samples, 0.86%)</title><rect x="38.9725%" y="517" width="0.8562%" height="15" fill="rgb(242,38,24)" fg:x="1320" fg:w="29"/><text x="39.2225%" y="527.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (21 samples, 0.62%)</title><rect x="39.2087%" y="501" width="0.6200%" height="15" fill="rgb(225,182,9)" fg:x="1328" fg:w="21"/><text x="39.4587%" y="511.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_contains (3 samples, 0.09%)</title><rect x="39.7402%" y="485" width="0.0886%" height="15" fill="rgb(243,178,37)" fg:x="1346" fg:w="3"/><text x="39.9902%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="39.8583%" y="405" width="0.0295%" height="15" fill="rgb(232,139,19)" fg:x="1350" fg:w="1"/><text x="40.1083%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="39.8583%" y="389" width="0.0295%" height="15" fill="rgb(225,201,24)" fg:x="1350" fg:w="1"/><text x="40.1083%" y="399.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="39.8583%" y="373" width="0.0295%" height="15" fill="rgb(221,47,46)" fg:x="1350" fg:w="1"/><text x="40.1083%" y="383.50"></text></g><g><title>realloc (1 samples, 0.03%)</title><rect x="39.8583%" y="357" width="0.0295%" height="15" fill="rgb(249,23,13)" fg:x="1350" fg:w="1"/><text x="40.1083%" y="367.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="39.8583%" y="341" width="0.0295%" height="15" fill="rgb(219,9,5)" fg:x="1350" fg:w="1"/><text x="40.1083%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="39.8583%" y="325" width="0.0295%" height="15" fill="rgb(254,171,16)" fg:x="1350" fg:w="1"/><text x="40.1083%" y="335.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="39.8878%" y="405" width="0.0295%" height="15" fill="rgb(230,171,20)" fg:x="1351" fg:w="1"/><text x="40.1378%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.21%)</title><rect x="39.8288%" y="421" width="0.2067%" height="15" fill="rgb(210,71,41)" fg:x="1349" fg:w="7"/><text x="40.0788%" y="431.50"></text></g><g><title>malloc (4 samples, 0.12%)</title><rect x="39.9173%" y="405" width="0.1181%" height="15" fill="rgb(206,173,20)" fg:x="1352" fg:w="4"/><text x="40.1673%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (8 samples, 0.24%)</title><rect x="39.8288%" y="485" width="0.2362%" height="15" fill="rgb(233,88,34)" fg:x="1349" fg:w="8"/><text x="40.0788%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.24%)</title><rect x="39.8288%" y="469" width="0.2362%" height="15" fill="rgb(223,209,46)" fg:x="1349" fg:w="8"/><text x="40.0788%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.24%)</title><rect x="39.8288%" y="453" width="0.2362%" height="15" fill="rgb(250,43,18)" fg:x="1349" fg:w="8"/><text x="40.0788%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (8 samples, 0.24%)</title><rect x="39.8288%" y="437" width="0.2362%" height="15" fill="rgb(208,13,10)" fg:x="1349" fg:w="8"/><text x="40.0788%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.03%)</title><rect x="40.0354%" y="421" width="0.0295%" height="15" fill="rgb(212,200,36)" fg:x="1356" fg:w="1"/><text x="40.2854%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.03%)</title><rect x="40.0354%" y="405" width="0.0295%" height="15" fill="rgb(225,90,30)" fg:x="1356" fg:w="1"/><text x="40.2854%" y="415.50"></text></g><g><title>alloc::string::String::push_str (9 samples, 0.27%)</title><rect x="39.8288%" y="549" width="0.2657%" height="15" fill="rgb(236,182,39)" fg:x="1349" fg:w="9"/><text x="40.0788%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (9 samples, 0.27%)</title><rect x="39.8288%" y="533" width="0.2657%" height="15" fill="rgb(212,144,35)" fg:x="1349" fg:w="9"/><text x="40.0788%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.27%)</title><rect x="39.8288%" y="517" width="0.2657%" height="15" fill="rgb(228,63,44)" fg:x="1349" fg:w="9"/><text x="40.0788%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (9 samples, 0.27%)</title><rect x="39.8288%" y="501" width="0.2657%" height="15" fill="rgb(228,109,6)" fg:x="1349" fg:w="9"/><text x="40.0788%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="40.0650%" y="485" width="0.0295%" height="15" fill="rgb(238,117,24)" fg:x="1357" fg:w="1"/><text x="40.3150%" y="495.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="40.0650%" y="469" width="0.0295%" height="15" fill="rgb(242,26,26)" fg:x="1357" fg:w="1"/><text x="40.3150%" y="479.50"></text></g><g><title>core::str::pattern::StrSearcher::new (3 samples, 0.09%)</title><rect x="40.2716%" y="501" width="0.0886%" height="15" fill="rgb(221,92,48)" fg:x="1364" fg:w="3"/><text x="40.5216%" y="511.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3 samples, 0.09%)</title><rect x="40.3602%" y="485" width="0.0886%" height="15" fill="rgb(209,209,32)" fg:x="1367" fg:w="3"/><text x="40.6102%" y="495.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3 samples, 0.09%)</title><rect x="40.3602%" y="469" width="0.0886%" height="15" fill="rgb(221,70,22)" fg:x="1367" fg:w="3"/><text x="40.6102%" y="479.50"></text></g><g><title>[libc.so.6] (3 samples, 0.09%)</title><rect x="40.3602%" y="453" width="0.0886%" height="15" fill="rgb(248,145,5)" fg:x="1367" fg:w="3"/><text x="40.6102%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="40.4488%" y="485" width="0.0295%" height="15" fill="rgb(226,116,26)" fg:x="1370" fg:w="1"/><text x="40.6988%" y="495.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.03%)</title><rect x="40.4488%" y="469" width="0.0295%" height="15" fill="rgb(244,5,17)" fg:x="1370" fg:w="1"/><text x="40.6988%" y="479.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create (1 samples, 0.03%)</title><rect x="40.4783%" y="485" width="0.0295%" height="15" fill="rgb(252,159,33)" fg:x="1371" fg:w="1"/><text x="40.7283%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.03%)</title><rect x="40.4783%" y="469" width="0.0295%" height="15" fill="rgb(206,71,0)" fg:x="1371" fg:w="1"/><text x="40.7283%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="40.4783%" y="453" width="0.0295%" height="15" fill="rgb(233,118,54)" fg:x="1371" fg:w="1"/><text x="40.7283%" y="463.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::replace (56 samples, 1.65%)</title><rect x="38.8840%" y="565" width="1.6534%" height="15" fill="rgb(234,83,48)" fg:x="1317" fg:w="56"/><text x="39.1340%" y="575.50"></text></g><g><title>core::str::&lt;impl str&gt;::match_indices (15 samples, 0.44%)</title><rect x="40.0945%" y="549" width="0.4429%" height="15" fill="rgb(228,3,54)" fg:x="1358" fg:w="15"/><text x="40.3445%" y="559.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (15 samples, 0.44%)</title><rect x="40.0945%" y="533" width="0.4429%" height="15" fill="rgb(226,155,13)" fg:x="1358" fg:w="15"/><text x="40.3445%" y="543.50"></text></g><g><title>core::str::pattern::StrSearcher::new (15 samples, 0.44%)</title><rect x="40.0945%" y="517" width="0.4429%" height="15" fill="rgb(241,28,37)" fg:x="1358" fg:w="15"/><text x="40.3445%" y="527.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (6 samples, 0.18%)</title><rect x="40.3602%" y="501" width="0.1771%" height="15" fill="rgb(233,93,10)" fg:x="1367" fg:w="6"/><text x="40.6102%" y="511.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::reverse_maximal_suffix (1 samples, 0.03%)</title><rect x="40.5078%" y="485" width="0.0295%" height="15" fill="rgb(225,113,19)" fg:x="1372" fg:w="1"/><text x="40.7578%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 0.09%)</title><rect x="40.5373%" y="565" width="0.0886%" height="15" fill="rgb(241,2,18)" fg:x="1373" fg:w="3"/><text x="40.7873%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.09%)</title><rect x="40.5373%" y="549" width="0.0886%" height="15" fill="rgb(228,207,21)" fg:x="1373" fg:w="3"/><text x="40.7873%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.09%)</title><rect x="40.5373%" y="533" width="0.0886%" height="15" fill="rgb(213,211,35)" fg:x="1373" fg:w="3"/><text x="40.7873%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.09%)</title><rect x="40.5373%" y="517" width="0.0886%" height="15" fill="rgb(209,83,10)" fg:x="1373" fg:w="3"/><text x="40.7873%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.09%)</title><rect x="40.5373%" y="501" width="0.0886%" height="15" fill="rgb(209,164,1)" fg:x="1373" fg:w="3"/><text x="40.7873%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.09%)</title><rect x="40.5373%" y="485" width="0.0886%" height="15" fill="rgb(213,184,43)" fg:x="1373" fg:w="3"/><text x="40.7873%" y="495.50"></text></g><g><title>cfree (3 samples, 0.09%)</title><rect x="40.5373%" y="469" width="0.0886%" height="15" fill="rgb(231,61,34)" fg:x="1373" fg:w="3"/><text x="40.7873%" y="479.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="40.5964%" y="453" width="0.0295%" height="15" fill="rgb(235,75,3)" fg:x="1375" fg:w="1"/><text x="40.8464%" y="463.50"></text></g><g><title>yt_history::peek (4 samples, 0.12%)</title><rect x="40.6259%" y="565" width="0.1181%" height="15" fill="rgb(220,106,47)" fg:x="1376" fg:w="4"/><text x="40.8759%" y="575.50"></text></g><g><title>yt_history::iter_index (4 samples, 0.12%)</title><rect x="40.6259%" y="549" width="0.1181%" height="15" fill="rgb(210,196,33)" fg:x="1376" fg:w="4"/><text x="40.8759%" y="559.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (4 samples, 0.12%)</title><rect x="40.6259%" y="533" width="0.1181%" height="15" fill="rgb(229,154,42)" fg:x="1376" fg:w="4"/><text x="40.8759%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (4 samples, 0.12%)</title><rect x="40.6259%" y="517" width="0.1181%" height="15" fill="rgb(228,114,26)" fg:x="1376" fg:w="4"/><text x="40.8759%" y="527.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (1 samples, 0.03%)</title><rect x="40.7145%" y="501" width="0.0295%" height="15" fill="rgb(208,144,1)" fg:x="1379" fg:w="1"/><text x="40.9645%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="40.7145%" y="485" width="0.0295%" height="15" fill="rgb(239,112,37)" fg:x="1379" fg:w="1"/><text x="40.9645%" y="495.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="40.7145%" y="469" width="0.0295%" height="15" fill="rgb(210,96,50)" fg:x="1379" fg:w="1"/><text x="40.9645%" y="479.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (38 samples, 1.12%)</title><rect x="42.2498%" y="501" width="1.1219%" height="15" fill="rgb(222,178,2)" fg:x="1431" fg:w="38"/><text x="42.4998%" y="511.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (8 samples, 0.24%)</title><rect x="46.6490%" y="469" width="0.2362%" height="15" fill="rgb(226,74,18)" fg:x="1580" fg:w="8"/><text x="46.8990%" y="479.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (8 samples, 0.24%)</title><rect x="46.6490%" y="453" width="0.2362%" height="15" fill="rgb(225,67,54)" fg:x="1580" fg:w="8"/><text x="46.8990%" y="463.50"></text></g><g><title>core::cmp::min (5 samples, 0.15%)</title><rect x="46.7375%" y="437" width="0.1476%" height="15" fill="rgb(251,92,32)" fg:x="1583" fg:w="5"/><text x="46.9875%" y="447.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (5 samples, 0.15%)</title><rect x="46.7375%" y="421" width="0.1476%" height="15" fill="rgb(228,149,22)" fg:x="1583" fg:w="5"/><text x="46.9875%" y="431.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (5 samples, 0.15%)</title><rect x="46.8851%" y="469" width="0.1476%" height="15" fill="rgb(243,54,13)" fg:x="1588" fg:w="5"/><text x="47.1351%" y="479.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (5 samples, 0.15%)</title><rect x="46.8851%" y="453" width="0.1476%" height="15" fill="rgb(243,180,28)" fg:x="1588" fg:w="5"/><text x="47.1351%" y="463.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (3 samples, 0.09%)</title><rect x="46.9442%" y="437" width="0.0886%" height="15" fill="rgb(208,167,24)" fg:x="1590" fg:w="3"/><text x="47.1942%" y="447.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (3 samples, 0.09%)</title><rect x="46.9442%" y="421" width="0.0886%" height="15" fill="rgb(245,73,45)" fg:x="1590" fg:w="3"/><text x="47.1942%" y="431.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (3 samples, 0.09%)</title><rect x="46.9442%" y="405" width="0.0886%" height="15" fill="rgb(237,203,48)" fg:x="1590" fg:w="3"/><text x="47.1942%" y="415.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (3 samples, 0.09%)</title><rect x="46.9442%" y="389" width="0.0886%" height="15" fill="rgb(211,197,16)" fg:x="1590" fg:w="3"/><text x="47.1942%" y="399.50"></text></g><g><title>read (3 samples, 0.09%)</title><rect x="46.9442%" y="373" width="0.0886%" height="15" fill="rgb(243,99,51)" fg:x="1590" fg:w="3"/><text x="47.1942%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.09%)</title><rect x="46.9442%" y="357" width="0.0886%" height="15" fill="rgb(215,123,29)" fg:x="1590" fg:w="3"/><text x="47.1942%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.09%)</title><rect x="46.9442%" y="341" width="0.0886%" height="15" fill="rgb(239,186,37)" fg:x="1590" fg:w="3"/><text x="47.1942%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.09%)</title><rect x="46.9442%" y="325" width="0.0886%" height="15" fill="rgb(252,136,39)" fg:x="1590" fg:w="3"/><text x="47.1942%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.09%)</title><rect x="46.9442%" y="309" width="0.0886%" height="15" fill="rgb(223,213,32)" fg:x="1590" fg:w="3"/><text x="47.1942%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.09%)</title><rect x="46.9442%" y="293" width="0.0886%" height="15" fill="rgb(233,115,5)" fg:x="1590" fg:w="3"/><text x="47.1942%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.09%)</title><rect x="46.9442%" y="277" width="0.0886%" height="15" fill="rgb(207,226,44)" fg:x="1590" fg:w="3"/><text x="47.1942%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.09%)</title><rect x="46.9442%" y="261" width="0.0886%" height="15" fill="rgb(208,126,0)" fg:x="1590" fg:w="3"/><text x="47.1942%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.09%)</title><rect x="46.9442%" y="245" width="0.0886%" height="15" fill="rgb(244,66,21)" fg:x="1590" fg:w="3"/><text x="47.1942%" y="255.50"></text></g><g><title>[unknown] (3 samples, 0.09%)</title><rect x="46.9442%" y="229" width="0.0886%" height="15" fill="rgb(222,97,12)" fg:x="1590" fg:w="3"/><text x="47.1942%" y="239.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::filled (3 samples, 0.09%)</title><rect x="47.0328%" y="469" width="0.0886%" height="15" fill="rgb(219,213,19)" fg:x="1593" fg:w="3"/><text x="47.2828%" y="479.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::pos (6 samples, 0.18%)</title><rect x="47.1213%" y="469" width="0.1771%" height="15" fill="rgb(252,169,30)" fg:x="1596" fg:w="6"/><text x="47.3713%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (188 samples, 5.55%)</title><rect x="42.0136%" y="517" width="5.5506%" height="15" fill="rgb(206,32,51)" fg:x="1423" fg:w="188"/><text x="42.2636%" y="527.50">&lt;core::..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (142 samples, 4.19%)</title><rect x="43.3717%" y="501" width="4.1925%" height="15" fill="rgb(250,172,42)" fg:x="1469" fg:w="142"/><text x="43.6217%" y="511.50">&lt;std:..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (73 samples, 2.16%)</title><rect x="45.4089%" y="485" width="2.1553%" height="15" fill="rgb(209,34,43)" fg:x="1538" fg:w="73"/><text x="45.6589%" y="495.50">&lt;..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (9 samples, 0.27%)</title><rect x="47.2985%" y="469" width="0.2657%" height="15" fill="rgb(223,11,35)" fg:x="1602" fg:w="9"/><text x="47.5485%" y="479.50"></text></g><g><title>core::cmp::min (1 samples, 0.03%)</title><rect x="47.5347%" y="453" width="0.0295%" height="15" fill="rgb(251,219,26)" fg:x="1610" fg:w="1"/><text x="47.7847%" y="463.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.03%)</title><rect x="47.5347%" y="437" width="0.0295%" height="15" fill="rgb(231,119,3)" fg:x="1610" fg:w="1"/><text x="47.7847%" y="447.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (189 samples, 5.58%)</title><rect x="42.0136%" y="549" width="5.5802%" height="15" fill="rgb(216,97,11)" fg:x="1423" fg:w="189"/><text x="42.2636%" y="559.50">&lt;&amp;mut I..</text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (189 samples, 5.58%)</title><rect x="42.0136%" y="533" width="5.5802%" height="15" fill="rgb(223,59,9)" fg:x="1423" fg:w="189"/><text x="42.2636%" y="543.50">&lt;core::..</text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.03%)</title><rect x="47.5642%" y="517" width="0.0295%" height="15" fill="rgb(233,93,31)" fg:x="1611" fg:w="1"/><text x="47.8142%" y="527.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="47.5642%" y="501" width="0.0295%" height="15" fill="rgb(239,81,33)" fg:x="1611" fg:w="1"/><text x="47.8142%" y="511.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="47.5642%" y="485" width="0.0295%" height="15" fill="rgb(213,120,34)" fg:x="1611" fg:w="1"/><text x="47.8142%" y="495.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.03%)</title><rect x="47.5642%" y="469" width="0.0295%" height="15" fill="rgb(243,49,53)" fg:x="1611" fg:w="1"/><text x="47.8142%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (2 samples, 0.06%)</title><rect x="47.5937%" y="549" width="0.0590%" height="15" fill="rgb(247,216,33)" fg:x="1612" fg:w="2"/><text x="47.8437%" y="559.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (10 samples, 0.30%)</title><rect x="47.6528%" y="549" width="0.2952%" height="15" fill="rgb(226,26,14)" fg:x="1614" fg:w="10"/><text x="47.9028%" y="559.50"></text></g><g><title>&lt;core::str::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::nth (8 samples, 0.24%)</title><rect x="47.9480%" y="549" width="0.2362%" height="15" fill="rgb(215,49,53)" fg:x="1624" fg:w="8"/><text x="48.1980%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::nth (8 samples, 0.24%)</title><rect x="47.9480%" y="533" width="0.2362%" height="15" fill="rgb(245,162,40)" fg:x="1624" fg:w="8"/><text x="48.1980%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::nth (8 samples, 0.24%)</title><rect x="47.9480%" y="517" width="0.2362%" height="15" fill="rgb(229,68,17)" fg:x="1624" fg:w="8"/><text x="48.1980%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="48.1842%" y="533" width="0.0295%" height="15" fill="rgb(213,182,10)" fg:x="1632" fg:w="1"/><text x="48.4342%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="48.1842%" y="517" width="0.0295%" height="15" fill="rgb(245,125,30)" fg:x="1632" fg:w="1"/><text x="48.4342%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="48.1842%" y="501" width="0.0295%" height="15" fill="rgb(232,202,2)" fg:x="1632" fg:w="1"/><text x="48.4342%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="48.1842%" y="485" width="0.0295%" height="15" fill="rgb(237,140,51)" fg:x="1632" fg:w="1"/><text x="48.4342%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 0.18%)</title><rect x="48.7747%" y="485" width="0.1771%" height="15" fill="rgb(236,157,25)" fg:x="1652" fg:w="6"/><text x="49.0247%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (2 samples, 0.06%)</title><rect x="48.9519%" y="485" width="0.0590%" height="15" fill="rgb(219,209,0)" fg:x="1658" fg:w="2"/><text x="49.2019%" y="495.50"></text></g><g><title>__rdl_realloc (4 samples, 0.12%)</title><rect x="49.1585%" y="421" width="0.1181%" height="15" fill="rgb(240,116,54)" fg:x="1665" fg:w="4"/><text x="49.4085%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.09%)</title><rect x="49.1881%" y="405" width="0.0886%" height="15" fill="rgb(216,10,36)" fg:x="1666" fg:w="3"/><text x="49.4381%" y="415.50"></text></g><g><title>__rust_realloc (1 samples, 0.03%)</title><rect x="49.2766%" y="421" width="0.0295%" height="15" fill="rgb(222,72,44)" fg:x="1669" fg:w="1"/><text x="49.5266%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (37 samples, 1.09%)</title><rect x="49.1290%" y="469" width="1.0924%" height="15" fill="rgb(232,159,9)" fg:x="1664" fg:w="37"/><text x="49.3790%" y="479.50"></text></g><g><title>alloc::alloc::Global::grow_impl (37 samples, 1.09%)</title><rect x="49.1290%" y="453" width="1.0924%" height="15" fill="rgb(210,39,32)" fg:x="1664" fg:w="37"/><text x="49.3790%" y="463.50"></text></g><g><title>alloc::alloc::realloc (37 samples, 1.09%)</title><rect x="49.1290%" y="437" width="1.0924%" height="15" fill="rgb(216,194,45)" fg:x="1664" fg:w="37"/><text x="49.3790%" y="447.50"></text></g><g><title>realloc (31 samples, 0.92%)</title><rect x="49.3062%" y="421" width="0.9153%" height="15" fill="rgb(218,18,35)" fg:x="1670" fg:w="31"/><text x="49.5562%" y="431.50"></text></g><g><title>[libc.so.6] (26 samples, 0.77%)</title><rect x="49.4538%" y="405" width="0.7676%" height="15" fill="rgb(207,83,51)" fg:x="1675" fg:w="26"/><text x="49.7038%" y="415.50"></text></g><g><title>[libc.so.6] (20 samples, 0.59%)</title><rect x="49.6309%" y="389" width="0.5905%" height="15" fill="rgb(225,63,43)" fg:x="1681" fg:w="20"/><text x="49.8809%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3 samples, 0.09%)</title><rect x="50.2214%" y="469" width="0.0886%" height="15" fill="rgb(207,57,36)" fg:x="1701" fg:w="3"/><text x="50.4714%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (45 samples, 1.33%)</title><rect x="49.0109%" y="485" width="1.3286%" height="15" fill="rgb(216,99,33)" fg:x="1660" fg:w="45"/><text x="49.2609%" y="495.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="50.3100%" y="469" width="0.0295%" height="15" fill="rgb(225,42,16)" fg:x="1704" fg:w="1"/><text x="50.5600%" y="479.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.06%)</title><rect x="50.3395%" y="485" width="0.0590%" height="15" fill="rgb(220,201,45)" fg:x="1705" fg:w="2"/><text x="50.5895%" y="495.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (2 samples, 0.06%)</title><rect x="50.3395%" y="469" width="0.0590%" height="15" fill="rgb(225,33,4)" fg:x="1705" fg:w="2"/><text x="50.5895%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (61 samples, 1.80%)</title><rect x="48.6271%" y="517" width="1.8010%" height="15" fill="rgb(224,33,50)" fg:x="1647" fg:w="61"/><text x="48.8771%" y="527.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (60 samples, 1.77%)</title><rect x="48.6566%" y="501" width="1.7715%" height="15" fill="rgb(246,198,51)" fg:x="1648" fg:w="60"/><text x="48.9066%" y="511.50">a..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.03%)</title><rect x="50.3986%" y="485" width="0.0295%" height="15" fill="rgb(205,22,4)" fg:x="1707" fg:w="1"/><text x="50.6486%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.03%)</title><rect x="50.3986%" y="469" width="0.0295%" height="15" fill="rgb(206,3,8)" fg:x="1707" fg:w="1"/><text x="50.6486%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (77 samples, 2.27%)</title><rect x="48.2138%" y="533" width="2.2734%" height="15" fill="rgb(251,23,15)" fg:x="1633" fg:w="77"/><text x="48.4638%" y="543.50">a..</text></g><g><title>core::ptr::write (2 samples, 0.06%)</title><rect x="50.4281%" y="517" width="0.0590%" height="15" fill="rgb(252,88,28)" fg:x="1708" fg:w="2"/><text x="50.6781%" y="527.50"></text></g><g><title>alloc::string::String::push (80 samples, 2.36%)</title><rect x="48.1842%" y="549" width="2.3620%" height="15" fill="rgb(212,127,14)" fg:x="1632" fg:w="80"/><text x="48.4342%" y="559.50">al..</text></g><g><title>core::char::methods::&lt;impl char&gt;::len_utf8 (2 samples, 0.06%)</title><rect x="50.4872%" y="533" width="0.0590%" height="15" fill="rgb(247,145,37)" fg:x="1710" fg:w="2"/><text x="50.7372%" y="543.50"></text></g><g><title>core::char::methods::len_utf8 (2 samples, 0.06%)</title><rect x="50.4872%" y="517" width="0.0590%" height="15" fill="rgb(209,117,53)" fg:x="1710" fg:w="2"/><text x="50.7372%" y="527.50"></text></g><g><title>__rust_dealloc (3 samples, 0.09%)</title><rect x="50.5462%" y="453" width="0.0886%" height="15" fill="rgb(212,90,42)" fg:x="1712" fg:w="3"/><text x="50.7962%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (9 samples, 0.27%)</title><rect x="50.5462%" y="549" width="0.2657%" height="15" fill="rgb(218,164,37)" fg:x="1712" fg:w="9"/><text x="50.7962%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (9 samples, 0.27%)</title><rect x="50.5462%" y="533" width="0.2657%" height="15" fill="rgb(246,65,34)" fg:x="1712" fg:w="9"/><text x="50.7962%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (9 samples, 0.27%)</title><rect x="50.5462%" y="517" width="0.2657%" height="15" fill="rgb(231,100,33)" fg:x="1712" fg:w="9"/><text x="50.7962%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.27%)</title><rect x="50.5462%" y="501" width="0.2657%" height="15" fill="rgb(228,126,14)" fg:x="1712" fg:w="9"/><text x="50.7962%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.27%)</title><rect x="50.5462%" y="485" width="0.2657%" height="15" fill="rgb(215,173,21)" fg:x="1712" fg:w="9"/><text x="50.7962%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.27%)</title><rect x="50.5462%" y="469" width="0.2657%" height="15" fill="rgb(210,6,40)" fg:x="1712" fg:w="9"/><text x="50.7962%" y="479.50"></text></g><g><title>cfree (6 samples, 0.18%)</title><rect x="50.6348%" y="453" width="0.1771%" height="15" fill="rgb(212,48,18)" fg:x="1715" fg:w="6"/><text x="50.8848%" y="463.50"></text></g><g><title>[libc.so.6] (4 samples, 0.12%)</title><rect x="50.6938%" y="437" width="0.1181%" height="15" fill="rgb(230,214,11)" fg:x="1717" fg:w="4"/><text x="50.9438%" y="447.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.21%)</title><rect x="50.9891%" y="469" width="0.2067%" height="15" fill="rgb(254,105,39)" fg:x="1727" fg:w="7"/><text x="51.2391%" y="479.50"></text></g><g><title>yt_history::read_until (361 samples, 10.66%)</title><rect x="40.7440%" y="565" width="10.6584%" height="15" fill="rgb(245,158,5)" fg:x="1380" fg:w="361"/><text x="40.9940%" y="575.50">yt_history::read..</text></g><g><title>yt_history::iter_index (20 samples, 0.59%)</title><rect x="50.8119%" y="549" width="0.5905%" height="15" fill="rgb(249,208,11)" fg:x="1721" fg:w="20"/><text x="51.0619%" y="559.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (20 samples, 0.59%)</title><rect x="50.8119%" y="533" width="0.5905%" height="15" fill="rgb(210,39,28)" fg:x="1721" fg:w="20"/><text x="51.0619%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (20 samples, 0.59%)</title><rect x="50.8119%" y="517" width="0.5905%" height="15" fill="rgb(211,56,53)" fg:x="1721" fg:w="20"/><text x="51.0619%" y="527.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (14 samples, 0.41%)</title><rect x="50.9891%" y="501" width="0.4133%" height="15" fill="rgb(226,201,30)" fg:x="1727" fg:w="14"/><text x="51.2391%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.41%)</title><rect x="50.9891%" y="485" width="0.4133%" height="15" fill="rgb(239,101,34)" fg:x="1727" fg:w="14"/><text x="51.2391%" y="495.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.21%)</title><rect x="51.1957%" y="469" width="0.2067%" height="15" fill="rgb(226,209,5)" fg:x="1734" fg:w="7"/><text x="51.4457%" y="479.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.03%)</title><rect x="51.3729%" y="453" width="0.0295%" height="15" fill="rgb(250,105,47)" fg:x="1740" fg:w="1"/><text x="51.6229%" y="463.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (359 samples, 10.60%)</title><rect x="58.2226%" y="501" width="10.5994%" height="15" fill="rgb(230,72,3)" fg:x="1972" fg:w="359"/><text x="58.4726%" y="511.50">&lt;core::option::..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.12%)</title><rect x="89.4892%" y="469" width="0.1181%" height="15" fill="rgb(232,218,39)" fg:x="3031" fg:w="4"/><text x="89.7392%" y="479.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (47 samples, 1.39%)</title><rect x="89.6073%" y="469" width="1.3877%" height="15" fill="rgb(248,166,6)" fg:x="3035" fg:w="47"/><text x="89.8573%" y="479.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (47 samples, 1.39%)</title><rect x="89.6073%" y="453" width="1.3877%" height="15" fill="rgb(247,89,20)" fg:x="3035" fg:w="47"/><text x="89.8573%" y="463.50"></text></g><g><title>core::cmp::min (39 samples, 1.15%)</title><rect x="89.8435%" y="437" width="1.1515%" height="15" fill="rgb(248,130,54)" fg:x="3043" fg:w="39"/><text x="90.0935%" y="447.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (39 samples, 1.15%)</title><rect x="89.8435%" y="421" width="1.1515%" height="15" fill="rgb(234,196,4)" fg:x="3043" fg:w="39"/><text x="90.0935%" y="431.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (22 samples, 0.65%)</title><rect x="90.9950%" y="469" width="0.6495%" height="15" fill="rgb(250,143,31)" fg:x="3082" fg:w="22"/><text x="91.2450%" y="479.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (22 samples, 0.65%)</title><rect x="90.9950%" y="453" width="0.6495%" height="15" fill="rgb(211,110,34)" fg:x="3082" fg:w="22"/><text x="91.2450%" y="463.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (20 samples, 0.59%)</title><rect x="91.0540%" y="437" width="0.5905%" height="15" fill="rgb(215,124,48)" fg:x="3084" fg:w="20"/><text x="91.3040%" y="447.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (20 samples, 0.59%)</title><rect x="91.0540%" y="421" width="0.5905%" height="15" fill="rgb(216,46,13)" fg:x="3084" fg:w="20"/><text x="91.3040%" y="431.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (20 samples, 0.59%)</title><rect x="91.0540%" y="405" width="0.5905%" height="15" fill="rgb(205,184,25)" fg:x="3084" fg:w="20"/><text x="91.3040%" y="415.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (20 samples, 0.59%)</title><rect x="91.0540%" y="389" width="0.5905%" height="15" fill="rgb(228,1,10)" fg:x="3084" fg:w="20"/><text x="91.3040%" y="399.50"></text></g><g><title>read (20 samples, 0.59%)</title><rect x="91.0540%" y="373" width="0.5905%" height="15" fill="rgb(213,116,27)" fg:x="3084" fg:w="20"/><text x="91.3040%" y="383.50"></text></g><g><title>[unknown] (20 samples, 0.59%)</title><rect x="91.0540%" y="357" width="0.5905%" height="15" fill="rgb(241,95,50)" fg:x="3084" fg:w="20"/><text x="91.3040%" y="367.50"></text></g><g><title>[unknown] (18 samples, 0.53%)</title><rect x="91.1131%" y="341" width="0.5314%" height="15" fill="rgb(238,48,32)" fg:x="3086" fg:w="18"/><text x="91.3631%" y="351.50"></text></g><g><title>[unknown] (18 samples, 0.53%)</title><rect x="91.1131%" y="325" width="0.5314%" height="15" fill="rgb(235,113,49)" fg:x="3086" fg:w="18"/><text x="91.3631%" y="335.50"></text></g><g><title>[unknown] (16 samples, 0.47%)</title><rect x="91.1721%" y="309" width="0.4724%" height="15" fill="rgb(205,127,43)" fg:x="3088" fg:w="16"/><text x="91.4221%" y="319.50"></text></g><g><title>[unknown] (16 samples, 0.47%)</title><rect x="91.1721%" y="293" width="0.4724%" height="15" fill="rgb(250,162,2)" fg:x="3088" fg:w="16"/><text x="91.4221%" y="303.50"></text></g><g><title>[unknown] (16 samples, 0.47%)</title><rect x="91.1721%" y="277" width="0.4724%" height="15" fill="rgb(220,13,41)" fg:x="3088" fg:w="16"/><text x="91.4221%" y="287.50"></text></g><g><title>[unknown] (16 samples, 0.47%)</title><rect x="91.1721%" y="261" width="0.4724%" height="15" fill="rgb(249,221,25)" fg:x="3088" fg:w="16"/><text x="91.4221%" y="271.50"></text></g><g><title>[unknown] (14 samples, 0.41%)</title><rect x="91.2312%" y="245" width="0.4133%" height="15" fill="rgb(215,208,19)" fg:x="3090" fg:w="14"/><text x="91.4812%" y="255.50"></text></g><g><title>[unknown] (8 samples, 0.24%)</title><rect x="91.4083%" y="229" width="0.2362%" height="15" fill="rgb(236,175,2)" fg:x="3096" fg:w="8"/><text x="91.6583%" y="239.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (5 samples, 0.15%)</title><rect x="91.6445%" y="469" width="0.1476%" height="15" fill="rgb(241,52,2)" fg:x="3104" fg:w="5"/><text x="91.8945%" y="479.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::filled (55 samples, 1.62%)</title><rect x="91.7921%" y="469" width="1.6239%" height="15" fill="rgb(248,140,14)" fg:x="3109" fg:w="55"/><text x="92.0421%" y="479.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::pos (5 samples, 0.15%)</title><rect x="93.4160%" y="469" width="0.1476%" height="15" fill="rgb(253,22,42)" fg:x="3164" fg:w="5"/><text x="93.6660%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,404 samples, 41.45%)</title><rect x="55.7130%" y="517" width="41.4526%" height="15" fill="rgb(234,61,47)" fg:x="1887" fg:w="1404"/><text x="55.9630%" y="527.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (960 samples, 28.34%)</title><rect x="68.8220%" y="501" width="28.3437%" height="15" fill="rgb(208,226,15)" fg:x="2331" fg:w="960"/><text x="69.0720%" y="511.50">&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iter..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (432 samples, 12.75%)</title><rect x="84.4110%" y="485" width="12.7547%" height="15" fill="rgb(217,221,4)" fg:x="2859" fg:w="432"/><text x="84.6610%" y="495.50">&lt;std::io::buffered:..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (122 samples, 3.60%)</title><rect x="93.5636%" y="469" width="3.6020%" height="15" fill="rgb(212,174,34)" fg:x="3169" fg:w="122"/><text x="93.8136%" y="479.50">std:..</text></g><g><title>core::cmp::min (61 samples, 1.80%)</title><rect x="95.3646%" y="453" width="1.8010%" height="15" fill="rgb(253,83,4)" fg:x="3230" fg:w="61"/><text x="95.6146%" y="463.50">c..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (61 samples, 1.80%)</title><rect x="95.3646%" y="437" width="1.8010%" height="15" fill="rgb(250,195,49)" fg:x="3230" fg:w="61"/><text x="95.6146%" y="447.50">&lt;..</text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (1,409 samples, 41.60%)</title><rect x="55.6244%" y="549" width="41.6002%" height="15" fill="rgb(241,192,25)" fg:x="1884" fg:w="1409"/><text x="55.8744%" y="559.50">&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,409 samples, 41.60%)</title><rect x="55.6244%" y="533" width="41.6002%" height="15" fill="rgb(208,124,10)" fg:x="1884" fg:w="1409"/><text x="55.8744%" y="543.50">&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::..</text></g><g><title>core::option::Option&lt;T&gt;::take (2 samples, 0.06%)</title><rect x="97.1656%" y="517" width="0.0590%" height="15" fill="rgb(222,33,0)" fg:x="3291" fg:w="2"/><text x="97.4156%" y="527.50"></text></g><g><title>core::mem::replace (2 samples, 0.06%)</title><rect x="97.1656%" y="501" width="0.0590%" height="15" fill="rgb(234,209,28)" fg:x="3291" fg:w="2"/><text x="97.4156%" y="511.50"></text></g><g><title>core::ptr::read (2 samples, 0.06%)</title><rect x="97.1656%" y="485" width="0.0590%" height="15" fill="rgb(224,11,23)" fg:x="3291" fg:w="2"/><text x="97.4156%" y="495.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (2 samples, 0.06%)</title><rect x="97.1656%" y="469" width="0.0590%" height="15" fill="rgb(232,99,1)" fg:x="3291" fg:w="2"/><text x="97.4156%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (59 samples, 1.74%)</title><rect x="97.2247%" y="549" width="1.7420%" height="15" fill="rgb(237,95,45)" fg:x="3293" fg:w="59"/><text x="97.4747%" y="559.50"></text></g><g><title>&lt;core::str::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::nth (8 samples, 0.24%)</title><rect x="98.9666%" y="549" width="0.2362%" height="15" fill="rgb(208,109,11)" fg:x="3352" fg:w="8"/><text x="99.2166%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::nth (8 samples, 0.24%)</title><rect x="98.9666%" y="533" width="0.2362%" height="15" fill="rgb(216,190,48)" fg:x="3352" fg:w="8"/><text x="99.2166%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::nth (8 samples, 0.24%)</title><rect x="98.9666%" y="517" width="0.2362%" height="15" fill="rgb(251,171,36)" fg:x="3352" fg:w="8"/><text x="99.2166%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4 samples, 0.12%)</title><rect x="99.2028%" y="549" width="0.1181%" height="15" fill="rgb(230,62,22)" fg:x="3360" fg:w="4"/><text x="99.4528%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.12%)</title><rect x="99.2028%" y="533" width="0.1181%" height="15" fill="rgb(225,114,35)" fg:x="3360" fg:w="4"/><text x="99.4528%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.12%)</title><rect x="99.2028%" y="517" width="0.1181%" height="15" fill="rgb(215,118,42)" fg:x="3360" fg:w="4"/><text x="99.4528%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.12%)</title><rect x="99.2028%" y="501" width="0.1181%" height="15" fill="rgb(243,119,21)" fg:x="3360" fg:w="4"/><text x="99.4528%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.12%)</title><rect x="99.2028%" y="485" width="0.1181%" height="15" fill="rgb(252,177,53)" fg:x="3360" fg:w="4"/><text x="99.4528%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.12%)</title><rect x="99.2028%" y="469" width="0.1181%" height="15" fill="rgb(237,209,29)" fg:x="3360" fg:w="4"/><text x="99.4528%" y="479.50"></text></g><g><title>cfree (4 samples, 0.12%)</title><rect x="99.2028%" y="453" width="0.1181%" height="15" fill="rgb(212,65,23)" fg:x="3360" fg:w="4"/><text x="99.4528%" y="463.50"></text></g><g><title>[libc.so.6] (2 samples, 0.06%)</title><rect x="99.2619%" y="437" width="0.0590%" height="15" fill="rgb(230,222,46)" fg:x="3362" fg:w="2"/><text x="99.5119%" y="447.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.21%)</title><rect x="99.4095%" y="469" width="0.2067%" height="15" fill="rgb(215,135,32)" fg:x="3367" fg:w="7"/><text x="99.6595%" y="479.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (1 samples, 0.03%)</title><rect x="99.8524%" y="437" width="0.0295%" height="15" fill="rgb(246,101,22)" fg:x="3382" fg:w="1"/><text x="100.1024%" y="447.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (1 samples, 0.03%)</title><rect x="99.8524%" y="421" width="0.0295%" height="15" fill="rgb(206,107,13)" fg:x="3382" fg:w="1"/><text x="100.1024%" y="431.50"></text></g><g><title>std::panic::catch_unwind (3,359 samples, 99.17%)</title><rect x="0.7972%" y="741" width="99.1733%" height="15" fill="rgb(250,100,44)" fg:x="27" fg:w="3359"/><text x="1.0472%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,359 samples, 99.17%)</title><rect x="0.7972%" y="725" width="99.1733%" height="15" fill="rgb(231,147,38)" fg:x="27" fg:w="3359"/><text x="1.0472%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,359 samples, 99.17%)</title><rect x="0.7972%" y="709" width="99.1733%" height="15" fill="rgb(229,8,40)" fg:x="27" fg:w="3359"/><text x="1.0472%" y="719.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3,359 samples, 99.17%)</title><rect x="0.7972%" y="693" width="99.1733%" height="15" fill="rgb(221,135,30)" fg:x="27" fg:w="3359"/><text x="1.0472%" y="703.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (3,359 samples, 99.17%)</title><rect x="0.7972%" y="677" width="99.1733%" height="15" fill="rgb(249,193,18)" fg:x="27" fg:w="3359"/><text x="1.0472%" y="687.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,359 samples, 99.17%)</title><rect x="0.7972%" y="661" width="99.1733%" height="15" fill="rgb(209,133,39)" fg:x="27" fg:w="3359"/><text x="1.0472%" y="671.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (3,359 samples, 99.17%)</title><rect x="0.7972%" y="645" width="99.1733%" height="15" fill="rgb(232,100,14)" fg:x="27" fg:w="3359"/><text x="1.0472%" y="655.50">core::ops::function::FnOnce::call_once</text></g><g><title>yt_history::main (3,359 samples, 99.17%)</title><rect x="0.7972%" y="629" width="99.1733%" height="15" fill="rgb(224,185,1)" fg:x="27" fg:w="3359"/><text x="1.0472%" y="639.50">yt_history::main</text></g><g><title>yt_history::load_models (3,351 samples, 98.94%)</title><rect x="1.0334%" y="613" width="98.9371%" height="15" fill="rgb(223,139,8)" fg:x="35" fg:w="3351"/><text x="1.2834%" y="623.50">yt_history::load_models</text></g><g><title>yt_history::parse (3,351 samples, 98.94%)</title><rect x="1.0334%" y="597" width="98.9371%" height="15" fill="rgb(232,213,38)" fg:x="35" fg:w="3351"/><text x="1.2834%" y="607.50">yt_history::parse</text></g><g><title>yt_history::read_data_row (2,095 samples, 61.85%)</title><rect x="38.1163%" y="581" width="61.8541%" height="15" fill="rgb(207,94,22)" fg:x="1291" fg:w="2095"/><text x="38.3663%" y="591.50">yt_history::read_data_row</text></g><g><title>yt_history::skip_to (1,645 samples, 48.57%)</title><rect x="51.4024%" y="565" width="48.5681%" height="15" fill="rgb(219,183,54)" fg:x="1741" fg:w="1645"/><text x="51.6524%" y="575.50">yt_history::skip_to</text></g><g><title>yt_history::iter_index (22 samples, 0.65%)</title><rect x="99.3209%" y="549" width="0.6495%" height="15" fill="rgb(216,185,54)" fg:x="3364" fg:w="22"/><text x="99.5709%" y="559.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (22 samples, 0.65%)</title><rect x="99.3209%" y="533" width="0.6495%" height="15" fill="rgb(254,217,39)" fg:x="3364" fg:w="22"/><text x="99.5709%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (22 samples, 0.65%)</title><rect x="99.3209%" y="517" width="0.6495%" height="15" fill="rgb(240,178,23)" fg:x="3364" fg:w="22"/><text x="99.5709%" y="527.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (19 samples, 0.56%)</title><rect x="99.4095%" y="501" width="0.5610%" height="15" fill="rgb(218,11,47)" fg:x="3367" fg:w="19"/><text x="99.6595%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.56%)</title><rect x="99.4095%" y="485" width="0.5610%" height="15" fill="rgb(218,51,51)" fg:x="3367" fg:w="19"/><text x="99.6595%" y="495.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.35%)</title><rect x="99.6162%" y="469" width="0.3543%" height="15" fill="rgb(238,126,27)" fg:x="3374" fg:w="12"/><text x="99.8662%" y="479.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (6 samples, 0.18%)</title><rect x="99.7933%" y="453" width="0.1771%" height="15" fill="rgb(249,202,22)" fg:x="3380" fg:w="6"/><text x="100.0433%" y="463.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (3 samples, 0.09%)</title><rect x="99.8819%" y="437" width="0.0886%" height="15" fill="rgb(254,195,49)" fg:x="3383" fg:w="3"/><text x="100.1319%" y="447.50"></text></g><g><title>core::cmp::min (1 samples, 0.03%)</title><rect x="99.9410%" y="421" width="0.0295%" height="15" fill="rgb(208,123,14)" fg:x="3385" fg:w="1"/><text x="100.1910%" y="431.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.03%)</title><rect x="99.9410%" y="405" width="0.0295%" height="15" fill="rgb(224,200,8)" fg:x="3385" fg:w="1"/><text x="100.1910%" y="415.50"></text></g><g><title>all (3,387 samples, 100%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(217,61,36)" fg:x="0" fg:w="3387"/><text x="0.2500%" y="927.50"></text></g><g><title>yt-history (3,387 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(206,35,45)" fg:x="0" fg:w="3387"/><text x="0.2500%" y="911.50">yt-history</text></g><g><title>_start (3,360 samples, 99.20%)</title><rect x="0.7972%" y="885" width="99.2028%" height="15" fill="rgb(217,65,33)" fg:x="27" fg:w="3360"/><text x="1.0472%" y="895.50">_start</text></g><g><title>__libc_start_main (3,360 samples, 99.20%)</title><rect x="0.7972%" y="869" width="99.2028%" height="15" fill="rgb(222,158,48)" fg:x="27" fg:w="3360"/><text x="1.0472%" y="879.50">__libc_start_main</text></g><g><title>[libc.so.6] (3,360 samples, 99.20%)</title><rect x="0.7972%" y="853" width="99.2028%" height="15" fill="rgb(254,2,54)" fg:x="27" fg:w="3360"/><text x="1.0472%" y="863.50">[libc.so.6]</text></g><g><title>main (3,360 samples, 99.20%)</title><rect x="0.7972%" y="837" width="99.2028%" height="15" fill="rgb(250,143,38)" fg:x="27" fg:w="3360"/><text x="1.0472%" y="847.50">main</text></g><g><title>std::rt::lang_start_internal (3,360 samples, 99.20%)</title><rect x="0.7972%" y="821" width="99.2028%" height="15" fill="rgb(248,25,0)" fg:x="27" fg:w="3360"/><text x="1.0472%" y="831.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (3,360 samples, 99.20%)</title><rect x="0.7972%" y="805" width="99.2028%" height="15" fill="rgb(206,152,27)" fg:x="27" fg:w="3360"/><text x="1.0472%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,360 samples, 99.20%)</title><rect x="0.7972%" y="789" width="99.2028%" height="15" fill="rgb(240,77,30)" fg:x="27" fg:w="3360"/><text x="1.0472%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,360 samples, 99.20%)</title><rect x="0.7972%" y="773" width="99.2028%" height="15" fill="rgb(231,5,3)" fg:x="27" fg:w="3360"/><text x="1.0472%" y="783.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (3,360 samples, 99.20%)</title><rect x="0.7972%" y="757" width="99.2028%" height="15" fill="rgb(207,226,32)" fg:x="27" fg:w="3360"/><text x="1.0472%" y="767.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::init (1 samples, 0.03%)</title><rect x="99.9705%" y="741" width="0.0295%" height="15" fill="rgb(222,207,47)" fg:x="3386" fg:w="1"/><text x="100.2205%" y="751.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.03%)</title><rect x="99.9705%" y="725" width="0.0295%" height="15" fill="rgb(229,115,45)" fg:x="3386" fg:w="1"/><text x="100.2205%" y="735.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.03%)</title><rect x="99.9705%" y="709" width="0.0295%" height="15" fill="rgb(224,191,6)" fg:x="3386" fg:w="1"/><text x="100.2205%" y="719.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.03%)</title><rect x="99.9705%" y="693" width="0.0295%" height="15" fill="rgb(230,227,24)" fg:x="3386" fg:w="1"/><text x="100.2205%" y="703.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.03%)</title><rect x="99.9705%" y="677" width="0.0295%" height="15" fill="rgb(228,80,19)" fg:x="3386" fg:w="1"/><text x="100.2205%" y="687.50"></text></g><g><title>__getdelim (1 samples, 0.03%)</title><rect x="99.9705%" y="661" width="0.0295%" height="15" fill="rgb(247,229,0)" fg:x="3386" fg:w="1"/><text x="100.2205%" y="671.50"></text></g><g><title>_IO_file_underflow (1 samples, 0.03%)</title><rect x="99.9705%" y="645" width="0.0295%" height="15" fill="rgb(237,194,15)" fg:x="3386" fg:w="1"/><text x="100.2205%" y="655.50"></text></g><g><title>_IO_file_read (1 samples, 0.03%)</title><rect x="99.9705%" y="629" width="0.0295%" height="15" fill="rgb(219,203,20)" fg:x="3386" fg:w="1"/><text x="100.2205%" y="639.50"></text></g></svg></svg>