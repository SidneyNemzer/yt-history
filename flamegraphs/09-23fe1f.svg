<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="854" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="837.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="837.00"> </text><svg id="frames" x="10" width="1180" total_samples="5150"><g><title>&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.0000%" y="773" width="0.0194%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="783.50"></text></g><g><title>yt_history::utf8_reader::Utf8Iter&lt;R&gt;::next (1 samples, 0.02%)</title><rect x="0.0000%" y="757" width="0.0194%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0000%" y="741" width="0.0194%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="751.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.06%)</title><rect x="0.2136%" y="693" width="0.0583%" height="15" fill="rgb(248,212,6)" fg:x="11" fg:w="3"/><text x="0.4636%" y="703.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="0.2524%" y="677" width="0.0194%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="1"/><text x="0.5024%" y="687.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="0.2524%" y="661" width="0.0194%" height="15" fill="rgb(232,128,0)" fg:x="13" fg:w="1"/><text x="0.5024%" y="671.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.04%)</title><rect x="0.2718%" y="693" width="0.0388%" height="15" fill="rgb(207,160,47)" fg:x="14" fg:w="2"/><text x="0.5218%" y="703.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.04%)</title><rect x="0.2718%" y="677" width="0.0388%" height="15" fill="rgb(228,23,34)" fg:x="14" fg:w="2"/><text x="0.5218%" y="687.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.04%)</title><rect x="0.2718%" y="661" width="0.0388%" height="15" fill="rgb(218,30,26)" fg:x="14" fg:w="2"/><text x="0.5218%" y="671.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="0.2913%" y="645" width="0.0194%" height="15" fill="rgb(220,122,19)" fg:x="15" fg:w="1"/><text x="0.5413%" y="655.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.14%)</title><rect x="0.1942%" y="709" width="0.1359%" height="15" fill="rgb(250,228,42)" fg:x="10" fg:w="7"/><text x="0.4442%" y="719.50"></text></g><g><title>strnlen (1 samples, 0.02%)</title><rect x="0.3107%" y="693" width="0.0194%" height="15" fill="rgb(240,193,28)" fg:x="16" fg:w="1"/><text x="0.5607%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3107%" y="677" width="0.0194%" height="15" fill="rgb(216,20,37)" fg:x="16" fg:w="1"/><text x="0.5607%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3107%" y="661" width="0.0194%" height="15" fill="rgb(206,188,39)" fg:x="16" fg:w="1"/><text x="0.5607%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3107%" y="645" width="0.0194%" height="15" fill="rgb(217,207,13)" fg:x="16" fg:w="1"/><text x="0.5607%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3107%" y="629" width="0.0194%" height="15" fill="rgb(231,73,38)" fg:x="16" fg:w="1"/><text x="0.5607%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3107%" y="613" width="0.0194%" height="15" fill="rgb(225,20,46)" fg:x="16" fg:w="1"/><text x="0.5607%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3107%" y="597" width="0.0194%" height="15" fill="rgb(210,31,41)" fg:x="16" fg:w="1"/><text x="0.5607%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3107%" y="581" width="0.0194%" height="15" fill="rgb(221,200,47)" fg:x="16" fg:w="1"/><text x="0.5607%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3107%" y="565" width="0.0194%" height="15" fill="rgb(226,26,5)" fg:x="16" fg:w="1"/><text x="0.5607%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (15 samples, 0.29%)</title><rect x="0.0583%" y="725" width="0.2913%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="15"/><text x="0.3083%" y="735.50"></text></g><g><title>__libc_early_init (1 samples, 0.02%)</title><rect x="0.3301%" y="709" width="0.0194%" height="15" fill="rgb(235,183,28)" fg:x="17" fg:w="1"/><text x="0.5801%" y="719.50"></text></g><g><title>__getrlimit (1 samples, 0.02%)</title><rect x="0.3301%" y="693" width="0.0194%" height="15" fill="rgb(221,5,38)" fg:x="17" fg:w="1"/><text x="0.5801%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3301%" y="677" width="0.0194%" height="15" fill="rgb(247,18,42)" fg:x="17" fg:w="1"/><text x="0.5801%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3301%" y="661" width="0.0194%" height="15" fill="rgb(241,131,45)" fg:x="17" fg:w="1"/><text x="0.5801%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3301%" y="645" width="0.0194%" height="15" fill="rgb(249,31,29)" fg:x="17" fg:w="1"/><text x="0.5801%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3301%" y="629" width="0.0194%" height="15" fill="rgb(225,111,53)" fg:x="17" fg:w="1"/><text x="0.5801%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (18 samples, 0.35%)</title><rect x="0.0388%" y="741" width="0.3495%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="18"/><text x="0.2888%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="0.3495%" y="725" width="0.0388%" height="15" fill="rgb(214,148,48)" fg:x="18" fg:w="2"/><text x="0.5995%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3689%" y="709" width="0.0194%" height="15" fill="rgb(232,36,49)" fg:x="19" fg:w="1"/><text x="0.6189%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3689%" y="693" width="0.0194%" height="15" fill="rgb(209,103,24)" fg:x="19" fg:w="1"/><text x="0.6189%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3689%" y="677" width="0.0194%" height="15" fill="rgb(229,88,8)" fg:x="19" fg:w="1"/><text x="0.6189%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3689%" y="661" width="0.0194%" height="15" fill="rgb(213,181,19)" fg:x="19" fg:w="1"/><text x="0.6189%" y="671.50"></text></g><g><title>[ld-linux-x86-64.so.2] (22 samples, 0.43%)</title><rect x="0.0194%" y="757" width="0.4272%" height="15" fill="rgb(254,191,54)" fg:x="1" fg:w="22"/><text x="0.2694%" y="767.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="0.3883%" y="741" width="0.0583%" height="15" fill="rgb(241,83,37)" fg:x="20" fg:w="3"/><text x="0.6383%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4272%" y="725" width="0.0194%" height="15" fill="rgb(233,36,39)" fg:x="22" fg:w="1"/><text x="0.6772%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4272%" y="709" width="0.0194%" height="15" fill="rgb(226,3,54)" fg:x="22" fg:w="1"/><text x="0.6772%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4272%" y="693" width="0.0194%" height="15" fill="rgb(245,192,40)" fg:x="22" fg:w="1"/><text x="0.6772%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4272%" y="677" width="0.0194%" height="15" fill="rgb(238,167,29)" fg:x="22" fg:w="1"/><text x="0.6772%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4272%" y="661" width="0.0194%" height="15" fill="rgb(232,182,51)" fg:x="22" fg:w="1"/><text x="0.6772%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4272%" y="645" width="0.0194%" height="15" fill="rgb(231,60,39)" fg:x="22" fg:w="1"/><text x="0.6772%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4272%" y="629" width="0.0194%" height="15" fill="rgb(208,69,12)" fg:x="22" fg:w="1"/><text x="0.6772%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (24 samples, 0.47%)</title><rect x="0.0194%" y="773" width="0.4660%" height="15" fill="rgb(235,93,37)" fg:x="1" fg:w="24"/><text x="0.2694%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="0.4466%" y="757" width="0.0388%" height="15" fill="rgb(213,116,39)" fg:x="23" fg:w="2"/><text x="0.6966%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4660%" y="741" width="0.0194%" height="15" fill="rgb(222,207,29)" fg:x="24" fg:w="1"/><text x="0.7160%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4660%" y="725" width="0.0194%" height="15" fill="rgb(206,96,30)" fg:x="24" fg:w="1"/><text x="0.7160%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4660%" y="709" width="0.0194%" height="15" fill="rgb(218,138,4)" fg:x="24" fg:w="1"/><text x="0.7160%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4660%" y="693" width="0.0194%" height="15" fill="rgb(250,191,14)" fg:x="24" fg:w="1"/><text x="0.7160%" y="703.50"></text></g><g><title>&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.4854%" y="757" width="0.0194%" height="15" fill="rgb(239,60,40)" fg:x="25" fg:w="1"/><text x="0.7354%" y="767.50"></text></g><g><title>yt_history::utf8_reader::Utf8Iter&lt;R&gt;::next (1 samples, 0.02%)</title><rect x="0.4854%" y="741" width="0.0194%" height="15" fill="rgb(206,27,48)" fg:x="25" fg:w="1"/><text x="0.7354%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4854%" y="725" width="0.0194%" height="15" fill="rgb(225,35,8)" fg:x="25" fg:w="1"/><text x="0.7354%" y="735.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="0.4854%" y="773" width="0.0388%" height="15" fill="rgb(250,213,24)" fg:x="25" fg:w="2"/><text x="0.7354%" y="783.50"></text></g><g><title>[yt-history] (1 samples, 0.02%)</title><rect x="0.5049%" y="757" width="0.0194%" height="15" fill="rgb(247,123,22)" fg:x="26" fg:w="1"/><text x="0.7549%" y="767.50"></text></g><g><title>read (1 samples, 0.02%)</title><rect x="0.5049%" y="741" width="0.0194%" height="15" fill="rgb(231,138,38)" fg:x="26" fg:w="1"/><text x="0.7549%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.5049%" y="725" width="0.0194%" height="15" fill="rgb(231,145,46)" fg:x="26" fg:w="1"/><text x="0.7549%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Channel&gt;&gt; (2 samples, 0.04%)</title><rect x="0.5243%" y="373" width="0.0388%" height="15" fill="rgb(251,118,11)" fg:x="27" fg:w="2"/><text x="0.7743%" y="383.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="0.5243%" y="357" width="0.0388%" height="15" fill="rgb(217,147,25)" fg:x="27" fg:w="2"/><text x="0.7743%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Channel&gt; (2 samples, 0.04%)</title><rect x="0.5243%" y="341" width="0.0388%" height="15" fill="rgb(247,81,37)" fg:x="27" fg:w="2"/><text x="0.7743%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.04%)</title><rect x="0.5243%" y="325" width="0.0388%" height="15" fill="rgb(209,12,38)" fg:x="27" fg:w="2"/><text x="0.7743%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.04%)</title><rect x="0.5243%" y="309" width="0.0388%" height="15" fill="rgb(227,1,9)" fg:x="27" fg:w="2"/><text x="0.7743%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.04%)</title><rect x="0.5243%" y="293" width="0.0388%" height="15" fill="rgb(248,47,43)" fg:x="27" fg:w="2"/><text x="0.7743%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="0.5243%" y="277" width="0.0388%" height="15" fill="rgb(221,10,30)" fg:x="27" fg:w="2"/><text x="0.7743%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.04%)</title><rect x="0.5243%" y="261" width="0.0388%" height="15" fill="rgb(210,229,1)" fg:x="27" fg:w="2"/><text x="0.7743%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.04%)</title><rect x="0.5243%" y="245" width="0.0388%" height="15" fill="rgb(222,148,37)" fg:x="27" fg:w="2"/><text x="0.7743%" y="255.50"></text></g><g><title>cfree (2 samples, 0.04%)</title><rect x="0.5243%" y="229" width="0.0388%" height="15" fill="rgb(234,67,33)" fg:x="27" fg:w="2"/><text x="0.7743%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Video&gt;&gt; (5 samples, 0.10%)</title><rect x="0.5243%" y="421" width="0.0971%" height="15" fill="rgb(247,98,35)" fg:x="27" fg:w="5"/><text x="0.7743%" y="431.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.10%)</title><rect x="0.5243%" y="405" width="0.0971%" height="15" fill="rgb(247,138,52)" fg:x="27" fg:w="5"/><text x="0.7743%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Video&gt; (5 samples, 0.10%)</title><rect x="0.5243%" y="389" width="0.0971%" height="15" fill="rgb(213,79,30)" fg:x="27" fg:w="5"/><text x="0.7743%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 0.06%)</title><rect x="0.5631%" y="373" width="0.0583%" height="15" fill="rgb(246,177,23)" fg:x="29" fg:w="3"/><text x="0.8131%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.06%)</title><rect x="0.5631%" y="357" width="0.0583%" height="15" fill="rgb(230,62,27)" fg:x="29" fg:w="3"/><text x="0.8131%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.06%)</title><rect x="0.5631%" y="341" width="0.0583%" height="15" fill="rgb(216,154,8)" fg:x="29" fg:w="3"/><text x="0.8131%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.06%)</title><rect x="0.5631%" y="325" width="0.0583%" height="15" fill="rgb(244,35,45)" fg:x="29" fg:w="3"/><text x="0.8131%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.06%)</title><rect x="0.5631%" y="309" width="0.0583%" height="15" fill="rgb(251,115,12)" fg:x="29" fg:w="3"/><text x="0.8131%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.06%)</title><rect x="0.5631%" y="293" width="0.0583%" height="15" fill="rgb(240,54,50)" fg:x="29" fg:w="3"/><text x="0.8131%" y="303.50"></text></g><g><title>cfree (3 samples, 0.06%)</title><rect x="0.5631%" y="277" width="0.0583%" height="15" fill="rgb(233,84,52)" fg:x="29" fg:w="3"/><text x="0.8131%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.12%)</title><rect x="0.5243%" y="501" width="0.1165%" height="15" fill="rgb(207,117,47)" fg:x="27" fg:w="6"/><text x="0.7743%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (6 samples, 0.12%)</title><rect x="0.5243%" y="485" width="0.1165%" height="15" fill="rgb(249,43,39)" fg:x="27" fg:w="6"/><text x="0.7743%" y="495.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (6 samples, 0.12%)</title><rect x="0.5243%" y="469" width="0.1165%" height="15" fill="rgb(209,38,44)" fg:x="27" fg:w="6"/><text x="0.7743%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (6 samples, 0.12%)</title><rect x="0.5243%" y="453" width="0.1165%" height="15" fill="rgb(236,212,23)" fg:x="27" fg:w="6"/><text x="0.7743%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::rc::Rc&lt;yt_history::model::Video&gt;)&gt; (6 samples, 0.12%)</title><rect x="0.5243%" y="437" width="0.1165%" height="15" fill="rgb(242,79,21)" fg:x="27" fg:w="6"/><text x="0.7743%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.02%)</title><rect x="0.6214%" y="421" width="0.0194%" height="15" fill="rgb(211,96,35)" fg:x="32" fg:w="1"/><text x="0.8714%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.02%)</title><rect x="0.6214%" y="405" width="0.0194%" height="15" fill="rgb(253,215,40)" fg:x="32" fg:w="1"/><text x="0.8714%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.02%)</title><rect x="0.6214%" y="389" width="0.0194%" height="15" fill="rgb(211,81,21)" fg:x="32" fg:w="1"/><text x="0.8714%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.6214%" y="373" width="0.0194%" height="15" fill="rgb(208,190,38)" fg:x="32" fg:w="1"/><text x="0.8714%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="0.6214%" y="357" width="0.0194%" height="15" fill="rgb(235,213,38)" fg:x="32" fg:w="1"/><text x="0.8714%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="0.6214%" y="341" width="0.0194%" height="15" fill="rgb(237,122,38)" fg:x="32" fg:w="1"/><text x="0.8714%" y="351.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="0.6214%" y="325" width="0.0194%" height="15" fill="rgb(244,218,35)" fg:x="32" fg:w="1"/><text x="0.8714%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="0.6214%" y="309" width="0.0194%" height="15" fill="rgb(240,68,47)" fg:x="32" fg:w="1"/><text x="0.8714%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (1 samples, 0.02%)</title><rect x="0.6408%" y="437" width="0.0194%" height="15" fill="rgb(210,16,53)" fg:x="33" fg:w="1"/><text x="0.8908%" y="447.50"></text></g><g><title>yt_history::main::{{closure}} (1 samples, 0.02%)</title><rect x="0.6408%" y="421" width="0.0194%" height="15" fill="rgb(235,124,12)" fg:x="33" fg:w="1"/><text x="0.8908%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.02%)</title><rect x="0.6408%" y="405" width="0.0194%" height="15" fill="rgb(224,169,11)" fg:x="33" fg:w="1"/><text x="0.8908%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (2 samples, 0.04%)</title><rect x="0.6408%" y="501" width="0.0388%" height="15" fill="rgb(250,166,2)" fg:x="33" fg:w="2"/><text x="0.8908%" y="511.50"></text></g><g><title>alloc::slice::stable_sort (2 samples, 0.04%)</title><rect x="0.6408%" y="485" width="0.0388%" height="15" fill="rgb(242,216,29)" fg:x="33" fg:w="2"/><text x="0.8908%" y="495.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.04%)</title><rect x="0.6408%" y="469" width="0.0388%" height="15" fill="rgb(230,116,27)" fg:x="33" fg:w="2"/><text x="0.8908%" y="479.50"></text></g><g><title>core::slice::sort::merge (2 samples, 0.04%)</title><rect x="0.6408%" y="453" width="0.0388%" height="15" fill="rgb(228,99,48)" fg:x="33" fg:w="2"/><text x="0.8908%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="0.6602%" y="437" width="0.0194%" height="15" fill="rgb(253,11,6)" fg:x="34" fg:w="1"/><text x="0.9102%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.02%)</title><rect x="0.6796%" y="501" width="0.0194%" height="15" fill="rgb(247,143,39)" fg:x="35" fg:w="1"/><text x="0.9296%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="0.6796%" y="485" width="0.0194%" height="15" fill="rgb(236,97,10)" fg:x="35" fg:w="1"/><text x="0.9296%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="0.6796%" y="469" width="0.0194%" height="15" fill="rgb(233,208,19)" fg:x="35" fg:w="1"/><text x="0.9296%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="0.6796%" y="453" width="0.0194%" height="15" fill="rgb(216,164,2)" fg:x="35" fg:w="1"/><text x="0.9296%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="0.6796%" y="437" width="0.0194%" height="15" fill="rgb(220,129,5)" fg:x="35" fg:w="1"/><text x="0.9296%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="0.6796%" y="421" width="0.0194%" height="15" fill="rgb(242,17,10)" fg:x="35" fg:w="1"/><text x="0.9296%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;)&gt;&gt; (2 samples, 0.04%)</title><rect x="0.6990%" y="501" width="0.0388%" height="15" fill="rgb(242,107,0)" fg:x="36" fg:w="2"/><text x="0.9490%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;),std::collections::hash::map::RandomState&gt;&gt; (2 samples, 0.04%)</title><rect x="0.6990%" y="485" width="0.0388%" height="15" fill="rgb(251,28,31)" fg:x="36" fg:w="2"/><text x="0.9490%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;))&gt;&gt; (2 samples, 0.04%)</title><rect x="0.6990%" y="469" width="0.0388%" height="15" fill="rgb(233,223,10)" fg:x="36" fg:w="2"/><text x="0.9490%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="0.6990%" y="453" width="0.0388%" height="15" fill="rgb(215,21,27)" fg:x="36" fg:w="2"/><text x="0.9490%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (2 samples, 0.04%)</title><rect x="0.6990%" y="437" width="0.0388%" height="15" fill="rgb(232,23,21)" fg:x="36" fg:w="2"/><text x="0.9490%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.04%)</title><rect x="0.6990%" y="421" width="0.0388%" height="15" fill="rgb(244,5,23)" fg:x="36" fg:w="2"/><text x="0.9490%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (2 samples, 0.04%)</title><rect x="0.6990%" y="405" width="0.0388%" height="15" fill="rgb(226,81,46)" fg:x="36" fg:w="2"/><text x="0.9490%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;))&gt; (2 samples, 0.04%)</title><rect x="0.6990%" y="389" width="0.0388%" height="15" fill="rgb(247,70,30)" fg:x="36" fg:w="2"/><text x="0.9490%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;)&gt; (2 samples, 0.04%)</title><rect x="0.6990%" y="373" width="0.0388%" height="15" fill="rgb(212,68,19)" fg:x="36" fg:w="2"/><text x="0.9490%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Video&gt;&gt; (2 samples, 0.04%)</title><rect x="0.6990%" y="357" width="0.0388%" height="15" fill="rgb(240,187,13)" fg:x="36" fg:w="2"/><text x="0.9490%" y="367.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="0.6990%" y="341" width="0.0388%" height="15" fill="rgb(223,113,26)" fg:x="36" fg:w="2"/><text x="0.9490%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;yt_history::model::Watched&gt;&gt; (1 samples, 0.02%)</title><rect x="0.7379%" y="485" width="0.0194%" height="15" fill="rgb(206,192,2)" fg:x="38" fg:w="1"/><text x="0.9879%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.7379%" y="469" width="0.0194%" height="15" fill="rgb(241,108,4)" fg:x="38" fg:w="1"/><text x="0.9879%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[yt_history::model::Watched]&gt; (1 samples, 0.02%)</title><rect x="0.7379%" y="453" width="0.0194%" height="15" fill="rgb(247,173,49)" fg:x="38" fg:w="1"/><text x="0.9879%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Watched&gt; (1 samples, 0.02%)</title><rect x="0.7379%" y="437" width="0.0194%" height="15" fill="rgb(224,114,35)" fg:x="38" fg:w="1"/><text x="0.9879%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Video&gt;&gt; (1 samples, 0.02%)</title><rect x="0.7379%" y="421" width="0.0194%" height="15" fill="rgb(245,159,27)" fg:x="38" fg:w="1"/><text x="0.9879%" y="431.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.7379%" y="405" width="0.0194%" height="15" fill="rgb(245,172,44)" fg:x="38" fg:w="1"/><text x="0.9879%" y="415.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (1 samples, 0.02%)</title><rect x="0.7379%" y="389" width="0.0194%" height="15" fill="rgb(236,23,11)" fg:x="38" fg:w="1"/><text x="0.9879%" y="399.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.02%)</title><rect x="0.7379%" y="373" width="0.0194%" height="15" fill="rgb(205,117,38)" fg:x="38" fg:w="1"/><text x="0.9879%" y="383.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.02%)</title><rect x="0.7379%" y="357" width="0.0194%" height="15" fill="rgb(237,72,25)" fg:x="38" fg:w="1"/><text x="0.9879%" y="367.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="0.7379%" y="341" width="0.0194%" height="15" fill="rgb(244,70,9)" fg:x="38" fg:w="1"/><text x="0.9879%" y="351.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="0.7379%" y="325" width="0.0194%" height="15" fill="rgb(217,125,39)" fg:x="38" fg:w="1"/><text x="0.9879%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.7573%" y="437" width="0.0194%" height="15" fill="rgb(235,36,10)" fg:x="39" fg:w="1"/><text x="1.0073%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.02%)</title><rect x="0.7573%" y="421" width="0.0194%" height="15" fill="rgb(251,123,47)" fg:x="39" fg:w="1"/><text x="1.0073%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.02%)</title><rect x="0.7573%" y="405" width="0.0194%" height="15" fill="rgb(221,13,13)" fg:x="39" fg:w="1"/><text x="1.0073%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.02%)</title><rect x="0.7573%" y="389" width="0.0194%" height="15" fill="rgb(238,131,9)" fg:x="39" fg:w="1"/><text x="1.0073%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::rc::Rc&lt;yt_history::model::Channel&gt;)&gt; (1 samples, 0.02%)</title><rect x="0.7573%" y="373" width="0.0194%" height="15" fill="rgb(211,50,8)" fg:x="39" fg:w="1"/><text x="1.0073%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Channel&gt;&gt; (1 samples, 0.02%)</title><rect x="0.7573%" y="357" width="0.0194%" height="15" fill="rgb(245,182,24)" fg:x="39" fg:w="1"/><text x="1.0073%" y="367.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.7573%" y="341" width="0.0194%" height="15" fill="rgb(242,14,37)" fg:x="39" fg:w="1"/><text x="1.0073%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Models&gt; (3 samples, 0.06%)</title><rect x="0.7379%" y="501" width="0.0583%" height="15" fill="rgb(246,228,12)" fg:x="38" fg:w="3"/><text x="0.9879%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,alloc::rc::Rc&lt;yt_history::model::Channel&gt;&gt;&gt; (2 samples, 0.04%)</title><rect x="0.7573%" y="485" width="0.0388%" height="15" fill="rgb(213,55,15)" fg:x="39" fg:w="2"/><text x="1.0073%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,alloc::rc::Rc&lt;yt_history::model::Channel&gt;,std::collections::hash::map::RandomState&gt;&gt; (2 samples, 0.04%)</title><rect x="0.7573%" y="469" width="0.0388%" height="15" fill="rgb(209,9,3)" fg:x="39" fg:w="2"/><text x="1.0073%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,alloc::rc::Rc&lt;yt_history::model::Channel&gt;)&gt;&gt; (2 samples, 0.04%)</title><rect x="0.7573%" y="453" width="0.0388%" height="15" fill="rgb(230,59,30)" fg:x="39" fg:w="2"/><text x="1.0073%" y="463.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="0.7767%" y="437" width="0.0194%" height="15" fill="rgb(209,121,21)" fg:x="40" fg:w="1"/><text x="1.0267%" y="447.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="0.7767%" y="421" width="0.0194%" height="15" fill="rgb(220,109,13)" fg:x="40" fg:w="1"/><text x="1.0267%" y="431.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="0.7767%" y="405" width="0.0194%" height="15" fill="rgb(232,18,1)" fg:x="40" fg:w="1"/><text x="1.0267%" y="415.50"></text></g><g><title>cfree (5 samples, 0.10%)</title><rect x="0.7961%" y="421" width="0.0971%" height="15" fill="rgb(215,41,42)" fg:x="41" fg:w="5"/><text x="1.0461%" y="431.50"></text></g><g><title>[libc.so.6] (5 samples, 0.10%)</title><rect x="0.7961%" y="405" width="0.0971%" height="15" fill="rgb(224,123,36)" fg:x="41" fg:w="5"/><text x="1.0461%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.9320%" y="389" width="0.0194%" height="15" fill="rgb(240,125,3)" fg:x="48" fg:w="1"/><text x="1.1820%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.9320%" y="373" width="0.0194%" height="15" fill="rgb(205,98,50)" fg:x="48" fg:w="1"/><text x="1.1820%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="0.9320%" y="357" width="0.0194%" height="15" fill="rgb(205,185,37)" fg:x="48" fg:w="1"/><text x="1.1820%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="0.9320%" y="341" width="0.0194%" height="15" fill="rgb(238,207,15)" fg:x="48" fg:w="1"/><text x="1.1820%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="0.9320%" y="325" width="0.0194%" height="15" fill="rgb(213,199,42)" fg:x="48" fg:w="1"/><text x="1.1820%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="0.9320%" y="309" width="0.0194%" height="15" fill="rgb(235,201,11)" fg:x="48" fg:w="1"/><text x="1.1820%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="0.9320%" y="293" width="0.0194%" height="15" fill="rgb(207,46,11)" fg:x="48" fg:w="1"/><text x="1.1820%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="0.9320%" y="277" width="0.0194%" height="15" fill="rgb(241,35,35)" fg:x="48" fg:w="1"/><text x="1.1820%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="0.9320%" y="261" width="0.0194%" height="15" fill="rgb(243,32,47)" fg:x="48" fg:w="1"/><text x="1.1820%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="0.9320%" y="245" width="0.0194%" height="15" fill="rgb(247,202,23)" fg:x="48" fg:w="1"/><text x="1.1820%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="0.9320%" y="229" width="0.0194%" height="15" fill="rgb(219,102,11)" fg:x="48" fg:w="1"/><text x="1.1820%" y="239.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="0.9320%" y="213" width="0.0194%" height="15" fill="rgb(243,110,44)" fg:x="48" fg:w="1"/><text x="1.1820%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="0.9320%" y="197" width="0.0194%" height="15" fill="rgb(222,74,54)" fg:x="48" fg:w="1"/><text x="1.1820%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="0.9515%" y="293" width="0.0194%" height="15" fill="rgb(216,99,12)" fg:x="49" fg:w="1"/><text x="1.2015%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="0.9515%" y="277" width="0.0194%" height="15" fill="rgb(226,22,26)" fg:x="49" fg:w="1"/><text x="1.2015%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="0.9515%" y="261" width="0.0194%" height="15" fill="rgb(217,163,10)" fg:x="49" fg:w="1"/><text x="1.2015%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.02%)</title><rect x="0.9515%" y="245" width="0.0194%" height="15" fill="rgb(213,25,53)" fg:x="49" fg:w="1"/><text x="1.2015%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.02%)</title><rect x="0.9515%" y="229" width="0.0194%" height="15" fill="rgb(252,105,26)" fg:x="49" fg:w="1"/><text x="1.2015%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.08%)</title><rect x="0.9709%" y="197" width="0.0777%" height="15" fill="rgb(220,39,43)" fg:x="50" fg:w="4"/><text x="1.2209%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.08%)</title><rect x="0.9709%" y="181" width="0.0777%" height="15" fill="rgb(229,68,48)" fg:x="50" fg:w="4"/><text x="1.2209%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.08%)</title><rect x="0.9709%" y="165" width="0.0777%" height="15" fill="rgb(252,8,32)" fg:x="50" fg:w="4"/><text x="1.2209%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.12%)</title><rect x="0.9515%" y="325" width="0.1165%" height="15" fill="rgb(223,20,43)" fg:x="49" fg:w="6"/><text x="1.2015%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.12%)</title><rect x="0.9515%" y="309" width="0.1165%" height="15" fill="rgb(229,81,49)" fg:x="49" fg:w="6"/><text x="1.2015%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.10%)</title><rect x="0.9709%" y="293" width="0.0971%" height="15" fill="rgb(236,28,36)" fg:x="50" fg:w="5"/><text x="1.2209%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (5 samples, 0.10%)</title><rect x="0.9709%" y="277" width="0.0971%" height="15" fill="rgb(249,185,26)" fg:x="50" fg:w="5"/><text x="1.2209%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (5 samples, 0.10%)</title><rect x="0.9709%" y="261" width="0.0971%" height="15" fill="rgb(249,174,33)" fg:x="50" fg:w="5"/><text x="1.2209%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (5 samples, 0.10%)</title><rect x="0.9709%" y="245" width="0.0971%" height="15" fill="rgb(233,201,37)" fg:x="50" fg:w="5"/><text x="1.2209%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (5 samples, 0.10%)</title><rect x="0.9709%" y="229" width="0.0971%" height="15" fill="rgb(221,78,26)" fg:x="50" fg:w="5"/><text x="1.2209%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (5 samples, 0.10%)</title><rect x="0.9709%" y="213" width="0.0971%" height="15" fill="rgb(250,127,30)" fg:x="50" fg:w="5"/><text x="1.2209%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.02%)</title><rect x="1.0485%" y="197" width="0.0194%" height="15" fill="rgb(230,49,44)" fg:x="54" fg:w="1"/><text x="1.2985%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="1.0485%" y="181" width="0.0194%" height="15" fill="rgb(229,67,23)" fg:x="54" fg:w="1"/><text x="1.2985%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (11 samples, 0.21%)</title><rect x="1.0874%" y="277" width="0.2136%" height="15" fill="rgb(249,83,47)" fg:x="56" fg:w="11"/><text x="1.3374%" y="287.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (11 samples, 0.21%)</title><rect x="1.0874%" y="261" width="0.2136%" height="15" fill="rgb(215,43,3)" fg:x="56" fg:w="11"/><text x="1.3374%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (11 samples, 0.21%)</title><rect x="1.0874%" y="245" width="0.2136%" height="15" fill="rgb(238,154,13)" fg:x="56" fg:w="11"/><text x="1.3374%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (11 samples, 0.21%)</title><rect x="1.0874%" y="229" width="0.2136%" height="15" fill="rgb(219,56,2)" fg:x="56" fg:w="11"/><text x="1.3374%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (11 samples, 0.21%)</title><rect x="1.0874%" y="213" width="0.2136%" height="15" fill="rgb(233,0,4)" fg:x="56" fg:w="11"/><text x="1.3374%" y="223.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (11 samples, 0.21%)</title><rect x="1.0874%" y="197" width="0.2136%" height="15" fill="rgb(235,30,7)" fg:x="56" fg:w="11"/><text x="1.3374%" y="207.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (11 samples, 0.21%)</title><rect x="1.0874%" y="181" width="0.2136%" height="15" fill="rgb(250,79,13)" fg:x="56" fg:w="11"/><text x="1.3374%" y="191.50"></text></g><g><title>[libc.so.6] (7 samples, 0.14%)</title><rect x="1.1650%" y="165" width="0.1359%" height="15" fill="rgb(211,146,34)" fg:x="60" fg:w="7"/><text x="1.4150%" y="175.50"></text></g><g><title>yt_history::model::Models::find_channel (20 samples, 0.39%)</title><rect x="0.9515%" y="389" width="0.3883%" height="15" fill="rgb(228,22,38)" fg:x="49" fg:w="20"/><text x="1.2015%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (20 samples, 0.39%)</title><rect x="0.9515%" y="373" width="0.3883%" height="15" fill="rgb(235,168,5)" fg:x="49" fg:w="20"/><text x="1.2015%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (20 samples, 0.39%)</title><rect x="0.9515%" y="357" width="0.3883%" height="15" fill="rgb(221,155,16)" fg:x="49" fg:w="20"/><text x="1.2015%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (20 samples, 0.39%)</title><rect x="0.9515%" y="341" width="0.3883%" height="15" fill="rgb(215,215,53)" fg:x="49" fg:w="20"/><text x="1.2015%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (14 samples, 0.27%)</title><rect x="1.0680%" y="325" width="0.2718%" height="15" fill="rgb(223,4,10)" fg:x="55" fg:w="14"/><text x="1.3180%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (14 samples, 0.27%)</title><rect x="1.0680%" y="309" width="0.2718%" height="15" fill="rgb(234,103,6)" fg:x="55" fg:w="14"/><text x="1.3180%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (14 samples, 0.27%)</title><rect x="1.0680%" y="293" width="0.2718%" height="15" fill="rgb(227,97,0)" fg:x="55" fg:w="14"/><text x="1.3180%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.04%)</title><rect x="1.3010%" y="277" width="0.0388%" height="15" fill="rgb(234,150,53)" fg:x="67" fg:w="2"/><text x="1.5510%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.04%)</title><rect x="1.3010%" y="261" width="0.0388%" height="15" fill="rgb(228,201,54)" fg:x="67" fg:w="2"/><text x="1.5510%" y="271.50"></text></g><g><title>yt_history::model::Models::find_channel (2 samples, 0.04%)</title><rect x="1.3010%" y="245" width="0.0388%" height="15" fill="rgb(222,22,37)" fg:x="67" fg:w="2"/><text x="1.5510%" y="255.50"></text></g><g><title>hashbrown::map::make_insert_hash (2 samples, 0.04%)</title><rect x="1.3398%" y="341" width="0.0388%" height="15" fill="rgb(237,53,32)" fg:x="69" fg:w="2"/><text x="1.5898%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.04%)</title><rect x="1.3398%" y="325" width="0.0388%" height="15" fill="rgb(233,25,53)" fg:x="69" fg:w="2"/><text x="1.5898%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.04%)</title><rect x="1.3398%" y="309" width="0.0388%" height="15" fill="rgb(210,40,34)" fg:x="69" fg:w="2"/><text x="1.5898%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (2 samples, 0.04%)</title><rect x="1.3398%" y="293" width="0.0388%" height="15" fill="rgb(241,220,44)" fg:x="69" fg:w="2"/><text x="1.5898%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2 samples, 0.04%)</title><rect x="1.3398%" y="277" width="0.0388%" height="15" fill="rgb(235,28,35)" fg:x="69" fg:w="2"/><text x="1.5898%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (2 samples, 0.04%)</title><rect x="1.3398%" y="261" width="0.0388%" height="15" fill="rgb(210,56,17)" fg:x="69" fg:w="2"/><text x="1.5898%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2 samples, 0.04%)</title><rect x="1.3398%" y="245" width="0.0388%" height="15" fill="rgb(224,130,29)" fg:x="69" fg:w="2"/><text x="1.5898%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2 samples, 0.04%)</title><rect x="1.3398%" y="229" width="0.0388%" height="15" fill="rgb(235,212,8)" fg:x="69" fg:w="2"/><text x="1.5898%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.04%)</title><rect x="1.3398%" y="213" width="0.0388%" height="15" fill="rgb(223,33,50)" fg:x="69" fg:w="2"/><text x="1.5898%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.04%)</title><rect x="1.3398%" y="197" width="0.0388%" height="15" fill="rgb(219,149,13)" fg:x="69" fg:w="2"/><text x="1.5898%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.04%)</title><rect x="1.3398%" y="181" width="0.0388%" height="15" fill="rgb(250,156,29)" fg:x="69" fg:w="2"/><text x="1.5898%" y="191.50"></text></g><g><title>yt_history::model::Models::find_or_create_channel (24 samples, 0.47%)</title><rect x="0.9320%" y="405" width="0.4660%" height="15" fill="rgb(216,193,19)" fg:x="48" fg:w="24"/><text x="1.1820%" y="415.50"></text></g><g><title>yt_history::model::Models::insert_channel (3 samples, 0.06%)</title><rect x="1.3398%" y="389" width="0.0583%" height="15" fill="rgb(216,135,14)" fg:x="69" fg:w="3"/><text x="1.5898%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (3 samples, 0.06%)</title><rect x="1.3398%" y="373" width="0.0583%" height="15" fill="rgb(241,47,5)" fg:x="69" fg:w="3"/><text x="1.5898%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.06%)</title><rect x="1.3398%" y="357" width="0.0583%" height="15" fill="rgb(233,42,35)" fg:x="69" fg:w="3"/><text x="1.5898%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.02%)</title><rect x="1.3786%" y="341" width="0.0194%" height="15" fill="rgb(231,13,6)" fg:x="71" fg:w="1"/><text x="1.6286%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="1.3786%" y="325" width="0.0194%" height="15" fill="rgb(207,181,40)" fg:x="71" fg:w="1"/><text x="1.6286%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.02%)</title><rect x="1.3786%" y="309" width="0.0194%" height="15" fill="rgb(254,173,49)" fg:x="71" fg:w="1"/><text x="1.6286%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 0.02%)</title><rect x="1.3786%" y="293" width="0.0194%" height="15" fill="rgb(221,1,38)" fg:x="71" fg:w="1"/><text x="1.6286%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (1 samples, 0.02%)</title><rect x="1.3786%" y="277" width="0.0194%" height="15" fill="rgb(206,124,46)" fg:x="71" fg:w="1"/><text x="1.6286%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (1 samples, 0.02%)</title><rect x="1.3786%" y="261" width="0.0194%" height="15" fill="rgb(249,21,11)" fg:x="71" fg:w="1"/><text x="1.6286%" y="271.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (1 samples, 0.02%)</title><rect x="1.3786%" y="245" width="0.0194%" height="15" fill="rgb(222,201,40)" fg:x="71" fg:w="1"/><text x="1.6286%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.02%)</title><rect x="1.3786%" y="229" width="0.0194%" height="15" fill="rgb(235,61,29)" fg:x="71" fg:w="1"/><text x="1.6286%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="1.3786%" y="213" width="0.0194%" height="15" fill="rgb(219,207,3)" fg:x="71" fg:w="1"/><text x="1.6286%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.02%)</title><rect x="1.3786%" y="197" width="0.0194%" height="15" fill="rgb(222,56,46)" fg:x="71" fg:w="1"/><text x="1.6286%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="1.3786%" y="181" width="0.0194%" height="15" fill="rgb(239,76,54)" fg:x="71" fg:w="1"/><text x="1.6286%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.02%)</title><rect x="1.3786%" y="165" width="0.0194%" height="15" fill="rgb(231,124,27)" fg:x="71" fg:w="1"/><text x="1.6286%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.02%)</title><rect x="1.3786%" y="149" width="0.0194%" height="15" fill="rgb(249,195,6)" fg:x="71" fg:w="1"/><text x="1.6286%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1 samples, 0.02%)</title><rect x="1.3786%" y="133" width="0.0194%" height="15" fill="rgb(237,174,47)" fg:x="71" fg:w="1"/><text x="1.6286%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1 samples, 0.02%)</title><rect x="1.3786%" y="117" width="0.0194%" height="15" fill="rgb(206,201,31)" fg:x="71" fg:w="1"/><text x="1.6286%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="1.3786%" y="101" width="0.0194%" height="15" fill="rgb(231,57,52)" fg:x="71" fg:w="1"/><text x="1.6286%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.02%)</title><rect x="1.3786%" y="85" width="0.0194%" height="15" fill="rgb(248,177,22)" fg:x="71" fg:w="1"/><text x="1.6286%" y="95.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="1.4175%" y="389" width="0.0388%" height="15" fill="rgb(215,211,37)" fg:x="73" fg:w="2"/><text x="1.6675%" y="399.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (2 samples, 0.04%)</title><rect x="1.4175%" y="373" width="0.0388%" height="15" fill="rgb(241,128,51)" fg:x="73" fg:w="2"/><text x="1.6675%" y="383.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="1.4563%" y="389" width="0.0194%" height="15" fill="rgb(227,165,31)" fg:x="75" fg:w="1"/><text x="1.7063%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (13 samples, 0.25%)</title><rect x="1.4757%" y="389" width="0.2524%" height="15" fill="rgb(228,167,24)" fg:x="76" fg:w="13"/><text x="1.7257%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (13 samples, 0.25%)</title><rect x="1.4757%" y="373" width="0.2524%" height="15" fill="rgb(228,143,12)" fg:x="76" fg:w="13"/><text x="1.7257%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (13 samples, 0.25%)</title><rect x="1.4757%" y="357" width="0.2524%" height="15" fill="rgb(249,149,8)" fg:x="76" fg:w="13"/><text x="1.7257%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.25%)</title><rect x="1.4757%" y="341" width="0.2524%" height="15" fill="rgb(243,35,44)" fg:x="76" fg:w="13"/><text x="1.7257%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.25%)</title><rect x="1.4757%" y="325" width="0.2524%" height="15" fill="rgb(246,89,9)" fg:x="76" fg:w="13"/><text x="1.7257%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.25%)</title><rect x="1.4757%" y="309" width="0.2524%" height="15" fill="rgb(233,213,13)" fg:x="76" fg:w="13"/><text x="1.7257%" y="319.50"></text></g><g><title>cfree (13 samples, 0.25%)</title><rect x="1.4757%" y="293" width="0.2524%" height="15" fill="rgb(233,141,41)" fg:x="76" fg:w="13"/><text x="1.7257%" y="303.50"></text></g><g><title>[libc.so.6] (13 samples, 0.25%)</title><rect x="1.4757%" y="277" width="0.2524%" height="15" fill="rgb(239,167,4)" fg:x="76" fg:w="13"/><text x="1.7257%" y="287.50"></text></g><g><title>[libc.so.6] (13 samples, 0.25%)</title><rect x="1.4757%" y="261" width="0.2524%" height="15" fill="rgb(209,217,16)" fg:x="76" fg:w="13"/><text x="1.7257%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.04%)</title><rect x="1.7282%" y="309" width="0.0388%" height="15" fill="rgb(219,88,35)" fg:x="89" fg:w="2"/><text x="1.9782%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.04%)</title><rect x="1.7282%" y="293" width="0.0388%" height="15" fill="rgb(220,193,23)" fg:x="89" fg:w="2"/><text x="1.9782%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.04%)</title><rect x="1.7282%" y="277" width="0.0388%" height="15" fill="rgb(230,90,52)" fg:x="89" fg:w="2"/><text x="1.9782%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.02%)</title><rect x="1.7476%" y="261" width="0.0194%" height="15" fill="rgb(252,106,19)" fg:x="90" fg:w="1"/><text x="1.9976%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.02%)</title><rect x="1.7476%" y="245" width="0.0194%" height="15" fill="rgb(206,74,20)" fg:x="90" fg:w="1"/><text x="1.9976%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.06%)</title><rect x="1.7282%" y="341" width="0.0583%" height="15" fill="rgb(230,138,44)" fg:x="89" fg:w="3"/><text x="1.9782%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.06%)</title><rect x="1.7282%" y="325" width="0.0583%" height="15" fill="rgb(235,182,43)" fg:x="89" fg:w="3"/><text x="1.9782%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.02%)</title><rect x="1.7670%" y="309" width="0.0194%" height="15" fill="rgb(242,16,51)" fg:x="91" fg:w="1"/><text x="2.0170%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="1.7670%" y="293" width="0.0194%" height="15" fill="rgb(248,9,4)" fg:x="91" fg:w="1"/><text x="2.0170%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.02%)</title><rect x="1.7670%" y="277" width="0.0194%" height="15" fill="rgb(210,31,22)" fg:x="91" fg:w="1"/><text x="2.0170%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.02%)</title><rect x="1.7670%" y="261" width="0.0194%" height="15" fill="rgb(239,54,39)" fg:x="91" fg:w="1"/><text x="2.0170%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1 samples, 0.02%)</title><rect x="1.7670%" y="245" width="0.0194%" height="15" fill="rgb(230,99,41)" fg:x="91" fg:w="1"/><text x="2.0170%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1 samples, 0.02%)</title><rect x="1.7670%" y="229" width="0.0194%" height="15" fill="rgb(253,106,12)" fg:x="91" fg:w="1"/><text x="2.0170%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.02%)</title><rect x="1.7670%" y="213" width="0.0194%" height="15" fill="rgb(213,46,41)" fg:x="91" fg:w="1"/><text x="2.0170%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="1.7670%" y="197" width="0.0194%" height="15" fill="rgb(215,133,35)" fg:x="91" fg:w="1"/><text x="2.0170%" y="207.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.02%)</title><rect x="1.7670%" y="181" width="0.0194%" height="15" fill="rgb(213,28,5)" fg:x="91" fg:w="1"/><text x="2.0170%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="1.8058%" y="293" width="0.0194%" height="15" fill="rgb(215,77,49)" fg:x="93" fg:w="1"/><text x="2.0558%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.02%)</title><rect x="1.8058%" y="277" width="0.0194%" height="15" fill="rgb(248,100,22)" fg:x="93" fg:w="1"/><text x="2.0558%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (9 samples, 0.17%)</title><rect x="1.8252%" y="293" width="0.1748%" height="15" fill="rgb(208,67,9)" fg:x="94" fg:w="9"/><text x="2.0752%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (9 samples, 0.17%)</title><rect x="1.8252%" y="277" width="0.1748%" height="15" fill="rgb(219,133,21)" fg:x="94" fg:w="9"/><text x="2.0752%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (9 samples, 0.17%)</title><rect x="1.8252%" y="261" width="0.1748%" height="15" fill="rgb(246,46,29)" fg:x="94" fg:w="9"/><text x="2.0752%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (9 samples, 0.17%)</title><rect x="1.8252%" y="245" width="0.1748%" height="15" fill="rgb(246,185,52)" fg:x="94" fg:w="9"/><text x="2.0752%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (9 samples, 0.17%)</title><rect x="1.8252%" y="229" width="0.1748%" height="15" fill="rgb(252,136,11)" fg:x="94" fg:w="9"/><text x="2.0752%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (9 samples, 0.17%)</title><rect x="1.8252%" y="213" width="0.1748%" height="15" fill="rgb(219,138,53)" fg:x="94" fg:w="9"/><text x="2.0752%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (9 samples, 0.17%)</title><rect x="1.8252%" y="197" width="0.1748%" height="15" fill="rgb(211,51,23)" fg:x="94" fg:w="9"/><text x="2.0752%" y="207.50"></text></g><g><title>[libc.so.6] (3 samples, 0.06%)</title><rect x="1.9417%" y="181" width="0.0583%" height="15" fill="rgb(247,221,28)" fg:x="100" fg:w="3"/><text x="2.1917%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (5 samples, 0.10%)</title><rect x="2.0000%" y="293" width="0.0971%" height="15" fill="rgb(251,222,45)" fg:x="103" fg:w="5"/><text x="2.2500%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.10%)</title><rect x="2.0000%" y="277" width="0.0971%" height="15" fill="rgb(217,162,53)" fg:x="103" fg:w="5"/><text x="2.2500%" y="287.50"></text></g><g><title>yt_history::model::Models::find_or_create_video (5 samples, 0.10%)</title><rect x="2.0000%" y="261" width="0.0971%" height="15" fill="rgb(229,93,14)" fg:x="103" fg:w="5"/><text x="2.2500%" y="271.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (20 samples, 0.39%)</title><rect x="1.7282%" y="389" width="0.3883%" height="15" fill="rgb(209,67,49)" fg:x="89" fg:w="20"/><text x="1.9782%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (20 samples, 0.39%)</title><rect x="1.7282%" y="373" width="0.3883%" height="15" fill="rgb(213,87,29)" fg:x="89" fg:w="20"/><text x="1.9782%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (20 samples, 0.39%)</title><rect x="1.7282%" y="357" width="0.3883%" height="15" fill="rgb(205,151,52)" fg:x="89" fg:w="20"/><text x="1.9782%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (17 samples, 0.33%)</title><rect x="1.7864%" y="341" width="0.3301%" height="15" fill="rgb(253,215,39)" fg:x="92" fg:w="17"/><text x="2.0364%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (17 samples, 0.33%)</title><rect x="1.7864%" y="325" width="0.3301%" height="15" fill="rgb(221,220,41)" fg:x="92" fg:w="17"/><text x="2.0364%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (17 samples, 0.33%)</title><rect x="1.7864%" y="309" width="0.3301%" height="15" fill="rgb(218,133,21)" fg:x="92" fg:w="17"/><text x="2.0364%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.02%)</title><rect x="2.0971%" y="293" width="0.0194%" height="15" fill="rgb(221,193,43)" fg:x="108" fg:w="1"/><text x="2.3471%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.02%)</title><rect x="2.0971%" y="277" width="0.0194%" height="15" fill="rgb(240,128,52)" fg:x="108" fg:w="1"/><text x="2.3471%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="2.0971%" y="261" width="0.0194%" height="15" fill="rgb(253,114,12)" fg:x="108" fg:w="1"/><text x="2.3471%" y="271.50"></text></g><g><title>yt_history::model::Models::find_or_create_channel (4 samples, 0.08%)</title><rect x="2.1165%" y="389" width="0.0777%" height="15" fill="rgb(215,223,47)" fg:x="109" fg:w="4"/><text x="2.3665%" y="399.50"></text></g><g><title>yt_history::model::Models::find_channel (2 samples, 0.04%)</title><rect x="2.1553%" y="373" width="0.0388%" height="15" fill="rgb(248,225,23)" fg:x="111" fg:w="2"/><text x="2.4053%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.04%)</title><rect x="2.1553%" y="357" width="0.0388%" height="15" fill="rgb(250,108,0)" fg:x="111" fg:w="2"/><text x="2.4053%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.04%)</title><rect x="2.1553%" y="341" width="0.0388%" height="15" fill="rgb(228,208,7)" fg:x="111" fg:w="2"/><text x="2.4053%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.04%)</title><rect x="2.1553%" y="325" width="0.0388%" height="15" fill="rgb(244,45,10)" fg:x="111" fg:w="2"/><text x="2.4053%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.04%)</title><rect x="2.1553%" y="309" width="0.0388%" height="15" fill="rgb(207,125,25)" fg:x="111" fg:w="2"/><text x="2.4053%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.04%)</title><rect x="2.1553%" y="293" width="0.0388%" height="15" fill="rgb(210,195,18)" fg:x="111" fg:w="2"/><text x="2.4053%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.04%)</title><rect x="2.1553%" y="277" width="0.0388%" height="15" fill="rgb(249,80,12)" fg:x="111" fg:w="2"/><text x="2.4053%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (2 samples, 0.04%)</title><rect x="2.1553%" y="261" width="0.0388%" height="15" fill="rgb(221,65,9)" fg:x="111" fg:w="2"/><text x="2.4053%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2 samples, 0.04%)</title><rect x="2.1553%" y="245" width="0.0388%" height="15" fill="rgb(235,49,36)" fg:x="111" fg:w="2"/><text x="2.4053%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (2 samples, 0.04%)</title><rect x="2.1553%" y="229" width="0.0388%" height="15" fill="rgb(225,32,20)" fg:x="111" fg:w="2"/><text x="2.4053%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2 samples, 0.04%)</title><rect x="2.1553%" y="213" width="0.0388%" height="15" fill="rgb(215,141,46)" fg:x="111" fg:w="2"/><text x="2.4053%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2 samples, 0.04%)</title><rect x="2.1553%" y="197" width="0.0388%" height="15" fill="rgb(250,160,47)" fg:x="111" fg:w="2"/><text x="2.4053%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.04%)</title><rect x="2.1553%" y="181" width="0.0388%" height="15" fill="rgb(216,222,40)" fg:x="111" fg:w="2"/><text x="2.4053%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.02%)</title><rect x="2.1748%" y="165" width="0.0194%" height="15" fill="rgb(234,217,39)" fg:x="112" fg:w="1"/><text x="2.4248%" y="175.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="2.1942%" y="373" width="0.0194%" height="15" fill="rgb(207,178,40)" fg:x="113" fg:w="1"/><text x="2.4442%" y="383.50"></text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.02%)</title><rect x="2.2330%" y="341" width="0.0194%" height="15" fill="rgb(221,136,13)" fg:x="115" fg:w="1"/><text x="2.4830%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="2.2330%" y="325" width="0.0194%" height="15" fill="rgb(249,199,10)" fg:x="115" fg:w="1"/><text x="2.4830%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.02%)</title><rect x="2.2330%" y="309" width="0.0194%" height="15" fill="rgb(249,222,13)" fg:x="115" fg:w="1"/><text x="2.4830%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="2.2330%" y="293" width="0.0194%" height="15" fill="rgb(244,185,38)" fg:x="115" fg:w="1"/><text x="2.4830%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.02%)</title><rect x="2.2330%" y="277" width="0.0194%" height="15" fill="rgb(236,202,9)" fg:x="115" fg:w="1"/><text x="2.4830%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.02%)</title><rect x="2.2330%" y="261" width="0.0194%" height="15" fill="rgb(250,229,37)" fg:x="115" fg:w="1"/><text x="2.4830%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1 samples, 0.02%)</title><rect x="2.2330%" y="245" width="0.0194%" height="15" fill="rgb(206,174,23)" fg:x="115" fg:w="1"/><text x="2.4830%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1 samples, 0.02%)</title><rect x="2.2330%" y="229" width="0.0194%" height="15" fill="rgb(211,33,43)" fg:x="115" fg:w="1"/><text x="2.4830%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="2.2330%" y="213" width="0.0194%" height="15" fill="rgb(245,58,50)" fg:x="115" fg:w="1"/><text x="2.4830%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.02%)</title><rect x="2.2330%" y="197" width="0.0194%" height="15" fill="rgb(244,68,36)" fg:x="115" fg:w="1"/><text x="2.4830%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.02%)</title><rect x="2.2330%" y="181" width="0.0194%" height="15" fill="rgb(232,229,15)" fg:x="115" fg:w="1"/><text x="2.4830%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.02%)</title><rect x="2.2524%" y="293" width="0.0194%" height="15" fill="rgb(254,30,23)" fg:x="116" fg:w="1"/><text x="2.5024%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.02%)</title><rect x="2.2524%" y="277" width="0.0194%" height="15" fill="rgb(235,160,14)" fg:x="116" fg:w="1"/><text x="2.5024%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="2.2524%" y="261" width="0.0194%" height="15" fill="rgb(212,155,44)" fg:x="116" fg:w="1"/><text x="2.5024%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.02%)</title><rect x="2.2524%" y="245" width="0.0194%" height="15" fill="rgb(226,2,50)" fg:x="116" fg:w="1"/><text x="2.5024%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.02%)</title><rect x="2.2524%" y="229" width="0.0194%" height="15" fill="rgb(234,177,6)" fg:x="116" fg:w="1"/><text x="2.5024%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.02%)</title><rect x="2.2524%" y="213" width="0.0194%" height="15" fill="rgb(217,24,9)" fg:x="116" fg:w="1"/><text x="2.5024%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.02%)</title><rect x="2.2524%" y="197" width="0.0194%" height="15" fill="rgb(220,13,46)" fg:x="116" fg:w="1"/><text x="2.5024%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="2.2524%" y="181" width="0.0194%" height="15" fill="rgb(239,221,27)" fg:x="116" fg:w="1"/><text x="2.5024%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (2 samples, 0.04%)</title><rect x="2.2524%" y="341" width="0.0388%" height="15" fill="rgb(222,198,25)" fg:x="116" fg:w="2"/><text x="2.5024%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.04%)</title><rect x="2.2524%" y="325" width="0.0388%" height="15" fill="rgb(211,99,13)" fg:x="116" fg:w="2"/><text x="2.5024%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.04%)</title><rect x="2.2524%" y="309" width="0.0388%" height="15" fill="rgb(232,111,31)" fg:x="116" fg:w="2"/><text x="2.5024%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.02%)</title><rect x="2.2718%" y="293" width="0.0194%" height="15" fill="rgb(245,82,37)" fg:x="117" fg:w="1"/><text x="2.5218%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.02%)</title><rect x="2.2718%" y="277" width="0.0194%" height="15" fill="rgb(227,149,46)" fg:x="117" fg:w="1"/><text x="2.5218%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.02%)</title><rect x="2.2718%" y="261" width="0.0194%" height="15" fill="rgb(218,36,50)" fg:x="117" fg:w="1"/><text x="2.5218%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="2.2913%" y="261" width="0.0194%" height="15" fill="rgb(226,80,48)" fg:x="118" fg:w="1"/><text x="2.5413%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (5 samples, 0.10%)</title><rect x="2.3107%" y="261" width="0.0971%" height="15" fill="rgb(238,224,15)" fg:x="119" fg:w="5"/><text x="2.5607%" y="271.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (5 samples, 0.10%)</title><rect x="2.3107%" y="245" width="0.0971%" height="15" fill="rgb(241,136,10)" fg:x="119" fg:w="5"/><text x="2.5607%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.10%)</title><rect x="2.3107%" y="229" width="0.0971%" height="15" fill="rgb(208,32,45)" fg:x="119" fg:w="5"/><text x="2.5607%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.10%)</title><rect x="2.3107%" y="213" width="0.0971%" height="15" fill="rgb(207,135,9)" fg:x="119" fg:w="5"/><text x="2.5607%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.10%)</title><rect x="2.3107%" y="197" width="0.0971%" height="15" fill="rgb(206,86,44)" fg:x="119" fg:w="5"/><text x="2.5607%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (5 samples, 0.10%)</title><rect x="2.3107%" y="181" width="0.0971%" height="15" fill="rgb(245,177,15)" fg:x="119" fg:w="5"/><text x="2.5607%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (5 samples, 0.10%)</title><rect x="2.3107%" y="165" width="0.0971%" height="15" fill="rgb(206,64,50)" fg:x="119" fg:w="5"/><text x="2.5607%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (5 samples, 0.10%)</title><rect x="2.3107%" y="149" width="0.0971%" height="15" fill="rgb(234,36,40)" fg:x="119" fg:w="5"/><text x="2.5607%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (5 samples, 0.10%)</title><rect x="2.3107%" y="133" width="0.0971%" height="15" fill="rgb(213,64,8)" fg:x="119" fg:w="5"/><text x="2.5607%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (5 samples, 0.10%)</title><rect x="2.3107%" y="117" width="0.0971%" height="15" fill="rgb(210,75,36)" fg:x="119" fg:w="5"/><text x="2.5607%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.10%)</title><rect x="2.3107%" y="101" width="0.0971%" height="15" fill="rgb(229,88,21)" fg:x="119" fg:w="5"/><text x="2.5607%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.10%)</title><rect x="2.3107%" y="85" width="0.0971%" height="15" fill="rgb(252,204,47)" fg:x="119" fg:w="5"/><text x="2.5607%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.02%)</title><rect x="2.3883%" y="69" width="0.0194%" height="15" fill="rgb(208,77,27)" fg:x="123" fg:w="1"/><text x="2.6383%" y="79.50"></text></g><g><title>yt_history::model::Models::find_or_create_video (53 samples, 1.03%)</title><rect x="1.3981%" y="405" width="1.0291%" height="15" fill="rgb(221,76,26)" fg:x="72" fg:w="53"/><text x="1.6481%" y="415.50"></text></g><g><title>yt_history::model::Models::insert_video (12 samples, 0.23%)</title><rect x="2.1942%" y="389" width="0.2330%" height="15" fill="rgb(225,139,18)" fg:x="113" fg:w="12"/><text x="2.4442%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (11 samples, 0.21%)</title><rect x="2.2136%" y="373" width="0.2136%" height="15" fill="rgb(230,137,11)" fg:x="114" fg:w="11"/><text x="2.4636%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11 samples, 0.21%)</title><rect x="2.2136%" y="357" width="0.2136%" height="15" fill="rgb(212,28,1)" fg:x="114" fg:w="11"/><text x="2.4636%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (7 samples, 0.14%)</title><rect x="2.2913%" y="341" width="0.1359%" height="15" fill="rgb(248,164,17)" fg:x="118" fg:w="7"/><text x="2.5413%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (7 samples, 0.14%)</title><rect x="2.2913%" y="325" width="0.1359%" height="15" fill="rgb(222,171,42)" fg:x="118" fg:w="7"/><text x="2.5413%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.14%)</title><rect x="2.2913%" y="309" width="0.1359%" height="15" fill="rgb(243,84,45)" fg:x="118" fg:w="7"/><text x="2.5413%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (7 samples, 0.14%)</title><rect x="2.2913%" y="293" width="0.1359%" height="15" fill="rgb(252,49,23)" fg:x="118" fg:w="7"/><text x="2.5413%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (7 samples, 0.14%)</title><rect x="2.2913%" y="277" width="0.1359%" height="15" fill="rgb(215,19,7)" fg:x="118" fg:w="7"/><text x="2.5413%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (1 samples, 0.02%)</title><rect x="2.4078%" y="261" width="0.0194%" height="15" fill="rgb(238,81,41)" fg:x="124" fg:w="1"/><text x="2.6578%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (1 samples, 0.02%)</title><rect x="2.4078%" y="245" width="0.0194%" height="15" fill="rgb(210,199,37)" fg:x="124" fg:w="1"/><text x="2.6578%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="2.4466%" y="389" width="0.0194%" height="15" fill="rgb(244,192,49)" fg:x="126" fg:w="1"/><text x="2.6966%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="2.4466%" y="373" width="0.0194%" height="15" fill="rgb(226,211,11)" fg:x="126" fg:w="1"/><text x="2.6966%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="2.4466%" y="357" width="0.0194%" height="15" fill="rgb(236,162,54)" fg:x="126" fg:w="1"/><text x="2.6966%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="2.4466%" y="341" width="0.0194%" height="15" fill="rgb(220,229,9)" fg:x="126" fg:w="1"/><text x="2.6966%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.02%)</title><rect x="2.4466%" y="325" width="0.0194%" height="15" fill="rgb(250,87,22)" fg:x="126" fg:w="1"/><text x="2.6966%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.02%)</title><rect x="2.4466%" y="309" width="0.0194%" height="15" fill="rgb(239,43,17)" fg:x="126" fg:w="1"/><text x="2.6966%" y="319.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect x="2.4466%" y="293" width="0.0194%" height="15" fill="rgb(231,177,25)" fg:x="126" fg:w="1"/><text x="2.6966%" y="303.50"></text></g><g><title>realloc (1 samples, 0.02%)</title><rect x="2.4466%" y="277" width="0.0194%" height="15" fill="rgb(219,179,1)" fg:x="126" fg:w="1"/><text x="2.6966%" y="287.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="2.4466%" y="261" width="0.0194%" height="15" fill="rgb(238,219,53)" fg:x="126" fg:w="1"/><text x="2.6966%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="2.4466%" y="245" width="0.0194%" height="15" fill="rgb(232,167,36)" fg:x="126" fg:w="1"/><text x="2.6966%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="2.4466%" y="229" width="0.0194%" height="15" fill="rgb(244,19,51)" fg:x="126" fg:w="1"/><text x="2.6966%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="2.4466%" y="213" width="0.0194%" height="15" fill="rgb(224,6,22)" fg:x="126" fg:w="1"/><text x="2.6966%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="2.4466%" y="197" width="0.0194%" height="15" fill="rgb(224,145,5)" fg:x="126" fg:w="1"/><text x="2.6966%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="2.4466%" y="181" width="0.0194%" height="15" fill="rgb(234,130,49)" fg:x="126" fg:w="1"/><text x="2.6966%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="2.4466%" y="165" width="0.0194%" height="15" fill="rgb(254,6,2)" fg:x="126" fg:w="1"/><text x="2.6966%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="2.4466%" y="149" width="0.0194%" height="15" fill="rgb(208,96,46)" fg:x="126" fg:w="1"/><text x="2.6966%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="2.4466%" y="133" width="0.0194%" height="15" fill="rgb(239,3,39)" fg:x="126" fg:w="1"/><text x="2.6966%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="2.4466%" y="117" width="0.0194%" height="15" fill="rgb(233,210,1)" fg:x="126" fg:w="1"/><text x="2.6966%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="2.4466%" y="101" width="0.0194%" height="15" fill="rgb(244,137,37)" fg:x="126" fg:w="1"/><text x="2.6966%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="2.4466%" y="85" width="0.0194%" height="15" fill="rgb(240,136,2)" fg:x="126" fg:w="1"/><text x="2.6966%" y="95.50"></text></g><g><title>yt_history::parser::html_parser::ModelsParser::insert_row (82 samples, 1.59%)</title><rect x="0.8932%" y="421" width="1.5922%" height="15" fill="rgb(239,18,37)" fg:x="46" fg:w="82"/><text x="1.1432%" y="431.50"></text></g><g><title>yt_history::model::Models::insert_watched (3 samples, 0.06%)</title><rect x="2.4272%" y="405" width="0.0583%" height="15" fill="rgb(218,185,22)" fg:x="125" fg:w="3"/><text x="2.6772%" y="415.50"></text></g><g><title>yt_history::model::Models::find_video (1 samples, 0.02%)</title><rect x="2.4660%" y="389" width="0.0194%" height="15" fill="rgb(225,218,4)" fg:x="127" fg:w="1"/><text x="2.7160%" y="399.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.02%)</title><rect x="2.5631%" y="405" width="0.0194%" height="15" fill="rgb(230,182,32)" fg:x="132" fg:w="1"/><text x="2.8131%" y="415.50"></text></g><g><title>&lt;chrono::datetime::DateTime&lt;chrono::offset::fixed::FixedOffset&gt; as core::convert::From&lt;chrono::datetime::DateTime&lt;chrono::offset::utc::Utc&gt;&gt;&gt;::from (1 samples, 0.02%)</title><rect x="2.5631%" y="389" width="0.0194%" height="15" fill="rgb(242,56,43)" fg:x="132" fg:w="1"/><text x="2.8131%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.02%)</title><rect x="2.5825%" y="405" width="0.0194%" height="15" fill="rgb(233,99,24)" fg:x="133" fg:w="1"/><text x="2.8325%" y="415.50"></text></g><g><title>&lt;yt_history::parser::html_parser::DataRow as core::default::Default&gt;::default (4 samples, 0.08%)</title><rect x="2.6019%" y="405" width="0.0777%" height="15" fill="rgb(234,209,42)" fg:x="134" fg:w="4"/><text x="2.8519%" y="415.50"></text></g><g><title>alloc::string::String::new (1 samples, 0.02%)</title><rect x="2.6602%" y="389" width="0.0194%" height="15" fill="rgb(227,7,12)" fg:x="137" fg:w="1"/><text x="2.9102%" y="399.50"></text></g><g><title>chrono::format::parse::parse (1 samples, 0.02%)</title><rect x="2.7184%" y="373" width="0.0194%" height="15" fill="rgb(245,203,43)" fg:x="140" fg:w="1"/><text x="2.9684%" y="383.50"></text></g><g><title>&lt;chrono::format::strftime::StrftimeItems as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="3.8835%" y="245" width="0.0194%" height="15" fill="rgb(238,205,33)" fg:x="200" fg:w="1"/><text x="4.1335%" y="255.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (3 samples, 0.06%)</title><rect x="3.8641%" y="341" width="0.0583%" height="15" fill="rgb(231,56,7)" fg:x="199" fg:w="3"/><text x="4.1141%" y="351.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (3 samples, 0.06%)</title><rect x="3.8641%" y="325" width="0.0583%" height="15" fill="rgb(244,186,29)" fg:x="199" fg:w="3"/><text x="4.1141%" y="335.50"></text></g><g><title>core::str::pattern::Searcher::next_match (3 samples, 0.06%)</title><rect x="3.8641%" y="309" width="0.0583%" height="15" fill="rgb(234,111,31)" fg:x="199" fg:w="3"/><text x="4.1141%" y="319.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (3 samples, 0.06%)</title><rect x="3.8641%" y="293" width="0.0583%" height="15" fill="rgb(241,149,10)" fg:x="199" fg:w="3"/><text x="4.1141%" y="303.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.06%)</title><rect x="3.8641%" y="277" width="0.0583%" height="15" fill="rgb(249,206,44)" fg:x="199" fg:w="3"/><text x="4.1141%" y="287.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="3.8835%" y="261" width="0.0388%" height="15" fill="rgb(251,153,30)" fg:x="200" fg:w="2"/><text x="4.1335%" y="271.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.02%)</title><rect x="3.9029%" y="245" width="0.0194%" height="15" fill="rgb(239,152,38)" fg:x="201" fg:w="1"/><text x="4.1529%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="3.9029%" y="229" width="0.0194%" height="15" fill="rgb(249,139,47)" fg:x="201" fg:w="1"/><text x="4.1529%" y="239.50"></text></g><g><title>&lt;chrono::format::strftime::StrftimeItems as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.41%)</title><rect x="3.5340%" y="357" width="0.4078%" height="15" fill="rgb(244,64,35)" fg:x="182" fg:w="21"/><text x="3.7840%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (1 samples, 0.02%)</title><rect x="3.9223%" y="341" width="0.0194%" height="15" fill="rgb(216,46,15)" fg:x="202" fg:w="1"/><text x="4.1723%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::index (1 samples, 0.02%)</title><rect x="3.9223%" y="325" width="0.0194%" height="15" fill="rgb(250,74,19)" fg:x="202" fg:w="1"/><text x="4.1723%" y="335.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get (1 samples, 0.02%)</title><rect x="3.9223%" y="309" width="0.0194%" height="15" fill="rgb(249,42,33)" fg:x="202" fg:w="1"/><text x="4.1723%" y="319.50"></text></g><g><title>chrono::format::parse::parse (1 samples, 0.02%)</title><rect x="3.9417%" y="357" width="0.0194%" height="15" fill="rgb(242,149,17)" fg:x="203" fg:w="1"/><text x="4.1917%" y="367.50"></text></g><g><title>chrono::format::scan::timezone_name_skip (2 samples, 0.04%)</title><rect x="3.9612%" y="357" width="0.0388%" height="15" fill="rgb(244,29,21)" fg:x="204" fg:w="2"/><text x="4.2112%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_left_matches (2 samples, 0.04%)</title><rect x="3.9612%" y="341" width="0.0388%" height="15" fill="rgb(220,130,37)" fg:x="204" fg:w="2"/><text x="4.2112%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start_matches (2 samples, 0.04%)</title><rect x="3.9612%" y="325" width="0.0388%" height="15" fill="rgb(211,67,2)" fg:x="204" fg:w="2"/><text x="4.2112%" y="335.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_reject (2 samples, 0.04%)</title><rect x="3.9612%" y="309" width="0.0388%" height="15" fill="rgb(235,68,52)" fg:x="204" fg:w="2"/><text x="4.2112%" y="319.50"></text></g><g><title>core::str::pattern::Searcher::next_reject (2 samples, 0.04%)</title><rect x="3.9612%" y="293" width="0.0388%" height="15" fill="rgb(246,142,3)" fg:x="204" fg:w="2"/><text x="4.2112%" y="303.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (2 samples, 0.04%)</title><rect x="3.9612%" y="277" width="0.0388%" height="15" fill="rgb(241,25,7)" fg:x="204" fg:w="2"/><text x="4.2112%" y="287.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (2 samples, 0.04%)</title><rect x="3.9612%" y="261" width="0.0388%" height="15" fill="rgb(242,119,39)" fg:x="204" fg:w="2"/><text x="4.2112%" y="271.50"></text></g><g><title>chrono::format::scan::timezone_name_skip::{{closure}} (2 samples, 0.04%)</title><rect x="3.9612%" y="245" width="0.0388%" height="15" fill="rgb(241,98,45)" fg:x="204" fg:w="2"/><text x="4.2112%" y="255.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (2 samples, 0.04%)</title><rect x="3.9612%" y="229" width="0.0388%" height="15" fill="rgb(254,28,30)" fg:x="204" fg:w="2"/><text x="4.2112%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.02%)</title><rect x="4.0000%" y="357" width="0.0194%" height="15" fill="rgb(241,142,54)" fg:x="206" fg:w="1"/><text x="4.2500%" y="367.50"></text></g><g><title>chrono::format::parse::parse (68 samples, 1.32%)</title><rect x="2.7184%" y="389" width="1.3204%" height="15" fill="rgb(222,85,15)" fg:x="140" fg:w="68"/><text x="2.9684%" y="399.50"></text></g><g><title>chrono::format::parse::parse_internal (67 samples, 1.30%)</title><rect x="2.7379%" y="373" width="1.3010%" height="15" fill="rgb(210,85,47)" fg:x="141" fg:w="67"/><text x="2.9879%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_left (1 samples, 0.02%)</title><rect x="4.0194%" y="357" width="0.0194%" height="15" fill="rgb(224,206,25)" fg:x="207" fg:w="1"/><text x="4.2694%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start (1 samples, 0.02%)</title><rect x="4.0194%" y="341" width="0.0194%" height="15" fill="rgb(243,201,19)" fg:x="207" fg:w="1"/><text x="4.2694%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start_matches (1 samples, 0.02%)</title><rect x="4.0194%" y="325" width="0.0194%" height="15" fill="rgb(236,59,4)" fg:x="207" fg:w="1"/><text x="4.2694%" y="335.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_reject (1 samples, 0.02%)</title><rect x="4.0194%" y="309" width="0.0194%" height="15" fill="rgb(254,179,45)" fg:x="207" fg:w="1"/><text x="4.2694%" y="319.50"></text></g><g><title>core::str::pattern::Searcher::next_reject (1 samples, 0.02%)</title><rect x="4.0194%" y="293" width="0.0194%" height="15" fill="rgb(226,14,10)" fg:x="207" fg:w="1"/><text x="4.2694%" y="303.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (1 samples, 0.02%)</title><rect x="4.0194%" y="277" width="0.0194%" height="15" fill="rgb(244,27,41)" fg:x="207" fg:w="1"/><text x="4.2694%" y="287.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (1 samples, 0.02%)</title><rect x="4.0194%" y="261" width="0.0194%" height="15" fill="rgb(235,35,32)" fg:x="207" fg:w="1"/><text x="4.2694%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start::{{closure}} (1 samples, 0.02%)</title><rect x="4.0194%" y="245" width="0.0194%" height="15" fill="rgb(218,68,31)" fg:x="207" fg:w="1"/><text x="4.2694%" y="255.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (1 samples, 0.02%)</title><rect x="4.0194%" y="229" width="0.0194%" height="15" fill="rgb(207,120,37)" fg:x="207" fg:w="1"/><text x="4.2694%" y="239.50"></text></g><g><title>chrono::format::parsed::Parsed::new (1 samples, 0.02%)</title><rect x="4.0388%" y="389" width="0.0194%" height="15" fill="rgb(227,98,0)" fg:x="208" fg:w="1"/><text x="4.2888%" y="399.50"></text></g><g><title>&lt;chrono::format::parsed::Parsed as core::default::Default&gt;::default (1 samples, 0.02%)</title><rect x="4.0388%" y="373" width="0.0194%" height="15" fill="rgb(207,7,3)" fg:x="208" fg:w="1"/><text x="4.2888%" y="383.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date::{{closure}} (2 samples, 0.04%)</title><rect x="4.1359%" y="341" width="0.0388%" height="15" fill="rgb(206,98,19)" fg:x="213" fg:w="2"/><text x="4.3859%" y="351.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date::{{closure}} (1 samples, 0.02%)</title><rect x="4.1553%" y="325" width="0.0194%" height="15" fill="rgb(217,5,26)" fg:x="214" fg:w="1"/><text x="4.4053%" y="335.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_of (2 samples, 0.04%)</title><rect x="4.1748%" y="309" width="0.0388%" height="15" fill="rgb(235,190,38)" fg:x="215" fg:w="2"/><text x="4.4248%" y="319.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (2 samples, 0.04%)</title><rect x="4.1748%" y="293" width="0.0388%" height="15" fill="rgb(247,86,24)" fg:x="215" fg:w="2"/><text x="4.4248%" y="303.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date (2 samples, 0.04%)</title><rect x="4.1748%" y="277" width="0.0388%" height="15" fill="rgb(205,101,16)" fg:x="215" fg:w="2"/><text x="4.4248%" y="287.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_mdf (3 samples, 0.06%)</title><rect x="4.1748%" y="325" width="0.0583%" height="15" fill="rgb(246,168,33)" fg:x="215" fg:w="3"/><text x="4.4248%" y="335.50"></text></g><g><title>chrono::naive::internals::Mdf::to_of (1 samples, 0.02%)</title><rect x="4.2136%" y="309" width="0.0194%" height="15" fill="rgb(231,114,1)" fg:x="217" fg:w="1"/><text x="4.4636%" y="319.50"></text></g><g><title>chrono::naive::internals::Of::from_mdf (1 samples, 0.02%)</title><rect x="4.2136%" y="293" width="0.0194%" height="15" fill="rgb(207,184,53)" fg:x="217" fg:w="1"/><text x="4.4636%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.02%)</title><rect x="4.2136%" y="277" width="0.0194%" height="15" fill="rgb(224,95,51)" fg:x="217" fg:w="1"/><text x="4.4636%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.02%)</title><rect x="4.2136%" y="261" width="0.0194%" height="15" fill="rgb(212,188,45)" fg:x="217" fg:w="1"/><text x="4.4636%" y="271.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date (7 samples, 0.14%)</title><rect x="4.1165%" y="357" width="0.1359%" height="15" fill="rgb(223,154,38)" fg:x="212" fg:w="7"/><text x="4.3665%" y="367.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (4 samples, 0.08%)</title><rect x="4.1748%" y="341" width="0.0777%" height="15" fill="rgb(251,22,52)" fg:x="215" fg:w="4"/><text x="4.4248%" y="351.50"></text></g><g><title>chrono::naive::internals::Mdf::new (1 samples, 0.02%)</title><rect x="4.2330%" y="325" width="0.0194%" height="15" fill="rgb(229,209,22)" fg:x="218" fg:w="1"/><text x="4.4830%" y="335.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_datetime_with_offset (9 samples, 0.17%)</title><rect x="4.1165%" y="373" width="0.1748%" height="15" fill="rgb(234,138,34)" fg:x="212" fg:w="9"/><text x="4.3665%" y="383.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::timestamp (2 samples, 0.04%)</title><rect x="4.2524%" y="357" width="0.0388%" height="15" fill="rgb(212,95,11)" fg:x="219" fg:w="2"/><text x="4.5024%" y="367.50"></text></g><g><title>chrono::traits::Datelike::num_days_from_ce (2 samples, 0.04%)</title><rect x="4.2524%" y="341" width="0.0388%" height="15" fill="rgb(240,179,47)" fg:x="219" fg:w="2"/><text x="4.5024%" y="351.50"></text></g><g><title>chrono::format::parsed::Parsed::to_datetime_with_timezone (16 samples, 0.31%)</title><rect x="4.0583%" y="389" width="0.3107%" height="15" fill="rgb(240,163,11)" fg:x="209" fg:w="16"/><text x="4.3083%" y="399.50"></text></g><g><title>chrono::offset::TimeZone::from_local_datetime (4 samples, 0.08%)</title><rect x="4.2913%" y="373" width="0.0777%" height="15" fill="rgb(236,37,12)" fg:x="221" fg:w="4"/><text x="4.5413%" y="383.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::map (4 samples, 0.08%)</title><rect x="4.2913%" y="357" width="0.0777%" height="15" fill="rgb(232,164,16)" fg:x="221" fg:w="4"/><text x="4.5413%" y="367.50"></text></g><g><title>chrono::offset::TimeZone::from_local_datetime::{{closure}} (4 samples, 0.08%)</title><rect x="4.2913%" y="341" width="0.0777%" height="15" fill="rgb(244,205,15)" fg:x="221" fg:w="4"/><text x="4.5413%" y="351.50"></text></g><g><title>chrono::offset::fixed::&lt;impl core::ops::arith::Sub&lt;chrono::offset::fixed::FixedOffset&gt; for chrono::naive::datetime::NaiveDateTime&gt;::sub (4 samples, 0.08%)</title><rect x="4.2913%" y="325" width="0.0777%" height="15" fill="rgb(223,117,47)" fg:x="221" fg:w="4"/><text x="4.5413%" y="335.50"></text></g><g><title>chrono::offset::fixed::add_with_leapsecond (4 samples, 0.08%)</title><rect x="4.2913%" y="309" width="0.0777%" height="15" fill="rgb(244,107,35)" fg:x="221" fg:w="4"/><text x="4.5413%" y="319.50"></text></g><g><title>&lt;chrono::naive::datetime::NaiveDateTime as core::ops::arith::Add&lt;time::duration::Duration&gt;&gt;::add (4 samples, 0.08%)</title><rect x="4.2913%" y="293" width="0.0777%" height="15" fill="rgb(205,140,8)" fg:x="221" fg:w="4"/><text x="4.5413%" y="303.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_signed (4 samples, 0.08%)</title><rect x="4.2913%" y="277" width="0.0777%" height="15" fill="rgb(228,84,46)" fg:x="221" fg:w="4"/><text x="4.5413%" y="287.50"></text></g><g><title>chrono::naive::date::NaiveDate::checked_add_signed (1 samples, 0.02%)</title><rect x="4.3495%" y="261" width="0.0194%" height="15" fill="rgb(254,188,9)" fg:x="224" fg:w="1"/><text x="4.5995%" y="271.50"></text></g><g><title>num_integer::div_mod_floor (1 samples, 0.02%)</title><rect x="4.3495%" y="245" width="0.0194%" height="15" fill="rgb(206,112,54)" fg:x="224" fg:w="1"/><text x="4.5995%" y="255.50"></text></g><g><title>&lt;i32 as num_integer::Integer&gt;::div_mod_floor (1 samples, 0.02%)</title><rect x="4.3495%" y="229" width="0.0194%" height="15" fill="rgb(216,84,49)" fg:x="224" fg:w="1"/><text x="4.5995%" y="239.50"></text></g><g><title>chrono::offset::TimeZone::datetime_from_str (89 samples, 1.73%)</title><rect x="2.6796%" y="405" width="1.7282%" height="15" fill="rgb(214,194,35)" fg:x="138" fg:w="89"/><text x="2.9296%" y="415.50"></text></g><g><title>chrono::format::strftime::StrftimeItems::new (2 samples, 0.04%)</title><rect x="4.3689%" y="389" width="0.0388%" height="15" fill="rgb(249,28,3)" fg:x="225" fg:w="2"/><text x="4.6189%" y="399.50"></text></g><g><title>chrono::format::strftime::StrftimeItems::with_remainer (1 samples, 0.02%)</title><rect x="4.3883%" y="373" width="0.0194%" height="15" fill="rgb(222,56,52)" fg:x="226" fg:w="1"/><text x="4.6383%" y="383.50"></text></g><g><title>yt_history::parser::html_parser::ModelsParser::peek (6 samples, 0.12%)</title><rect x="4.4078%" y="405" width="0.1165%" height="15" fill="rgb(245,217,50)" fg:x="227" fg:w="6"/><text x="4.6578%" y="415.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (6 samples, 0.12%)</title><rect x="4.4078%" y="389" width="0.1165%" height="15" fill="rgb(213,201,24)" fg:x="227" fg:w="6"/><text x="4.6578%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (6 samples, 0.12%)</title><rect x="4.4078%" y="373" width="0.1165%" height="15" fill="rgb(248,116,28)" fg:x="227" fg:w="6"/><text x="4.6578%" y="383.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (3 samples, 0.06%)</title><rect x="4.4660%" y="357" width="0.0583%" height="15" fill="rgb(219,72,43)" fg:x="230" fg:w="3"/><text x="4.7160%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.06%)</title><rect x="4.4660%" y="341" width="0.0583%" height="15" fill="rgb(209,138,14)" fg:x="230" fg:w="3"/><text x="4.7160%" y="351.50"></text></g><g><title>&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.06%)</title><rect x="4.4660%" y="325" width="0.0583%" height="15" fill="rgb(222,18,33)" fg:x="230" fg:w="3"/><text x="4.7160%" y="335.50"></text></g><g><title>yt_history::utf8_reader::Utf8Iter&lt;R&gt;::next (2 samples, 0.04%)</title><rect x="4.4854%" y="309" width="0.0388%" height="15" fill="rgb(213,199,7)" fg:x="231" fg:w="2"/><text x="4.7354%" y="319.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.04%)</title><rect x="4.4854%" y="293" width="0.0388%" height="15" fill="rgb(250,110,10)" fg:x="231" fg:w="2"/><text x="4.7354%" y="303.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (1 samples, 0.02%)</title><rect x="4.5049%" y="277" width="0.0194%" height="15" fill="rgb(248,123,6)" fg:x="232" fg:w="1"/><text x="4.7549%" y="287.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (273 samples, 5.30%)</title><rect x="5.6893%" y="341" width="5.3010%" height="15" fill="rgb(206,91,31)" fg:x="293" fg:w="273"/><text x="5.9393%" y="351.50">&lt;core:..</text></g><g><title>&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.27%)</title><rect x="11.4951%" y="325" width="0.2718%" height="15" fill="rgb(211,154,13)" fg:x="592" fg:w="14"/><text x="11.7451%" y="335.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.25%)</title><rect x="13.7864%" y="309" width="0.2524%" height="15" fill="rgb(225,148,7)" fg:x="710" fg:w="13"/><text x="14.0364%" y="319.50"></text></g><g><title>core::str::validations::next_code_point (13 samples, 0.25%)</title><rect x="13.7864%" y="293" width="0.2524%" height="15" fill="rgb(220,160,43)" fg:x="710" fg:w="13"/><text x="14.0364%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.21%)</title><rect x="13.8252%" y="277" width="0.2136%" height="15" fill="rgb(213,52,39)" fg:x="712" fg:w="11"/><text x="14.0752%" y="287.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (4 samples, 0.08%)</title><rect x="14.9709%" y="293" width="0.0777%" height="15" fill="rgb(243,137,7)" fg:x="771" fg:w="4"/><text x="15.2209%" y="303.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (4 samples, 0.08%)</title><rect x="14.9709%" y="277" width="0.0777%" height="15" fill="rgb(230,79,13)" fg:x="771" fg:w="4"/><text x="15.2209%" y="287.50"></text></g><g><title>core::cmp::min (2 samples, 0.04%)</title><rect x="15.0097%" y="261" width="0.0388%" height="15" fill="rgb(247,105,23)" fg:x="773" fg:w="2"/><text x="15.2597%" y="271.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.04%)</title><rect x="15.0097%" y="245" width="0.0388%" height="15" fill="rgb(223,179,41)" fg:x="773" fg:w="2"/><text x="15.2597%" y="255.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (3 samples, 0.06%)</title><rect x="15.0485%" y="293" width="0.0583%" height="15" fill="rgb(218,9,34)" fg:x="775" fg:w="3"/><text x="15.2985%" y="303.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (3 samples, 0.06%)</title><rect x="15.0485%" y="277" width="0.0583%" height="15" fill="rgb(222,106,8)" fg:x="775" fg:w="3"/><text x="15.2985%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (3 samples, 0.06%)</title><rect x="15.0485%" y="261" width="0.0583%" height="15" fill="rgb(211,220,0)" fg:x="775" fg:w="3"/><text x="15.2985%" y="271.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (3 samples, 0.06%)</title><rect x="15.0485%" y="245" width="0.0583%" height="15" fill="rgb(229,52,16)" fg:x="775" fg:w="3"/><text x="15.2985%" y="255.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (3 samples, 0.06%)</title><rect x="15.0485%" y="229" width="0.0583%" height="15" fill="rgb(212,155,18)" fg:x="775" fg:w="3"/><text x="15.2985%" y="239.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (3 samples, 0.06%)</title><rect x="15.0485%" y="213" width="0.0583%" height="15" fill="rgb(242,21,14)" fg:x="775" fg:w="3"/><text x="15.2985%" y="223.50"></text></g><g><title>read (3 samples, 0.06%)</title><rect x="15.0485%" y="197" width="0.0583%" height="15" fill="rgb(222,19,48)" fg:x="775" fg:w="3"/><text x="15.2985%" y="207.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="15.0485%" y="181" width="0.0583%" height="15" fill="rgb(232,45,27)" fg:x="775" fg:w="3"/><text x="15.2985%" y="191.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="15.0485%" y="165" width="0.0583%" height="15" fill="rgb(249,103,42)" fg:x="775" fg:w="3"/><text x="15.2985%" y="175.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="15.0485%" y="149" width="0.0583%" height="15" fill="rgb(246,81,33)" fg:x="775" fg:w="3"/><text x="15.2985%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="15.0680%" y="133" width="0.0388%" height="15" fill="rgb(252,33,42)" fg:x="776" fg:w="2"/><text x="15.3180%" y="143.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="15.0680%" y="117" width="0.0388%" height="15" fill="rgb(209,212,41)" fg:x="776" fg:w="2"/><text x="15.3180%" y="127.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.04%)</title><rect x="15.1068%" y="293" width="0.0388%" height="15" fill="rgb(207,154,6)" fg:x="778" fg:w="2"/><text x="15.3568%" y="303.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::filled (3 samples, 0.06%)</title><rect x="15.1456%" y="293" width="0.0583%" height="15" fill="rgb(223,64,47)" fg:x="780" fg:w="3"/><text x="15.3956%" y="303.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::pos (5 samples, 0.10%)</title><rect x="15.2039%" y="293" width="0.0971%" height="15" fill="rgb(211,161,38)" fg:x="783" fg:w="5"/><text x="15.4539%" y="303.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (75 samples, 1.46%)</title><rect x="14.0388%" y="309" width="1.4563%" height="15" fill="rgb(219,138,40)" fg:x="723" fg:w="75"/><text x="14.2888%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (10 samples, 0.19%)</title><rect x="15.3010%" y="293" width="0.1942%" height="15" fill="rgb(241,228,46)" fg:x="788" fg:w="10"/><text x="15.5510%" y="303.50"></text></g><g><title>core::cmp::min (1 samples, 0.02%)</title><rect x="15.4757%" y="277" width="0.0194%" height="15" fill="rgb(223,209,38)" fg:x="797" fg:w="1"/><text x="15.7257%" y="287.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.02%)</title><rect x="15.4757%" y="261" width="0.0194%" height="15" fill="rgb(236,164,45)" fg:x="797" fg:w="1"/><text x="15.7257%" y="271.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (3 samples, 0.06%)</title><rect x="15.4951%" y="309" width="0.0583%" height="15" fill="rgb(231,15,5)" fg:x="798" fg:w="3"/><text x="15.7451%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.06%)</title><rect x="15.4951%" y="293" width="0.0583%" height="15" fill="rgb(252,35,15)" fg:x="798" fg:w="3"/><text x="15.7451%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.06%)</title><rect x="15.4951%" y="277" width="0.0583%" height="15" fill="rgb(248,181,18)" fg:x="798" fg:w="3"/><text x="15.7451%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.06%)</title><rect x="15.4951%" y="261" width="0.0583%" height="15" fill="rgb(233,39,42)" fg:x="798" fg:w="3"/><text x="15.7451%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="15.5534%" y="277" width="0.0194%" height="15" fill="rgb(238,110,33)" fg:x="801" fg:w="1"/><text x="15.8034%" y="287.50"></text></g><g><title>core::array::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T: N]&gt;::index_mut (9 samples, 0.17%)</title><rect x="15.5534%" y="309" width="0.1748%" height="15" fill="rgb(233,195,10)" fg:x="801" fg:w="9"/><text x="15.8034%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (9 samples, 0.17%)</title><rect x="15.5534%" y="293" width="0.1748%" height="15" fill="rgb(254,105,3)" fg:x="801" fg:w="9"/><text x="15.8034%" y="303.50"></text></g><g><title>&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.16%)</title><rect x="15.5728%" y="277" width="0.1553%" height="15" fill="rgb(221,225,9)" fg:x="802" fg:w="8"/><text x="15.8228%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (3 samples, 0.06%)</title><rect x="15.7282%" y="309" width="0.0583%" height="15" fill="rgb(224,227,45)" fg:x="810" fg:w="3"/><text x="15.9782%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_within (6 samples, 0.12%)</title><rect x="15.7864%" y="309" width="0.1165%" height="15" fill="rgb(229,198,43)" fg:x="813" fg:w="6"/><text x="16.0364%" y="319.50"></text></g><g><title>core::intrinsics::copy (6 samples, 0.12%)</title><rect x="15.7864%" y="293" width="0.1165%" height="15" fill="rgb(206,209,35)" fg:x="813" fg:w="6"/><text x="16.0364%" y="303.50"></text></g><g><title>core::str::converts::from_utf8 (8 samples, 0.16%)</title><rect x="16.2913%" y="293" width="0.1553%" height="15" fill="rgb(245,195,53)" fg:x="839" fg:w="8"/><text x="16.5413%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (611 samples, 11.86%)</title><rect x="5.5922%" y="357" width="11.8641%" height="15" fill="rgb(240,92,26)" fg:x="288" fg:w="611"/><text x="5.8422%" y="367.50">&lt;core::iter::adapt..</text></g><g><title>&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (333 samples, 6.47%)</title><rect x="10.9903%" y="341" width="6.4660%" height="15" fill="rgb(207,40,23)" fg:x="566" fg:w="333"/><text x="11.2403%" y="351.50">&lt;yt_hist..</text></g><g><title>yt_history::utf8_reader::Utf8Iter&lt;R&gt;::next (293 samples, 5.69%)</title><rect x="11.7670%" y="325" width="5.6893%" height="15" fill="rgb(223,111,35)" fg:x="606" fg:w="293"/><text x="12.0170%" y="335.50">yt_hist..</text></g><g><title>core::str::converts::from_utf8 (80 samples, 1.55%)</title><rect x="15.9029%" y="309" width="1.5534%" height="15" fill="rgb(229,147,28)" fg:x="819" fg:w="80"/><text x="16.1529%" y="319.50"></text></g><g><title>core::str::validations::run_utf8_validation (52 samples, 1.01%)</title><rect x="16.4466%" y="293" width="1.0097%" height="15" fill="rgb(211,29,28)" fg:x="847" fg:w="52"/><text x="16.6966%" y="303.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (619 samples, 12.02%)</title><rect x="5.5728%" y="389" width="12.0194%" height="15" fill="rgb(228,72,33)" fg:x="287" fg:w="619"/><text x="5.8228%" y="399.50">&lt;&amp;mut I as core::i..</text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (619 samples, 12.02%)</title><rect x="5.5728%" y="373" width="12.0194%" height="15" fill="rgb(205,214,31)" fg:x="287" fg:w="619"/><text x="5.8228%" y="383.50">&lt;core::iter::adapt..</text></g><g><title>core::option::Option&lt;T&gt;::take (7 samples, 0.14%)</title><rect x="17.4563%" y="357" width="0.1359%" height="15" fill="rgb(224,111,15)" fg:x="899" fg:w="7"/><text x="17.7063%" y="367.50"></text></g><g><title>core::mem::replace (7 samples, 0.14%)</title><rect x="17.4563%" y="341" width="0.1359%" height="15" fill="rgb(253,21,26)" fg:x="899" fg:w="7"/><text x="17.7063%" y="351.50"></text></g><g><title>core::ptr::read (2 samples, 0.04%)</title><rect x="17.5534%" y="325" width="0.0388%" height="15" fill="rgb(245,139,43)" fg:x="904" fg:w="2"/><text x="17.8034%" y="335.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (2 samples, 0.04%)</title><rect x="17.5534%" y="309" width="0.0388%" height="15" fill="rgb(252,170,7)" fg:x="904" fg:w="2"/><text x="17.8034%" y="319.50"></text></g><g><title>__rdl_alloc (13 samples, 0.25%)</title><rect x="17.5922%" y="149" width="0.2524%" height="15" fill="rgb(231,118,14)" fg:x="906" fg:w="13"/><text x="17.8422%" y="159.50"></text></g><g><title>__rust_alloc (20 samples, 0.39%)</title><rect x="17.8447%" y="149" width="0.3883%" height="15" fill="rgb(238,83,0)" fg:x="919" fg:w="20"/><text x="18.0947%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (108 samples, 2.10%)</title><rect x="17.5922%" y="245" width="2.0971%" height="15" fill="rgb(221,39,39)" fg:x="906" fg:w="108"/><text x="17.8422%" y="255.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (108 samples, 2.10%)</title><rect x="17.5922%" y="229" width="2.0971%" height="15" fill="rgb(222,119,46)" fg:x="906" fg:w="108"/><text x="17.8422%" y="239.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (108 samples, 2.10%)</title><rect x="17.5922%" y="213" width="2.0971%" height="15" fill="rgb(222,165,49)" fg:x="906" fg:w="108"/><text x="17.8422%" y="223.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (108 samples, 2.10%)</title><rect x="17.5922%" y="197" width="2.0971%" height="15" fill="rgb(219,113,52)" fg:x="906" fg:w="108"/><text x="17.8422%" y="207.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (108 samples, 2.10%)</title><rect x="17.5922%" y="181" width="2.0971%" height="15" fill="rgb(214,7,15)" fg:x="906" fg:w="108"/><text x="17.8422%" y="191.50">a..</text></g><g><title>alloc::alloc::alloc (108 samples, 2.10%)</title><rect x="17.5922%" y="165" width="2.0971%" height="15" fill="rgb(235,32,4)" fg:x="906" fg:w="108"/><text x="17.8422%" y="175.50">a..</text></g><g><title>malloc (75 samples, 1.46%)</title><rect x="18.2330%" y="149" width="1.4563%" height="15" fill="rgb(238,90,54)" fg:x="939" fg:w="75"/><text x="18.4830%" y="159.50"></text></g><g><title>[libc.so.6] (17 samples, 0.33%)</title><rect x="19.3592%" y="133" width="0.3301%" height="15" fill="rgb(213,208,19)" fg:x="997" fg:w="17"/><text x="19.6092%" y="143.50"></text></g><g><title>[libc.so.6] (13 samples, 0.25%)</title><rect x="19.4369%" y="117" width="0.2524%" height="15" fill="rgb(233,156,4)" fg:x="1001" fg:w="13"/><text x="19.6869%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;mut str&gt;&gt;::from (151 samples, 2.93%)</title><rect x="17.5922%" y="357" width="2.9320%" height="15" fill="rgb(207,194,5)" fg:x="906" fg:w="151"/><text x="17.8422%" y="367.50">&lt;a..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (151 samples, 2.93%)</title><rect x="17.5922%" y="341" width="2.9320%" height="15" fill="rgb(206,111,30)" fg:x="906" fg:w="151"/><text x="17.8422%" y="351.50">al..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (151 samples, 2.93%)</title><rect x="17.5922%" y="325" width="2.9320%" height="15" fill="rgb(243,70,54)" fg:x="906" fg:w="151"/><text x="17.8422%" y="335.50">al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (151 samples, 2.93%)</title><rect x="17.5922%" y="309" width="2.9320%" height="15" fill="rgb(242,28,8)" fg:x="906" fg:w="151"/><text x="17.8422%" y="319.50">al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (151 samples, 2.93%)</title><rect x="17.5922%" y="293" width="2.9320%" height="15" fill="rgb(219,106,18)" fg:x="906" fg:w="151"/><text x="17.8422%" y="303.50">al..</text></g><g><title>alloc::slice::hack::to_vec (151 samples, 2.93%)</title><rect x="17.5922%" y="277" width="2.9320%" height="15" fill="rgb(244,222,10)" fg:x="906" fg:w="151"/><text x="17.8422%" y="287.50">al..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (151 samples, 2.93%)</title><rect x="17.5922%" y="261" width="2.9320%" height="15" fill="rgb(236,179,52)" fg:x="906" fg:w="151"/><text x="17.8422%" y="271.50">&lt;T..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (43 samples, 0.83%)</title><rect x="19.6893%" y="245" width="0.8350%" height="15" fill="rgb(213,23,39)" fg:x="1014" fg:w="43"/><text x="19.9393%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (43 samples, 0.83%)</title><rect x="19.6893%" y="229" width="0.8350%" height="15" fill="rgb(238,48,10)" fg:x="1014" fg:w="43"/><text x="19.9393%" y="239.50"></text></g><g><title>[libc.so.6] (31 samples, 0.60%)</title><rect x="19.9223%" y="213" width="0.6019%" height="15" fill="rgb(251,196,23)" fg:x="1026" fg:w="31"/><text x="20.1723%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;char&gt;&gt;::from (152 samples, 2.95%)</title><rect x="17.5922%" y="389" width="2.9515%" height="15" fill="rgb(250,152,24)" fg:x="906" fg:w="152"/><text x="17.8422%" y="399.50">&lt;al..</text></g><g><title>&lt;char as alloc::string::ToString&gt;::to_string (152 samples, 2.95%)</title><rect x="17.5922%" y="373" width="2.9515%" height="15" fill="rgb(209,150,17)" fg:x="906" fg:w="152"/><text x="17.8422%" y="383.50">&lt;ch..</text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1 samples, 0.02%)</title><rect x="20.5243%" y="357" width="0.0194%" height="15" fill="rgb(234,202,34)" fg:x="1057" fg:w="1"/><text x="20.7743%" y="367.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1 samples, 0.02%)</title><rect x="20.5243%" y="341" width="0.0194%" height="15" fill="rgb(253,148,53)" fg:x="1057" fg:w="1"/><text x="20.7743%" y="351.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (15 samples, 0.29%)</title><rect x="20.5437%" y="389" width="0.2913%" height="15" fill="rgb(218,129,16)" fg:x="1058" fg:w="15"/><text x="20.7937%" y="399.50"></text></g><g><title>core::str::count::count_chars (15 samples, 0.29%)</title><rect x="20.5437%" y="373" width="0.2913%" height="15" fill="rgb(216,85,19)" fg:x="1058" fg:w="15"/><text x="20.7937%" y="383.50"></text></g><g><title>core::str::count::char_count_general_case (15 samples, 0.29%)</title><rect x="20.5437%" y="357" width="0.2913%" height="15" fill="rgb(235,228,7)" fg:x="1058" fg:w="15"/><text x="20.7937%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (15 samples, 0.29%)</title><rect x="20.5437%" y="341" width="0.2913%" height="15" fill="rgb(245,175,0)" fg:x="1058" fg:w="15"/><text x="20.7937%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (15 samples, 0.29%)</title><rect x="20.5437%" y="325" width="0.2913%" height="15" fill="rgb(208,168,36)" fg:x="1058" fg:w="15"/><text x="20.7937%" y="335.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (15 samples, 0.29%)</title><rect x="20.5437%" y="309" width="0.2913%" height="15" fill="rgb(246,171,24)" fg:x="1058" fg:w="15"/><text x="20.7937%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.29%)</title><rect x="20.5437%" y="293" width="0.2913%" height="15" fill="rgb(215,142,24)" fg:x="1058" fg:w="15"/><text x="20.7937%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (15 samples, 0.29%)</title><rect x="20.5437%" y="277" width="0.2913%" height="15" fill="rgb(250,187,7)" fg:x="1058" fg:w="15"/><text x="20.7937%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.29%)</title><rect x="20.5437%" y="261" width="0.2913%" height="15" fill="rgb(228,66,33)" fg:x="1058" fg:w="15"/><text x="20.7937%" y="271.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="20.8350%" y="389" width="0.0194%" height="15" fill="rgb(234,215,21)" fg:x="1073" fg:w="1"/><text x="21.0850%" y="399.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.02%)</title><rect x="20.8544%" y="389" width="0.0194%" height="15" fill="rgb(222,191,20)" fg:x="1074" fg:w="1"/><text x="21.1044%" y="399.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::len_utf8 (1 samples, 0.02%)</title><rect x="20.8544%" y="373" width="0.0194%" height="15" fill="rgb(245,79,54)" fg:x="1074" fg:w="1"/><text x="21.1044%" y="383.50"></text></g><g><title>core::char::methods::len_utf8 (1 samples, 0.02%)</title><rect x="20.8544%" y="357" width="0.0194%" height="15" fill="rgb(240,10,37)" fg:x="1074" fg:w="1"/><text x="21.1044%" y="367.50"></text></g><g><title>__rust_alloc (3 samples, 0.06%)</title><rect x="20.8738%" y="261" width="0.0583%" height="15" fill="rgb(214,192,32)" fg:x="1075" fg:w="3"/><text x="21.1238%" y="271.50"></text></g><g><title>alloc::string::String::with_capacity (10 samples, 0.19%)</title><rect x="20.8738%" y="389" width="0.1942%" height="15" fill="rgb(209,36,54)" fg:x="1075" fg:w="10"/><text x="21.1238%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (10 samples, 0.19%)</title><rect x="20.8738%" y="373" width="0.1942%" height="15" fill="rgb(220,10,11)" fg:x="1075" fg:w="10"/><text x="21.1238%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (10 samples, 0.19%)</title><rect x="20.8738%" y="357" width="0.1942%" height="15" fill="rgb(221,106,17)" fg:x="1075" fg:w="10"/><text x="21.1238%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.19%)</title><rect x="20.8738%" y="341" width="0.1942%" height="15" fill="rgb(251,142,44)" fg:x="1075" fg:w="10"/><text x="21.1238%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.19%)</title><rect x="20.8738%" y="325" width="0.1942%" height="15" fill="rgb(238,13,15)" fg:x="1075" fg:w="10"/><text x="21.1238%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.19%)</title><rect x="20.8738%" y="309" width="0.1942%" height="15" fill="rgb(208,107,27)" fg:x="1075" fg:w="10"/><text x="21.1238%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.19%)</title><rect x="20.8738%" y="293" width="0.1942%" height="15" fill="rgb(205,136,37)" fg:x="1075" fg:w="10"/><text x="21.1238%" y="303.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.19%)</title><rect x="20.8738%" y="277" width="0.1942%" height="15" fill="rgb(250,205,27)" fg:x="1075" fg:w="10"/><text x="21.1238%" y="287.50"></text></g><g><title>malloc (7 samples, 0.14%)</title><rect x="20.9320%" y="261" width="0.1359%" height="15" fill="rgb(210,80,43)" fg:x="1078" fg:w="7"/><text x="21.1820%" y="271.50"></text></g><g><title>cfree (6 samples, 0.12%)</title><rect x="21.0680%" y="389" width="0.1165%" height="15" fill="rgb(247,160,36)" fg:x="1085" fg:w="6"/><text x="21.3180%" y="399.50"></text></g><g><title>[libc.so.6] (5 samples, 0.10%)</title><rect x="21.0874%" y="373" width="0.0971%" height="15" fill="rgb(234,13,49)" fg:x="1086" fg:w="5"/><text x="21.3374%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::nth (9 samples, 0.17%)</title><rect x="21.1845%" y="389" width="0.1748%" height="15" fill="rgb(234,122,0)" fg:x="1091" fg:w="9"/><text x="21.4345%" y="399.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.17%)</title><rect x="21.1845%" y="373" width="0.1748%" height="15" fill="rgb(207,146,38)" fg:x="1091" fg:w="9"/><text x="21.4345%" y="383.50"></text></g><g><title>core::str::validations::next_code_point (9 samples, 0.17%)</title><rect x="21.1845%" y="357" width="0.1748%" height="15" fill="rgb(207,177,25)" fg:x="1091" fg:w="9"/><text x="21.4345%" y="367.50"></text></g><g><title>__rdl_dealloc (7 samples, 0.14%)</title><rect x="21.5146%" y="293" width="0.1359%" height="15" fill="rgb(211,178,42)" fg:x="1108" fg:w="7"/><text x="21.7646%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (7 samples, 0.14%)</title><rect x="21.5146%" y="277" width="0.1359%" height="15" fill="rgb(230,69,54)" fg:x="1108" fg:w="7"/><text x="21.7646%" y="287.50"></text></g><g><title>__rust_dealloc (19 samples, 0.37%)</title><rect x="21.6505%" y="293" width="0.3689%" height="15" fill="rgb(214,135,41)" fg:x="1115" fg:w="19"/><text x="21.9005%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (236 samples, 4.58%)</title><rect x="21.3592%" y="389" width="4.5825%" height="15" fill="rgb(237,67,25)" fg:x="1100" fg:w="236"/><text x="21.6092%" y="399.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (236 samples, 4.58%)</title><rect x="21.3592%" y="373" width="4.5825%" height="15" fill="rgb(222,189,50)" fg:x="1100" fg:w="236"/><text x="21.6092%" y="383.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (236 samples, 4.58%)</title><rect x="21.3592%" y="357" width="4.5825%" height="15" fill="rgb(245,148,34)" fg:x="1100" fg:w="236"/><text x="21.6092%" y="367.50">core:..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (236 samples, 4.58%)</title><rect x="21.3592%" y="341" width="4.5825%" height="15" fill="rgb(222,29,6)" fg:x="1100" fg:w="236"/><text x="21.6092%" y="351.50">&lt;allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (236 samples, 4.58%)</title><rect x="21.3592%" y="325" width="4.5825%" height="15" fill="rgb(221,189,43)" fg:x="1100" fg:w="236"/><text x="21.6092%" y="335.50">&lt;allo..</text></g><g><title>alloc::alloc::dealloc (236 samples, 4.58%)</title><rect x="21.3592%" y="309" width="4.5825%" height="15" fill="rgb(207,36,27)" fg:x="1100" fg:w="236"/><text x="21.6092%" y="319.50">alloc..</text></g><g><title>cfree (202 samples, 3.92%)</title><rect x="22.0194%" y="293" width="3.9223%" height="15" fill="rgb(217,90,24)" fg:x="1134" fg:w="202"/><text x="22.2694%" y="303.50">cfree</text></g><g><title>[libc.so.6] (117 samples, 2.27%)</title><rect x="23.6699%" y="277" width="2.2718%" height="15" fill="rgb(224,66,35)" fg:x="1219" fg:w="117"/><text x="23.9199%" y="287.50">[..</text></g><g><title>core::str::&lt;impl str&gt;::chars (3 samples, 0.06%)</title><rect x="25.9417%" y="389" width="0.0583%" height="15" fill="rgb(221,13,50)" fg:x="1336" fg:w="3"/><text x="26.1917%" y="399.50"></text></g><g><title>yt_history::parser::html_parser::ModelsParser::read_until (3 samples, 0.06%)</title><rect x="25.9417%" y="373" width="0.0583%" height="15" fill="rgb(236,68,49)" fg:x="1336" fg:w="3"/><text x="26.1917%" y="383.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::last (6 samples, 0.12%)</title><rect x="26.6602%" y="373" width="0.1165%" height="15" fill="rgb(229,146,28)" fg:x="1373" fg:w="6"/><text x="26.9102%" y="383.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (6 samples, 0.12%)</title><rect x="26.6602%" y="357" width="0.1165%" height="15" fill="rgb(225,31,38)" fg:x="1373" fg:w="6"/><text x="26.9102%" y="367.50"></text></g><g><title>core::str::validations::next_code_point_reverse (6 samples, 0.12%)</title><rect x="26.6602%" y="341" width="0.1165%" height="15" fill="rgb(250,208,3)" fg:x="1373" fg:w="6"/><text x="26.9102%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.10%)</title><rect x="26.7961%" y="341" width="0.0971%" height="15" fill="rgb(246,54,23)" fg:x="1380" fg:w="5"/><text x="27.0461%" y="351.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.14%)</title><rect x="26.7767%" y="373" width="0.1359%" height="15" fill="rgb(243,76,11)" fg:x="1379" fg:w="7"/><text x="27.0267%" y="383.50"></text></g><g><title>core::str::validations::next_code_point (7 samples, 0.14%)</title><rect x="26.7767%" y="357" width="0.1359%" height="15" fill="rgb(245,21,50)" fg:x="1379" fg:w="7"/><text x="27.0267%" y="367.50"></text></g><g><title>core::str::validations::utf8_acc_cont_byte (1 samples, 0.02%)</title><rect x="26.8932%" y="341" width="0.0194%" height="15" fill="rgb(228,9,43)" fg:x="1385" fg:w="1"/><text x="27.1432%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.06%)</title><rect x="27.2621%" y="309" width="0.0583%" height="15" fill="rgb(208,100,47)" fg:x="1404" fg:w="3"/><text x="27.5121%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (5 samples, 0.10%)</title><rect x="27.3204%" y="309" width="0.0971%" height="15" fill="rgb(232,26,8)" fg:x="1407" fg:w="5"/><text x="27.5704%" y="319.50"></text></g><g><title>__rdl_realloc (1 samples, 0.02%)</title><rect x="27.5922%" y="245" width="0.0194%" height="15" fill="rgb(216,166,38)" fg:x="1421" fg:w="1"/><text x="27.8422%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (53 samples, 1.03%)</title><rect x="27.5922%" y="293" width="1.0291%" height="15" fill="rgb(251,202,51)" fg:x="1421" fg:w="53"/><text x="27.8422%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (53 samples, 1.03%)</title><rect x="27.5922%" y="277" width="1.0291%" height="15" fill="rgb(254,216,34)" fg:x="1421" fg:w="53"/><text x="27.8422%" y="287.50"></text></g><g><title>alloc::alloc::realloc (53 samples, 1.03%)</title><rect x="27.5922%" y="261" width="1.0291%" height="15" fill="rgb(251,32,27)" fg:x="1421" fg:w="53"/><text x="27.8422%" y="271.50"></text></g><g><title>realloc (52 samples, 1.01%)</title><rect x="27.6117%" y="245" width="1.0097%" height="15" fill="rgb(208,127,28)" fg:x="1422" fg:w="52"/><text x="27.8617%" y="255.50"></text></g><g><title>[libc.so.6] (41 samples, 0.80%)</title><rect x="27.8252%" y="229" width="0.7961%" height="15" fill="rgb(224,137,22)" fg:x="1433" fg:w="41"/><text x="28.0752%" y="239.50"></text></g><g><title>[libc.so.6] (26 samples, 0.50%)</title><rect x="28.1165%" y="213" width="0.5049%" height="15" fill="rgb(254,70,32)" fg:x="1448" fg:w="26"/><text x="28.3665%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="28.6019%" y="197" width="0.0194%" height="15" fill="rgb(229,75,37)" fg:x="1473" fg:w="1"/><text x="28.8519%" y="207.50"></text></g><g><title>__rdl_alloc (2 samples, 0.04%)</title><rect x="28.6214%" y="293" width="0.0388%" height="15" fill="rgb(252,64,23)" fg:x="1474" fg:w="2"/><text x="28.8714%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="28.6408%" y="277" width="0.0194%" height="15" fill="rgb(232,162,48)" fg:x="1475" fg:w="1"/><text x="28.8908%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3 samples, 0.06%)</title><rect x="28.6602%" y="293" width="0.0583%" height="15" fill="rgb(246,160,12)" fg:x="1476" fg:w="3"/><text x="28.9102%" y="303.50"></text></g><g><title>[libc.so.6] (6 samples, 0.12%)</title><rect x="28.9515%" y="261" width="0.1165%" height="15" fill="rgb(247,166,0)" fg:x="1491" fg:w="6"/><text x="29.2015%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (86 samples, 1.67%)</title><rect x="27.4175%" y="309" width="1.6699%" height="15" fill="rgb(249,219,21)" fg:x="1412" fg:w="86"/><text x="27.6675%" y="319.50"></text></g><g><title>malloc (19 samples, 0.37%)</title><rect x="28.7184%" y="293" width="0.3689%" height="15" fill="rgb(205,209,3)" fg:x="1479" fg:w="19"/><text x="28.9684%" y="303.50"></text></g><g><title>[libc.so.6] (15 samples, 0.29%)</title><rect x="28.7961%" y="277" width="0.2913%" height="15" fill="rgb(243,44,1)" fg:x="1483" fg:w="15"/><text x="29.0461%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="29.0680%" y="261" width="0.0194%" height="15" fill="rgb(206,159,16)" fg:x="1497" fg:w="1"/><text x="29.3180%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="29.0680%" y="245" width="0.0194%" height="15" fill="rgb(244,77,30)" fg:x="1497" fg:w="1"/><text x="29.3180%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="29.0680%" y="229" width="0.0194%" height="15" fill="rgb(218,69,12)" fg:x="1497" fg:w="1"/><text x="29.3180%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="29.0680%" y="213" width="0.0194%" height="15" fill="rgb(212,87,7)" fg:x="1497" fg:w="1"/><text x="29.3180%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="29.0680%" y="197" width="0.0194%" height="15" fill="rgb(245,114,25)" fg:x="1497" fg:w="1"/><text x="29.3180%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.02%)</title><rect x="29.0874%" y="309" width="0.0194%" height="15" fill="rgb(210,61,42)" fg:x="1498" fg:w="1"/><text x="29.3374%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.02%)</title><rect x="29.0874%" y="293" width="0.0194%" height="15" fill="rgb(211,52,33)" fg:x="1498" fg:w="1"/><text x="29.3374%" y="303.50"></text></g><g><title>core::cmp::max (2 samples, 0.04%)</title><rect x="29.1068%" y="309" width="0.0388%" height="15" fill="rgb(234,58,33)" fg:x="1499" fg:w="2"/><text x="29.3568%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.04%)</title><rect x="29.1068%" y="293" width="0.0388%" height="15" fill="rgb(220,115,36)" fg:x="1499" fg:w="2"/><text x="29.3568%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (101 samples, 1.96%)</title><rect x="27.2233%" y="341" width="1.9612%" height="15" fill="rgb(243,153,54)" fg:x="1402" fg:w="101"/><text x="27.4733%" y="351.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (101 samples, 1.96%)</title><rect x="27.2233%" y="325" width="1.9612%" height="15" fill="rgb(251,47,18)" fg:x="1402" fg:w="101"/><text x="27.4733%" y="335.50">a..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.04%)</title><rect x="29.1456%" y="309" width="0.0388%" height="15" fill="rgb(242,102,42)" fg:x="1501" fg:w="2"/><text x="29.3956%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.04%)</title><rect x="29.1456%" y="293" width="0.0388%" height="15" fill="rgb(234,31,38)" fg:x="1501" fg:w="2"/><text x="29.3956%" y="303.50"></text></g><g><title>alloc::string::String::push (130 samples, 2.52%)</title><rect x="26.9126%" y="373" width="2.5243%" height="15" fill="rgb(221,117,51)" fg:x="1386" fg:w="130"/><text x="27.1626%" y="383.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (130 samples, 2.52%)</title><rect x="26.9126%" y="357" width="2.5243%" height="15" fill="rgb(212,20,18)" fg:x="1386" fg:w="130"/><text x="27.1626%" y="367.50">al..</text></g><g><title>core::ptr::write (13 samples, 0.25%)</title><rect x="29.1845%" y="341" width="0.2524%" height="15" fill="rgb(245,133,36)" fg:x="1503" fg:w="13"/><text x="29.4345%" y="351.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (11 samples, 0.21%)</title><rect x="29.4369%" y="373" width="0.2136%" height="15" fill="rgb(212,6,19)" fg:x="1516" fg:w="11"/><text x="29.6869%" y="383.50"></text></g><g><title>yt_history::parser::html_parser::ModelsParser::read_until (1,295 samples, 25.15%)</title><rect x="4.5243%" y="405" width="25.1456%" height="15" fill="rgb(218,1,36)" fg:x="233" fg:w="1295"/><text x="4.7743%" y="415.50">yt_history::parser::html_parser::ModelsP..</text></g><g><title>yt_history::parser::html_parser::push_collapse_whitespace (189 samples, 3.67%)</title><rect x="26.0000%" y="389" width="3.6699%" height="15" fill="rgb(246,84,54)" fg:x="1339" fg:w="189"/><text x="26.2500%" y="399.50">yt_h..</text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.02%)</title><rect x="29.6505%" y="373" width="0.0194%" height="15" fill="rgb(242,110,6)" fg:x="1527" fg:w="1"/><text x="29.9005%" y="383.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1,295 samples, 25.15%)</title><rect x="34.6019%" y="341" width="25.1456%" height="15" fill="rgb(214,47,5)" fg:x="1782" fg:w="1295"/><text x="34.8519%" y="351.50">&lt;core::option::Option&lt;T&gt; as core::ops::t..</text></g><g><title>&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 1.05%)</title><rect x="64.8350%" y="325" width="1.0485%" height="15" fill="rgb(218,159,25)" fg:x="3339" fg:w="54"/><text x="65.0850%" y="335.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 1.28%)</title><rect x="75.1456%" y="309" width="1.2816%" height="15" fill="rgb(215,211,28)" fg:x="3870" fg:w="66"/><text x="75.3956%" y="319.50"></text></g><g><title>core::str::validations::next_code_point (66 samples, 1.28%)</title><rect x="75.1456%" y="293" width="1.2816%" height="15" fill="rgb(238,59,32)" fg:x="3870" fg:w="66"/><text x="75.3956%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (64 samples, 1.24%)</title><rect x="75.1845%" y="277" width="1.2427%" height="15" fill="rgb(226,82,3)" fg:x="3872" fg:w="64"/><text x="75.4345%" y="287.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (58 samples, 1.13%)</title><rect x="81.4175%" y="293" width="1.1262%" height="15" fill="rgb(240,164,32)" fg:x="4193" fg:w="58"/><text x="81.6675%" y="303.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (58 samples, 1.13%)</title><rect x="81.4175%" y="277" width="1.1262%" height="15" fill="rgb(232,46,7)" fg:x="4193" fg:w="58"/><text x="81.6675%" y="287.50"></text></g><g><title>core::cmp::min (1 samples, 0.02%)</title><rect x="82.5243%" y="261" width="0.0194%" height="15" fill="rgb(229,129,53)" fg:x="4250" fg:w="1"/><text x="82.7743%" y="271.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.02%)</title><rect x="82.5243%" y="245" width="0.0194%" height="15" fill="rgb(234,188,29)" fg:x="4250" fg:w="1"/><text x="82.7743%" y="255.50"></text></g><g><title>read (17 samples, 0.33%)</title><rect x="82.5437%" y="197" width="0.3301%" height="15" fill="rgb(246,141,4)" fg:x="4251" fg:w="17"/><text x="82.7937%" y="207.50"></text></g><g><title>[unknown] (17 samples, 0.33%)</title><rect x="82.5437%" y="181" width="0.3301%" height="15" fill="rgb(229,23,39)" fg:x="4251" fg:w="17"/><text x="82.7937%" y="191.50"></text></g><g><title>[unknown] (17 samples, 0.33%)</title><rect x="82.5437%" y="165" width="0.3301%" height="15" fill="rgb(206,12,3)" fg:x="4251" fg:w="17"/><text x="82.7937%" y="175.50"></text></g><g><title>[unknown] (17 samples, 0.33%)</title><rect x="82.5437%" y="149" width="0.3301%" height="15" fill="rgb(252,226,20)" fg:x="4251" fg:w="17"/><text x="82.7937%" y="159.50"></text></g><g><title>[unknown] (16 samples, 0.31%)</title><rect x="82.5631%" y="133" width="0.3107%" height="15" fill="rgb(216,123,35)" fg:x="4252" fg:w="16"/><text x="82.8131%" y="143.50"></text></g><g><title>[unknown] (16 samples, 0.31%)</title><rect x="82.5631%" y="117" width="0.3107%" height="15" fill="rgb(212,68,40)" fg:x="4252" fg:w="16"/><text x="82.8131%" y="127.50"></text></g><g><title>[unknown] (11 samples, 0.21%)</title><rect x="82.6602%" y="101" width="0.2136%" height="15" fill="rgb(254,125,32)" fg:x="4257" fg:w="11"/><text x="82.9102%" y="111.50"></text></g><g><title>[unknown] (10 samples, 0.19%)</title><rect x="82.6796%" y="85" width="0.1942%" height="15" fill="rgb(253,97,22)" fg:x="4258" fg:w="10"/><text x="82.9296%" y="95.50"></text></g><g><title>[unknown] (10 samples, 0.19%)</title><rect x="82.6796%" y="69" width="0.1942%" height="15" fill="rgb(241,101,14)" fg:x="4258" fg:w="10"/><text x="82.9296%" y="79.50"></text></g><g><title>[unknown] (6 samples, 0.12%)</title><rect x="82.7573%" y="53" width="0.1165%" height="15" fill="rgb(238,103,29)" fg:x="4262" fg:w="6"/><text x="83.0073%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.8544%" y="37" width="0.0194%" height="15" fill="rgb(233,195,47)" fg:x="4267" fg:w="1"/><text x="83.1044%" y="47.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (18 samples, 0.35%)</title><rect x="82.5437%" y="293" width="0.3495%" height="15" fill="rgb(246,218,30)" fg:x="4251" fg:w="18"/><text x="82.7937%" y="303.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (18 samples, 0.35%)</title><rect x="82.5437%" y="277" width="0.3495%" height="15" fill="rgb(219,145,47)" fg:x="4251" fg:w="18"/><text x="82.7937%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (18 samples, 0.35%)</title><rect x="82.5437%" y="261" width="0.3495%" height="15" fill="rgb(243,12,26)" fg:x="4251" fg:w="18"/><text x="82.7937%" y="271.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (18 samples, 0.35%)</title><rect x="82.5437%" y="245" width="0.3495%" height="15" fill="rgb(214,87,16)" fg:x="4251" fg:w="18"/><text x="82.7937%" y="255.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (18 samples, 0.35%)</title><rect x="82.5437%" y="229" width="0.3495%" height="15" fill="rgb(208,99,42)" fg:x="4251" fg:w="18"/><text x="82.7937%" y="239.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (18 samples, 0.35%)</title><rect x="82.5437%" y="213" width="0.3495%" height="15" fill="rgb(253,99,2)" fg:x="4251" fg:w="18"/><text x="82.7937%" y="223.50"></text></g><g><title>std::io::readbuf::BorrowedCursor::as_mut (1 samples, 0.02%)</title><rect x="82.8738%" y="197" width="0.0194%" height="15" fill="rgb(220,168,23)" fg:x="4268" fg:w="1"/><text x="83.1238%" y="207.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.04%)</title><rect x="82.8932%" y="293" width="0.0388%" height="15" fill="rgb(242,38,24)" fg:x="4269" fg:w="2"/><text x="83.1432%" y="303.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::pos (1 samples, 0.02%)</title><rect x="82.9320%" y="293" width="0.0194%" height="15" fill="rgb(225,182,9)" fg:x="4271" fg:w="1"/><text x="83.1820%" y="303.50"></text></g><g><title>core::cmp::min (4 samples, 0.08%)</title><rect x="84.3107%" y="277" width="0.0777%" height="15" fill="rgb(243,178,37)" fg:x="4342" fg:w="4"/><text x="84.5607%" y="287.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.08%)</title><rect x="84.3107%" y="261" width="0.0777%" height="15" fill="rgb(232,139,19)" fg:x="4342" fg:w="4"/><text x="84.5607%" y="271.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (411 samples, 7.98%)</title><rect x="76.4272%" y="309" width="7.9806%" height="15" fill="rgb(225,201,24)" fg:x="3936" fg:w="411"/><text x="76.6772%" y="319.50">&lt;std::io::b..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (75 samples, 1.46%)</title><rect x="82.9515%" y="293" width="1.4563%" height="15" fill="rgb(221,47,46)" fg:x="4272" fg:w="75"/><text x="83.2015%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.02%)</title><rect x="84.3883%" y="277" width="0.0194%" height="15" fill="rgb(249,23,13)" fg:x="4346" fg:w="1"/><text x="84.6383%" y="287.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.02%)</title><rect x="84.3883%" y="261" width="0.0194%" height="15" fill="rgb(219,9,5)" fg:x="4346" fg:w="1"/><text x="84.6383%" y="271.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (2 samples, 0.04%)</title><rect x="84.4078%" y="309" width="0.0388%" height="15" fill="rgb(254,171,16)" fg:x="4347" fg:w="2"/><text x="84.6578%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.04%)</title><rect x="84.4078%" y="293" width="0.0388%" height="15" fill="rgb(230,171,20)" fg:x="4347" fg:w="2"/><text x="84.6578%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.04%)</title><rect x="84.4078%" y="277" width="0.0388%" height="15" fill="rgb(210,71,41)" fg:x="4347" fg:w="2"/><text x="84.6578%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.04%)</title><rect x="84.4078%" y="261" width="0.0388%" height="15" fill="rgb(206,173,20)" fg:x="4347" fg:w="2"/><text x="84.6578%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="84.4466%" y="277" width="0.0194%" height="15" fill="rgb(233,88,34)" fg:x="4349" fg:w="1"/><text x="84.6966%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.02%)</title><rect x="84.4466%" y="261" width="0.0194%" height="15" fill="rgb(223,209,46)" fg:x="4349" fg:w="1"/><text x="84.6966%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.02%)</title><rect x="84.4466%" y="245" width="0.0194%" height="15" fill="rgb(250,43,18)" fg:x="4349" fg:w="1"/><text x="84.6966%" y="255.50"></text></g><g><title>core::array::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T: N]&gt;::index_mut (64 samples, 1.24%)</title><rect x="84.4466%" y="309" width="1.2427%" height="15" fill="rgb(208,13,10)" fg:x="4349" fg:w="64"/><text x="84.6966%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (64 samples, 1.24%)</title><rect x="84.4466%" y="293" width="1.2427%" height="15" fill="rgb(212,200,36)" fg:x="4349" fg:w="64"/><text x="84.6966%" y="303.50"></text></g><g><title>&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 1.22%)</title><rect x="84.4660%" y="277" width="1.2233%" height="15" fill="rgb(225,90,30)" fg:x="4350" fg:w="63"/><text x="84.7160%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.02%)</title><rect x="85.6893%" y="309" width="0.0194%" height="15" fill="rgb(236,182,39)" fg:x="4413" fg:w="1"/><text x="85.9393%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_within (62 samples, 1.20%)</title><rect x="85.7087%" y="309" width="1.2039%" height="15" fill="rgb(212,144,35)" fg:x="4414" fg:w="62"/><text x="85.9587%" y="319.50"></text></g><g><title>core::intrinsics::copy (62 samples, 1.20%)</title><rect x="85.7087%" y="293" width="1.2039%" height="15" fill="rgb(228,63,44)" fg:x="4414" fg:w="62"/><text x="85.9587%" y="303.50"></text></g><g><title>core::str::converts::from_utf8 (66 samples, 1.28%)</title><rect x="87.9223%" y="293" width="1.2816%" height="15" fill="rgb(228,109,6)" fg:x="4528" fg:w="66"/><text x="88.1723%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,067 samples, 59.55%)</title><rect x="34.6019%" y="357" width="59.5534%" height="15" fill="rgb(238,117,24)" fg:x="1782" fg:w="3067"/><text x="34.8519%" y="367.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,772 samples, 34.41%)</title><rect x="59.7476%" y="341" width="34.4078%" height="15" fill="rgb(242,26,26)" fg:x="3077" fg:w="1772"/><text x="59.9976%" y="351.50">&lt;yt_history::utf8_reader::Utf8Iter&lt;R&gt; as core::iter::tra..</text></g><g><title>yt_history::utf8_reader::Utf8Iter&lt;R&gt;::next (1,456 samples, 28.27%)</title><rect x="65.8835%" y="325" width="28.2718%" height="15" fill="rgb(221,92,48)" fg:x="3393" fg:w="1456"/><text x="66.1335%" y="335.50">yt_history::utf8_reader::Utf8Iter&lt;R&gt;::next</text></g><g><title>core::str::converts::from_utf8 (373 samples, 7.24%)</title><rect x="86.9126%" y="309" width="7.2427%" height="15" fill="rgb(209,209,32)" fg:x="4476" fg:w="373"/><text x="87.1626%" y="319.50">core::str:..</text></g><g><title>core::str::validations::run_utf8_validation (255 samples, 4.95%)</title><rect x="89.2039%" y="293" width="4.9515%" height="15" fill="rgb(221,70,22)" fg:x="4594" fg:w="255"/><text x="89.4539%" y="303.50">core::..</text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (3,069 samples, 59.59%)</title><rect x="34.6019%" y="389" width="59.5922%" height="15" fill="rgb(248,145,5)" fg:x="1782" fg:w="3069"/><text x="34.8519%" y="399.50">&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,069 samples, 59.59%)</title><rect x="34.6019%" y="373" width="59.5922%" height="15" fill="rgb(226,116,26)" fg:x="1782" fg:w="3069"/><text x="34.8519%" y="383.50">&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::take (2 samples, 0.04%)</title><rect x="94.1553%" y="357" width="0.0388%" height="15" fill="rgb(244,5,17)" fg:x="4849" fg:w="2"/><text x="94.4053%" y="367.50"></text></g><g><title>core::mem::replace (2 samples, 0.04%)</title><rect x="94.1553%" y="341" width="0.0388%" height="15" fill="rgb(252,159,33)" fg:x="4849" fg:w="2"/><text x="94.4053%" y="351.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="94.1748%" y="325" width="0.0194%" height="15" fill="rgb(206,71,0)" fg:x="4850" fg:w="1"/><text x="94.4248%" y="335.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.02%)</title><rect x="94.1748%" y="309" width="0.0194%" height="15" fill="rgb(233,118,54)" fg:x="4850" fg:w="1"/><text x="94.4248%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="94.2136%" y="213" width="0.0194%" height="15" fill="rgb(234,83,48)" fg:x="4852" fg:w="1"/><text x="94.4636%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="94.2136%" y="197" width="0.0194%" height="15" fill="rgb(228,3,54)" fg:x="4852" fg:w="1"/><text x="94.4636%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.06%)</title><rect x="94.1942%" y="389" width="0.0583%" height="15" fill="rgb(226,155,13)" fg:x="4851" fg:w="3"/><text x="94.4442%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="94.2136%" y="373" width="0.0388%" height="15" fill="rgb(241,28,37)" fg:x="4852" fg:w="2"/><text x="94.4636%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.04%)</title><rect x="94.2136%" y="357" width="0.0388%" height="15" fill="rgb(233,93,10)" fg:x="4852" fg:w="2"/><text x="94.4636%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.04%)</title><rect x="94.2136%" y="341" width="0.0388%" height="15" fill="rgb(225,113,19)" fg:x="4852" fg:w="2"/><text x="94.4636%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.04%)</title><rect x="94.2136%" y="325" width="0.0388%" height="15" fill="rgb(241,2,18)" fg:x="4852" fg:w="2"/><text x="94.4636%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.04%)</title><rect x="94.2136%" y="309" width="0.0388%" height="15" fill="rgb(228,207,21)" fg:x="4852" fg:w="2"/><text x="94.4636%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.04%)</title><rect x="94.2136%" y="293" width="0.0388%" height="15" fill="rgb(213,211,35)" fg:x="4852" fg:w="2"/><text x="94.4636%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.04%)</title><rect x="94.2136%" y="277" width="0.0388%" height="15" fill="rgb(209,83,10)" fg:x="4852" fg:w="2"/><text x="94.4636%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.04%)</title><rect x="94.2136%" y="261" width="0.0388%" height="15" fill="rgb(209,164,1)" fg:x="4852" fg:w="2"/><text x="94.4636%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.04%)</title><rect x="94.2136%" y="245" width="0.0388%" height="15" fill="rgb(213,184,43)" fg:x="4852" fg:w="2"/><text x="94.4636%" y="255.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.04%)</title><rect x="94.2136%" y="229" width="0.0388%" height="15" fill="rgb(231,61,34)" fg:x="4852" fg:w="2"/><text x="94.4636%" y="239.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="94.2330%" y="213" width="0.0194%" height="15" fill="rgb(235,75,3)" fg:x="4853" fg:w="1"/><text x="94.4830%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (2 samples, 0.04%)</title><rect x="94.2524%" y="389" width="0.0388%" height="15" fill="rgb(220,106,47)" fg:x="4854" fg:w="2"/><text x="94.5024%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (129 samples, 2.50%)</title><rect x="94.3495%" y="261" width="2.5049%" height="15" fill="rgb(210,196,33)" fg:x="4859" fg:w="129"/><text x="94.5995%" y="271.50">&lt;c..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (2 samples, 0.04%)</title><rect x="96.8155%" y="245" width="0.0388%" height="15" fill="rgb(229,154,42)" fg:x="4986" fg:w="2"/><text x="97.0655%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.04%)</title><rect x="96.8155%" y="229" width="0.0388%" height="15" fill="rgb(228,114,26)" fg:x="4986" fg:w="2"/><text x="97.0655%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.04%)</title><rect x="96.8155%" y="213" width="0.0388%" height="15" fill="rgb(208,144,1)" fg:x="4986" fg:w="2"/><text x="97.0655%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::{{closure}} (6 samples, 0.12%)</title><rect x="96.8544%" y="245" width="0.1165%" height="15" fill="rgb(239,112,37)" fg:x="4988" fg:w="6"/><text x="97.1044%" y="255.50"></text></g><g><title>core::str::count::char_count_general_case::{{closure}} (1 samples, 0.02%)</title><rect x="96.9515%" y="229" width="0.0194%" height="15" fill="rgb(210,96,50)" fg:x="4993" fg:w="1"/><text x="97.2015%" y="239.50"></text></g><g><title>core::str::validations::utf8_is_cont_byte (1 samples, 0.02%)</title><rect x="96.9515%" y="213" width="0.0194%" height="15" fill="rgb(222,178,2)" fg:x="4993" fg:w="1"/><text x="97.2015%" y="223.50"></text></g><g><title>core::str::count::count_chars (140 samples, 2.72%)</title><rect x="94.2913%" y="373" width="2.7184%" height="15" fill="rgb(226,74,18)" fg:x="4856" fg:w="140"/><text x="94.5413%" y="383.50">co..</text></g><g><title>core::str::count::char_count_general_case (139 samples, 2.70%)</title><rect x="94.3107%" y="357" width="2.6990%" height="15" fill="rgb(225,67,54)" fg:x="4857" fg:w="139"/><text x="94.5607%" y="367.50">co..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (139 samples, 2.70%)</title><rect x="94.3107%" y="341" width="2.6990%" height="15" fill="rgb(251,92,32)" fg:x="4857" fg:w="139"/><text x="94.5607%" y="351.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (139 samples, 2.70%)</title><rect x="94.3107%" y="325" width="2.6990%" height="15" fill="rgb(228,149,22)" fg:x="4857" fg:w="139"/><text x="94.5607%" y="335.50">co..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (139 samples, 2.70%)</title><rect x="94.3107%" y="309" width="2.6990%" height="15" fill="rgb(243,54,13)" fg:x="4857" fg:w="139"/><text x="94.5607%" y="319.50">&lt;u..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (139 samples, 2.70%)</title><rect x="94.3107%" y="293" width="2.6990%" height="15" fill="rgb(243,180,28)" fg:x="4857" fg:w="139"/><text x="94.5607%" y="303.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (139 samples, 2.70%)</title><rect x="94.3107%" y="277" width="2.6990%" height="15" fill="rgb(208,167,24)" fg:x="4857" fg:w="139"/><text x="94.5607%" y="287.50">co..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (8 samples, 0.16%)</title><rect x="96.8544%" y="261" width="0.1553%" height="15" fill="rgb(245,73,45)" fg:x="4988" fg:w="8"/><text x="97.1044%" y="271.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (2 samples, 0.04%)</title><rect x="96.9709%" y="245" width="0.0388%" height="15" fill="rgb(237,203,48)" fg:x="4994" fg:w="2"/><text x="97.2209%" y="255.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (144 samples, 2.80%)</title><rect x="94.2913%" y="389" width="2.7961%" height="15" fill="rgb(211,197,16)" fg:x="4856" fg:w="144"/><text x="94.5413%" y="399.50">&lt;c..</text></g><g><title>yt_history::parser::html_parser::ModelsParser::skip_to (4 samples, 0.08%)</title><rect x="97.0097%" y="373" width="0.0777%" height="15" fill="rgb(243,99,51)" fg:x="4996" fg:w="4"/><text x="97.2597%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.04%)</title><rect x="97.0874%" y="373" width="0.0388%" height="15" fill="rgb(215,123,29)" fg:x="5000" fg:w="2"/><text x="97.3374%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.04%)</title><rect x="97.0874%" y="357" width="0.0388%" height="15" fill="rgb(239,186,37)" fg:x="5000" fg:w="2"/><text x="97.3374%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.04%)</title><rect x="97.0874%" y="341" width="0.0388%" height="15" fill="rgb(252,136,39)" fg:x="5000" fg:w="2"/><text x="97.3374%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.04%)</title><rect x="97.0874%" y="325" width="0.0388%" height="15" fill="rgb(223,213,32)" fg:x="5000" fg:w="2"/><text x="97.3374%" y="335.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="97.0874%" y="309" width="0.0388%" height="15" fill="rgb(233,115,5)" fg:x="5000" fg:w="2"/><text x="97.3374%" y="319.50"></text></g><g><title>alloc::string::String::push (8 samples, 0.16%)</title><rect x="97.0874%" y="389" width="0.1553%" height="15" fill="rgb(207,226,44)" fg:x="5000" fg:w="8"/><text x="97.3374%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.12%)</title><rect x="97.1262%" y="373" width="0.1165%" height="15" fill="rgb(208,126,0)" fg:x="5002" fg:w="6"/><text x="97.3762%" y="383.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="97.2621%" y="261" width="0.0194%" height="15" fill="rgb(244,66,21)" fg:x="5009" fg:w="1"/><text x="97.5121%" y="271.50"></text></g><g><title>alloc::string::String::with_capacity (8 samples, 0.16%)</title><rect x="97.2427%" y="389" width="0.1553%" height="15" fill="rgb(222,97,12)" fg:x="5008" fg:w="8"/><text x="97.4927%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7 samples, 0.14%)</title><rect x="97.2621%" y="373" width="0.1359%" height="15" fill="rgb(219,213,19)" fg:x="5009" fg:w="7"/><text x="97.5121%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.14%)</title><rect x="97.2621%" y="357" width="0.1359%" height="15" fill="rgb(252,169,30)" fg:x="5009" fg:w="7"/><text x="97.5121%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.14%)</title><rect x="97.2621%" y="341" width="0.1359%" height="15" fill="rgb(206,32,51)" fg:x="5009" fg:w="7"/><text x="97.5121%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.14%)</title><rect x="97.2621%" y="325" width="0.1359%" height="15" fill="rgb(250,172,42)" fg:x="5009" fg:w="7"/><text x="97.5121%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.14%)</title><rect x="97.2621%" y="309" width="0.1359%" height="15" fill="rgb(209,34,43)" fg:x="5009" fg:w="7"/><text x="97.5121%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.14%)</title><rect x="97.2621%" y="293" width="0.1359%" height="15" fill="rgb(223,11,35)" fg:x="5009" fg:w="7"/><text x="97.5121%" y="303.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.14%)</title><rect x="97.2621%" y="277" width="0.1359%" height="15" fill="rgb(251,219,26)" fg:x="5009" fg:w="7"/><text x="97.5121%" y="287.50"></text></g><g><title>malloc (6 samples, 0.12%)</title><rect x="97.2816%" y="261" width="0.1165%" height="15" fill="rgb(231,119,3)" fg:x="5010" fg:w="6"/><text x="97.5316%" y="271.50"></text></g><g><title>cfree (5 samples, 0.10%)</title><rect x="97.3981%" y="389" width="0.0971%" height="15" fill="rgb(216,97,11)" fg:x="5016" fg:w="5"/><text x="97.6481%" y="399.50"></text></g><g><title>[libc.so.6] (5 samples, 0.10%)</title><rect x="97.3981%" y="373" width="0.0971%" height="15" fill="rgb(223,59,9)" fg:x="5016" fg:w="5"/><text x="97.6481%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8 samples, 0.16%)</title><rect x="97.4951%" y="389" width="0.1553%" height="15" fill="rgb(233,93,31)" fg:x="5021" fg:w="8"/><text x="97.7451%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;str&gt;&gt;::eq (7 samples, 0.14%)</title><rect x="97.5146%" y="373" width="0.1359%" height="15" fill="rgb(239,81,33)" fg:x="5022" fg:w="7"/><text x="97.7646%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (7 samples, 0.14%)</title><rect x="97.5146%" y="357" width="0.1359%" height="15" fill="rgb(213,120,34)" fg:x="5022" fg:w="7"/><text x="97.7646%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (7 samples, 0.14%)</title><rect x="97.5146%" y="341" width="0.1359%" height="15" fill="rgb(243,49,53)" fg:x="5022" fg:w="7"/><text x="97.7646%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (7 samples, 0.14%)</title><rect x="97.5146%" y="325" width="0.1359%" height="15" fill="rgb(247,216,33)" fg:x="5022" fg:w="7"/><text x="97.7646%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (7 samples, 0.14%)</title><rect x="97.5146%" y="309" width="0.1359%" height="15" fill="rgb(226,26,14)" fg:x="5022" fg:w="7"/><text x="97.7646%" y="319.50"></text></g><g><title>[libc.so.6] (6 samples, 0.12%)</title><rect x="97.5340%" y="293" width="0.1165%" height="15" fill="rgb(215,49,53)" fg:x="5023" fg:w="6"/><text x="97.7840%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="97.6505%" y="341" width="0.0194%" height="15" fill="rgb(245,162,40)" fg:x="5029" fg:w="1"/><text x="97.9005%" y="351.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="97.6505%" y="373" width="0.0388%" height="15" fill="rgb(229,68,17)" fg:x="5029" fg:w="2"/><text x="97.9005%" y="383.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 0.04%)</title><rect x="97.6505%" y="357" width="0.0388%" height="15" fill="rgb(213,182,10)" fg:x="5029" fg:w="2"/><text x="97.9005%" y="367.50"></text></g><g><title>core::str::validations::utf8_acc_cont_byte (1 samples, 0.02%)</title><rect x="97.6699%" y="341" width="0.0194%" height="15" fill="rgb(245,125,30)" fg:x="5030" fg:w="1"/><text x="97.9199%" y="351.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.14%)</title><rect x="97.6893%" y="357" width="0.1359%" height="15" fill="rgb(232,202,2)" fg:x="5031" fg:w="7"/><text x="97.9393%" y="367.50"></text></g><g><title>core::str::validations::next_code_point (7 samples, 0.14%)</title><rect x="97.6893%" y="341" width="0.1359%" height="15" fill="rgb(237,140,51)" fg:x="5031" fg:w="7"/><text x="97.9393%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="97.8058%" y="325" width="0.0194%" height="15" fill="rgb(236,157,25)" fg:x="5037" fg:w="1"/><text x="98.0558%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (6 samples, 0.12%)</title><rect x="97.8252%" y="357" width="0.1165%" height="15" fill="rgb(219,209,0)" fg:x="5038" fg:w="6"/><text x="98.0752%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (6 samples, 0.12%)</title><rect x="97.8252%" y="341" width="0.1165%" height="15" fill="rgb(240,116,54)" fg:x="5038" fg:w="6"/><text x="98.0752%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (15 samples, 0.29%)</title><rect x="97.6893%" y="373" width="0.2913%" height="15" fill="rgb(216,10,36)" fg:x="5031" fg:w="15"/><text x="97.9393%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (2 samples, 0.04%)</title><rect x="97.9417%" y="357" width="0.0388%" height="15" fill="rgb(222,72,44)" fg:x="5044" fg:w="2"/><text x="98.1917%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::nth (18 samples, 0.35%)</title><rect x="97.6505%" y="389" width="0.3495%" height="15" fill="rgb(232,159,9)" fg:x="5029" fg:w="18"/><text x="97.9005%" y="399.50"></text></g><g><title>yt_history::parser::html_parser::ModelsParser::skip_to (1 samples, 0.02%)</title><rect x="97.9806%" y="373" width="0.0194%" height="15" fill="rgb(210,39,32)" fg:x="5046" fg:w="1"/><text x="98.2306%" y="383.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="98.0388%" y="293" width="0.0194%" height="15" fill="rgb(216,194,45)" fg:x="5049" fg:w="1"/><text x="98.2888%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.02%)</title><rect x="98.0388%" y="277" width="0.0194%" height="15" fill="rgb(218,18,35)" fg:x="5049" fg:w="1"/><text x="98.2888%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (13 samples, 0.25%)</title><rect x="98.0000%" y="389" width="0.2524%" height="15" fill="rgb(207,83,51)" fg:x="5047" fg:w="13"/><text x="98.2500%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (13 samples, 0.25%)</title><rect x="98.0000%" y="373" width="0.2524%" height="15" fill="rgb(225,63,43)" fg:x="5047" fg:w="13"/><text x="98.2500%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (13 samples, 0.25%)</title><rect x="98.0000%" y="357" width="0.2524%" height="15" fill="rgb(207,57,36)" fg:x="5047" fg:w="13"/><text x="98.2500%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.25%)</title><rect x="98.0000%" y="341" width="0.2524%" height="15" fill="rgb(216,99,33)" fg:x="5047" fg:w="13"/><text x="98.2500%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.21%)</title><rect x="98.0388%" y="325" width="0.2136%" height="15" fill="rgb(225,42,16)" fg:x="5049" fg:w="11"/><text x="98.2888%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.21%)</title><rect x="98.0388%" y="309" width="0.2136%" height="15" fill="rgb(220,201,45)" fg:x="5049" fg:w="11"/><text x="98.2888%" y="319.50"></text></g><g><title>cfree (10 samples, 0.19%)</title><rect x="98.0583%" y="293" width="0.1942%" height="15" fill="rgb(225,33,4)" fg:x="5050" fg:w="10"/><text x="98.3083%" y="303.50"></text></g><g><title>[libc.so.6] (8 samples, 0.16%)</title><rect x="98.0971%" y="277" width="0.1553%" height="15" fill="rgb(224,33,50)" fg:x="5052" fg:w="8"/><text x="98.3471%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::as_bytes (67 samples, 1.30%)</title><rect x="98.2524%" y="373" width="1.3010%" height="15" fill="rgb(246,198,51)" fg:x="5060" fg:w="67"/><text x="98.5024%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (68 samples, 1.32%)</title><rect x="98.2524%" y="389" width="1.3204%" height="15" fill="rgb(205,22,4)" fg:x="5060" fg:w="68"/><text x="98.5024%" y="399.50"></text></g><g><title>yt_history::parser::html_parser::ModelsParser::skip_to (1 samples, 0.02%)</title><rect x="99.5534%" y="373" width="0.0194%" height="15" fill="rgb(206,3,8)" fg:x="5127" fg:w="1"/><text x="99.8034%" y="383.50"></text></g><g><title>yt_history::load_models (5,088 samples, 98.80%)</title><rect x="0.7961%" y="501" width="98.7961%" height="15" fill="rgb(251,23,15)" fg:x="41" fg:w="5088"/><text x="1.0461%" y="511.50">yt_history::load_models</text></g><g><title>yt_history::parse (5,088 samples, 98.80%)</title><rect x="0.7961%" y="485" width="98.7961%" height="15" fill="rgb(252,88,28)" fg:x="41" fg:w="5088"/><text x="1.0461%" y="495.50">yt_history::parse</text></g><g><title>yt_history::parser::parse_file (5,088 samples, 98.80%)</title><rect x="0.7961%" y="469" width="98.7961%" height="15" fill="rgb(212,127,14)" fg:x="41" fg:w="5088"/><text x="1.0461%" y="479.50">yt_history::parser::parse_file</text></g><g><title>yt_history::parser::parser (5,088 samples, 98.80%)</title><rect x="0.7961%" y="453" width="98.7961%" height="15" fill="rgb(247,145,37)" fg:x="41" fg:w="5088"/><text x="1.0461%" y="463.50">yt_history::parser::parser</text></g><g><title>yt_history::parser::html_parser::ModelsParser::parse (5,088 samples, 98.80%)</title><rect x="0.7961%" y="437" width="98.7961%" height="15" fill="rgb(209,117,53)" fg:x="41" fg:w="5088"/><text x="1.0461%" y="447.50">yt_history::parser::html_parser::ModelsParser::parse</text></g><g><title>yt_history::parser::html_parser::ModelsParser::next_data_row (5,001 samples, 97.11%)</title><rect x="2.4854%" y="421" width="97.1068%" height="15" fill="rgb(212,90,42)" fg:x="128" fg:w="5001"/><text x="2.7354%" y="431.50">yt_history::parser::html_parser::ModelsParser::next_data_row</text></g><g><title>yt_history::parser::html_parser::ModelsParser::skip_to (3,601 samples, 69.92%)</title><rect x="29.6699%" y="405" width="69.9223%" height="15" fill="rgb(218,164,37)" fg:x="1528" fg:w="3601"/><text x="29.9199%" y="415.50">yt_history::parser::html_parser::ModelsParser::skip_to</text></g><g><title>yt_history::parser::html_parser::ModelsParser::skip_to (1 samples, 0.02%)</title><rect x="99.5728%" y="389" width="0.0194%" height="15" fill="rgb(246,65,34)" fg:x="5128" fg:w="1"/><text x="99.8228%" y="399.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="99.6699%" y="309" width="0.0194%" height="15" fill="rgb(231,100,33)" fg:x="5133" fg:w="1"/><text x="99.9199%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.04%)</title><rect x="99.6699%" y="405" width="0.0388%" height="15" fill="rgb(228,126,14)" fg:x="5133" fg:w="2"/><text x="99.9199%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.04%)</title><rect x="99.6699%" y="389" width="0.0388%" height="15" fill="rgb(215,173,21)" fg:x="5133" fg:w="2"/><text x="99.9199%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.04%)</title><rect x="99.6699%" y="373" width="0.0388%" height="15" fill="rgb(210,6,40)" fg:x="5133" fg:w="2"/><text x="99.9199%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.04%)</title><rect x="99.6699%" y="357" width="0.0388%" height="15" fill="rgb(212,48,18)" fg:x="5133" fg:w="2"/><text x="99.9199%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.04%)</title><rect x="99.6699%" y="341" width="0.0388%" height="15" fill="rgb(230,214,11)" fg:x="5133" fg:w="2"/><text x="99.9199%" y="351.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.04%)</title><rect x="99.6699%" y="325" width="0.0388%" height="15" fill="rgb(254,105,39)" fg:x="5133" fg:w="2"/><text x="99.9199%" y="335.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="99.6893%" y="309" width="0.0194%" height="15" fill="rgb(245,158,5)" fg:x="5134" fg:w="1"/><text x="99.9393%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="99.6893%" y="293" width="0.0194%" height="15" fill="rgb(249,208,11)" fg:x="5134" fg:w="1"/><text x="99.9393%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6893%" y="277" width="0.0194%" height="15" fill="rgb(210,39,28)" fg:x="5134" fg:w="1"/><text x="99.9393%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6893%" y="261" width="0.0194%" height="15" fill="rgb(211,56,53)" fg:x="5134" fg:w="1"/><text x="99.9393%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.14%)</title><rect x="99.5922%" y="485" width="0.1359%" height="15" fill="rgb(226,201,30)" fg:x="5129" fg:w="7"/><text x="99.8422%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.06%)</title><rect x="99.6699%" y="469" width="0.0583%" height="15" fill="rgb(239,101,34)" fg:x="5133" fg:w="3"/><text x="99.9199%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.06%)</title><rect x="99.6699%" y="453" width="0.0583%" height="15" fill="rgb(226,209,5)" fg:x="5133" fg:w="3"/><text x="99.9199%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.06%)</title><rect x="99.6699%" y="437" width="0.0583%" height="15" fill="rgb(250,105,47)" fg:x="5133" fg:w="3"/><text x="99.9199%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.06%)</title><rect x="99.6699%" y="421" width="0.0583%" height="15" fill="rgb(230,72,3)" fg:x="5133" fg:w="3"/><text x="99.9199%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.02%)</title><rect x="99.7087%" y="405" width="0.0194%" height="15" fill="rgb(232,218,39)" fg:x="5135" fg:w="1"/><text x="99.9587%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="99.7087%" y="389" width="0.0194%" height="15" fill="rgb(248,166,6)" fg:x="5135" fg:w="1"/><text x="99.9587%" y="399.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="99.7087%" y="373" width="0.0194%" height="15" fill="rgb(247,89,20)" fg:x="5135" fg:w="1"/><text x="99.9587%" y="383.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (2 samples, 0.04%)</title><rect x="99.7282%" y="485" width="0.0388%" height="15" fill="rgb(248,130,54)" fg:x="5136" fg:w="2"/><text x="99.9782%" y="495.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (2 samples, 0.04%)</title><rect x="99.7282%" y="469" width="0.0388%" height="15" fill="rgb(234,196,4)" fg:x="5136" fg:w="2"/><text x="99.9782%" y="479.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.04%)</title><rect x="99.7282%" y="453" width="0.0388%" height="15" fill="rgb(250,143,31)" fg:x="5136" fg:w="2"/><text x="99.9782%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (2 samples, 0.04%)</title><rect x="99.7282%" y="437" width="0.0388%" height="15" fill="rgb(211,110,34)" fg:x="5136" fg:w="2"/><text x="99.9782%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.04%)</title><rect x="99.7282%" y="421" width="0.0388%" height="15" fill="rgb(215,124,48)" fg:x="5136" fg:w="2"/><text x="99.9782%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.04%)</title><rect x="99.7282%" y="405" width="0.0388%" height="15" fill="rgb(216,46,13)" fg:x="5136" fg:w="2"/><text x="99.9782%" y="415.50"></text></g><g><title>core::ptr::write (2 samples, 0.04%)</title><rect x="99.7282%" y="389" width="0.0388%" height="15" fill="rgb(205,184,25)" fg:x="5136" fg:w="2"/><text x="99.9782%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1 samples, 0.02%)</title><rect x="99.8058%" y="453" width="0.0194%" height="15" fill="rgb(228,1,10)" fg:x="5140" fg:w="1"/><text x="100.0558%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="99.8058%" y="437" width="0.0194%" height="15" fill="rgb(213,116,27)" fg:x="5140" fg:w="1"/><text x="100.0558%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.02%)</title><rect x="99.8058%" y="421" width="0.0194%" height="15" fill="rgb(241,95,50)" fg:x="5140" fg:w="1"/><text x="100.0558%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 0.02%)</title><rect x="99.8058%" y="405" width="0.0194%" height="15" fill="rgb(238,48,32)" fg:x="5140" fg:w="1"/><text x="100.0558%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (1 samples, 0.02%)</title><rect x="99.8058%" y="389" width="0.0194%" height="15" fill="rgb(235,113,49)" fg:x="5140" fg:w="1"/><text x="100.0558%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (1 samples, 0.02%)</title><rect x="99.8058%" y="373" width="0.0194%" height="15" fill="rgb(205,127,43)" fg:x="5140" fg:w="1"/><text x="100.0558%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (1 samples, 0.02%)</title><rect x="99.8058%" y="357" width="0.0194%" height="15" fill="rgb(250,162,2)" fg:x="5140" fg:w="1"/><text x="100.0558%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="99.8252%" y="421" width="0.0194%" height="15" fill="rgb(220,13,41)" fg:x="5141" fg:w="1"/><text x="100.0752%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="99.8252%" y="405" width="0.0194%" height="15" fill="rgb(249,221,25)" fg:x="5141" fg:w="1"/><text x="100.0752%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="99.8252%" y="389" width="0.0194%" height="15" fill="rgb(215,208,19)" fg:x="5141" fg:w="1"/><text x="100.0752%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.02%)</title><rect x="99.8252%" y="373" width="0.0194%" height="15" fill="rgb(236,175,2)" fg:x="5141" fg:w="1"/><text x="100.0752%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.02%)</title><rect x="99.8835%" y="293" width="0.0194%" height="15" fill="rgb(241,52,2)" fg:x="5144" fg:w="1"/><text x="100.1335%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.08%)</title><rect x="99.8447%" y="325" width="0.0777%" height="15" fill="rgb(248,140,14)" fg:x="5142" fg:w="4"/><text x="100.0947%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.06%)</title><rect x="99.8641%" y="309" width="0.0583%" height="15" fill="rgb(253,22,42)" fg:x="5143" fg:w="3"/><text x="100.1141%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.02%)</title><rect x="99.9029%" y="293" width="0.0194%" height="15" fill="rgb(234,61,47)" fg:x="5145" fg:w="1"/><text x="100.1529%" y="303.50"></text></g><g><title>hashbrown::map::make_insert_hash (6 samples, 0.12%)</title><rect x="99.8252%" y="453" width="0.1165%" height="15" fill="rgb(208,226,15)" fg:x="5141" fg:w="6"/><text x="100.0752%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.12%)</title><rect x="99.8252%" y="437" width="0.1165%" height="15" fill="rgb(217,221,4)" fg:x="5141" fg:w="6"/><text x="100.0752%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.10%)</title><rect x="99.8447%" y="421" width="0.0971%" height="15" fill="rgb(212,174,34)" fg:x="5142" fg:w="5"/><text x="100.0947%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (5 samples, 0.10%)</title><rect x="99.8447%" y="405" width="0.0971%" height="15" fill="rgb(253,83,4)" fg:x="5142" fg:w="5"/><text x="100.0947%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (5 samples, 0.10%)</title><rect x="99.8447%" y="389" width="0.0971%" height="15" fill="rgb(250,195,49)" fg:x="5142" fg:w="5"/><text x="100.0947%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (5 samples, 0.10%)</title><rect x="99.8447%" y="373" width="0.0971%" height="15" fill="rgb(241,192,25)" fg:x="5142" fg:w="5"/><text x="100.0947%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (5 samples, 0.10%)</title><rect x="99.8447%" y="357" width="0.0971%" height="15" fill="rgb(208,124,10)" fg:x="5142" fg:w="5"/><text x="100.0947%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (5 samples, 0.10%)</title><rect x="99.8447%" y="341" width="0.0971%" height="15" fill="rgb(222,33,0)" fg:x="5142" fg:w="5"/><text x="100.0947%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.02%)</title><rect x="99.9223%" y="325" width="0.0194%" height="15" fill="rgb(234,209,28)" fg:x="5146" fg:w="1"/><text x="100.1723%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="99.9223%" y="309" width="0.0194%" height="15" fill="rgb(224,11,23)" fg:x="5146" fg:w="1"/><text x="100.1723%" y="319.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.02%)</title><rect x="99.9223%" y="293" width="0.0194%" height="15" fill="rgb(232,99,1)" fg:x="5146" fg:w="1"/><text x="100.1723%" y="303.50"></text></g><g><title>std::panic::catch_unwind (5,122 samples, 99.46%)</title><rect x="0.5243%" y="629" width="99.4563%" height="15" fill="rgb(237,95,45)" fg:x="27" fg:w="5122"/><text x="0.7743%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,122 samples, 99.46%)</title><rect x="0.5243%" y="613" width="99.4563%" height="15" fill="rgb(208,109,11)" fg:x="27" fg:w="5122"/><text x="0.7743%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,122 samples, 99.46%)</title><rect x="0.5243%" y="597" width="99.4563%" height="15" fill="rgb(216,190,48)" fg:x="27" fg:w="5122"/><text x="0.7743%" y="607.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (5,122 samples, 99.46%)</title><rect x="0.5243%" y="581" width="99.4563%" height="15" fill="rgb(251,171,36)" fg:x="27" fg:w="5122"/><text x="0.7743%" y="591.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (5,122 samples, 99.46%)</title><rect x="0.5243%" y="565" width="99.4563%" height="15" fill="rgb(230,62,22)" fg:x="27" fg:w="5122"/><text x="0.7743%" y="575.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5,122 samples, 99.46%)</title><rect x="0.5243%" y="549" width="99.4563%" height="15" fill="rgb(225,114,35)" fg:x="27" fg:w="5122"/><text x="0.7743%" y="559.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (5,122 samples, 99.46%)</title><rect x="0.5243%" y="533" width="99.4563%" height="15" fill="rgb(215,118,42)" fg:x="27" fg:w="5122"/><text x="0.7743%" y="543.50">core::ops::function::FnOnce::call_once</text></g><g><title>yt_history::main (5,122 samples, 99.46%)</title><rect x="0.5243%" y="517" width="99.4563%" height="15" fill="rgb(243,119,21)" fg:x="27" fg:w="5122"/><text x="0.7743%" y="527.50">yt_history::main</text></g><g><title>yt_history::model::Models::count_watched_by_video (20 samples, 0.39%)</title><rect x="99.5922%" y="501" width="0.3883%" height="15" fill="rgb(252,177,53)" fg:x="5129" fg:w="20"/><text x="99.8422%" y="511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (11 samples, 0.21%)</title><rect x="99.7670%" y="485" width="0.2136%" height="15" fill="rgb(237,209,29)" fg:x="5138" fg:w="11"/><text x="100.0170%" y="495.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (10 samples, 0.19%)</title><rect x="99.7864%" y="469" width="0.1942%" height="15" fill="rgb(212,65,23)" fg:x="5139" fg:w="10"/><text x="100.0364%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.04%)</title><rect x="99.9417%" y="453" width="0.0388%" height="15" fill="rgb(230,222,46)" fg:x="5147" fg:w="2"/><text x="100.1917%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.04%)</title><rect x="99.9417%" y="437" width="0.0388%" height="15" fill="rgb(215,135,32)" fg:x="5147" fg:w="2"/><text x="100.1917%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.04%)</title><rect x="99.9417%" y="421" width="0.0388%" height="15" fill="rgb(246,101,22)" fg:x="5147" fg:w="2"/><text x="100.1917%" y="431.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (2 samples, 0.04%)</title><rect x="99.9417%" y="405" width="0.0388%" height="15" fill="rgb(206,107,13)" fg:x="5147" fg:w="2"/><text x="100.1917%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (2 samples, 0.04%)</title><rect x="99.9417%" y="389" width="0.0388%" height="15" fill="rgb(250,100,44)" fg:x="5147" fg:w="2"/><text x="100.1917%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (2 samples, 0.04%)</title><rect x="99.9417%" y="373" width="0.0388%" height="15" fill="rgb(231,147,38)" fg:x="5147" fg:w="2"/><text x="100.1917%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.04%)</title><rect x="99.9417%" y="357" width="0.0388%" height="15" fill="rgb(229,8,40)" fg:x="5147" fg:w="2"/><text x="100.1917%" y="367.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.04%)</title><rect x="99.9417%" y="341" width="0.0388%" height="15" fill="rgb(221,135,30)" fg:x="5147" fg:w="2"/><text x="100.1917%" y="351.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.04%)</title><rect x="99.9417%" y="325" width="0.0388%" height="15" fill="rgb(249,193,18)" fg:x="5147" fg:w="2"/><text x="100.1917%" y="335.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="99.9417%" y="309" width="0.0388%" height="15" fill="rgb(209,133,39)" fg:x="5147" fg:w="2"/><text x="100.1917%" y="319.50"></text></g><g><title>all (5,150 samples, 100%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(232,100,14)" fg:x="0" fg:w="5150"/><text x="0.2500%" y="815.50"></text></g><g><title>yt-history (5,150 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(224,185,1)" fg:x="0" fg:w="5150"/><text x="0.2500%" y="799.50">yt-history</text></g><g><title>_start (5,123 samples, 99.48%)</title><rect x="0.5243%" y="773" width="99.4757%" height="15" fill="rgb(223,139,8)" fg:x="27" fg:w="5123"/><text x="0.7743%" y="783.50">_start</text></g><g><title>__libc_start_main (5,123 samples, 99.48%)</title><rect x="0.5243%" y="757" width="99.4757%" height="15" fill="rgb(232,213,38)" fg:x="27" fg:w="5123"/><text x="0.7743%" y="767.50">__libc_start_main</text></g><g><title>[libc.so.6] (5,123 samples, 99.48%)</title><rect x="0.5243%" y="741" width="99.4757%" height="15" fill="rgb(207,94,22)" fg:x="27" fg:w="5123"/><text x="0.7743%" y="751.50">[libc.so.6]</text></g><g><title>main (5,123 samples, 99.48%)</title><rect x="0.5243%" y="725" width="99.4757%" height="15" fill="rgb(219,183,54)" fg:x="27" fg:w="5123"/><text x="0.7743%" y="735.50">main</text></g><g><title>std::rt::lang_start_internal (5,123 samples, 99.48%)</title><rect x="0.5243%" y="709" width="99.4757%" height="15" fill="rgb(216,185,54)" fg:x="27" fg:w="5123"/><text x="0.7743%" y="719.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (5,123 samples, 99.48%)</title><rect x="0.5243%" y="693" width="99.4757%" height="15" fill="rgb(254,217,39)" fg:x="27" fg:w="5123"/><text x="0.7743%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,123 samples, 99.48%)</title><rect x="0.5243%" y="677" width="99.4757%" height="15" fill="rgb(240,178,23)" fg:x="27" fg:w="5123"/><text x="0.7743%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,123 samples, 99.48%)</title><rect x="0.5243%" y="661" width="99.4757%" height="15" fill="rgb(218,11,47)" fg:x="27" fg:w="5123"/><text x="0.7743%" y="671.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (5,123 samples, 99.48%)</title><rect x="0.5243%" y="645" width="99.4757%" height="15" fill="rgb(218,51,51)" fg:x="27" fg:w="5123"/><text x="0.7743%" y="655.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::init (1 samples, 0.02%)</title><rect x="99.9806%" y="629" width="0.0194%" height="15" fill="rgb(238,126,27)" fg:x="5149" fg:w="1"/><text x="100.2306%" y="639.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.02%)</title><rect x="99.9806%" y="613" width="0.0194%" height="15" fill="rgb(249,202,22)" fg:x="5149" fg:w="1"/><text x="100.2306%" y="623.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.02%)</title><rect x="99.9806%" y="597" width="0.0194%" height="15" fill="rgb(254,195,49)" fg:x="5149" fg:w="1"/><text x="100.2306%" y="607.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.02%)</title><rect x="99.9806%" y="581" width="0.0194%" height="15" fill="rgb(208,123,14)" fg:x="5149" fg:w="1"/><text x="100.2306%" y="591.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.02%)</title><rect x="99.9806%" y="565" width="0.0194%" height="15" fill="rgb(224,200,8)" fg:x="5149" fg:w="1"/><text x="100.2306%" y="575.50"></text></g><g><title>__getdelim (1 samples, 0.02%)</title><rect x="99.9806%" y="549" width="0.0194%" height="15" fill="rgb(217,61,36)" fg:x="5149" fg:w="1"/><text x="100.2306%" y="559.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="99.9806%" y="533" width="0.0194%" height="15" fill="rgb(206,35,45)" fg:x="5149" fg:w="1"/><text x="100.2306%" y="543.50"></text></g></svg></svg>