<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="933.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="933.00"> </text><svg id="frames" x="10" width="1180" total_samples="62472"><g><title>perf-exec (14 samples, 0.02%)</title><rect x="0.0000%" y="885" width="0.0224%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="14"/><text x="0.2500%" y="895.50"></text></g><g><title>[[kernel.kallsyms]] (14 samples, 0.02%)</title><rect x="0.0000%" y="869" width="0.0224%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="14"/><text x="0.2500%" y="879.50"></text></g><g><title>[[kernel.kallsyms]] (14 samples, 0.02%)</title><rect x="0.0000%" y="853" width="0.0224%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="14"/><text x="0.2500%" y="863.50"></text></g><g><title>[[kernel.kallsyms]] (14 samples, 0.02%)</title><rect x="0.0000%" y="837" width="0.0224%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="14"/><text x="0.2500%" y="847.50"></text></g><g><title>[[kernel.kallsyms]] (14 samples, 0.02%)</title><rect x="0.0000%" y="821" width="0.0224%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="14"/><text x="0.2500%" y="831.50"></text></g><g><title>[[kernel.kallsyms]] (14 samples, 0.02%)</title><rect x="0.0000%" y="805" width="0.0224%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="14"/><text x="0.2500%" y="815.50"></text></g><g><title>[[kernel.kallsyms]] (14 samples, 0.02%)</title><rect x="0.0000%" y="789" width="0.0224%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="14"/><text x="0.2500%" y="799.50"></text></g><g><title>[[kernel.kallsyms]] (14 samples, 0.02%)</title><rect x="0.0000%" y="773" width="0.0224%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="14"/><text x="0.2500%" y="783.50"></text></g><g><title>[[kernel.kallsyms]] (14 samples, 0.02%)</title><rect x="0.0000%" y="757" width="0.0224%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="14"/><text x="0.2500%" y="767.50"></text></g><g><title>[[kernel.kallsyms]] (14 samples, 0.02%)</title><rect x="0.0000%" y="741" width="0.0224%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="14"/><text x="0.2500%" y="751.50"></text></g><g><title>[[kernel.kallsyms]] (14 samples, 0.02%)</title><rect x="0.0000%" y="725" width="0.0224%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="14"/><text x="0.2500%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;yt_history::model::Channel&gt;&gt; (34 samples, 0.05%)</title><rect x="0.0496%" y="581" width="0.0544%" height="15" fill="rgb(240,193,28)" fg:x="31" fg:w="34"/><text x="0.2996%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;yt_history::model::Channel&gt;&gt; (33 samples, 0.05%)</title><rect x="0.0512%" y="565" width="0.0528%" height="15" fill="rgb(216,20,37)" fg:x="32" fg:w="33"/><text x="0.3012%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.05%)</title><rect x="0.0512%" y="549" width="0.0528%" height="15" fill="rgb(206,188,39)" fg:x="32" fg:w="33"/><text x="0.3012%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (33 samples, 0.05%)</title><rect x="0.0512%" y="533" width="0.0528%" height="15" fill="rgb(217,207,13)" fg:x="32" fg:w="33"/><text x="0.3012%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (33 samples, 0.05%)</title><rect x="0.0512%" y="517" width="0.0528%" height="15" fill="rgb(231,73,38)" fg:x="32" fg:w="33"/><text x="0.3012%" y="527.50"></text></g><g><title>cfree (33 samples, 0.05%)</title><rect x="0.0512%" y="501" width="0.0528%" height="15" fill="rgb(225,20,46)" fg:x="32" fg:w="33"/><text x="0.3012%" y="511.50"></text></g><g><title>[libc.so.6] (33 samples, 0.05%)</title><rect x="0.0512%" y="485" width="0.0528%" height="15" fill="rgb(210,31,41)" fg:x="32" fg:w="33"/><text x="0.3012%" y="495.50"></text></g><g><title>[libc.so.6] (33 samples, 0.05%)</title><rect x="0.0512%" y="469" width="0.0528%" height="15" fill="rgb(221,200,47)" fg:x="32" fg:w="33"/><text x="0.3012%" y="479.50"></text></g><g><title>[libc.so.6] (12 samples, 0.02%)</title><rect x="0.0848%" y="453" width="0.0192%" height="15" fill="rgb(226,26,5)" fg:x="53" fg:w="12"/><text x="0.3348%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (8 samples, 0.01%)</title><rect x="0.1088%" y="501" width="0.0128%" height="15" fill="rgb(249,33,26)" fg:x="68" fg:w="8"/><text x="0.3588%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (8 samples, 0.01%)</title><rect x="0.1088%" y="485" width="0.0128%" height="15" fill="rgb(235,183,28)" fg:x="68" fg:w="8"/><text x="0.3588%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (8 samples, 0.01%)</title><rect x="0.1088%" y="469" width="0.0128%" height="15" fill="rgb(221,5,38)" fg:x="68" fg:w="8"/><text x="0.3588%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="0.1088%" y="453" width="0.0128%" height="15" fill="rgb(247,18,42)" fg:x="68" fg:w="8"/><text x="0.3588%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="0.1088%" y="565" width="0.0144%" height="15" fill="rgb(241,131,45)" fg:x="68" fg:w="9"/><text x="0.3588%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[yt_history::model::Watched]&gt; (9 samples, 0.01%)</title><rect x="0.1088%" y="549" width="0.0144%" height="15" fill="rgb(249,31,29)" fg:x="68" fg:w="9"/><text x="0.3588%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Watched&gt; (9 samples, 0.01%)</title><rect x="0.1088%" y="533" width="0.0144%" height="15" fill="rgb(225,111,53)" fg:x="68" fg:w="9"/><text x="0.3588%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Video&gt; (9 samples, 0.01%)</title><rect x="0.1088%" y="517" width="0.0144%" height="15" fill="rgb(238,160,17)" fg:x="68" fg:w="9"/><text x="0.3588%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Models&gt; (48 samples, 0.08%)</title><rect x="0.0496%" y="597" width="0.0768%" height="15" fill="rgb(214,148,48)" fg:x="31" fg:w="48"/><text x="0.2996%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;yt_history::model::Watched&gt;&gt; (11 samples, 0.02%)</title><rect x="0.1088%" y="581" width="0.0176%" height="15" fill="rgb(232,36,49)" fg:x="68" fg:w="11"/><text x="0.3588%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (23 samples, 0.04%)</title><rect x="0.1745%" y="389" width="0.0368%" height="15" fill="rgb(209,103,24)" fg:x="109" fg:w="23"/><text x="0.4245%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (16 samples, 0.03%)</title><rect x="0.1857%" y="373" width="0.0256%" height="15" fill="rgb(229,88,8)" fg:x="116" fg:w="16"/><text x="0.4357%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16 samples, 0.03%)</title><rect x="0.1857%" y="357" width="0.0256%" height="15" fill="rgb(213,181,19)" fg:x="116" fg:w="16"/><text x="0.4357%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.03%)</title><rect x="0.1857%" y="341" width="0.0256%" height="15" fill="rgb(254,191,54)" fg:x="116" fg:w="16"/><text x="0.4357%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 0.03%)</title><rect x="0.1857%" y="325" width="0.0256%" height="15" fill="rgb(241,83,37)" fg:x="116" fg:w="16"/><text x="0.4357%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (15 samples, 0.02%)</title><rect x="0.1873%" y="309" width="0.0240%" height="15" fill="rgb(233,36,39)" fg:x="117" fg:w="15"/><text x="0.4373%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.02%)</title><rect x="0.1873%" y="293" width="0.0240%" height="15" fill="rgb(226,3,54)" fg:x="117" fg:w="15"/><text x="0.4373%" y="303.50"></text></g><g><title>[libc.so.6] (15 samples, 0.02%)</title><rect x="0.1873%" y="277" width="0.0240%" height="15" fill="rgb(245,192,40)" fg:x="117" fg:w="15"/><text x="0.4373%" y="287.50"></text></g><g><title>&lt;yt_history::model::Video as core::clone::Clone&gt;::clone (34 samples, 0.05%)</title><rect x="0.1745%" y="405" width="0.0544%" height="15" fill="rgb(238,167,29)" fg:x="109" fg:w="34"/><text x="0.4245%" y="415.50"></text></g><g><title>&lt;yt_history::model::Channel as core::clone::Clone&gt;::clone (11 samples, 0.02%)</title><rect x="0.2113%" y="389" width="0.0176%" height="15" fill="rgb(232,182,51)" fg:x="132" fg:w="11"/><text x="0.4613%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.01%)</title><rect x="0.2145%" y="373" width="0.0144%" height="15" fill="rgb(231,60,39)" fg:x="134" fg:w="9"/><text x="0.4645%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.01%)</title><rect x="0.2145%" y="357" width="0.0144%" height="15" fill="rgb(208,69,12)" fg:x="134" fg:w="9"/><text x="0.4645%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.01%)</title><rect x="0.2145%" y="341" width="0.0144%" height="15" fill="rgb(235,93,37)" fg:x="134" fg:w="9"/><text x="0.4645%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.01%)</title><rect x="0.2145%" y="325" width="0.0144%" height="15" fill="rgb(213,116,39)" fg:x="134" fg:w="9"/><text x="0.4645%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.01%)</title><rect x="0.2145%" y="309" width="0.0144%" height="15" fill="rgb(222,207,29)" fg:x="134" fg:w="9"/><text x="0.4645%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (8 samples, 0.01%)</title><rect x="0.2161%" y="293" width="0.0128%" height="15" fill="rgb(206,96,30)" fg:x="135" fg:w="8"/><text x="0.4661%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.01%)</title><rect x="0.2161%" y="277" width="0.0128%" height="15" fill="rgb(218,138,4)" fg:x="135" fg:w="8"/><text x="0.4661%" y="287.50"></text></g><g><title>[libc.so.6] (8 samples, 0.01%)</title><rect x="0.2161%" y="261" width="0.0128%" height="15" fill="rgb(250,191,14)" fg:x="135" fg:w="8"/><text x="0.4661%" y="271.50"></text></g><g><title>yt_history::model::Models::index_of_channel (61 samples, 0.10%)</title><rect x="0.2289%" y="405" width="0.0976%" height="15" fill="rgb(239,60,40)" fg:x="143" fg:w="61"/><text x="0.4789%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (61 samples, 0.10%)</title><rect x="0.2289%" y="389" width="0.0976%" height="15" fill="rgb(206,27,48)" fg:x="143" fg:w="61"/><text x="0.4789%" y="399.50"></text></g><g><title>yt_history::model::Models::index_of_channel::{{closure}} (60 samples, 0.10%)</title><rect x="0.2305%" y="373" width="0.0960%" height="15" fill="rgb(225,35,8)" fg:x="144" fg:w="60"/><text x="0.4805%" y="383.50"></text></g><g><title>&lt;yt_history::model::Channel as core::cmp::PartialEq&gt;::eq (60 samples, 0.10%)</title><rect x="0.2305%" y="357" width="0.0960%" height="15" fill="rgb(250,213,24)" fg:x="144" fg:w="60"/><text x="0.4805%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (58 samples, 0.09%)</title><rect x="0.2337%" y="341" width="0.0928%" height="15" fill="rgb(247,123,22)" fg:x="146" fg:w="58"/><text x="0.4837%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (58 samples, 0.09%)</title><rect x="0.2337%" y="325" width="0.0928%" height="15" fill="rgb(231,138,38)" fg:x="146" fg:w="58"/><text x="0.4837%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (58 samples, 0.09%)</title><rect x="0.2337%" y="309" width="0.0928%" height="15" fill="rgb(231,145,46)" fg:x="146" fg:w="58"/><text x="0.4837%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (58 samples, 0.09%)</title><rect x="0.2337%" y="293" width="0.0928%" height="15" fill="rgb(251,118,11)" fg:x="146" fg:w="58"/><text x="0.4837%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (58 samples, 0.09%)</title><rect x="0.2337%" y="277" width="0.0928%" height="15" fill="rgb(217,147,25)" fg:x="146" fg:w="58"/><text x="0.4837%" y="287.50"></text></g><g><title>[libc.so.6] (57 samples, 0.09%)</title><rect x="0.2353%" y="261" width="0.0912%" height="15" fill="rgb(247,81,37)" fg:x="147" fg:w="57"/><text x="0.4853%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1,341 samples, 2.15%)</title><rect x="0.4290%" y="341" width="2.1466%" height="15" fill="rgb(209,12,38)" fg:x="268" fg:w="1341"/><text x="0.6790%" y="351.50">&lt;..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1,341 samples, 2.15%)</title><rect x="0.4290%" y="325" width="2.1466%" height="15" fill="rgb(227,1,9)" fg:x="268" fg:w="1341"/><text x="0.6790%" y="335.50">c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,341 samples, 2.15%)</title><rect x="0.4290%" y="309" width="2.1466%" height="15" fill="rgb(248,47,43)" fg:x="268" fg:w="1341"/><text x="0.6790%" y="319.50">c..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,341 samples, 2.15%)</title><rect x="0.4290%" y="293" width="2.1466%" height="15" fill="rgb(221,10,30)" fg:x="268" fg:w="1341"/><text x="0.6790%" y="303.50">c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,341 samples, 2.15%)</title><rect x="0.4290%" y="277" width="2.1466%" height="15" fill="rgb(210,229,1)" fg:x="268" fg:w="1341"/><text x="0.6790%" y="287.50">&lt;..</text></g><g><title>[libc.so.6] (1,231 samples, 1.97%)</title><rect x="0.6051%" y="261" width="1.9705%" height="15" fill="rgb(222,148,37)" fg:x="378" fg:w="1231"/><text x="0.8551%" y="271.50">[..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1,410 samples, 2.26%)</title><rect x="0.3265%" y="389" width="2.2570%" height="15" fill="rgb(234,67,33)" fg:x="204" fg:w="1410"/><text x="0.5765%" y="399.50">&lt;..</text></g><g><title>yt_history::model::Models::index_of_video::{{closure}} (1,409 samples, 2.26%)</title><rect x="0.3281%" y="373" width="2.2554%" height="15" fill="rgb(247,98,35)" fg:x="205" fg:w="1409"/><text x="0.5781%" y="383.50">y..</text></g><g><title>&lt;yt_history::model::Video as core::cmp::PartialEq&gt;::eq (1,409 samples, 2.26%)</title><rect x="0.3281%" y="357" width="2.2554%" height="15" fill="rgb(247,138,52)" fg:x="205" fg:w="1409"/><text x="0.5781%" y="367.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,522 samples, 2.44%)</title><rect x="0.1521%" y="581" width="2.4363%" height="15" fill="rgb(213,79,30)" fg:x="95" fg:w="1522"/><text x="0.4021%" y="591.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,522 samples, 2.44%)</title><rect x="0.1521%" y="565" width="2.4363%" height="15" fill="rgb(246,177,23)" fg:x="95" fg:w="1522"/><text x="0.4021%" y="575.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,522 samples, 2.44%)</title><rect x="0.1521%" y="549" width="2.4363%" height="15" fill="rgb(230,62,27)" fg:x="95" fg:w="1522"/><text x="0.4021%" y="559.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,522 samples, 2.44%)</title><rect x="0.1521%" y="533" width="2.4363%" height="15" fill="rgb(216,154,8)" fg:x="95" fg:w="1522"/><text x="0.4021%" y="543.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,522 samples, 2.44%)</title><rect x="0.1521%" y="517" width="2.4363%" height="15" fill="rgb(244,35,45)" fg:x="95" fg:w="1522"/><text x="0.4021%" y="527.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1,522 samples, 2.44%)</title><rect x="0.1521%" y="501" width="2.4363%" height="15" fill="rgb(251,115,12)" fg:x="95" fg:w="1522"/><text x="0.4021%" y="511.50">al..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,522 samples, 2.44%)</title><rect x="0.1521%" y="485" width="2.4363%" height="15" fill="rgb(240,54,50)" fg:x="95" fg:w="1522"/><text x="0.4021%" y="495.50">co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,522 samples, 2.44%)</title><rect x="0.1521%" y="469" width="2.4363%" height="15" fill="rgb(233,84,52)" fg:x="95" fg:w="1522"/><text x="0.4021%" y="479.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,522 samples, 2.44%)</title><rect x="0.1521%" y="453" width="2.4363%" height="15" fill="rgb(207,117,47)" fg:x="95" fg:w="1522"/><text x="0.4021%" y="463.50">co..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1,522 samples, 2.44%)</title><rect x="0.1521%" y="437" width="2.4363%" height="15" fill="rgb(249,43,39)" fg:x="95" fg:w="1522"/><text x="0.4021%" y="447.50">co..</text></g><g><title>yt_history::model::Models::to_string::{{closure}} (1,520 samples, 2.43%)</title><rect x="0.1553%" y="421" width="2.4331%" height="15" fill="rgb(209,38,44)" fg:x="97" fg:w="1520"/><text x="0.4053%" y="431.50">yt..</text></g><g><title>yt_history::model::Models::index_of_video (1,413 samples, 2.26%)</title><rect x="0.3265%" y="405" width="2.2618%" height="15" fill="rgb(236,212,23)" fg:x="204" fg:w="1413"/><text x="0.5765%" y="415.50">y..</text></g><g><title>yt_history::model::_::&lt;impl serde::ser::Serialize for yt_history::model::ScalarVideo&gt;::serialize (7 samples, 0.01%)</title><rect x="2.5916%" y="341" width="0.0112%" height="15" fill="rgb(242,79,21)" fg:x="1619" fg:w="7"/><text x="2.8416%" y="351.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.01%)</title><rect x="2.5916%" y="325" width="0.0112%" height="15" fill="rgb(211,96,35)" fg:x="1619" fg:w="7"/><text x="2.8416%" y="335.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (7 samples, 0.01%)</title><rect x="2.5916%" y="309" width="0.0112%" height="15" fill="rgb(253,215,40)" fg:x="1619" fg:w="7"/><text x="2.8416%" y="319.50"></text></g><g><title>&lt;chrono::naive::datetime::NaiveDateTime as core::fmt::Debug&gt;::fmt (10 samples, 0.02%)</title><rect x="2.6124%" y="181" width="0.0160%" height="15" fill="rgb(211,81,21)" fg:x="1632" fg:w="10"/><text x="2.8624%" y="191.50"></text></g><g><title>&lt;chrono::naive::date::NaiveDate as core::fmt::Debug&gt;::fmt (8 samples, 0.01%)</title><rect x="2.6156%" y="165" width="0.0128%" height="15" fill="rgb(208,190,38)" fg:x="1634" fg:w="8"/><text x="2.8656%" y="175.50"></text></g><g><title>chrono::format::write_hundreds (7 samples, 0.01%)</title><rect x="2.6172%" y="149" width="0.0112%" height="15" fill="rgb(235,213,38)" fg:x="1635" fg:w="7"/><text x="2.8672%" y="159.50"></text></g><g><title>chrono::format::write_hundreds (11 samples, 0.02%)</title><rect x="2.6300%" y="165" width="0.0176%" height="15" fill="rgb(237,122,38)" fg:x="1643" fg:w="11"/><text x="2.8800%" y="175.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (11 samples, 0.02%)</title><rect x="2.6300%" y="149" width="0.0176%" height="15" fill="rgb(244,218,35)" fg:x="1643" fg:w="11"/><text x="2.8800%" y="159.50"></text></g><g><title>core::fmt::Write::write_char (8 samples, 0.01%)</title><rect x="2.6348%" y="133" width="0.0128%" height="15" fill="rgb(240,68,47)" fg:x="1646" fg:w="8"/><text x="2.8848%" y="143.50"></text></g><g><title>&lt;&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::collect_str::Adapter&lt;W,F&gt; as core::fmt::Write&gt;::write_str (7 samples, 0.01%)</title><rect x="2.6364%" y="117" width="0.0112%" height="15" fill="rgb(210,16,53)" fg:x="1647" fg:w="7"/><text x="2.8864%" y="127.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (7 samples, 0.01%)</title><rect x="2.6364%" y="101" width="0.0112%" height="15" fill="rgb(235,124,12)" fg:x="1647" fg:w="7"/><text x="2.8864%" y="111.50"></text></g><g><title>&lt;chrono::naive::time::NaiveTime as core::fmt::Debug&gt;::fmt (13 samples, 0.02%)</title><rect x="2.6284%" y="181" width="0.0208%" height="15" fill="rgb(224,169,11)" fg:x="1642" fg:w="13"/><text x="2.8784%" y="191.50"></text></g><g><title>core::fmt::Write::write_fmt (36 samples, 0.06%)</title><rect x="2.6108%" y="245" width="0.0576%" height="15" fill="rgb(250,166,2)" fg:x="1631" fg:w="36"/><text x="2.8608%" y="255.50"></text></g><g><title>core::fmt::write (36 samples, 0.06%)</title><rect x="2.6108%" y="229" width="0.0576%" height="15" fill="rgb(242,216,29)" fg:x="1631" fg:w="36"/><text x="2.8608%" y="239.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (35 samples, 0.06%)</title><rect x="2.6124%" y="213" width="0.0560%" height="15" fill="rgb(230,116,27)" fg:x="1632" fg:w="35"/><text x="2.8624%" y="223.50"></text></g><g><title>&lt;chrono::datetime::DateTime&lt;Tz&gt; as core::fmt::Debug&gt;::fmt (35 samples, 0.06%)</title><rect x="2.6124%" y="197" width="0.0560%" height="15" fill="rgb(228,99,48)" fg:x="1632" fg:w="35"/><text x="2.8624%" y="207.50"></text></g><g><title>chrono::datetime::serde::&lt;impl serde::ser::Serialize for chrono::datetime::DateTime&lt;Tz&gt;&gt;::serialize (38 samples, 0.06%)</title><rect x="2.6092%" y="277" width="0.0608%" height="15" fill="rgb(253,11,6)" fg:x="1630" fg:w="38"/><text x="2.8592%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::collect_str (38 samples, 0.06%)</title><rect x="2.6092%" y="261" width="0.0608%" height="15" fill="rgb(247,143,39)" fg:x="1630" fg:w="38"/><text x="2.8592%" y="271.50"></text></g><g><title>yt_history::model::Models::to_string (1,575 samples, 2.52%)</title><rect x="0.1521%" y="597" width="2.5211%" height="15" fill="rgb(236,97,10)" fg:x="95" fg:w="1575"/><text x="0.4021%" y="607.50">yt..</text></g><g><title>serde_json::ser::to_string (52 samples, 0.08%)</title><rect x="2.5900%" y="581" width="0.0832%" height="15" fill="rgb(233,208,19)" fg:x="1618" fg:w="52"/><text x="2.8400%" y="591.50"></text></g><g><title>serde_json::ser::to_vec (52 samples, 0.08%)</title><rect x="2.5900%" y="565" width="0.0832%" height="15" fill="rgb(216,164,2)" fg:x="1618" fg:w="52"/><text x="2.8400%" y="575.50"></text></g><g><title>serde_json::ser::to_writer (52 samples, 0.08%)</title><rect x="2.5900%" y="549" width="0.0832%" height="15" fill="rgb(220,129,5)" fg:x="1618" fg:w="52"/><text x="2.8400%" y="559.50"></text></g><g><title>yt_history::model::_::&lt;impl serde::ser::Serialize for yt_history::model::ScalarModels&gt;::serialize (52 samples, 0.08%)</title><rect x="2.5900%" y="533" width="0.0832%" height="15" fill="rgb(242,17,10)" fg:x="1618" fg:w="52"/><text x="2.8400%" y="543.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (52 samples, 0.08%)</title><rect x="2.5900%" y="517" width="0.0832%" height="15" fill="rgb(242,107,0)" fg:x="1618" fg:w="52"/><text x="2.8400%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (52 samples, 0.08%)</title><rect x="2.5900%" y="501" width="0.0832%" height="15" fill="rgb(251,28,31)" fg:x="1618" fg:w="52"/><text x="2.8400%" y="511.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (52 samples, 0.08%)</title><rect x="2.5900%" y="485" width="0.0832%" height="15" fill="rgb(233,223,10)" fg:x="1618" fg:w="52"/><text x="2.8400%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (52 samples, 0.08%)</title><rect x="2.5900%" y="469" width="0.0832%" height="15" fill="rgb(215,21,27)" fg:x="1618" fg:w="52"/><text x="2.8400%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (52 samples, 0.08%)</title><rect x="2.5900%" y="453" width="0.0832%" height="15" fill="rgb(232,23,21)" fg:x="1618" fg:w="52"/><text x="2.8400%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (52 samples, 0.08%)</title><rect x="2.5900%" y="437" width="0.0832%" height="15" fill="rgb(244,5,23)" fg:x="1618" fg:w="52"/><text x="2.8400%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (52 samples, 0.08%)</title><rect x="2.5900%" y="421" width="0.0832%" height="15" fill="rgb(226,81,46)" fg:x="1618" fg:w="52"/><text x="2.8400%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (52 samples, 0.08%)</title><rect x="2.5900%" y="405" width="0.0832%" height="15" fill="rgb(247,70,30)" fg:x="1618" fg:w="52"/><text x="2.8400%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq::{{closure}} (52 samples, 0.08%)</title><rect x="2.5900%" y="389" width="0.0832%" height="15" fill="rgb(212,68,19)" fg:x="1618" fg:w="52"/><text x="2.8400%" y="399.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeSeq&gt;::serialize_element (52 samples, 0.08%)</title><rect x="2.5900%" y="373" width="0.0832%" height="15" fill="rgb(240,187,13)" fg:x="1618" fg:w="52"/><text x="2.8400%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (52 samples, 0.08%)</title><rect x="2.5900%" y="357" width="0.0832%" height="15" fill="rgb(223,113,26)" fg:x="1618" fg:w="52"/><text x="2.8400%" y="367.50"></text></g><g><title>yt_history::model::_::&lt;impl serde::ser::Serialize for yt_history::model::ScalarWatched&gt;::serialize (44 samples, 0.07%)</title><rect x="2.6028%" y="341" width="0.0704%" height="15" fill="rgb(206,192,2)" fg:x="1626" fg:w="44"/><text x="2.8528%" y="351.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (44 samples, 0.07%)</title><rect x="2.6028%" y="325" width="0.0704%" height="15" fill="rgb(241,108,4)" fg:x="1626" fg:w="44"/><text x="2.8528%" y="335.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (44 samples, 0.07%)</title><rect x="2.6028%" y="309" width="0.0704%" height="15" fill="rgb(247,173,49)" fg:x="1626" fg:w="44"/><text x="2.8528%" y="319.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (40 samples, 0.06%)</title><rect x="2.6092%" y="293" width="0.0640%" height="15" fill="rgb(224,114,35)" fg:x="1630" fg:w="40"/><text x="2.8592%" y="303.50"></text></g><g><title>&lt;yt_history::DataRow as core::clone::Clone&gt;::clone (12 samples, 0.02%)</title><rect x="2.6780%" y="581" width="0.0192%" height="15" fill="rgb(245,159,27)" fg:x="1673" fg:w="12"/><text x="2.9280%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (12 samples, 0.02%)</title><rect x="2.6780%" y="565" width="0.0192%" height="15" fill="rgb(245,172,44)" fg:x="1673" fg:w="12"/><text x="2.9280%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.01%)</title><rect x="2.6828%" y="549" width="0.0144%" height="15" fill="rgb(236,23,11)" fg:x="1676" fg:w="9"/><text x="2.9328%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.01%)</title><rect x="2.6828%" y="533" width="0.0144%" height="15" fill="rgb(205,117,38)" fg:x="1676" fg:w="9"/><text x="2.9328%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.01%)</title><rect x="2.6828%" y="517" width="0.0144%" height="15" fill="rgb(237,72,25)" fg:x="1676" fg:w="9"/><text x="2.9328%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.01%)</title><rect x="2.6828%" y="501" width="0.0144%" height="15" fill="rgb(244,70,9)" fg:x="1676" fg:w="9"/><text x="2.9328%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (10 samples, 0.02%)</title><rect x="2.7052%" y="485" width="0.0160%" height="15" fill="rgb(217,125,39)" fg:x="1690" fg:w="10"/><text x="2.9552%" y="495.50"></text></g><g><title>&lt;core::char::EscapeDefault as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="2.7997%" y="357" width="0.0112%" height="15" fill="rgb(235,36,10)" fg:x="1749" fg:w="7"/><text x="3.0497%" y="367.50"></text></g><g><title>&lt;core::char::EscapeDebug as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.01%)</title><rect x="2.7997%" y="373" width="0.0128%" height="15" fill="rgb(251,123,47)" fg:x="1749" fg:w="8"/><text x="3.0497%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (11 samples, 0.02%)</title><rect x="2.8397%" y="325" width="0.0176%" height="15" fill="rgb(221,13,13)" fg:x="1774" fg:w="11"/><text x="3.0897%" y="335.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.02%)</title><rect x="2.8573%" y="325" width="0.0176%" height="15" fill="rgb(238,131,9)" fg:x="1785" fg:w="11"/><text x="3.1073%" y="335.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (10 samples, 0.02%)</title><rect x="2.8589%" y="309" width="0.0160%" height="15" fill="rgb(211,50,8)" fg:x="1786" fg:w="10"/><text x="3.1089%" y="319.50"></text></g><g><title>&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (40 samples, 0.06%)</title><rect x="2.8125%" y="373" width="0.0640%" height="15" fill="rgb(245,182,24)" fg:x="1757" fg:w="40"/><text x="3.0625%" y="383.50"></text></g><g><title>core::fmt::Write::write_char (35 samples, 0.06%)</title><rect x="2.8205%" y="357" width="0.0560%" height="15" fill="rgb(242,14,37)" fg:x="1762" fg:w="35"/><text x="3.0705%" y="367.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (29 samples, 0.05%)</title><rect x="2.8301%" y="341" width="0.0464%" height="15" fill="rgb(246,228,12)" fg:x="1768" fg:w="29"/><text x="3.0801%" y="351.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.02%)</title><rect x="2.8765%" y="373" width="0.0160%" height="15" fill="rgb(213,55,15)" fg:x="1797" fg:w="10"/><text x="3.1265%" y="383.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.02%)</title><rect x="2.8765%" y="357" width="0.0160%" height="15" fill="rgb(209,9,3)" fg:x="1797" fg:w="10"/><text x="3.1265%" y="367.50"></text></g><g><title>core::str::validations::next_code_point (10 samples, 0.02%)</title><rect x="2.8765%" y="341" width="0.0160%" height="15" fill="rgb(230,59,30)" fg:x="1797" fg:w="10"/><text x="3.1265%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (7 samples, 0.01%)</title><rect x="2.9965%" y="309" width="0.0112%" height="15" fill="rgb(209,121,21)" fg:x="1872" fg:w="7"/><text x="3.2465%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (7 samples, 0.01%)</title><rect x="2.9965%" y="293" width="0.0112%" height="15" fill="rgb(220,109,13)" fg:x="1872" fg:w="7"/><text x="3.2465%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (7 samples, 0.01%)</title><rect x="2.9965%" y="277" width="0.0112%" height="15" fill="rgb(232,18,1)" fg:x="1872" fg:w="7"/><text x="3.2465%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (84 samples, 0.13%)</title><rect x="3.1710%" y="261" width="0.1345%" height="15" fill="rgb(215,41,42)" fg:x="1981" fg:w="84"/><text x="3.4210%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key (196 samples, 0.31%)</title><rect x="3.0077%" y="309" width="0.3137%" height="15" fill="rgb(224,123,36)" fg:x="1879" fg:w="196"/><text x="3.2577%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (196 samples, 0.31%)</title><rect x="3.0077%" y="293" width="0.3137%" height="15" fill="rgb(240,125,3)" fg:x="1879" fg:w="196"/><text x="3.2577%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key::{{closure}} (94 samples, 0.15%)</title><rect x="3.1710%" y="277" width="0.1505%" height="15" fill="rgb(205,98,50)" fg:x="1981" fg:w="94"/><text x="3.4210%" y="287.50"></text></g><g><title>core::unicode::unicode_data::skip_search::{{closure}} (10 samples, 0.02%)</title><rect x="3.3055%" y="261" width="0.0160%" height="15" fill="rgb(205,185,37)" fg:x="2065" fg:w="10"/><text x="3.5555%" y="271.50"></text></g><g><title>&lt;&amp;u32 as core::ops::bit::Shl&lt;i32&gt;&gt;::shl (10 samples, 0.02%)</title><rect x="3.3055%" y="245" width="0.0160%" height="15" fill="rgb(238,207,15)" fg:x="2065" fg:w="10"/><text x="3.5555%" y="255.50"></text></g><g><title>&lt;u32 as core::ops::bit::Shl&lt;i32&gt;&gt;::shl (10 samples, 0.02%)</title><rect x="3.3055%" y="229" width="0.0160%" height="15" fill="rgb(213,199,42)" fg:x="2065" fg:w="10"/><text x="3.5555%" y="239.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_grapheme_extended (253 samples, 0.40%)</title><rect x="2.9309%" y="357" width="0.4050%" height="15" fill="rgb(235,201,11)" fg:x="1831" fg:w="253"/><text x="3.1809%" y="367.50"></text></g><g><title>core::unicode::unicode_data::grapheme_extend::lookup (248 samples, 0.40%)</title><rect x="2.9389%" y="341" width="0.3970%" height="15" fill="rgb(207,46,11)" fg:x="1836" fg:w="248"/><text x="3.1889%" y="351.50"></text></g><g><title>core::unicode::unicode_data::skip_search (224 samples, 0.36%)</title><rect x="2.9773%" y="325" width="0.3586%" height="15" fill="rgb(241,35,35)" fg:x="1860" fg:w="224"/><text x="3.2273%" y="335.50"></text></g><g><title>core::unicode::unicode_data::decode_length (9 samples, 0.01%)</title><rect x="3.3215%" y="309" width="0.0144%" height="15" fill="rgb(243,32,47)" fg:x="2075" fg:w="9"/><text x="3.5715%" y="319.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (323 samples, 0.52%)</title><rect x="2.8925%" y="373" width="0.5170%" height="15" fill="rgb(247,202,23)" fg:x="1807" fg:w="323"/><text x="3.1425%" y="383.50"></text></g><g><title>core::unicode::printable::is_printable (46 samples, 0.07%)</title><rect x="3.3359%" y="357" width="0.0736%" height="15" fill="rgb(219,102,11)" fg:x="2084" fg:w="46"/><text x="3.5859%" y="367.50"></text></g><g><title>core::unicode::printable::check (14 samples, 0.02%)</title><rect x="3.3871%" y="341" width="0.0224%" height="15" fill="rgb(243,110,44)" fg:x="2116" fg:w="14"/><text x="3.6371%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (31 samples, 0.05%)</title><rect x="3.4399%" y="181" width="0.0496%" height="15" fill="rgb(222,74,54)" fg:x="2149" fg:w="31"/><text x="3.6899%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (29 samples, 0.05%)</title><rect x="3.4431%" y="165" width="0.0464%" height="15" fill="rgb(216,99,12)" fg:x="2151" fg:w="29"/><text x="3.6931%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (29 samples, 0.05%)</title><rect x="3.4431%" y="149" width="0.0464%" height="15" fill="rgb(226,22,26)" fg:x="2151" fg:w="29"/><text x="3.6931%" y="159.50"></text></g><g><title>alloc::alloc::realloc (29 samples, 0.05%)</title><rect x="3.4431%" y="133" width="0.0464%" height="15" fill="rgb(217,163,10)" fg:x="2151" fg:w="29"/><text x="3.6931%" y="143.50"></text></g><g><title>realloc (28 samples, 0.04%)</title><rect x="3.4447%" y="117" width="0.0448%" height="15" fill="rgb(213,25,53)" fg:x="2152" fg:w="28"/><text x="3.6947%" y="127.50"></text></g><g><title>[libc.so.6] (25 samples, 0.04%)</title><rect x="3.4495%" y="101" width="0.0400%" height="15" fill="rgb(252,105,26)" fg:x="2155" fg:w="25"/><text x="3.6995%" y="111.50"></text></g><g><title>[libc.so.6] (17 samples, 0.03%)</title><rect x="3.4624%" y="85" width="0.0272%" height="15" fill="rgb(220,39,43)" fg:x="2163" fg:w="17"/><text x="3.7124%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (40 samples, 0.06%)</title><rect x="3.4319%" y="245" width="0.0640%" height="15" fill="rgb(229,68,48)" fg:x="2144" fg:w="40"/><text x="3.6819%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (39 samples, 0.06%)</title><rect x="3.4335%" y="229" width="0.0624%" height="15" fill="rgb(252,8,32)" fg:x="2145" fg:w="39"/><text x="3.6835%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (37 samples, 0.06%)</title><rect x="3.4367%" y="213" width="0.0592%" height="15" fill="rgb(223,20,43)" fg:x="2147" fg:w="37"/><text x="3.6867%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (37 samples, 0.06%)</title><rect x="3.4367%" y="197" width="0.0592%" height="15" fill="rgb(229,81,49)" fg:x="2147" fg:w="37"/><text x="3.6867%" y="207.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (50 samples, 0.08%)</title><rect x="3.4271%" y="341" width="0.0800%" height="15" fill="rgb(236,28,36)" fg:x="2141" fg:w="50"/><text x="3.6771%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (47 samples, 0.08%)</title><rect x="3.4319%" y="325" width="0.0752%" height="15" fill="rgb(249,185,26)" fg:x="2144" fg:w="47"/><text x="3.6819%" y="335.50"></text></g><g><title>alloc::string::String::push_str (47 samples, 0.08%)</title><rect x="3.4319%" y="309" width="0.0752%" height="15" fill="rgb(249,174,33)" fg:x="2144" fg:w="47"/><text x="3.6819%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (47 samples, 0.08%)</title><rect x="3.4319%" y="293" width="0.0752%" height="15" fill="rgb(233,201,37)" fg:x="2144" fg:w="47"/><text x="3.6819%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (47 samples, 0.08%)</title><rect x="3.4319%" y="277" width="0.0752%" height="15" fill="rgb(221,78,26)" fg:x="2144" fg:w="47"/><text x="3.6819%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (47 samples, 0.08%)</title><rect x="3.4319%" y="261" width="0.0752%" height="15" fill="rgb(250,127,30)" fg:x="2144" fg:w="47"/><text x="3.6819%" y="271.50"></text></g><g><title>core::slice::memchr::memchr_aligned (9 samples, 0.01%)</title><rect x="3.5168%" y="277" width="0.0144%" height="15" fill="rgb(230,49,44)" fg:x="2197" fg:w="9"/><text x="3.7668%" y="287.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (14 samples, 0.02%)</title><rect x="3.5136%" y="309" width="0.0224%" height="15" fill="rgb(229,67,23)" fg:x="2195" fg:w="14"/><text x="3.7636%" y="319.50"></text></g><g><title>core::slice::memchr::memchr (14 samples, 0.02%)</title><rect x="3.5136%" y="293" width="0.0224%" height="15" fill="rgb(249,83,47)" fg:x="2195" fg:w="14"/><text x="3.7636%" y="303.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.03%)</title><rect x="3.5072%" y="341" width="0.0304%" height="15" fill="rgb(215,43,3)" fg:x="2191" fg:w="19"/><text x="3.7572%" y="351.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (19 samples, 0.03%)</title><rect x="3.5072%" y="325" width="0.0304%" height="15" fill="rgb(238,154,13)" fg:x="2191" fg:w="19"/><text x="3.7572%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_str (81 samples, 0.13%)</title><rect x="3.4095%" y="373" width="0.1297%" height="15" fill="rgb(219,56,2)" fg:x="2130" fg:w="81"/><text x="3.6595%" y="383.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (79 samples, 0.13%)</title><rect x="3.4127%" y="357" width="0.1265%" height="15" fill="rgb(233,0,4)" fg:x="2132" fg:w="79"/><text x="3.6627%" y="367.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (496 samples, 0.79%)</title><rect x="2.7548%" y="389" width="0.7940%" height="15" fill="rgb(235,30,7)" fg:x="1721" fg:w="496"/><text x="3.0048%" y="399.50"></text></g><g><title>[[kernel.kallsyms]] (10 samples, 0.02%)</title><rect x="3.6256%" y="101" width="0.0160%" height="15" fill="rgb(250,79,13)" fg:x="2265" fg:w="10"/><text x="3.8756%" y="111.50"></text></g><g><title>[[kernel.kallsyms]] (10 samples, 0.02%)</title><rect x="3.6256%" y="85" width="0.0160%" height="15" fill="rgb(211,146,34)" fg:x="2265" fg:w="10"/><text x="3.8756%" y="95.50"></text></g><g><title>[[kernel.kallsyms]] (9 samples, 0.01%)</title><rect x="3.6272%" y="69" width="0.0144%" height="15" fill="rgb(228,22,38)" fg:x="2266" fg:w="9"/><text x="3.8772%" y="79.50"></text></g><g><title>[[kernel.kallsyms]] (9 samples, 0.01%)</title><rect x="3.6272%" y="53" width="0.0144%" height="15" fill="rgb(235,168,5)" fg:x="2266" fg:w="9"/><text x="3.8772%" y="63.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="3.6304%" y="37" width="0.0112%" height="15" fill="rgb(221,155,16)" fg:x="2268" fg:w="7"/><text x="3.8804%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (29 samples, 0.05%)</title><rect x="3.6000%" y="261" width="0.0464%" height="15" fill="rgb(215,215,53)" fg:x="2249" fg:w="29"/><text x="3.8500%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (26 samples, 0.04%)</title><rect x="3.6048%" y="245" width="0.0416%" height="15" fill="rgb(223,4,10)" fg:x="2252" fg:w="26"/><text x="3.8548%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (24 samples, 0.04%)</title><rect x="3.6080%" y="229" width="0.0384%" height="15" fill="rgb(234,103,6)" fg:x="2254" fg:w="24"/><text x="3.8580%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (24 samples, 0.04%)</title><rect x="3.6080%" y="213" width="0.0384%" height="15" fill="rgb(227,97,0)" fg:x="2254" fg:w="24"/><text x="3.8580%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (20 samples, 0.03%)</title><rect x="3.6144%" y="197" width="0.0320%" height="15" fill="rgb(234,150,53)" fg:x="2258" fg:w="20"/><text x="3.8644%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (19 samples, 0.03%)</title><rect x="3.6160%" y="181" width="0.0304%" height="15" fill="rgb(228,201,54)" fg:x="2259" fg:w="19"/><text x="3.8660%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (19 samples, 0.03%)</title><rect x="3.6160%" y="165" width="0.0304%" height="15" fill="rgb(222,22,37)" fg:x="2259" fg:w="19"/><text x="3.8660%" y="175.50"></text></g><g><title>alloc::alloc::realloc (19 samples, 0.03%)</title><rect x="3.6160%" y="149" width="0.0304%" height="15" fill="rgb(237,53,32)" fg:x="2259" fg:w="19"/><text x="3.8660%" y="159.50"></text></g><g><title>realloc (19 samples, 0.03%)</title><rect x="3.6160%" y="133" width="0.0304%" height="15" fill="rgb(233,25,53)" fg:x="2259" fg:w="19"/><text x="3.8660%" y="143.50"></text></g><g><title>[libc.so.6] (19 samples, 0.03%)</title><rect x="3.6160%" y="117" width="0.0304%" height="15" fill="rgb(210,40,34)" fg:x="2259" fg:w="19"/><text x="3.8660%" y="127.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (45 samples, 0.07%)</title><rect x="3.5824%" y="357" width="0.0720%" height="15" fill="rgb(241,220,44)" fg:x="2238" fg:w="45"/><text x="3.8324%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (34 samples, 0.05%)</title><rect x="3.6000%" y="341" width="0.0544%" height="15" fill="rgb(235,28,35)" fg:x="2249" fg:w="34"/><text x="3.8500%" y="351.50"></text></g><g><title>alloc::string::String::push_str (34 samples, 0.05%)</title><rect x="3.6000%" y="325" width="0.0544%" height="15" fill="rgb(210,56,17)" fg:x="2249" fg:w="34"/><text x="3.8500%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (34 samples, 0.05%)</title><rect x="3.6000%" y="309" width="0.0544%" height="15" fill="rgb(224,130,29)" fg:x="2249" fg:w="34"/><text x="3.8500%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (34 samples, 0.05%)</title><rect x="3.6000%" y="293" width="0.0544%" height="15" fill="rgb(235,212,8)" fg:x="2249" fg:w="34"/><text x="3.8500%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (34 samples, 0.05%)</title><rect x="3.6000%" y="277" width="0.0544%" height="15" fill="rgb(223,33,50)" fg:x="2249" fg:w="34"/><text x="3.8500%" y="287.50"></text></g><g><title>core::fmt::Formatter::write_str (82 samples, 0.13%)</title><rect x="3.5488%" y="389" width="0.1313%" height="15" fill="rgb(219,149,13)" fg:x="2217" fg:w="82"/><text x="3.7988%" y="399.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (78 samples, 0.12%)</title><rect x="3.5552%" y="373" width="0.1249%" height="15" fill="rgb(250,156,29)" fg:x="2221" fg:w="78"/><text x="3.8052%" y="383.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.03%)</title><rect x="3.6544%" y="357" width="0.0256%" height="15" fill="rgb(216,193,19)" fg:x="2283" fg:w="16"/><text x="3.9044%" y="367.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (15 samples, 0.02%)</title><rect x="3.6560%" y="341" width="0.0240%" height="15" fill="rgb(216,135,14)" fg:x="2284" fg:w="15"/><text x="3.9060%" y="351.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (8 samples, 0.01%)</title><rect x="3.6672%" y="325" width="0.0128%" height="15" fill="rgb(241,47,5)" fg:x="2291" fg:w="8"/><text x="3.9172%" y="335.50"></text></g><g><title>core::slice::memchr::memchr (7 samples, 0.01%)</title><rect x="3.6688%" y="309" width="0.0112%" height="15" fill="rgb(233,42,35)" fg:x="2292" fg:w="7"/><text x="3.9188%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_naive (7 samples, 0.01%)</title><rect x="3.6688%" y="293" width="0.0112%" height="15" fill="rgb(231,13,6)" fg:x="2292" fg:w="7"/><text x="3.9188%" y="303.50"></text></g><g><title>core::fmt::Write::write_char (9 samples, 0.01%)</title><rect x="3.6800%" y="389" width="0.0144%" height="15" fill="rgb(207,181,40)" fg:x="2299" fg:w="9"/><text x="3.9300%" y="399.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (8 samples, 0.01%)</title><rect x="3.6816%" y="373" width="0.0128%" height="15" fill="rgb(254,173,49)" fg:x="2300" fg:w="8"/><text x="3.9316%" y="383.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (601 samples, 0.96%)</title><rect x="2.7356%" y="437" width="0.9620%" height="15" fill="rgb(221,1,38)" fg:x="1709" fg:w="601"/><text x="2.9856%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (598 samples, 0.96%)</title><rect x="2.7404%" y="421" width="0.9572%" height="15" fill="rgb(206,124,46)" fg:x="1712" fg:w="598"/><text x="2.9904%" y="431.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (597 samples, 0.96%)</title><rect x="2.7420%" y="405" width="0.9556%" height="15" fill="rgb(249,21,11)" fg:x="1713" fg:w="597"/><text x="2.9920%" y="415.50"></text></g><g><title>&lt;yt_history::DataRow as core::fmt::Debug&gt;::fmt (616 samples, 0.99%)</title><rect x="2.7212%" y="469" width="0.9860%" height="15" fill="rgb(222,201,40)" fg:x="1700" fg:w="616"/><text x="2.9712%" y="479.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field5_finish (613 samples, 0.98%)</title><rect x="2.7260%" y="453" width="0.9812%" height="15" fill="rgb(235,61,29)" fg:x="1703" fg:w="613"/><text x="2.9760%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (631 samples, 1.01%)</title><rect x="2.6988%" y="533" width="1.0101%" height="15" fill="rgb(219,207,3)" fg:x="1686" fg:w="631"/><text x="2.9488%" y="543.50"></text></g><g><title>core::fmt::Write::write_fmt (629 samples, 1.01%)</title><rect x="2.7020%" y="517" width="1.0069%" height="15" fill="rgb(222,56,46)" fg:x="1688" fg:w="629"/><text x="2.9520%" y="527.50"></text></g><g><title>core::fmt::write (629 samples, 1.01%)</title><rect x="2.7020%" y="501" width="1.0069%" height="15" fill="rgb(239,76,54)" fg:x="1688" fg:w="629"/><text x="2.9520%" y="511.50"></text></g><g><title>core::fmt::run (617 samples, 0.99%)</title><rect x="2.7212%" y="485" width="0.9876%" height="15" fill="rgb(231,124,27)" fg:x="1700" fg:w="617"/><text x="2.9712%" y="495.50"></text></g><g><title>alloc::fmt::format (634 samples, 1.01%)</title><rect x="2.6972%" y="581" width="1.0149%" height="15" fill="rgb(249,195,6)" fg:x="1685" fg:w="634"/><text x="2.9472%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (634 samples, 1.01%)</title><rect x="2.6972%" y="565" width="1.0149%" height="15" fill="rgb(237,174,47)" fg:x="1685" fg:w="634"/><text x="2.9472%" y="575.50"></text></g><g><title>alloc::fmt::format::{{closure}} (634 samples, 1.01%)</title><rect x="2.6972%" y="549" width="1.0149%" height="15" fill="rgb(206,201,31)" fg:x="1685" fg:w="634"/><text x="2.9472%" y="559.50"></text></g><g><title>chrono::format::parse::parse (9 samples, 0.01%)</title><rect x="3.7185%" y="549" width="0.0144%" height="15" fill="rgb(231,57,52)" fg:x="2323" fg:w="9"/><text x="3.9685%" y="559.50"></text></g><g><title>&lt;chrono::format::strftime::StrftimeItems as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 0.09%)</title><rect x="3.7985%" y="533" width="0.0896%" height="15" fill="rgb(248,177,22)" fg:x="2373" fg:w="56"/><text x="4.0485%" y="543.50"></text></g><g><title>chrono::format::scan::short_month0 (8 samples, 0.01%)</title><rect x="3.9057%" y="533" width="0.0128%" height="15" fill="rgb(215,211,37)" fg:x="2440" fg:w="8"/><text x="4.1557%" y="543.50"></text></g><g><title>chrono::format::parse::parse (140 samples, 0.22%)</title><rect x="3.7185%" y="565" width="0.2241%" height="15" fill="rgb(241,128,51)" fg:x="2323" fg:w="140"/><text x="3.9685%" y="575.50"></text></g><g><title>chrono::format::parse::parse_internal (131 samples, 0.21%)</title><rect x="3.7329%" y="549" width="0.2097%" height="15" fill="rgb(227,165,31)" fg:x="2332" fg:w="131"/><text x="3.9829%" y="559.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_left (11 samples, 0.02%)</title><rect x="3.9250%" y="533" width="0.0176%" height="15" fill="rgb(228,167,24)" fg:x="2452" fg:w="11"/><text x="4.1750%" y="543.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start (11 samples, 0.02%)</title><rect x="3.9250%" y="517" width="0.0176%" height="15" fill="rgb(228,143,12)" fg:x="2452" fg:w="11"/><text x="4.1750%" y="527.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start_matches (7 samples, 0.01%)</title><rect x="3.9314%" y="501" width="0.0112%" height="15" fill="rgb(249,149,8)" fg:x="2456" fg:w="7"/><text x="4.1814%" y="511.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date::{{closure}} (7 samples, 0.01%)</title><rect x="3.9666%" y="517" width="0.0112%" height="15" fill="rgb(243,35,44)" fg:x="2478" fg:w="7"/><text x="4.2166%" y="527.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date (20 samples, 0.03%)</title><rect x="3.9602%" y="533" width="0.0320%" height="15" fill="rgb(246,89,9)" fg:x="2474" fg:w="20"/><text x="4.2102%" y="543.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (9 samples, 0.01%)</title><rect x="3.9778%" y="517" width="0.0144%" height="15" fill="rgb(233,213,13)" fg:x="2485" fg:w="9"/><text x="4.2278%" y="527.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_datetime_with_offset (26 samples, 0.04%)</title><rect x="3.9522%" y="549" width="0.0416%" height="15" fill="rgb(233,141,41)" fg:x="2469" fg:w="26"/><text x="4.2022%" y="559.50"></text></g><g><title>chrono::naive::date::NaiveDate::checked_add_signed (7 samples, 0.01%)</title><rect x="4.0066%" y="437" width="0.0112%" height="15" fill="rgb(239,167,4)" fg:x="2503" fg:w="7"/><text x="4.2566%" y="447.50"></text></g><g><title>chrono::format::parsed::Parsed::to_datetime_with_timezone (52 samples, 0.08%)</title><rect x="3.9522%" y="565" width="0.0832%" height="15" fill="rgb(209,217,16)" fg:x="2469" fg:w="52"/><text x="4.2022%" y="575.50"></text></g><g><title>chrono::offset::TimeZone::from_local_datetime (26 samples, 0.04%)</title><rect x="3.9938%" y="549" width="0.0416%" height="15" fill="rgb(219,88,35)" fg:x="2495" fg:w="26"/><text x="4.2438%" y="559.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::map (24 samples, 0.04%)</title><rect x="3.9970%" y="533" width="0.0384%" height="15" fill="rgb(220,193,23)" fg:x="2497" fg:w="24"/><text x="4.2470%" y="543.50"></text></g><g><title>chrono::offset::TimeZone::from_local_datetime::{{closure}} (23 samples, 0.04%)</title><rect x="3.9986%" y="517" width="0.0368%" height="15" fill="rgb(230,90,52)" fg:x="2498" fg:w="23"/><text x="4.2486%" y="527.50"></text></g><g><title>chrono::offset::fixed::&lt;impl core::ops::arith::Sub&lt;chrono::offset::fixed::FixedOffset&gt; for chrono::naive::datetime::NaiveDateTime&gt;::sub (20 samples, 0.03%)</title><rect x="4.0034%" y="501" width="0.0320%" height="15" fill="rgb(252,106,19)" fg:x="2501" fg:w="20"/><text x="4.2534%" y="511.50"></text></g><g><title>chrono::offset::fixed::add_with_leapsecond (20 samples, 0.03%)</title><rect x="4.0034%" y="485" width="0.0320%" height="15" fill="rgb(206,74,20)" fg:x="2501" fg:w="20"/><text x="4.2534%" y="495.50"></text></g><g><title>&lt;chrono::naive::datetime::NaiveDateTime as core::ops::arith::Add&lt;time::duration::Duration&gt;&gt;::add (20 samples, 0.03%)</title><rect x="4.0034%" y="469" width="0.0320%" height="15" fill="rgb(230,138,44)" fg:x="2501" fg:w="20"/><text x="4.2534%" y="479.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_signed (20 samples, 0.03%)</title><rect x="4.0034%" y="453" width="0.0320%" height="15" fill="rgb(235,182,43)" fg:x="2501" fg:w="20"/><text x="4.2534%" y="463.50"></text></g><g><title>chrono::naive::time::NaiveTime::overflowing_add_signed (11 samples, 0.02%)</title><rect x="4.0178%" y="437" width="0.0176%" height="15" fill="rgb(242,16,51)" fg:x="2510" fg:w="11"/><text x="4.2678%" y="447.50"></text></g><g><title>chrono::offset::TimeZone::datetime_from_str (207 samples, 0.33%)</title><rect x="3.7121%" y="581" width="0.3313%" height="15" fill="rgb(248,9,4)" fg:x="2319" fg:w="207"/><text x="3.9621%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (24 samples, 0.04%)</title><rect x="4.0434%" y="581" width="0.0384%" height="15" fill="rgb(210,31,22)" fg:x="2526" fg:w="24"/><text x="4.2934%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (24 samples, 0.04%)</title><rect x="4.0434%" y="565" width="0.0384%" height="15" fill="rgb(239,54,39)" fg:x="2526" fg:w="24"/><text x="4.2934%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (24 samples, 0.04%)</title><rect x="4.0434%" y="549" width="0.0384%" height="15" fill="rgb(230,99,41)" fg:x="2526" fg:w="24"/><text x="4.2934%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.04%)</title><rect x="4.0434%" y="533" width="0.0384%" height="15" fill="rgb(253,106,12)" fg:x="2526" fg:w="24"/><text x="4.2934%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 0.04%)</title><rect x="4.0434%" y="517" width="0.0384%" height="15" fill="rgb(213,46,41)" fg:x="2526" fg:w="24"/><text x="4.2934%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.04%)</title><rect x="4.0434%" y="501" width="0.0384%" height="15" fill="rgb(215,133,35)" fg:x="2526" fg:w="24"/><text x="4.2934%" y="511.50"></text></g><g><title>cfree (24 samples, 0.04%)</title><rect x="4.0434%" y="485" width="0.0384%" height="15" fill="rgb(213,28,5)" fg:x="2526" fg:w="24"/><text x="4.2934%" y="495.50"></text></g><g><title>[libc.so.6] (22 samples, 0.04%)</title><rect x="4.0466%" y="469" width="0.0352%" height="15" fill="rgb(215,77,49)" fg:x="2528" fg:w="22"/><text x="4.2966%" y="479.50"></text></g><g><title>[libc.so.6] (13 samples, 0.02%)</title><rect x="4.0610%" y="453" width="0.0208%" height="15" fill="rgb(248,100,22)" fg:x="2537" fg:w="13"/><text x="4.3110%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.02%)</title><rect x="4.0818%" y="501" width="0.0192%" height="15" fill="rgb(208,67,9)" fg:x="2550" fg:w="12"/><text x="4.3318%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.02%)</title><rect x="4.0818%" y="485" width="0.0192%" height="15" fill="rgb(219,133,21)" fg:x="2550" fg:w="12"/><text x="4.3318%" y="495.50"></text></g><g><title>cfree (12 samples, 0.02%)</title><rect x="4.0818%" y="469" width="0.0192%" height="15" fill="rgb(246,46,29)" fg:x="2550" fg:w="12"/><text x="4.3318%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::DataRow&gt; (13 samples, 0.02%)</title><rect x="4.0818%" y="581" width="0.0208%" height="15" fill="rgb(246,185,52)" fg:x="2550" fg:w="13"/><text x="4.3318%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (13 samples, 0.02%)</title><rect x="4.0818%" y="565" width="0.0208%" height="15" fill="rgb(252,136,11)" fg:x="2550" fg:w="13"/><text x="4.3318%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (13 samples, 0.02%)</title><rect x="4.0818%" y="549" width="0.0208%" height="15" fill="rgb(219,138,53)" fg:x="2550" fg:w="13"/><text x="4.3318%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (13 samples, 0.02%)</title><rect x="4.0818%" y="533" width="0.0208%" height="15" fill="rgb(211,51,23)" fg:x="2550" fg:w="13"/><text x="4.3318%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="4.0818%" y="517" width="0.0208%" height="15" fill="rgb(247,221,28)" fg:x="2550" fg:w="13"/><text x="4.3318%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Video&gt; (7 samples, 0.01%)</title><rect x="4.1026%" y="581" width="0.0112%" height="15" fill="rgb(251,222,45)" fg:x="2563" fg:w="7"/><text x="4.3526%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Watched&gt; (10 samples, 0.02%)</title><rect x="4.1138%" y="581" width="0.0160%" height="15" fill="rgb(217,162,53)" fg:x="2570" fg:w="10"/><text x="4.3638%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Video&gt; (10 samples, 0.02%)</title><rect x="4.1138%" y="565" width="0.0160%" height="15" fill="rgb(229,93,14)" fg:x="2570" fg:w="10"/><text x="4.3638%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Channel&gt; (8 samples, 0.01%)</title><rect x="4.1170%" y="549" width="0.0128%" height="15" fill="rgb(209,67,49)" fg:x="2572" fg:w="8"/><text x="4.3670%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (8 samples, 0.01%)</title><rect x="4.1170%" y="533" width="0.0128%" height="15" fill="rgb(213,87,29)" fg:x="2572" fg:w="8"/><text x="4.3670%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (8 samples, 0.01%)</title><rect x="4.1170%" y="517" width="0.0128%" height="15" fill="rgb(205,151,52)" fg:x="2572" fg:w="8"/><text x="4.3670%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (8 samples, 0.01%)</title><rect x="4.1170%" y="501" width="0.0128%" height="15" fill="rgb(253,215,39)" fg:x="2572" fg:w="8"/><text x="4.3670%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="4.1170%" y="485" width="0.0128%" height="15" fill="rgb(221,220,41)" fg:x="2572" fg:w="8"/><text x="4.3670%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.01%)</title><rect x="4.1170%" y="469" width="0.0128%" height="15" fill="rgb(218,133,21)" fg:x="2572" fg:w="8"/><text x="4.3670%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.01%)</title><rect x="4.1170%" y="453" width="0.0128%" height="15" fill="rgb(221,193,43)" fg:x="2572" fg:w="8"/><text x="4.3670%" y="463.50"></text></g><g><title>cfree (8 samples, 0.01%)</title><rect x="4.1170%" y="437" width="0.0128%" height="15" fill="rgb(240,128,52)" fg:x="2572" fg:w="8"/><text x="4.3670%" y="447.50"></text></g><g><title>[libc.so.6] (7 samples, 0.01%)</title><rect x="4.1186%" y="421" width="0.0112%" height="15" fill="rgb(253,114,12)" fg:x="2573" fg:w="7"/><text x="4.3686%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (15 samples, 0.02%)</title><rect x="4.1443%" y="357" width="0.0240%" height="15" fill="rgb(215,223,47)" fg:x="2589" fg:w="15"/><text x="4.3943%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (15 samples, 0.02%)</title><rect x="4.1443%" y="341" width="0.0240%" height="15" fill="rgb(248,225,23)" fg:x="2589" fg:w="15"/><text x="4.3943%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (15 samples, 0.02%)</title><rect x="4.1443%" y="325" width="0.0240%" height="15" fill="rgb(250,108,0)" fg:x="2589" fg:w="15"/><text x="4.3943%" y="335.50"></text></g><g><title>alloc::alloc::realloc (15 samples, 0.02%)</title><rect x="4.1443%" y="309" width="0.0240%" height="15" fill="rgb(228,208,7)" fg:x="2589" fg:w="15"/><text x="4.3943%" y="319.50"></text></g><g><title>realloc (14 samples, 0.02%)</title><rect x="4.1459%" y="293" width="0.0224%" height="15" fill="rgb(244,45,10)" fg:x="2590" fg:w="14"/><text x="4.3959%" y="303.50"></text></g><g><title>[libc.so.6] (11 samples, 0.02%)</title><rect x="4.1507%" y="277" width="0.0176%" height="15" fill="rgb(207,125,25)" fg:x="2593" fg:w="11"/><text x="4.4007%" y="287.50"></text></g><g><title>[libc.so.6] (8 samples, 0.01%)</title><rect x="4.1555%" y="261" width="0.0128%" height="15" fill="rgb(210,195,18)" fg:x="2596" fg:w="8"/><text x="4.4055%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (16 samples, 0.03%)</title><rect x="4.1443%" y="389" width="0.0256%" height="15" fill="rgb(249,80,12)" fg:x="2589" fg:w="16"/><text x="4.3943%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (16 samples, 0.03%)</title><rect x="4.1443%" y="373" width="0.0256%" height="15" fill="rgb(221,65,9)" fg:x="2589" fg:w="16"/><text x="4.3943%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (25 samples, 0.04%)</title><rect x="4.1315%" y="549" width="0.0400%" height="15" fill="rgb(235,49,36)" fg:x="2581" fg:w="25"/><text x="4.3815%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (24 samples, 0.04%)</title><rect x="4.1331%" y="533" width="0.0384%" height="15" fill="rgb(225,32,20)" fg:x="2582" fg:w="24"/><text x="4.3831%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (24 samples, 0.04%)</title><rect x="4.1331%" y="517" width="0.0384%" height="15" fill="rgb(215,141,46)" fg:x="2582" fg:w="24"/><text x="4.3831%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (24 samples, 0.04%)</title><rect x="4.1331%" y="501" width="0.0384%" height="15" fill="rgb(250,160,47)" fg:x="2582" fg:w="24"/><text x="4.3831%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (24 samples, 0.04%)</title><rect x="4.1331%" y="485" width="0.0384%" height="15" fill="rgb(216,222,40)" fg:x="2582" fg:w="24"/><text x="4.3831%" y="495.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::{{closure}} (22 samples, 0.04%)</title><rect x="4.1363%" y="469" width="0.0352%" height="15" fill="rgb(234,217,39)" fg:x="2584" fg:w="22"/><text x="4.3863%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (22 samples, 0.04%)</title><rect x="4.1363%" y="453" width="0.0352%" height="15" fill="rgb(207,178,40)" fg:x="2584" fg:w="22"/><text x="4.3863%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::{{closure}} (22 samples, 0.04%)</title><rect x="4.1363%" y="437" width="0.0352%" height="15" fill="rgb(221,136,13)" fg:x="2584" fg:w="22"/><text x="4.3863%" y="447.50"></text></g><g><title>alloc::string::String::push (22 samples, 0.04%)</title><rect x="4.1363%" y="421" width="0.0352%" height="15" fill="rgb(249,199,10)" fg:x="2584" fg:w="22"/><text x="4.3863%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (22 samples, 0.04%)</title><rect x="4.1363%" y="405" width="0.0352%" height="15" fill="rgb(249,222,13)" fg:x="2584" fg:w="22"/><text x="4.3863%" y="415.50"></text></g><g><title>yt_history::filter_ascii (26 samples, 0.04%)</title><rect x="4.1315%" y="581" width="0.0416%" height="15" fill="rgb(244,185,38)" fg:x="2581" fg:w="26"/><text x="4.3815%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (26 samples, 0.04%)</title><rect x="4.1315%" y="565" width="0.0416%" height="15" fill="rgb(236,202,9)" fg:x="2581" fg:w="26"/><text x="4.3815%" y="575.50"></text></g><g><title>&lt;yt_history::model::Channel as core::clone::Clone&gt;::clone (7 samples, 0.01%)</title><rect x="4.1859%" y="565" width="0.0112%" height="15" fill="rgb(250,229,37)" fg:x="2615" fg:w="7"/><text x="4.4359%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.02%)</title><rect x="4.2035%" y="533" width="0.0176%" height="15" fill="rgb(206,174,23)" fg:x="2626" fg:w="11"/><text x="4.4535%" y="543.50"></text></g><g><title>__rdl_alloc (31 samples, 0.05%)</title><rect x="4.7861%" y="325" width="0.0496%" height="15" fill="rgb(211,33,43)" fg:x="2990" fg:w="31"/><text x="5.0361%" y="335.50"></text></g><g><title>__rust_alloc (30 samples, 0.05%)</title><rect x="4.8358%" y="325" width="0.0480%" height="15" fill="rgb(245,58,50)" fg:x="3021" fg:w="30"/><text x="5.0858%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (285 samples, 0.46%)</title><rect x="4.7221%" y="421" width="0.4562%" height="15" fill="rgb(244,68,36)" fg:x="2950" fg:w="285"/><text x="4.9721%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (285 samples, 0.46%)</title><rect x="4.7221%" y="405" width="0.4562%" height="15" fill="rgb(232,229,15)" fg:x="2950" fg:w="285"/><text x="4.9721%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (284 samples, 0.45%)</title><rect x="4.7237%" y="389" width="0.4546%" height="15" fill="rgb(254,30,23)" fg:x="2951" fg:w="284"/><text x="4.9737%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (270 samples, 0.43%)</title><rect x="4.7461%" y="373" width="0.4322%" height="15" fill="rgb(235,160,14)" fg:x="2965" fg:w="270"/><text x="4.9961%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (270 samples, 0.43%)</title><rect x="4.7461%" y="357" width="0.4322%" height="15" fill="rgb(212,155,44)" fg:x="2965" fg:w="270"/><text x="4.9961%" y="367.50"></text></g><g><title>alloc::alloc::alloc (270 samples, 0.43%)</title><rect x="4.7461%" y="341" width="0.4322%" height="15" fill="rgb(226,2,50)" fg:x="2965" fg:w="270"/><text x="4.9961%" y="351.50"></text></g><g><title>malloc (184 samples, 0.29%)</title><rect x="4.8838%" y="325" width="0.2945%" height="15" fill="rgb(234,177,6)" fg:x="3051" fg:w="184"/><text x="5.1338%" y="335.50"></text></g><g><title>&lt;yt_history::model::Channel as core::clone::Clone&gt;::clone (1,248 samples, 2.00%)</title><rect x="4.2659%" y="517" width="1.9977%" height="15" fill="rgb(217,24,9)" fg:x="2665" fg:w="1248"/><text x="4.5159%" y="527.50">&lt;..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,013 samples, 1.62%)</title><rect x="4.6421%" y="501" width="1.6215%" height="15" fill="rgb(220,13,46)" fg:x="2900" fg:w="1013"/><text x="4.8921%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (963 samples, 1.54%)</title><rect x="4.7221%" y="485" width="1.5415%" height="15" fill="rgb(239,221,27)" fg:x="2950" fg:w="963"/><text x="4.9721%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (963 samples, 1.54%)</title><rect x="4.7221%" y="469" width="1.5415%" height="15" fill="rgb(222,198,25)" fg:x="2950" fg:w="963"/><text x="4.9721%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (963 samples, 1.54%)</title><rect x="4.7221%" y="453" width="1.5415%" height="15" fill="rgb(211,99,13)" fg:x="2950" fg:w="963"/><text x="4.9721%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (963 samples, 1.54%)</title><rect x="4.7221%" y="437" width="1.5415%" height="15" fill="rgb(232,111,31)" fg:x="2950" fg:w="963"/><text x="4.9721%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (678 samples, 1.09%)</title><rect x="5.1783%" y="421" width="1.0853%" height="15" fill="rgb(245,82,37)" fg:x="3235" fg:w="678"/><text x="5.4283%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (678 samples, 1.09%)</title><rect x="5.1783%" y="405" width="1.0853%" height="15" fill="rgb(227,149,46)" fg:x="3235" fg:w="678"/><text x="5.4283%" y="415.50"></text></g><g><title>[libc.so.6] (677 samples, 1.08%)</title><rect x="5.1799%" y="389" width="1.0837%" height="15" fill="rgb(218,36,50)" fg:x="3236" fg:w="677"/><text x="5.4299%" y="399.50"></text></g><g><title>core::cmp::PartialEq::ne (190 samples, 0.30%)</title><rect x="6.3036%" y="501" width="0.3041%" height="15" fill="rgb(226,80,48)" fg:x="3938" fg:w="190"/><text x="6.5536%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (183 samples, 0.29%)</title><rect x="6.3148%" y="485" width="0.2929%" height="15" fill="rgb(238,224,15)" fg:x="3945" fg:w="183"/><text x="6.5648%" y="495.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (183 samples, 0.29%)</title><rect x="6.3148%" y="469" width="0.2929%" height="15" fill="rgb(241,136,10)" fg:x="3945" fg:w="183"/><text x="6.5648%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (183 samples, 0.29%)</title><rect x="6.3148%" y="453" width="0.2929%" height="15" fill="rgb(208,32,45)" fg:x="3945" fg:w="183"/><text x="6.5648%" y="463.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (183 samples, 0.29%)</title><rect x="6.3148%" y="437" width="0.2929%" height="15" fill="rgb(207,135,9)" fg:x="3945" fg:w="183"/><text x="6.5648%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (183 samples, 0.29%)</title><rect x="6.3148%" y="421" width="0.2929%" height="15" fill="rgb(206,86,44)" fg:x="3945" fg:w="183"/><text x="6.5648%" y="431.50"></text></g><g><title>[libc.so.6] (182 samples, 0.29%)</title><rect x="6.3164%" y="405" width="0.2913%" height="15" fill="rgb(245,177,15)" fg:x="3946" fg:w="182"/><text x="6.5664%" y="415.50"></text></g><g><title>__rdl_dealloc (31 samples, 0.05%)</title><rect x="6.6078%" y="389" width="0.0496%" height="15" fill="rgb(206,64,50)" fg:x="4128" fg:w="31"/><text x="6.8578%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (31 samples, 0.05%)</title><rect x="6.6078%" y="373" width="0.0496%" height="15" fill="rgb(234,36,40)" fg:x="4128" fg:w="31"/><text x="6.8578%" y="383.50"></text></g><g><title>__rust_dealloc (28 samples, 0.04%)</title><rect x="6.6574%" y="389" width="0.0448%" height="15" fill="rgb(213,64,8)" fg:x="4159" fg:w="28"/><text x="6.9074%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (299 samples, 0.48%)</title><rect x="6.6078%" y="421" width="0.4786%" height="15" fill="rgb(210,75,36)" fg:x="4128" fg:w="299"/><text x="6.8578%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (299 samples, 0.48%)</title><rect x="6.6078%" y="405" width="0.4786%" height="15" fill="rgb(229,88,21)" fg:x="4128" fg:w="299"/><text x="6.8578%" y="415.50"></text></g><g><title>cfree (240 samples, 0.38%)</title><rect x="6.7022%" y="389" width="0.3842%" height="15" fill="rgb(252,204,47)" fg:x="4187" fg:w="240"/><text x="6.9522%" y="399.50"></text></g><g><title>[libc.so.6] (170 samples, 0.27%)</title><rect x="6.8143%" y="373" width="0.2721%" height="15" fill="rgb(208,77,27)" fg:x="4257" fg:w="170"/><text x="7.0643%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Channel&gt; (311 samples, 0.50%)</title><rect x="6.6078%" y="501" width="0.4978%" height="15" fill="rgb(221,76,26)" fg:x="4128" fg:w="311"/><text x="6.8578%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (311 samples, 0.50%)</title><rect x="6.6078%" y="485" width="0.4978%" height="15" fill="rgb(225,139,18)" fg:x="4128" fg:w="311"/><text x="6.8578%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (311 samples, 0.50%)</title><rect x="6.6078%" y="469" width="0.4978%" height="15" fill="rgb(230,137,11)" fg:x="4128" fg:w="311"/><text x="6.8578%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (311 samples, 0.50%)</title><rect x="6.6078%" y="453" width="0.4978%" height="15" fill="rgb(212,28,1)" fg:x="4128" fg:w="311"/><text x="6.8578%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (311 samples, 0.50%)</title><rect x="6.6078%" y="437" width="0.4978%" height="15" fill="rgb(248,164,17)" fg:x="4128" fg:w="311"/><text x="6.8578%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (12 samples, 0.02%)</title><rect x="7.0864%" y="421" width="0.0192%" height="15" fill="rgb(222,171,42)" fg:x="4427" fg:w="12"/><text x="7.3364%" y="431.50"></text></g><g><title>yt_history::model::Models::find_channel (1,817 samples, 2.91%)</title><rect x="4.2035%" y="565" width="2.9085%" height="15" fill="rgb(243,84,45)" fg:x="2626" fg:w="1817"/><text x="4.4535%" y="575.50">yt..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (1,817 samples, 2.91%)</title><rect x="4.2035%" y="549" width="2.9085%" height="15" fill="rgb(252,49,23)" fg:x="2626" fg:w="1817"/><text x="4.4535%" y="559.50">&lt;c..</text></g><g><title>yt_history::model::Models::find_channel::{{closure}} (1,806 samples, 2.89%)</title><rect x="4.2211%" y="533" width="2.8909%" height="15" fill="rgb(215,19,7)" fg:x="2637" fg:w="1806"/><text x="4.4711%" y="543.50">yt..</text></g><g><title>yt_history::model::WhereChannel::matches (530 samples, 0.85%)</title><rect x="6.2636%" y="517" width="0.8484%" height="15" fill="rgb(238,81,41)" fg:x="3913" fg:w="530"/><text x="6.5136%" y="527.50"></text></g><g><title>yt_history::model::Models::find_or_create_channel (1,834 samples, 2.94%)</title><rect x="4.1795%" y="581" width="2.9357%" height="15" fill="rgb(210,199,37)" fg:x="2611" fg:w="1834"/><text x="4.4295%" y="591.50">yt..</text></g><g><title>&lt;yt_history::model::Video as core::clone::Clone&gt;::clone (7 samples, 0.01%)</title><rect x="7.1328%" y="565" width="0.0112%" height="15" fill="rgb(244,192,49)" fg:x="4456" fg:w="7"/><text x="7.3828%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (7 samples, 0.01%)</title><rect x="7.1488%" y="565" width="0.0112%" height="15" fill="rgb(226,211,11)" fg:x="4466" fg:w="7"/><text x="7.3988%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (7 samples, 0.01%)</title><rect x="7.1488%" y="549" width="0.0112%" height="15" fill="rgb(236,162,54)" fg:x="4466" fg:w="7"/><text x="7.3988%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (7 samples, 0.01%)</title><rect x="7.1488%" y="533" width="0.0112%" height="15" fill="rgb(220,229,9)" fg:x="4466" fg:w="7"/><text x="7.3988%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="7.1488%" y="517" width="0.0112%" height="15" fill="rgb(250,87,22)" fg:x="4466" fg:w="7"/><text x="7.3988%" y="527.50"></text></g><g><title>__rdl_alloc (14 samples, 0.02%)</title><rect x="7.4433%" y="309" width="0.0224%" height="15" fill="rgb(239,43,17)" fg:x="4650" fg:w="14"/><text x="7.6933%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (126 samples, 0.20%)</title><rect x="7.4113%" y="405" width="0.2017%" height="15" fill="rgb(231,177,25)" fg:x="4630" fg:w="126"/><text x="7.6613%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (126 samples, 0.20%)</title><rect x="7.4113%" y="389" width="0.2017%" height="15" fill="rgb(219,179,1)" fg:x="4630" fg:w="126"/><text x="7.6613%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (126 samples, 0.20%)</title><rect x="7.4113%" y="373" width="0.2017%" height="15" fill="rgb(238,219,53)" fg:x="4630" fg:w="126"/><text x="7.6613%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (120 samples, 0.19%)</title><rect x="7.4209%" y="357" width="0.1921%" height="15" fill="rgb(232,167,36)" fg:x="4636" fg:w="120"/><text x="7.6709%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (120 samples, 0.19%)</title><rect x="7.4209%" y="341" width="0.1921%" height="15" fill="rgb(244,19,51)" fg:x="4636" fg:w="120"/><text x="7.6709%" y="351.50"></text></g><g><title>alloc::alloc::alloc (120 samples, 0.19%)</title><rect x="7.4209%" y="325" width="0.1921%" height="15" fill="rgb(224,6,22)" fg:x="4636" fg:w="120"/><text x="7.6709%" y="335.50"></text></g><g><title>malloc (87 samples, 0.14%)</title><rect x="7.4737%" y="309" width="0.1393%" height="15" fill="rgb(224,145,5)" fg:x="4669" fg:w="87"/><text x="7.7237%" y="319.50"></text></g><g><title>&lt;yt_history::model::Channel as core::clone::Clone&gt;::clone (525 samples, 0.84%)</title><rect x="7.1888%" y="501" width="0.8404%" height="15" fill="rgb(234,130,49)" fg:x="4491" fg:w="525"/><text x="7.4388%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (414 samples, 0.66%)</title><rect x="7.3665%" y="485" width="0.6627%" height="15" fill="rgb(254,6,2)" fg:x="4602" fg:w="414"/><text x="7.6165%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (386 samples, 0.62%)</title><rect x="7.4113%" y="469" width="0.6179%" height="15" fill="rgb(208,96,46)" fg:x="4630" fg:w="386"/><text x="7.6613%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (386 samples, 0.62%)</title><rect x="7.4113%" y="453" width="0.6179%" height="15" fill="rgb(239,3,39)" fg:x="4630" fg:w="386"/><text x="7.6613%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (386 samples, 0.62%)</title><rect x="7.4113%" y="437" width="0.6179%" height="15" fill="rgb(233,210,1)" fg:x="4630" fg:w="386"/><text x="7.6613%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (386 samples, 0.62%)</title><rect x="7.4113%" y="421" width="0.6179%" height="15" fill="rgb(244,137,37)" fg:x="4630" fg:w="386"/><text x="7.6613%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (260 samples, 0.42%)</title><rect x="7.6130%" y="405" width="0.4162%" height="15" fill="rgb(240,136,2)" fg:x="4756" fg:w="260"/><text x="7.8630%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (260 samples, 0.42%)</title><rect x="7.6130%" y="389" width="0.4162%" height="15" fill="rgb(239,18,37)" fg:x="4756" fg:w="260"/><text x="7.8630%" y="399.50"></text></g><g><title>[libc.so.6] (260 samples, 0.42%)</title><rect x="7.6130%" y="373" width="0.4162%" height="15" fill="rgb(218,185,22)" fg:x="4756" fg:w="260"/><text x="7.8630%" y="383.50"></text></g><g><title>core::cmp::PartialEq::ne (72 samples, 0.12%)</title><rect x="8.0420%" y="485" width="0.1153%" height="15" fill="rgb(225,218,4)" fg:x="5024" fg:w="72"/><text x="8.2920%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (68 samples, 0.11%)</title><rect x="8.0484%" y="469" width="0.1088%" height="15" fill="rgb(230,182,32)" fg:x="5028" fg:w="68"/><text x="8.2984%" y="479.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (68 samples, 0.11%)</title><rect x="8.0484%" y="453" width="0.1088%" height="15" fill="rgb(242,56,43)" fg:x="5028" fg:w="68"/><text x="8.2984%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (68 samples, 0.11%)</title><rect x="8.0484%" y="437" width="0.1088%" height="15" fill="rgb(233,99,24)" fg:x="5028" fg:w="68"/><text x="8.2984%" y="447.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (68 samples, 0.11%)</title><rect x="8.0484%" y="421" width="0.1088%" height="15" fill="rgb(234,209,42)" fg:x="5028" fg:w="68"/><text x="8.2984%" y="431.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (68 samples, 0.11%)</title><rect x="8.0484%" y="405" width="0.1088%" height="15" fill="rgb(227,7,12)" fg:x="5028" fg:w="68"/><text x="8.2984%" y="415.50"></text></g><g><title>[libc.so.6] (68 samples, 0.11%)</title><rect x="8.0484%" y="389" width="0.1088%" height="15" fill="rgb(245,203,43)" fg:x="5028" fg:w="68"/><text x="8.2984%" y="399.50"></text></g><g><title>__rdl_dealloc (12 samples, 0.02%)</title><rect x="8.1621%" y="373" width="0.0192%" height="15" fill="rgb(238,205,33)" fg:x="5099" fg:w="12"/><text x="8.4121%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (12 samples, 0.02%)</title><rect x="8.1621%" y="357" width="0.0192%" height="15" fill="rgb(231,56,7)" fg:x="5099" fg:w="12"/><text x="8.4121%" y="367.50"></text></g><g><title>__rust_dealloc (11 samples, 0.02%)</title><rect x="8.1813%" y="373" width="0.0176%" height="15" fill="rgb(244,186,29)" fg:x="5111" fg:w="11"/><text x="8.4313%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (117 samples, 0.19%)</title><rect x="8.1573%" y="405" width="0.1873%" height="15" fill="rgb(234,111,31)" fg:x="5096" fg:w="117"/><text x="8.4073%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (117 samples, 0.19%)</title><rect x="8.1573%" y="389" width="0.1873%" height="15" fill="rgb(241,149,10)" fg:x="5096" fg:w="117"/><text x="8.4073%" y="399.50"></text></g><g><title>cfree (91 samples, 0.15%)</title><rect x="8.1989%" y="373" width="0.1457%" height="15" fill="rgb(249,206,44)" fg:x="5122" fg:w="91"/><text x="8.4489%" y="383.50"></text></g><g><title>[libc.so.6] (60 samples, 0.10%)</title><rect x="8.2485%" y="357" width="0.0960%" height="15" fill="rgb(251,153,30)" fg:x="5153" fg:w="60"/><text x="8.4985%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Channel&gt; (120 samples, 0.19%)</title><rect x="8.1573%" y="485" width="0.1921%" height="15" fill="rgb(239,152,38)" fg:x="5096" fg:w="120"/><text x="8.4073%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (120 samples, 0.19%)</title><rect x="8.1573%" y="469" width="0.1921%" height="15" fill="rgb(249,139,47)" fg:x="5096" fg:w="120"/><text x="8.4073%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (120 samples, 0.19%)</title><rect x="8.1573%" y="453" width="0.1921%" height="15" fill="rgb(244,64,35)" fg:x="5096" fg:w="120"/><text x="8.4073%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (120 samples, 0.19%)</title><rect x="8.1573%" y="437" width="0.1921%" height="15" fill="rgb(216,46,15)" fg:x="5096" fg:w="120"/><text x="8.4073%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (120 samples, 0.19%)</title><rect x="8.1573%" y="421" width="0.1921%" height="15" fill="rgb(250,74,19)" fg:x="5096" fg:w="120"/><text x="8.4073%" y="431.50"></text></g><g><title>yt_history::model::Models::find_or_create_channel (741 samples, 1.19%)</title><rect x="7.1648%" y="565" width="1.1861%" height="15" fill="rgb(249,42,33)" fg:x="4476" fg:w="741"/><text x="7.4148%" y="575.50"></text></g><g><title>yt_history::model::Models::find_channel (738 samples, 1.18%)</title><rect x="7.1696%" y="549" width="1.1813%" height="15" fill="rgb(242,149,17)" fg:x="4479" fg:w="738"/><text x="7.4196%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (738 samples, 1.18%)</title><rect x="7.1696%" y="533" width="1.1813%" height="15" fill="rgb(244,29,21)" fg:x="4479" fg:w="738"/><text x="7.4196%" y="543.50"></text></g><g><title>yt_history::model::Models::find_channel::{{closure}} (734 samples, 1.17%)</title><rect x="7.1760%" y="517" width="1.1749%" height="15" fill="rgb(220,130,37)" fg:x="4483" fg:w="734"/><text x="7.4260%" y="527.50"></text></g><g><title>yt_history::model::WhereChannel::matches (201 samples, 0.32%)</title><rect x="8.0292%" y="501" width="0.3217%" height="15" fill="rgb(211,67,2)" fg:x="5016" fg:w="201"/><text x="8.2792%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.02%)</title><rect x="8.4118%" y="533" width="0.0176%" height="15" fill="rgb(235,68,52)" fg:x="5255" fg:w="11"/><text x="8.6618%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (14 samples, 0.02%)</title><rect x="13.0154%" y="389" width="0.0224%" height="15" fill="rgb(246,142,3)" fg:x="8131" fg:w="14"/><text x="13.2654%" y="399.50"></text></g><g><title>__rdl_alloc (374 samples, 0.60%)</title><rect x="13.7133%" y="325" width="0.5987%" height="15" fill="rgb(241,25,7)" fg:x="8567" fg:w="374"/><text x="13.9633%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (165 samples, 0.26%)</title><rect x="14.0479%" y="309" width="0.2641%" height="15" fill="rgb(242,119,39)" fg:x="8776" fg:w="165"/><text x="14.2979%" y="319.50"></text></g><g><title>__rust_alloc (257 samples, 0.41%)</title><rect x="14.3120%" y="325" width="0.4114%" height="15" fill="rgb(241,98,45)" fg:x="8941" fg:w="257"/><text x="14.5620%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,403 samples, 5.45%)</title><rect x="13.0154%" y="421" width="5.4472%" height="15" fill="rgb(254,28,30)" fg:x="8131" fg:w="3403"/><text x="13.2654%" y="431.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,403 samples, 5.45%)</title><rect x="13.0154%" y="405" width="5.4472%" height="15" fill="rgb(241,142,54)" fg:x="8131" fg:w="3403"/><text x="13.2654%" y="415.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3,389 samples, 5.42%)</title><rect x="13.0378%" y="389" width="5.4248%" height="15" fill="rgb(222,85,15)" fg:x="8145" fg:w="3389"/><text x="13.2878%" y="399.50">alloc::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,231 samples, 5.17%)</title><rect x="13.2908%" y="373" width="5.1719%" height="15" fill="rgb(210,85,47)" fg:x="8303" fg:w="3231"/><text x="13.5408%" y="383.50">&lt;alloc..</text></g><g><title>alloc::alloc::Global::alloc_impl (3,231 samples, 5.17%)</title><rect x="13.2908%" y="357" width="5.1719%" height="15" fill="rgb(224,206,25)" fg:x="8303" fg:w="3231"/><text x="13.5408%" y="367.50">alloc:..</text></g><g><title>alloc::alloc::alloc (3,231 samples, 5.17%)</title><rect x="13.2908%" y="341" width="5.1719%" height="15" fill="rgb(243,201,19)" fg:x="8303" fg:w="3231"/><text x="13.5408%" y="351.50">alloc:..</text></g><g><title>malloc (2,336 samples, 3.74%)</title><rect x="14.7234%" y="325" width="3.7393%" height="15" fill="rgb(236,59,4)" fg:x="9198" fg:w="2336"/><text x="14.9734%" y="335.50">mall..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (8,799 samples, 14.08%)</title><rect x="12.2183%" y="501" width="14.0847%" height="15" fill="rgb(254,179,45)" fg:x="7633" fg:w="8799"/><text x="12.4683%" y="511.50">&lt;alloc::string::Strin..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8,301 samples, 13.29%)</title><rect x="13.0154%" y="485" width="13.2876%" height="15" fill="rgb(226,14,10)" fg:x="8131" fg:w="8301"/><text x="13.2654%" y="495.50">&lt;alloc::vec::Vec&lt;T,A..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8,301 samples, 13.29%)</title><rect x="13.0154%" y="469" width="13.2876%" height="15" fill="rgb(244,27,41)" fg:x="8131" fg:w="8301"/><text x="13.2654%" y="479.50">alloc::slice::&lt;impl ..</text></g><g><title>alloc::slice::hack::to_vec (8,301 samples, 13.29%)</title><rect x="13.0154%" y="453" width="13.2876%" height="15" fill="rgb(235,35,32)" fg:x="8131" fg:w="8301"/><text x="13.2654%" y="463.50">alloc::slice::hack::..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8,301 samples, 13.29%)</title><rect x="13.0154%" y="437" width="13.2876%" height="15" fill="rgb(218,68,31)" fg:x="8131" fg:w="8301"/><text x="13.2654%" y="447.50">&lt;T as alloc::slice::..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4,898 samples, 7.84%)</title><rect x="18.4627%" y="421" width="7.8403%" height="15" fill="rgb(207,120,37)" fg:x="11534" fg:w="4898"/><text x="18.7127%" y="431.50">core::ptr::..</text></g><g><title>core::intrinsics::copy_nonoverlapping (4,898 samples, 7.84%)</title><rect x="18.4627%" y="405" width="7.8403%" height="15" fill="rgb(227,98,0)" fg:x="11534" fg:w="4898"/><text x="18.7127%" y="415.50">core::intri..</text></g><g><title>[libc.so.6] (4,897 samples, 7.84%)</title><rect x="18.4643%" y="389" width="7.8387%" height="15" fill="rgb(207,7,3)" fg:x="11535" fg:w="4897"/><text x="18.7143%" y="399.50">[libc.so.6]</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (11 samples, 0.02%)</title><rect x="30.2968%" y="373" width="0.0176%" height="15" fill="rgb(206,98,19)" fg:x="18927" fg:w="11"/><text x="30.5468%" y="383.50"></text></g><g><title>__rdl_alloc (286 samples, 0.46%)</title><rect x="30.8378%" y="309" width="0.4578%" height="15" fill="rgb(217,5,26)" fg:x="19265" fg:w="286"/><text x="31.0878%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (93 samples, 0.15%)</title><rect x="31.1468%" y="293" width="0.1489%" height="15" fill="rgb(235,190,38)" fg:x="19458" fg:w="93"/><text x="31.3968%" y="303.50"></text></g><g><title>__rust_alloc (326 samples, 0.52%)</title><rect x="31.2956%" y="309" width="0.5218%" height="15" fill="rgb(247,86,24)" fg:x="19551" fg:w="326"/><text x="31.5456%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,723 samples, 4.36%)</title><rect x="30.2968%" y="405" width="4.3588%" height="15" fill="rgb(205,101,16)" fg:x="18927" fg:w="2723"/><text x="30.5468%" y="415.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,723 samples, 4.36%)</title><rect x="30.2968%" y="389" width="4.3588%" height="15" fill="rgb(246,168,33)" fg:x="18927" fg:w="2723"/><text x="30.5468%" y="399.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2,712 samples, 4.34%)</title><rect x="30.3144%" y="373" width="4.3411%" height="15" fill="rgb(231,114,1)" fg:x="18938" fg:w="2712"/><text x="30.5644%" y="383.50">alloc..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,552 samples, 4.09%)</title><rect x="30.5705%" y="357" width="4.0850%" height="15" fill="rgb(207,184,53)" fg:x="19098" fg:w="2552"/><text x="30.8205%" y="367.50">&lt;all..</text></g><g><title>alloc::alloc::Global::alloc_impl (2,552 samples, 4.09%)</title><rect x="30.5705%" y="341" width="4.0850%" height="15" fill="rgb(224,95,51)" fg:x="19098" fg:w="2552"/><text x="30.8205%" y="351.50">allo..</text></g><g><title>alloc::alloc::alloc (2,552 samples, 4.09%)</title><rect x="30.5705%" y="325" width="4.0850%" height="15" fill="rgb(212,188,45)" fg:x="19098" fg:w="2552"/><text x="30.8205%" y="335.50">allo..</text></g><g><title>malloc (1,773 samples, 2.84%)</title><rect x="31.8175%" y="309" width="2.8381%" height="15" fill="rgb(223,154,38)" fg:x="19877" fg:w="1773"/><text x="32.0675%" y="319.50">ma..</text></g><g><title>[libc.so.6] (16 samples, 0.03%)</title><rect x="34.6299%" y="293" width="0.0256%" height="15" fill="rgb(251,22,52)" fg:x="21634" fg:w="16"/><text x="34.8799%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6,468 samples, 10.35%)</title><rect x="29.4388%" y="485" width="10.3534%" height="15" fill="rgb(229,209,22)" fg:x="18391" fg:w="6468"/><text x="29.6888%" y="495.50">&lt;alloc::string:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5,932 samples, 9.50%)</title><rect x="30.2968%" y="469" width="9.4955%" height="15" fill="rgb(234,138,34)" fg:x="18927" fg:w="5932"/><text x="30.5468%" y="479.50">&lt;alloc::vec::V..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5,932 samples, 9.50%)</title><rect x="30.2968%" y="453" width="9.4955%" height="15" fill="rgb(212,95,11)" fg:x="18927" fg:w="5932"/><text x="30.5468%" y="463.50">alloc::slice::..</text></g><g><title>alloc::slice::hack::to_vec (5,932 samples, 9.50%)</title><rect x="30.2968%" y="437" width="9.4955%" height="15" fill="rgb(240,179,47)" fg:x="18927" fg:w="5932"/><text x="30.5468%" y="447.50">alloc::slice::..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5,932 samples, 9.50%)</title><rect x="30.2968%" y="421" width="9.4955%" height="15" fill="rgb(240,163,11)" fg:x="18927" fg:w="5932"/><text x="30.5468%" y="431.50">&lt;T as alloc::s..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3,209 samples, 5.14%)</title><rect x="34.6555%" y="405" width="5.1367%" height="15" fill="rgb(236,37,12)" fg:x="21650" fg:w="3209"/><text x="34.9055%" y="415.50">core::..</text></g><g><title>core::intrinsics::copy_nonoverlapping (3,209 samples, 5.14%)</title><rect x="34.6555%" y="389" width="5.1367%" height="15" fill="rgb(232,164,16)" fg:x="21650" fg:w="3209"/><text x="34.9055%" y="399.50">core::..</text></g><g><title>[libc.so.6] (3,198 samples, 5.12%)</title><rect x="34.6731%" y="373" width="5.1191%" height="15" fill="rgb(244,205,15)" fg:x="21661" fg:w="3198"/><text x="34.9231%" y="383.50">[libc...</text></g><g><title>&lt;yt_history::model::Channel as core::clone::Clone&gt;::clone (8,430 samples, 13.49%)</title><rect x="26.3030%" y="501" width="13.4940%" height="15" fill="rgb(223,117,47)" fg:x="16432" fg:w="8430"/><text x="26.5530%" y="511.50">&lt;yt_history::model::..</text></g><g><title>&lt;yt_history::model::Video as core::clone::Clone&gt;::clone (19,399 samples, 31.05%)</title><rect x="8.7463%" y="517" width="31.0523%" height="15" fill="rgb(244,107,35)" fg:x="5464" fg:w="19399"/><text x="8.9963%" y="527.50">&lt;yt_history::model::Video as core::clone::Clone&gt;::..</text></g><g><title>core::cmp::PartialEq::ne (638 samples, 1.02%)</title><rect x="40.5606%" y="501" width="1.0213%" height="15" fill="rgb(205,140,8)" fg:x="25339" fg:w="638"/><text x="40.8106%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (638 samples, 1.02%)</title><rect x="40.5606%" y="485" width="1.0213%" height="15" fill="rgb(228,84,46)" fg:x="25339" fg:w="638"/><text x="40.8106%" y="495.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (638 samples, 1.02%)</title><rect x="40.5606%" y="469" width="1.0213%" height="15" fill="rgb(254,188,9)" fg:x="25339" fg:w="638"/><text x="40.8106%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (638 samples, 1.02%)</title><rect x="40.5606%" y="453" width="1.0213%" height="15" fill="rgb(206,112,54)" fg:x="25339" fg:w="638"/><text x="40.8106%" y="463.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (638 samples, 1.02%)</title><rect x="40.5606%" y="437" width="1.0213%" height="15" fill="rgb(216,84,49)" fg:x="25339" fg:w="638"/><text x="40.8106%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (638 samples, 1.02%)</title><rect x="40.5606%" y="421" width="1.0213%" height="15" fill="rgb(214,194,35)" fg:x="25339" fg:w="638"/><text x="40.8106%" y="431.50"></text></g><g><title>[libc.so.6] (531 samples, 0.85%)</title><rect x="40.7318%" y="405" width="0.8500%" height="15" fill="rgb(249,28,3)" fg:x="25446" fg:w="531"/><text x="40.9818%" y="415.50"></text></g><g><title>__rdl_dealloc (211 samples, 0.34%)</title><rect x="41.5850%" y="405" width="0.3378%" height="15" fill="rgb(222,56,52)" fg:x="25979" fg:w="211"/><text x="41.8350%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (211 samples, 0.34%)</title><rect x="41.5850%" y="389" width="0.3378%" height="15" fill="rgb(245,217,50)" fg:x="25979" fg:w="211"/><text x="41.8350%" y="399.50"></text></g><g><title>__rust_dealloc (222 samples, 0.36%)</title><rect x="41.9228%" y="405" width="0.3554%" height="15" fill="rgb(213,201,24)" fg:x="26190" fg:w="222"/><text x="42.1728%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,574 samples, 4.12%)</title><rect x="41.5850%" y="437" width="4.1202%" height="15" fill="rgb(248,116,28)" fg:x="25979" fg:w="2574"/><text x="41.8350%" y="447.50">&lt;all..</text></g><g><title>alloc::alloc::dealloc (2,574 samples, 4.12%)</title><rect x="41.5850%" y="421" width="4.1202%" height="15" fill="rgb(219,72,43)" fg:x="25979" fg:w="2574"/><text x="41.8350%" y="431.50">allo..</text></g><g><title>cfree (2,141 samples, 3.43%)</title><rect x="42.2781%" y="405" width="3.4271%" height="15" fill="rgb(209,138,14)" fg:x="26412" fg:w="2141"/><text x="42.5281%" y="415.50">cfr..</text></g><g><title>[libc.so.6] (1,496 samples, 2.39%)</title><rect x="43.3106%" y="389" width="2.3947%" height="15" fill="rgb(222,18,33)" fg:x="27057" fg:w="1496"/><text x="43.5606%" y="399.50">[l..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2,745 samples, 4.39%)</title><rect x="41.5818%" y="501" width="4.3940%" height="15" fill="rgb(213,199,7)" fg:x="25977" fg:w="2745"/><text x="41.8318%" y="511.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2,745 samples, 4.39%)</title><rect x="41.5818%" y="485" width="4.3940%" height="15" fill="rgb(250,110,10)" fg:x="25977" fg:w="2745"/><text x="41.8318%" y="495.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2,745 samples, 4.39%)</title><rect x="41.5818%" y="469" width="4.3940%" height="15" fill="rgb(248,123,6)" fg:x="25977" fg:w="2745"/><text x="41.8318%" y="479.50">core:..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,745 samples, 4.39%)</title><rect x="41.5818%" y="453" width="4.3940%" height="15" fill="rgb(206,91,31)" fg:x="25977" fg:w="2745"/><text x="41.8318%" y="463.50">&lt;allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (169 samples, 0.27%)</title><rect x="45.7053%" y="437" width="0.2705%" height="15" fill="rgb(211,154,13)" fg:x="28553" fg:w="169"/><text x="45.9553%" y="447.50"></text></g><g><title>__rdl_dealloc (199 samples, 0.32%)</title><rect x="46.0686%" y="389" width="0.3185%" height="15" fill="rgb(225,148,7)" fg:x="28780" fg:w="199"/><text x="46.3186%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (199 samples, 0.32%)</title><rect x="46.0686%" y="373" width="0.3185%" height="15" fill="rgb(220,160,43)" fg:x="28780" fg:w="199"/><text x="46.3186%" y="383.50"></text></g><g><title>__rust_dealloc (192 samples, 0.31%)</title><rect x="46.3872%" y="389" width="0.3073%" height="15" fill="rgb(213,52,39)" fg:x="28979" fg:w="192"/><text x="46.6372%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,435 samples, 5.50%)</title><rect x="45.9822%" y="421" width="5.4985%" height="15" fill="rgb(243,137,7)" fg:x="28726" fg:w="3435"/><text x="46.2322%" y="431.50">&lt;alloc:..</text></g><g><title>alloc::alloc::dealloc (3,435 samples, 5.50%)</title><rect x="45.9822%" y="405" width="5.4985%" height="15" fill="rgb(230,79,13)" fg:x="28726" fg:w="3435"/><text x="46.2322%" y="415.50">alloc::..</text></g><g><title>cfree (2,990 samples, 4.79%)</title><rect x="46.6945%" y="389" width="4.7861%" height="15" fill="rgb(247,105,23)" fg:x="29171" fg:w="2990"/><text x="46.9445%" y="399.50">cfree</text></g><g><title>[libc.so.6] (2,139 samples, 3.42%)</title><rect x="48.0567%" y="373" width="3.4239%" height="15" fill="rgb(223,179,41)" fg:x="30022" fg:w="2139"/><text x="48.3067%" y="383.50">[li..</text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Channel&gt; (3,573 samples, 5.72%)</title><rect x="45.9758%" y="501" width="5.7194%" height="15" fill="rgb(218,9,34)" fg:x="28722" fg:w="3573"/><text x="46.2258%" y="511.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3,573 samples, 5.72%)</title><rect x="45.9758%" y="485" width="5.7194%" height="15" fill="rgb(222,106,8)" fg:x="28722" fg:w="3573"/><text x="46.2258%" y="495.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,573 samples, 5.72%)</title><rect x="45.9758%" y="469" width="5.7194%" height="15" fill="rgb(211,220,0)" fg:x="28722" fg:w="3573"/><text x="46.2258%" y="479.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,573 samples, 5.72%)</title><rect x="45.9758%" y="453" width="5.7194%" height="15" fill="rgb(229,52,16)" fg:x="28722" fg:w="3573"/><text x="46.2258%" y="463.50">core::p..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,573 samples, 5.72%)</title><rect x="45.9758%" y="437" width="5.7194%" height="15" fill="rgb(212,155,18)" fg:x="28722" fg:w="3573"/><text x="46.2258%" y="447.50">&lt;alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (134 samples, 0.21%)</title><rect x="51.4807%" y="421" width="0.2145%" height="15" fill="rgb(242,21,14)" fg:x="32161" fg:w="134"/><text x="51.7307%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (27,082 samples, 43.35%)</title><rect x="8.3509%" y="549" width="43.3506%" height="15" fill="rgb(222,19,48)" fg:x="5217" fg:w="27082"/><text x="8.6009%" y="559.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;:..</text></g><g><title>yt_history::model::Models::find_video::{{closure}} (27,033 samples, 43.27%)</title><rect x="8.4294%" y="533" width="43.2722%" height="15" fill="rgb(232,45,27)" fg:x="5266" fg:w="27033"/><text x="8.6794%" y="543.50">yt_history::model::Models::find_video::{{closure}}</text></g><g><title>yt_history::model::WhereVideo::matches (7,436 samples, 11.90%)</title><rect x="39.7986%" y="517" width="11.9029%" height="15" fill="rgb(249,103,42)" fg:x="24863" fg:w="7436"/><text x="40.0486%" y="527.50">yt_history::model:..</text></g><g><title>yt_history::model::Models::find_video (27,091 samples, 43.37%)</title><rect x="8.3509%" y="565" width="43.3650%" height="15" fill="rgb(246,81,33)" fg:x="5217" fg:w="27091"/><text x="8.6009%" y="575.50">yt_history::model::Models::find_video</text></g><g><title>yt_history::model::Models::find_or_create_video (7 samples, 0.01%)</title><rect x="51.7048%" y="549" width="0.0112%" height="15" fill="rgb(252,33,42)" fg:x="32301" fg:w="7"/><text x="51.9548%" y="559.50"></text></g><g><title>__rdl_alloc (12 samples, 0.02%)</title><rect x="51.9705%" y="309" width="0.0192%" height="15" fill="rgb(209,212,41)" fg:x="32467" fg:w="12"/><text x="52.2205%" y="319.50"></text></g><g><title>__rust_alloc (15 samples, 0.02%)</title><rect x="51.9897%" y="309" width="0.0240%" height="15" fill="rgb(207,154,6)" fg:x="32479" fg:w="15"/><text x="52.2397%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (169 samples, 0.27%)</title><rect x="51.9401%" y="405" width="0.2705%" height="15" fill="rgb(223,64,47)" fg:x="32448" fg:w="169"/><text x="52.1901%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (169 samples, 0.27%)</title><rect x="51.9401%" y="389" width="0.2705%" height="15" fill="rgb(211,161,38)" fg:x="32448" fg:w="169"/><text x="52.1901%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (169 samples, 0.27%)</title><rect x="51.9401%" y="373" width="0.2705%" height="15" fill="rgb(219,138,40)" fg:x="32448" fg:w="169"/><text x="52.1901%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (165 samples, 0.26%)</title><rect x="51.9465%" y="357" width="0.2641%" height="15" fill="rgb(241,228,46)" fg:x="32452" fg:w="165"/><text x="52.1965%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (165 samples, 0.26%)</title><rect x="51.9465%" y="341" width="0.2641%" height="15" fill="rgb(223,209,38)" fg:x="32452" fg:w="165"/><text x="52.1965%" y="351.50"></text></g><g><title>alloc::alloc::alloc (165 samples, 0.26%)</title><rect x="51.9465%" y="325" width="0.2641%" height="15" fill="rgb(236,164,45)" fg:x="32452" fg:w="165"/><text x="52.1965%" y="335.50"></text></g><g><title>malloc (123 samples, 0.20%)</title><rect x="52.0137%" y="309" width="0.1969%" height="15" fill="rgb(231,15,5)" fg:x="32494" fg:w="123"/><text x="52.2637%" y="319.50"></text></g><g><title>&lt;yt_history::model::Channel as core::clone::Clone&gt;::clone (451 samples, 0.72%)</title><rect x="51.7560%" y="501" width="0.7219%" height="15" fill="rgb(252,35,15)" fg:x="32333" fg:w="451"/><text x="52.0060%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (363 samples, 0.58%)</title><rect x="51.8968%" y="485" width="0.5811%" height="15" fill="rgb(248,181,18)" fg:x="32421" fg:w="363"/><text x="52.1468%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (336 samples, 0.54%)</title><rect x="51.9401%" y="469" width="0.5378%" height="15" fill="rgb(233,39,42)" fg:x="32448" fg:w="336"/><text x="52.1901%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (336 samples, 0.54%)</title><rect x="51.9401%" y="453" width="0.5378%" height="15" fill="rgb(238,110,33)" fg:x="32448" fg:w="336"/><text x="52.1901%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (336 samples, 0.54%)</title><rect x="51.9401%" y="437" width="0.5378%" height="15" fill="rgb(233,195,10)" fg:x="32448" fg:w="336"/><text x="52.1901%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (336 samples, 0.54%)</title><rect x="51.9401%" y="421" width="0.5378%" height="15" fill="rgb(254,105,3)" fg:x="32448" fg:w="336"/><text x="52.1901%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (167 samples, 0.27%)</title><rect x="52.2106%" y="405" width="0.2673%" height="15" fill="rgb(221,225,9)" fg:x="32617" fg:w="167"/><text x="52.4606%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (167 samples, 0.27%)</title><rect x="52.2106%" y="389" width="0.2673%" height="15" fill="rgb(224,227,45)" fg:x="32617" fg:w="167"/><text x="52.4606%" y="399.50"></text></g><g><title>[libc.so.6] (165 samples, 0.26%)</title><rect x="52.2138%" y="373" width="0.2641%" height="15" fill="rgb(229,198,43)" fg:x="32619" fg:w="165"/><text x="52.4638%" y="383.50"></text></g><g><title>&lt;yt_history::model::Channel as core::cmp::PartialEq&gt;::eq (72 samples, 0.12%)</title><rect x="52.4955%" y="485" width="0.1153%" height="15" fill="rgb(206,209,35)" fg:x="32795" fg:w="72"/><text x="52.7455%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (70 samples, 0.11%)</title><rect x="52.4987%" y="469" width="0.1121%" height="15" fill="rgb(245,195,53)" fg:x="32797" fg:w="70"/><text x="52.7487%" y="479.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (70 samples, 0.11%)</title><rect x="52.4987%" y="453" width="0.1121%" height="15" fill="rgb(240,92,26)" fg:x="32797" fg:w="70"/><text x="52.7487%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (70 samples, 0.11%)</title><rect x="52.4987%" y="437" width="0.1121%" height="15" fill="rgb(207,40,23)" fg:x="32797" fg:w="70"/><text x="52.7487%" y="447.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (70 samples, 0.11%)</title><rect x="52.4987%" y="421" width="0.1121%" height="15" fill="rgb(223,111,35)" fg:x="32797" fg:w="70"/><text x="52.7487%" y="431.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (70 samples, 0.11%)</title><rect x="52.4987%" y="405" width="0.1121%" height="15" fill="rgb(229,147,28)" fg:x="32797" fg:w="70"/><text x="52.7487%" y="415.50"></text></g><g><title>[libc.so.6] (70 samples, 0.11%)</title><rect x="52.4987%" y="389" width="0.1121%" height="15" fill="rgb(211,29,28)" fg:x="32797" fg:w="70"/><text x="52.7487%" y="399.50"></text></g><g><title>__rdl_dealloc (11 samples, 0.02%)</title><rect x="52.6108%" y="373" width="0.0176%" height="15" fill="rgb(228,72,33)" fg:x="32867" fg:w="11"/><text x="52.8608%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (11 samples, 0.02%)</title><rect x="52.6108%" y="357" width="0.0176%" height="15" fill="rgb(205,214,31)" fg:x="32867" fg:w="11"/><text x="52.8608%" y="367.50"></text></g><g><title>__rust_dealloc (12 samples, 0.02%)</title><rect x="52.6284%" y="373" width="0.0192%" height="15" fill="rgb(224,111,15)" fg:x="32878" fg:w="12"/><text x="52.8784%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (102 samples, 0.16%)</title><rect x="52.6108%" y="405" width="0.1633%" height="15" fill="rgb(253,21,26)" fg:x="32867" fg:w="102"/><text x="52.8608%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (102 samples, 0.16%)</title><rect x="52.6108%" y="389" width="0.1633%" height="15" fill="rgb(245,139,43)" fg:x="32867" fg:w="102"/><text x="52.8608%" y="399.50"></text></g><g><title>cfree (79 samples, 0.13%)</title><rect x="52.6476%" y="373" width="0.1265%" height="15" fill="rgb(252,170,7)" fg:x="32890" fg:w="79"/><text x="52.8976%" y="383.50"></text></g><g><title>[libc.so.6] (59 samples, 0.09%)</title><rect x="52.6796%" y="357" width="0.0944%" height="15" fill="rgb(231,118,14)" fg:x="32910" fg:w="59"/><text x="52.9296%" y="367.50"></text></g><g><title>yt_history::model::Models::find_or_create_video (28,528 samples, 45.67%)</title><rect x="7.1152%" y="581" width="45.6653%" height="15" fill="rgb(238,83,0)" fg:x="4445" fg:w="28528"/><text x="7.3652%" y="591.50">yt_history::model::Models::find_or_create_video</text></g><g><title>yt_history::model::Models::insert_video (665 samples, 1.06%)</title><rect x="51.7160%" y="565" width="1.0645%" height="15" fill="rgb(221,39,39)" fg:x="32308" fg:w="665"/><text x="51.9660%" y="575.50"></text></g><g><title>yt_history::model::Models::find_channel (650 samples, 1.04%)</title><rect x="51.7400%" y="549" width="1.0405%" height="15" fill="rgb(222,119,46)" fg:x="32323" fg:w="650"/><text x="51.9900%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (650 samples, 1.04%)</title><rect x="51.7400%" y="533" width="1.0405%" height="15" fill="rgb(222,165,49)" fg:x="32323" fg:w="650"/><text x="51.9900%" y="543.50"></text></g><g><title>yt_history::model::Models::find_channel::{{closure}} (649 samples, 1.04%)</title><rect x="51.7416%" y="517" width="1.0389%" height="15" fill="rgb(219,113,52)" fg:x="32324" fg:w="649"/><text x="51.9916%" y="527.50"></text></g><g><title>yt_history::model::WhereChannel::matches (189 samples, 0.30%)</title><rect x="52.4779%" y="501" width="0.3025%" height="15" fill="rgb(214,7,15)" fg:x="32784" fg:w="189"/><text x="52.7279%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Channel&gt; (106 samples, 0.17%)</title><rect x="52.6108%" y="485" width="0.1697%" height="15" fill="rgb(235,32,4)" fg:x="32867" fg:w="106"/><text x="52.8608%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (106 samples, 0.17%)</title><rect x="52.6108%" y="469" width="0.1697%" height="15" fill="rgb(238,90,54)" fg:x="32867" fg:w="106"/><text x="52.8608%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (106 samples, 0.17%)</title><rect x="52.6108%" y="453" width="0.1697%" height="15" fill="rgb(213,208,19)" fg:x="32867" fg:w="106"/><text x="52.8608%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (106 samples, 0.17%)</title><rect x="52.6108%" y="437" width="0.1697%" height="15" fill="rgb(233,156,4)" fg:x="32867" fg:w="106"/><text x="52.8608%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (106 samples, 0.17%)</title><rect x="52.6108%" y="421" width="0.1697%" height="15" fill="rgb(207,194,5)" fg:x="32867" fg:w="106"/><text x="52.8608%" y="431.50"></text></g><g><title>&lt;yt_history::model::Video as core::clone::Clone&gt;::clone (7 samples, 0.01%)</title><rect x="52.7852%" y="565" width="0.0112%" height="15" fill="rgb(206,111,30)" fg:x="32976" fg:w="7"/><text x="53.0352%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13 samples, 0.02%)</title><rect x="52.8077%" y="437" width="0.0208%" height="15" fill="rgb(243,70,54)" fg:x="32990" fg:w="13"/><text x="53.0577%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13 samples, 0.02%)</title><rect x="52.8077%" y="421" width="0.0208%" height="15" fill="rgb(242,28,8)" fg:x="32990" fg:w="13"/><text x="53.0577%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13 samples, 0.02%)</title><rect x="52.8077%" y="405" width="0.0208%" height="15" fill="rgb(219,106,18)" fg:x="32990" fg:w="13"/><text x="53.0577%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.02%)</title><rect x="52.8093%" y="389" width="0.0192%" height="15" fill="rgb(244,222,10)" fg:x="32991" fg:w="12"/><text x="53.0593%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.02%)</title><rect x="52.8093%" y="373" width="0.0192%" height="15" fill="rgb(236,179,52)" fg:x="32991" fg:w="12"/><text x="53.0593%" y="383.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.02%)</title><rect x="52.8093%" y="357" width="0.0192%" height="15" fill="rgb(213,23,39)" fg:x="32991" fg:w="12"/><text x="53.0593%" y="367.50"></text></g><g><title>malloc (11 samples, 0.02%)</title><rect x="52.8109%" y="341" width="0.0176%" height="15" fill="rgb(238,48,10)" fg:x="32992" fg:w="11"/><text x="53.0609%" y="351.50"></text></g><g><title>&lt;yt_history::model::Watched as core::clone::Clone&gt;::clone (23 samples, 0.04%)</title><rect x="52.7965%" y="565" width="0.0368%" height="15" fill="rgb(251,196,23)" fg:x="32983" fg:w="23"/><text x="53.0465%" y="575.50"></text></g><g><title>&lt;yt_history::model::Video as core::clone::Clone&gt;::clone (23 samples, 0.04%)</title><rect x="52.7965%" y="549" width="0.0368%" height="15" fill="rgb(250,152,24)" fg:x="32983" fg:w="23"/><text x="53.0465%" y="559.50"></text></g><g><title>&lt;yt_history::model::Channel as core::clone::Clone&gt;::clone (17 samples, 0.03%)</title><rect x="52.8061%" y="533" width="0.0272%" height="15" fill="rgb(209,150,17)" fg:x="32989" fg:w="17"/><text x="53.0561%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (16 samples, 0.03%)</title><rect x="52.8077%" y="517" width="0.0256%" height="15" fill="rgb(234,202,34)" fg:x="32990" fg:w="16"/><text x="53.0577%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (16 samples, 0.03%)</title><rect x="52.8077%" y="501" width="0.0256%" height="15" fill="rgb(253,148,53)" fg:x="32990" fg:w="16"/><text x="53.0577%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16 samples, 0.03%)</title><rect x="52.8077%" y="485" width="0.0256%" height="15" fill="rgb(218,129,16)" fg:x="32990" fg:w="16"/><text x="53.0577%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.03%)</title><rect x="52.8077%" y="469" width="0.0256%" height="15" fill="rgb(216,85,19)" fg:x="32990" fg:w="16"/><text x="53.0577%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 0.03%)</title><rect x="52.8077%" y="453" width="0.0256%" height="15" fill="rgb(235,228,7)" fg:x="32990" fg:w="16"/><text x="53.0577%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 0.01%)</title><rect x="52.8333%" y="565" width="0.0144%" height="15" fill="rgb(245,175,0)" fg:x="33006" fg:w="9"/><text x="53.0833%" y="575.50"></text></g><g><title>core::ptr::write (7 samples, 0.01%)</title><rect x="52.8365%" y="549" width="0.0112%" height="15" fill="rgb(208,168,36)" fg:x="33008" fg:w="7"/><text x="53.0865%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.03%)</title><rect x="52.9165%" y="533" width="0.0288%" height="15" fill="rgb(246,171,24)" fg:x="33058" fg:w="18"/><text x="53.1665%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (8 samples, 0.01%)</title><rect x="57.7379%" y="389" width="0.0128%" height="15" fill="rgb(215,142,24)" fg:x="36070" fg:w="8"/><text x="57.9879%" y="399.50"></text></g><g><title>[[kernel.kallsyms]] (16 samples, 0.03%)</title><rect x="58.9112%" y="309" width="0.0256%" height="15" fill="rgb(250,187,7)" fg:x="36803" fg:w="16"/><text x="59.1612%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (16 samples, 0.03%)</title><rect x="58.9112%" y="293" width="0.0256%" height="15" fill="rgb(228,66,33)" fg:x="36803" fg:w="16"/><text x="59.1612%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (16 samples, 0.03%)</title><rect x="58.9112%" y="277" width="0.0256%" height="15" fill="rgb(234,215,21)" fg:x="36803" fg:w="16"/><text x="59.1612%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (16 samples, 0.03%)</title><rect x="58.9112%" y="261" width="0.0256%" height="15" fill="rgb(222,191,20)" fg:x="36803" fg:w="16"/><text x="59.1612%" y="271.50"></text></g><g><title>__rdl_alloc (293 samples, 0.47%)</title><rect x="58.5638%" y="325" width="0.4690%" height="15" fill="rgb(245,79,54)" fg:x="36586" fg:w="293"/><text x="58.8138%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (60 samples, 0.10%)</title><rect x="58.9368%" y="309" width="0.0960%" height="15" fill="rgb(240,10,37)" fg:x="36819" fg:w="60"/><text x="59.1868%" y="319.50"></text></g><g><title>__rust_alloc (737 samples, 1.18%)</title><rect x="59.0328%" y="325" width="1.1797%" height="15" fill="rgb(214,192,32)" fg:x="36879" fg:w="737"/><text x="59.2828%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,635 samples, 5.82%)</title><rect x="57.7379%" y="421" width="5.8186%" height="15" fill="rgb(209,36,54)" fg:x="36070" fg:w="3635"/><text x="57.9879%" y="431.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,635 samples, 5.82%)</title><rect x="57.7379%" y="405" width="5.8186%" height="15" fill="rgb(220,10,11)" fg:x="36070" fg:w="3635"/><text x="57.9879%" y="415.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3,627 samples, 5.81%)</title><rect x="57.7507%" y="389" width="5.8058%" height="15" fill="rgb(221,106,17)" fg:x="36078" fg:w="3627"/><text x="58.0007%" y="399.50">alloc::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,365 samples, 5.39%)</title><rect x="58.1701%" y="373" width="5.3864%" height="15" fill="rgb(251,142,44)" fg:x="36340" fg:w="3365"/><text x="58.4201%" y="383.50">&lt;alloc:..</text></g><g><title>alloc::alloc::Global::alloc_impl (3,365 samples, 5.39%)</title><rect x="58.1701%" y="357" width="5.3864%" height="15" fill="rgb(238,13,15)" fg:x="36340" fg:w="3365"/><text x="58.4201%" y="367.50">alloc::..</text></g><g><title>alloc::alloc::alloc (3,365 samples, 5.39%)</title><rect x="58.1701%" y="341" width="5.3864%" height="15" fill="rgb(208,107,27)" fg:x="36340" fg:w="3365"/><text x="58.4201%" y="351.50">alloc::..</text></g><g><title>malloc (2,089 samples, 3.34%)</title><rect x="60.2126%" y="325" width="3.3439%" height="15" fill="rgb(205,136,37)" fg:x="37616" fg:w="2089"/><text x="60.4626%" y="335.50">mal..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (8,856 samples, 14.18%)</title><rect x="56.8287%" y="501" width="14.1760%" height="15" fill="rgb(250,205,27)" fg:x="35502" fg:w="8856"/><text x="57.0787%" y="511.50">&lt;alloc::string::String..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8,288 samples, 13.27%)</title><rect x="57.7379%" y="485" width="13.2667%" height="15" fill="rgb(210,80,43)" fg:x="36070" fg:w="8288"/><text x="57.9879%" y="495.50">&lt;alloc::vec::Vec&lt;T,A..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8,288 samples, 13.27%)</title><rect x="57.7379%" y="469" width="13.2667%" height="15" fill="rgb(247,160,36)" fg:x="36070" fg:w="8288"/><text x="57.9879%" y="479.50">alloc::slice::&lt;impl ..</text></g><g><title>alloc::slice::hack::to_vec (8,288 samples, 13.27%)</title><rect x="57.7379%" y="453" width="13.2667%" height="15" fill="rgb(234,13,49)" fg:x="36070" fg:w="8288"/><text x="57.9879%" y="463.50">alloc::slice::hack::..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8,288 samples, 13.27%)</title><rect x="57.7379%" y="437" width="13.2667%" height="15" fill="rgb(234,122,0)" fg:x="36070" fg:w="8288"/><text x="57.9879%" y="447.50">&lt;T as alloc::slice::..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4,653 samples, 7.45%)</title><rect x="63.5565%" y="421" width="7.4481%" height="15" fill="rgb(207,146,38)" fg:x="39705" fg:w="4653"/><text x="63.8065%" y="431.50">core::ptr:..</text></g><g><title>core::intrinsics::copy_nonoverlapping (4,653 samples, 7.45%)</title><rect x="63.5565%" y="405" width="7.4481%" height="15" fill="rgb(207,177,25)" fg:x="39705" fg:w="4653"/><text x="63.8065%" y="415.50">core::intr..</text></g><g><title>[libc.so.6] (4,652 samples, 7.45%)</title><rect x="63.5581%" y="389" width="7.4465%" height="15" fill="rgb(211,178,42)" fg:x="39706" fg:w="4652"/><text x="63.8081%" y="399.50">[libc.so.6]</text></g><g><title>__rdl_alloc (241 samples, 0.39%)</title><rect x="75.7539%" y="309" width="0.3858%" height="15" fill="rgb(230,69,54)" fg:x="47325" fg:w="241"/><text x="76.0039%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (29 samples, 0.05%)</title><rect x="76.0933%" y="293" width="0.0464%" height="15" fill="rgb(214,135,41)" fg:x="47537" fg:w="29"/><text x="76.3433%" y="303.50"></text></g><g><title>__rust_alloc (567 samples, 0.91%)</title><rect x="76.1397%" y="309" width="0.9076%" height="15" fill="rgb(237,67,25)" fg:x="47566" fg:w="567"/><text x="76.3897%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,785 samples, 4.46%)</title><rect x="75.1153%" y="405" width="4.4580%" height="15" fill="rgb(222,189,50)" fg:x="46926" fg:w="2785"/><text x="75.3653%" y="415.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,785 samples, 4.46%)</title><rect x="75.1153%" y="389" width="4.4580%" height="15" fill="rgb(245,148,34)" fg:x="46926" fg:w="2785"/><text x="75.3653%" y="399.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2,785 samples, 4.46%)</title><rect x="75.1153%" y="373" width="4.4580%" height="15" fill="rgb(222,29,6)" fg:x="46926" fg:w="2785"/><text x="75.3653%" y="383.50">alloc..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,615 samples, 4.19%)</title><rect x="75.3874%" y="357" width="4.1859%" height="15" fill="rgb(221,189,43)" fg:x="47096" fg:w="2615"/><text x="75.6374%" y="367.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::alloc_impl (2,615 samples, 4.19%)</title><rect x="75.3874%" y="341" width="4.1859%" height="15" fill="rgb(207,36,27)" fg:x="47096" fg:w="2615"/><text x="75.6374%" y="351.50">alloc..</text></g><g><title>alloc::alloc::alloc (2,615 samples, 4.19%)</title><rect x="75.3874%" y="325" width="4.1859%" height="15" fill="rgb(217,90,24)" fg:x="47096" fg:w="2615"/><text x="75.6374%" y="335.50">alloc..</text></g><g><title>malloc (1,578 samples, 2.53%)</title><rect x="77.0473%" y="309" width="2.5259%" height="15" fill="rgb(224,66,35)" fg:x="48133" fg:w="1578"/><text x="77.2973%" y="319.50">ma..</text></g><g><title>&lt;yt_history::model::Video as core::clone::Clone&gt;::clone (19,635 samples, 31.43%)</title><rect x="52.9453%" y="517" width="31.4301%" height="15" fill="rgb(221,13,50)" fg:x="33076" fg:w="19635"/><text x="53.1953%" y="527.50">&lt;yt_history::model::Video as core::clone::Clone&gt;::c..</text></g><g><title>&lt;yt_history::model::Channel as core::clone::Clone&gt;::clone (8,353 samples, 13.37%)</title><rect x="71.0046%" y="501" width="13.3708%" height="15" fill="rgb(236,68,49)" fg:x="44358" fg:w="8353"/><text x="71.2546%" y="511.50">&lt;yt_history::model::..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6,338 samples, 10.15%)</title><rect x="74.2301%" y="485" width="10.1453%" height="15" fill="rgb(229,146,28)" fg:x="46373" fg:w="6338"/><text x="74.4801%" y="495.50">&lt;alloc::string:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5,785 samples, 9.26%)</title><rect x="75.1153%" y="469" width="9.2601%" height="15" fill="rgb(225,31,38)" fg:x="46926" fg:w="5785"/><text x="75.3653%" y="479.50">&lt;alloc::vec::..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5,785 samples, 9.26%)</title><rect x="75.1153%" y="453" width="9.2601%" height="15" fill="rgb(250,208,3)" fg:x="46926" fg:w="5785"/><text x="75.3653%" y="463.50">alloc::slice:..</text></g><g><title>alloc::slice::hack::to_vec (5,785 samples, 9.26%)</title><rect x="75.1153%" y="437" width="9.2601%" height="15" fill="rgb(246,54,23)" fg:x="46926" fg:w="5785"/><text x="75.3653%" y="447.50">alloc::slice:..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5,785 samples, 9.26%)</title><rect x="75.1153%" y="421" width="9.2601%" height="15" fill="rgb(243,76,11)" fg:x="46926" fg:w="5785"/><text x="75.3653%" y="431.50">&lt;T as alloc::..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3,000 samples, 4.80%)</title><rect x="79.5732%" y="405" width="4.8022%" height="15" fill="rgb(245,21,50)" fg:x="49711" fg:w="3000"/><text x="79.8232%" y="415.50">core::..</text></g><g><title>core::intrinsics::copy_nonoverlapping (3,000 samples, 4.80%)</title><rect x="79.5732%" y="389" width="4.8022%" height="15" fill="rgb(228,9,43)" fg:x="49711" fg:w="3000"/><text x="79.8232%" y="399.50">core::..</text></g><g><title>[libc.so.6] (2,982 samples, 4.77%)</title><rect x="79.6021%" y="373" width="4.7733%" height="15" fill="rgb(208,100,47)" fg:x="49729" fg:w="2982"/><text x="79.8521%" y="383.50">[libc...</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (772 samples, 1.24%)</title><rect x="85.1694%" y="485" width="1.2358%" height="15" fill="rgb(232,26,8)" fg:x="53207" fg:w="772"/><text x="85.4194%" y="495.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (772 samples, 1.24%)</title><rect x="85.1694%" y="469" width="1.2358%" height="15" fill="rgb(216,166,38)" fg:x="53207" fg:w="772"/><text x="85.4194%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (772 samples, 1.24%)</title><rect x="85.1694%" y="453" width="1.2358%" height="15" fill="rgb(251,202,51)" fg:x="53207" fg:w="772"/><text x="85.4194%" y="463.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (772 samples, 1.24%)</title><rect x="85.1694%" y="437" width="1.2358%" height="15" fill="rgb(254,216,34)" fg:x="53207" fg:w="772"/><text x="85.4194%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (772 samples, 1.24%)</title><rect x="85.1694%" y="421" width="1.2358%" height="15" fill="rgb(251,32,27)" fg:x="53207" fg:w="772"/><text x="85.4194%" y="431.50"></text></g><g><title>[libc.so.6] (655 samples, 1.05%)</title><rect x="85.3566%" y="405" width="1.0485%" height="15" fill="rgb(208,127,28)" fg:x="53324" fg:w="655"/><text x="85.6066%" y="415.50"></text></g><g><title>&lt;yt_history::model::Video as core::cmp::PartialEq&gt;::eq (816 samples, 1.31%)</title><rect x="85.1005%" y="501" width="1.3062%" height="15" fill="rgb(224,137,22)" fg:x="53164" fg:w="816"/><text x="85.3505%" y="511.50"></text></g><g><title>__rdl_dealloc (218 samples, 0.35%)</title><rect x="86.4115%" y="405" width="0.3490%" height="15" fill="rgb(254,70,32)" fg:x="53983" fg:w="218"/><text x="86.6615%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (218 samples, 0.35%)</title><rect x="86.4115%" y="389" width="0.3490%" height="15" fill="rgb(229,75,37)" fg:x="53983" fg:w="218"/><text x="86.6615%" y="399.50"></text></g><g><title>__rust_dealloc (226 samples, 0.36%)</title><rect x="86.7605%" y="405" width="0.3618%" height="15" fill="rgb(252,64,23)" fg:x="54201" fg:w="226"/><text x="87.0105%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,550 samples, 4.08%)</title><rect x="86.4115%" y="437" width="4.0818%" height="15" fill="rgb(232,162,48)" fg:x="53983" fg:w="2550"/><text x="86.6615%" y="447.50">&lt;all..</text></g><g><title>alloc::alloc::dealloc (2,550 samples, 4.08%)</title><rect x="86.4115%" y="421" width="4.0818%" height="15" fill="rgb(246,160,12)" fg:x="53983" fg:w="2550"/><text x="86.6615%" y="431.50">allo..</text></g><g><title>cfree (2,106 samples, 3.37%)</title><rect x="87.1222%" y="405" width="3.3711%" height="15" fill="rgb(247,166,0)" fg:x="54427" fg:w="2106"/><text x="87.3722%" y="415.50">cfr..</text></g><g><title>[libc.so.6] (1,473 samples, 2.36%)</title><rect x="88.1355%" y="389" width="2.3579%" height="15" fill="rgb(249,219,21)" fg:x="55060" fg:w="1473"/><text x="88.3855%" y="399.50">[..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2,745 samples, 4.39%)</title><rect x="86.4067%" y="501" width="4.3940%" height="15" fill="rgb(205,209,3)" fg:x="53980" fg:w="2745"/><text x="86.6567%" y="511.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2,745 samples, 4.39%)</title><rect x="86.4067%" y="485" width="4.3940%" height="15" fill="rgb(243,44,1)" fg:x="53980" fg:w="2745"/><text x="86.6567%" y="495.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2,745 samples, 4.39%)</title><rect x="86.4067%" y="469" width="4.3940%" height="15" fill="rgb(206,159,16)" fg:x="53980" fg:w="2745"/><text x="86.6567%" y="479.50">core:..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,745 samples, 4.39%)</title><rect x="86.4067%" y="453" width="4.3940%" height="15" fill="rgb(244,77,30)" fg:x="53980" fg:w="2745"/><text x="86.6567%" y="463.50">&lt;allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (192 samples, 0.31%)</title><rect x="90.4933%" y="437" width="0.3073%" height="15" fill="rgb(218,69,12)" fg:x="56533" fg:w="192"/><text x="90.7433%" y="447.50"></text></g><g><title>__rdl_dealloc (217 samples, 0.35%)</title><rect x="90.8791%" y="389" width="0.3474%" height="15" fill="rgb(212,87,7)" fg:x="56774" fg:w="217"/><text x="91.1291%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (217 samples, 0.35%)</title><rect x="90.8791%" y="373" width="0.3474%" height="15" fill="rgb(245,114,25)" fg:x="56774" fg:w="217"/><text x="91.1291%" y="383.50"></text></g><g><title>__rust_dealloc (188 samples, 0.30%)</title><rect x="91.2265%" y="389" width="0.3009%" height="15" fill="rgb(210,61,42)" fg:x="56991" fg:w="188"/><text x="91.4765%" y="399.50"></text></g><g><title>[libc.so.6] (2,040 samples, 3.27%)</title><rect x="92.8224%" y="373" width="3.2655%" height="15" fill="rgb(211,52,33)" fg:x="57988" fg:w="2040"/><text x="93.0724%" y="383.50">[li..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,302 samples, 5.29%)</title><rect x="90.8039%" y="421" width="5.2856%" height="15" fill="rgb(234,58,33)" fg:x="56727" fg:w="3302"/><text x="91.0539%" y="431.50">&lt;alloc..</text></g><g><title>alloc::alloc::dealloc (3,302 samples, 5.29%)</title><rect x="90.8039%" y="405" width="5.2856%" height="15" fill="rgb(220,115,36)" fg:x="56727" fg:w="3302"/><text x="91.0539%" y="415.50">alloc:..</text></g><g><title>cfree (2,850 samples, 4.56%)</title><rect x="91.5274%" y="389" width="4.5620%" height="15" fill="rgb(243,153,54)" fg:x="57179" fg:w="2850"/><text x="91.7774%" y="399.50">cfree</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (27,184 samples, 43.51%)</title><rect x="52.8477%" y="549" width="43.5139%" height="15" fill="rgb(251,47,18)" fg:x="33015" fg:w="27184"/><text x="53.0977%" y="559.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;:..</text></g><g><title>yt_history::model::Models::find_video::{{closure}} (27,123 samples, 43.42%)</title><rect x="52.9453%" y="533" width="43.4163%" height="15" fill="rgb(242,102,42)" fg:x="33076" fg:w="27123"/><text x="53.1953%" y="543.50">yt_history::model::Models::find_video::{{closure}}</text></g><g><title>yt_history::model::WhereVideo::matches (7,488 samples, 11.99%)</title><rect x="84.3754%" y="517" width="11.9862%" height="15" fill="rgb(234,31,38)" fg:x="52711" fg:w="7488"/><text x="84.6254%" y="527.50">yt_history::model:..</text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Channel&gt; (3,474 samples, 5.56%)</title><rect x="90.8007%" y="501" width="5.5609%" height="15" fill="rgb(221,117,51)" fg:x="56725" fg:w="3474"/><text x="91.0507%" y="511.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3,474 samples, 5.56%)</title><rect x="90.8007%" y="485" width="5.5609%" height="15" fill="rgb(212,20,18)" fg:x="56725" fg:w="3474"/><text x="91.0507%" y="495.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,474 samples, 5.56%)</title><rect x="90.8007%" y="469" width="5.5609%" height="15" fill="rgb(245,133,36)" fg:x="56725" fg:w="3474"/><text x="91.0507%" y="479.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,474 samples, 5.56%)</title><rect x="90.8007%" y="453" width="5.5609%" height="15" fill="rgb(212,6,19)" fg:x="56725" fg:w="3474"/><text x="91.0507%" y="463.50">core::p..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,474 samples, 5.56%)</title><rect x="90.8007%" y="437" width="5.5609%" height="15" fill="rgb(218,1,36)" fg:x="56725" fg:w="3474"/><text x="91.0507%" y="447.50">&lt;alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (170 samples, 0.27%)</title><rect x="96.0894%" y="421" width="0.2721%" height="15" fill="rgb(246,84,54)" fg:x="60029" fg:w="170"/><text x="96.3394%" y="431.50"></text></g><g><title>yt_history::model::Models::insert_watched (27,263 samples, 43.64%)</title><rect x="52.7804%" y="581" width="43.6404%" height="15" fill="rgb(242,110,6)" fg:x="32973" fg:w="27263"/><text x="53.0304%" y="591.50">yt_history::model::Models::insert_watched</text></g><g><title>yt_history::model::Models::find_video (27,221 samples, 43.57%)</title><rect x="52.8477%" y="565" width="43.5731%" height="15" fill="rgb(214,47,5)" fg:x="33015" fg:w="27221"/><text x="53.0977%" y="575.50">yt_history::model::Models::find_video</text></g><g><title>yt_history::model::Models::insert_watched (37 samples, 0.06%)</title><rect x="96.3616%" y="549" width="0.0592%" height="15" fill="rgb(218,159,25)" fg:x="60199" fg:w="37"/><text x="96.6116%" y="559.50"></text></g><g><title>__rdl_alloc (7 samples, 0.01%)</title><rect x="96.4240%" y="341" width="0.0112%" height="15" fill="rgb(215,211,28)" fg:x="60238" fg:w="7"/><text x="96.6740%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.03%)</title><rect x="96.4224%" y="437" width="0.0256%" height="15" fill="rgb(238,59,32)" fg:x="60237" fg:w="16"/><text x="96.6724%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.03%)</title><rect x="96.4224%" y="421" width="0.0256%" height="15" fill="rgb(226,82,3)" fg:x="60237" fg:w="16"/><text x="96.6724%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.03%)</title><rect x="96.4224%" y="405" width="0.0256%" height="15" fill="rgb(240,164,32)" fg:x="60237" fg:w="16"/><text x="96.6724%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.03%)</title><rect x="96.4224%" y="389" width="0.0256%" height="15" fill="rgb(232,46,7)" fg:x="60237" fg:w="16"/><text x="96.6724%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.03%)</title><rect x="96.4224%" y="373" width="0.0256%" height="15" fill="rgb(229,129,53)" fg:x="60237" fg:w="16"/><text x="96.6724%" y="383.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.03%)</title><rect x="96.4224%" y="357" width="0.0256%" height="15" fill="rgb(234,188,29)" fg:x="60237" fg:w="16"/><text x="96.6724%" y="367.50"></text></g><g><title>malloc (7 samples, 0.01%)</title><rect x="96.4368%" y="341" width="0.0112%" height="15" fill="rgb(246,141,4)" fg:x="60246" fg:w="7"/><text x="96.6868%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (18 samples, 0.03%)</title><rect x="96.4224%" y="549" width="0.0288%" height="15" fill="rgb(229,23,39)" fg:x="60237" fg:w="18"/><text x="96.6724%" y="559.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (18 samples, 0.03%)</title><rect x="96.4224%" y="533" width="0.0288%" height="15" fill="rgb(206,12,3)" fg:x="60237" fg:w="18"/><text x="96.6724%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (18 samples, 0.03%)</title><rect x="96.4224%" y="517" width="0.0288%" height="15" fill="rgb(252,226,20)" fg:x="60237" fg:w="18"/><text x="96.6724%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (18 samples, 0.03%)</title><rect x="96.4224%" y="501" width="0.0288%" height="15" fill="rgb(216,123,35)" fg:x="60237" fg:w="18"/><text x="96.6724%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (18 samples, 0.03%)</title><rect x="96.4224%" y="485" width="0.0288%" height="15" fill="rgb(212,68,40)" fg:x="60237" fg:w="18"/><text x="96.6724%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (18 samples, 0.03%)</title><rect x="96.4224%" y="469" width="0.0288%" height="15" fill="rgb(254,125,32)" fg:x="60237" fg:w="18"/><text x="96.6724%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (18 samples, 0.03%)</title><rect x="96.4224%" y="453" width="0.0288%" height="15" fill="rgb(253,97,22)" fg:x="60237" fg:w="18"/><text x="96.6724%" y="463.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (19 samples, 0.03%)</title><rect x="96.4224%" y="565" width="0.0304%" height="15" fill="rgb(241,101,14)" fg:x="60237" fg:w="19"/><text x="96.6724%" y="575.50"></text></g><g><title>&lt;core::str::iter::MatchIndices&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.04%)</title><rect x="96.4768%" y="549" width="0.0352%" height="15" fill="rgb(238,103,29)" fg:x="60271" fg:w="22"/><text x="96.7268%" y="559.50"></text></g><g><title>core::str::iter::MatchIndicesInternal&lt;P&gt;::next (22 samples, 0.04%)</title><rect x="96.4768%" y="533" width="0.0352%" height="15" fill="rgb(233,195,47)" fg:x="60271" fg:w="22"/><text x="96.7268%" y="543.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (22 samples, 0.04%)</title><rect x="96.4768%" y="517" width="0.0352%" height="15" fill="rgb(246,218,30)" fg:x="60271" fg:w="22"/><text x="96.7268%" y="527.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (19 samples, 0.03%)</title><rect x="96.4816%" y="501" width="0.0304%" height="15" fill="rgb(219,145,47)" fg:x="60274" fg:w="19"/><text x="96.7316%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (17 samples, 0.03%)</title><rect x="96.5200%" y="421" width="0.0272%" height="15" fill="rgb(243,12,26)" fg:x="60298" fg:w="17"/><text x="96.7700%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (19 samples, 0.03%)</title><rect x="96.5200%" y="485" width="0.0304%" height="15" fill="rgb(214,87,16)" fg:x="60298" fg:w="19"/><text x="96.7700%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (19 samples, 0.03%)</title><rect x="96.5200%" y="469" width="0.0304%" height="15" fill="rgb(208,99,42)" fg:x="60298" fg:w="19"/><text x="96.7700%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (19 samples, 0.03%)</title><rect x="96.5200%" y="453" width="0.0304%" height="15" fill="rgb(253,99,2)" fg:x="60298" fg:w="19"/><text x="96.7700%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (19 samples, 0.03%)</title><rect x="96.5200%" y="437" width="0.0304%" height="15" fill="rgb(220,168,23)" fg:x="60298" fg:w="19"/><text x="96.7700%" y="447.50"></text></g><g><title>alloc::string::String::push_str (23 samples, 0.04%)</title><rect x="96.5168%" y="549" width="0.0368%" height="15" fill="rgb(242,38,24)" fg:x="60296" fg:w="23"/><text x="96.7668%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (23 samples, 0.04%)</title><rect x="96.5168%" y="533" width="0.0368%" height="15" fill="rgb(225,182,9)" fg:x="60296" fg:w="23"/><text x="96.7668%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (23 samples, 0.04%)</title><rect x="96.5168%" y="517" width="0.0368%" height="15" fill="rgb(243,178,37)" fg:x="60296" fg:w="23"/><text x="96.7668%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (23 samples, 0.04%)</title><rect x="96.5168%" y="501" width="0.0368%" height="15" fill="rgb(232,139,19)" fg:x="60296" fg:w="23"/><text x="96.7668%" y="511.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::replace (79 samples, 0.13%)</title><rect x="96.4576%" y="565" width="0.1265%" height="15" fill="rgb(225,201,24)" fg:x="60259" fg:w="79"/><text x="96.7076%" y="575.50"></text></g><g><title>core::str::&lt;impl str&gt;::match_indices (17 samples, 0.03%)</title><rect x="96.5569%" y="549" width="0.0272%" height="15" fill="rgb(221,47,46)" fg:x="60321" fg:w="17"/><text x="96.8069%" y="559.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (17 samples, 0.03%)</title><rect x="96.5569%" y="533" width="0.0272%" height="15" fill="rgb(249,23,13)" fg:x="60321" fg:w="17"/><text x="96.8069%" y="543.50"></text></g><g><title>core::str::pattern::StrSearcher::new (17 samples, 0.03%)</title><rect x="96.5569%" y="517" width="0.0272%" height="15" fill="rgb(219,9,5)" fg:x="60321" fg:w="17"/><text x="96.8069%" y="527.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (31 samples, 0.05%)</title><rect x="96.6993%" y="501" width="0.0496%" height="15" fill="rgb(254,171,16)" fg:x="60410" fg:w="31"/><text x="96.9493%" y="511.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::pos (8 samples, 0.01%)</title><rect x="96.9762%" y="469" width="0.0128%" height="15" fill="rgb(230,171,20)" fg:x="60583" fg:w="8"/><text x="97.2262%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (205 samples, 0.33%)</title><rect x="96.6817%" y="517" width="0.3281%" height="15" fill="rgb(210,71,41)" fg:x="60399" fg:w="205"/><text x="96.9317%" y="527.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (163 samples, 0.26%)</title><rect x="96.7489%" y="501" width="0.2609%" height="15" fill="rgb(206,173,20)" fg:x="60441" fg:w="163"/><text x="96.9989%" y="511.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (66 samples, 0.11%)</title><rect x="96.9042%" y="485" width="0.1056%" height="15" fill="rgb(233,88,34)" fg:x="60538" fg:w="66"/><text x="97.1542%" y="495.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (13 samples, 0.02%)</title><rect x="96.9891%" y="469" width="0.0208%" height="15" fill="rgb(223,209,46)" fg:x="60591" fg:w="13"/><text x="97.2391%" y="479.50"></text></g><g><title>core::cmp::min (10 samples, 0.02%)</title><rect x="96.9939%" y="453" width="0.0160%" height="15" fill="rgb(250,43,18)" fg:x="60594" fg:w="10"/><text x="97.2439%" y="463.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (10 samples, 0.02%)</title><rect x="96.9939%" y="437" width="0.0160%" height="15" fill="rgb(208,13,10)" fg:x="60594" fg:w="10"/><text x="97.2439%" y="447.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (211 samples, 0.34%)</title><rect x="96.6785%" y="549" width="0.3378%" height="15" fill="rgb(212,200,36)" fg:x="60397" fg:w="211"/><text x="96.9285%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (211 samples, 0.34%)</title><rect x="96.6785%" y="533" width="0.3378%" height="15" fill="rgb(225,90,30)" fg:x="60397" fg:w="211"/><text x="96.9285%" y="543.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (10 samples, 0.02%)</title><rect x="97.0163%" y="549" width="0.0160%" height="15" fill="rgb(236,182,39)" fg:x="60608" fg:w="10"/><text x="97.2663%" y="559.50"></text></g><g><title>&lt;core::str::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::nth (9 samples, 0.01%)</title><rect x="97.0323%" y="549" width="0.0144%" height="15" fill="rgb(212,144,35)" fg:x="60618" fg:w="9"/><text x="97.2823%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::nth (9 samples, 0.01%)</title><rect x="97.0323%" y="533" width="0.0144%" height="15" fill="rgb(228,63,44)" fg:x="60618" fg:w="9"/><text x="97.2823%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::nth (9 samples, 0.01%)</title><rect x="97.0323%" y="517" width="0.0144%" height="15" fill="rgb(228,109,6)" fg:x="60618" fg:w="9"/><text x="97.2823%" y="527.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (9 samples, 0.01%)</title><rect x="97.0739%" y="485" width="0.0144%" height="15" fill="rgb(238,117,24)" fg:x="60644" fg:w="9"/><text x="97.3239%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (54 samples, 0.09%)</title><rect x="97.0931%" y="469" width="0.0864%" height="15" fill="rgb(242,26,26)" fg:x="60656" fg:w="54"/><text x="97.3431%" y="479.50"></text></g><g><title>alloc::alloc::Global::grow_impl (54 samples, 0.09%)</title><rect x="97.0931%" y="453" width="0.0864%" height="15" fill="rgb(221,92,48)" fg:x="60656" fg:w="54"/><text x="97.3431%" y="463.50"></text></g><g><title>alloc::alloc::realloc (54 samples, 0.09%)</title><rect x="97.0931%" y="437" width="0.0864%" height="15" fill="rgb(209,209,32)" fg:x="60656" fg:w="54"/><text x="97.3431%" y="447.50"></text></g><g><title>realloc (51 samples, 0.08%)</title><rect x="97.0979%" y="421" width="0.0816%" height="15" fill="rgb(221,70,22)" fg:x="60659" fg:w="51"/><text x="97.3479%" y="431.50"></text></g><g><title>[libc.so.6] (41 samples, 0.07%)</title><rect x="97.1139%" y="405" width="0.0656%" height="15" fill="rgb(248,145,5)" fg:x="60669" fg:w="41"/><text x="97.3639%" y="415.50"></text></g><g><title>[libc.so.6] (26 samples, 0.04%)</title><rect x="97.1379%" y="389" width="0.0416%" height="15" fill="rgb(226,116,26)" fg:x="60684" fg:w="26"/><text x="97.3879%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (65 samples, 0.10%)</title><rect x="97.0899%" y="485" width="0.1040%" height="15" fill="rgb(244,5,17)" fg:x="60654" fg:w="65"/><text x="97.3399%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (82 samples, 0.13%)</title><rect x="97.0659%" y="517" width="0.1313%" height="15" fill="rgb(252,159,33)" fg:x="60639" fg:w="82"/><text x="97.3159%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (82 samples, 0.13%)</title><rect x="97.0659%" y="501" width="0.1313%" height="15" fill="rgb(206,71,0)" fg:x="60639" fg:w="82"/><text x="97.3159%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (99 samples, 0.16%)</title><rect x="97.0499%" y="533" width="0.1585%" height="15" fill="rgb(233,118,54)" fg:x="60629" fg:w="99"/><text x="97.2999%" y="543.50"></text></g><g><title>core::ptr::write (7 samples, 0.01%)</title><rect x="97.1971%" y="517" width="0.0112%" height="15" fill="rgb(234,83,48)" fg:x="60721" fg:w="7"/><text x="97.4471%" y="527.50"></text></g><g><title>alloc::string::String::push (102 samples, 0.16%)</title><rect x="97.0467%" y="549" width="0.1633%" height="15" fill="rgb(228,3,54)" fg:x="60627" fg:w="102"/><text x="97.2967%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (11 samples, 0.02%)</title><rect x="97.2100%" y="549" width="0.0176%" height="15" fill="rgb(226,155,13)" fg:x="60729" fg:w="11"/><text x="97.4600%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (11 samples, 0.02%)</title><rect x="97.2100%" y="533" width="0.0176%" height="15" fill="rgb(241,28,37)" fg:x="60729" fg:w="11"/><text x="97.4600%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (11 samples, 0.02%)</title><rect x="97.2100%" y="517" width="0.0176%" height="15" fill="rgb(233,93,10)" fg:x="60729" fg:w="11"/><text x="97.4600%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="97.2100%" y="501" width="0.0176%" height="15" fill="rgb(225,113,19)" fg:x="60729" fg:w="11"/><text x="97.4600%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.02%)</title><rect x="97.2100%" y="485" width="0.0176%" height="15" fill="rgb(241,2,18)" fg:x="60729" fg:w="11"/><text x="97.4600%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.02%)</title><rect x="97.2100%" y="469" width="0.0176%" height="15" fill="rgb(228,207,21)" fg:x="60729" fg:w="11"/><text x="97.4600%" y="479.50"></text></g><g><title>cfree (8 samples, 0.01%)</title><rect x="97.2148%" y="453" width="0.0128%" height="15" fill="rgb(213,211,35)" fg:x="60732" fg:w="8"/><text x="97.4648%" y="463.50"></text></g><g><title>yt_history::iter_index (23 samples, 0.04%)</title><rect x="97.2276%" y="549" width="0.0368%" height="15" fill="rgb(209,83,10)" fg:x="60740" fg:w="23"/><text x="97.4776%" y="559.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (23 samples, 0.04%)</title><rect x="97.2276%" y="533" width="0.0368%" height="15" fill="rgb(209,164,1)" fg:x="60740" fg:w="23"/><text x="97.4776%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (23 samples, 0.04%)</title><rect x="97.2276%" y="517" width="0.0368%" height="15" fill="rgb(213,184,43)" fg:x="60740" fg:w="23"/><text x="97.4776%" y="527.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (16 samples, 0.03%)</title><rect x="97.2388%" y="501" width="0.0256%" height="15" fill="rgb(231,61,34)" fg:x="60747" fg:w="16"/><text x="97.4888%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.03%)</title><rect x="97.2388%" y="485" width="0.0256%" height="15" fill="rgb(235,75,3)" fg:x="60747" fg:w="16"/><text x="97.4888%" y="495.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.02%)</title><rect x="97.2484%" y="469" width="0.0160%" height="15" fill="rgb(220,106,47)" fg:x="60753" fg:w="10"/><text x="97.4984%" y="479.50"></text></g><g><title>yt_history::read_until (420 samples, 0.67%)</title><rect x="96.5953%" y="565" width="0.6723%" height="15" fill="rgb(210,196,33)" fg:x="60345" fg:w="420"/><text x="96.8453%" y="575.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (304 samples, 0.49%)</title><rect x="97.6806%" y="501" width="0.4866%" height="15" fill="rgb(229,154,42)" fg:x="61023" fg:w="304"/><text x="97.9306%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (12 samples, 0.02%)</title><rect x="99.2637%" y="469" width="0.0192%" height="15" fill="rgb(228,114,26)" fg:x="62012" fg:w="12"/><text x="99.5137%" y="479.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (50 samples, 0.08%)</title><rect x="99.2829%" y="469" width="0.0800%" height="15" fill="rgb(208,144,1)" fg:x="62024" fg:w="50"/><text x="99.5329%" y="479.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (50 samples, 0.08%)</title><rect x="99.2829%" y="453" width="0.0800%" height="15" fill="rgb(239,112,37)" fg:x="62024" fg:w="50"/><text x="99.5329%" y="463.50"></text></g><g><title>core::cmp::min (32 samples, 0.05%)</title><rect x="99.3117%" y="437" width="0.0512%" height="15" fill="rgb(210,96,50)" fg:x="62042" fg:w="32"/><text x="99.5617%" y="447.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (32 samples, 0.05%)</title><rect x="99.3117%" y="421" width="0.0512%" height="15" fill="rgb(222,178,2)" fg:x="62042" fg:w="32"/><text x="99.5617%" y="431.50"></text></g><g><title>read (71 samples, 0.11%)</title><rect x="99.3677%" y="373" width="0.1137%" height="15" fill="rgb(226,74,18)" fg:x="62077" fg:w="71"/><text x="99.6177%" y="383.50"></text></g><g><title>[[kernel.kallsyms]] (67 samples, 0.11%)</title><rect x="99.3741%" y="357" width="0.1072%" height="15" fill="rgb(225,67,54)" fg:x="62081" fg:w="67"/><text x="99.6241%" y="367.50"></text></g><g><title>[[kernel.kallsyms]] (66 samples, 0.11%)</title><rect x="99.3757%" y="341" width="0.1056%" height="15" fill="rgb(251,92,32)" fg:x="62082" fg:w="66"/><text x="99.6257%" y="351.50"></text></g><g><title>[[kernel.kallsyms]] (65 samples, 0.10%)</title><rect x="99.3773%" y="325" width="0.1040%" height="15" fill="rgb(228,149,22)" fg:x="62083" fg:w="65"/><text x="99.6273%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (63 samples, 0.10%)</title><rect x="99.3805%" y="309" width="0.1008%" height="15" fill="rgb(243,54,13)" fg:x="62085" fg:w="63"/><text x="99.6305%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (58 samples, 0.09%)</title><rect x="99.3885%" y="293" width="0.0928%" height="15" fill="rgb(243,180,28)" fg:x="62090" fg:w="58"/><text x="99.6385%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (50 samples, 0.08%)</title><rect x="99.4013%" y="277" width="0.0800%" height="15" fill="rgb(208,167,24)" fg:x="62098" fg:w="50"/><text x="99.6513%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (45 samples, 0.07%)</title><rect x="99.4093%" y="261" width="0.0720%" height="15" fill="rgb(245,73,45)" fg:x="62103" fg:w="45"/><text x="99.6593%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (40 samples, 0.06%)</title><rect x="99.4173%" y="245" width="0.0640%" height="15" fill="rgb(237,203,48)" fg:x="62108" fg:w="40"/><text x="99.6673%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (32 samples, 0.05%)</title><rect x="99.4301%" y="229" width="0.0512%" height="15" fill="rgb(211,197,16)" fg:x="62116" fg:w="32"/><text x="99.6801%" y="239.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (79 samples, 0.13%)</title><rect x="99.3629%" y="469" width="0.1265%" height="15" fill="rgb(243,99,51)" fg:x="62074" fg:w="79"/><text x="99.6129%" y="479.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (79 samples, 0.13%)</title><rect x="99.3629%" y="453" width="0.1265%" height="15" fill="rgb(215,123,29)" fg:x="62074" fg:w="79"/><text x="99.6129%" y="463.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (76 samples, 0.12%)</title><rect x="99.3677%" y="437" width="0.1217%" height="15" fill="rgb(239,186,37)" fg:x="62077" fg:w="76"/><text x="99.6177%" y="447.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (76 samples, 0.12%)</title><rect x="99.3677%" y="421" width="0.1217%" height="15" fill="rgb(252,136,39)" fg:x="62077" fg:w="76"/><text x="99.6177%" y="431.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (76 samples, 0.12%)</title><rect x="99.3677%" y="405" width="0.1217%" height="15" fill="rgb(223,213,32)" fg:x="62077" fg:w="76"/><text x="99.6177%" y="415.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (76 samples, 0.12%)</title><rect x="99.3677%" y="389" width="0.1217%" height="15" fill="rgb(233,115,5)" fg:x="62077" fg:w="76"/><text x="99.6177%" y="399.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (7 samples, 0.01%)</title><rect x="99.4894%" y="469" width="0.0112%" height="15" fill="rgb(207,226,44)" fg:x="62153" fg:w="7"/><text x="99.7394%" y="479.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::filled (57 samples, 0.09%)</title><rect x="99.5006%" y="469" width="0.0912%" height="15" fill="rgb(208,126,0)" fg:x="62160" fg:w="57"/><text x="99.7506%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,400 samples, 2.24%)</title><rect x="97.5621%" y="517" width="2.2410%" height="15" fill="rgb(244,66,21)" fg:x="60949" fg:w="1400"/><text x="97.8121%" y="527.50">&lt;..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,022 samples, 1.64%)</title><rect x="98.1672%" y="501" width="1.6359%" height="15" fill="rgb(222,97,12)" fg:x="61327" fg:w="1022"/><text x="98.4172%" y="511.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (528 samples, 0.85%)</title><rect x="98.9579%" y="485" width="0.8452%" height="15" fill="rgb(219,213,19)" fg:x="61821" fg:w="528"/><text x="99.2079%" y="495.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (128 samples, 0.20%)</title><rect x="99.5982%" y="469" width="0.2049%" height="15" fill="rgb(252,169,30)" fg:x="62221" fg:w="128"/><text x="99.8482%" y="479.50"></text></g><g><title>core::cmp::min (49 samples, 0.08%)</title><rect x="99.7247%" y="453" width="0.0784%" height="15" fill="rgb(206,32,51)" fg:x="62300" fg:w="49"/><text x="99.9747%" y="463.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (49 samples, 0.08%)</title><rect x="99.7247%" y="437" width="0.0784%" height="15" fill="rgb(250,172,42)" fg:x="62300" fg:w="49"/><text x="99.9747%" y="447.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (1,407 samples, 2.25%)</title><rect x="97.5525%" y="549" width="2.2522%" height="15" fill="rgb(209,34,43)" fg:x="60943" fg:w="1407"/><text x="97.8025%" y="559.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,407 samples, 2.25%)</title><rect x="97.5525%" y="533" width="2.2522%" height="15" fill="rgb(223,11,35)" fg:x="60943" fg:w="1407"/><text x="97.8025%" y="543.50">&lt;..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (66 samples, 0.11%)</title><rect x="99.8047%" y="549" width="0.1056%" height="15" fill="rgb(251,219,26)" fg:x="62350" fg:w="66"/><text x="100.0547%" y="559.50"></text></g><g><title>&lt;core::str::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::nth (9 samples, 0.01%)</title><rect x="99.9104%" y="549" width="0.0144%" height="15" fill="rgb(231,119,3)" fg:x="62416" fg:w="9"/><text x="100.1604%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::nth (9 samples, 0.01%)</title><rect x="99.9104%" y="533" width="0.0144%" height="15" fill="rgb(216,97,11)" fg:x="62416" fg:w="9"/><text x="100.1604%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::nth (9 samples, 0.01%)</title><rect x="99.9104%" y="517" width="0.0144%" height="15" fill="rgb(223,59,9)" fg:x="62416" fg:w="9"/><text x="100.1604%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (11 samples, 0.02%)</title><rect x="99.9248%" y="549" width="0.0176%" height="15" fill="rgb(233,93,31)" fg:x="62425" fg:w="11"/><text x="100.1748%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (11 samples, 0.02%)</title><rect x="99.9248%" y="533" width="0.0176%" height="15" fill="rgb(239,81,33)" fg:x="62425" fg:w="11"/><text x="100.1748%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (11 samples, 0.02%)</title><rect x="99.9248%" y="517" width="0.0176%" height="15" fill="rgb(213,120,34)" fg:x="62425" fg:w="11"/><text x="100.1748%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="99.9248%" y="501" width="0.0176%" height="15" fill="rgb(243,49,53)" fg:x="62425" fg:w="11"/><text x="100.1748%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.01%)</title><rect x="99.9280%" y="485" width="0.0144%" height="15" fill="rgb(247,216,33)" fg:x="62427" fg:w="9"/><text x="100.1780%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.01%)</title><rect x="99.9280%" y="469" width="0.0144%" height="15" fill="rgb(226,26,14)" fg:x="62427" fg:w="9"/><text x="100.1780%" y="479.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (10 samples, 0.02%)</title><rect x="99.9600%" y="469" width="0.0160%" height="15" fill="rgb(215,49,53)" fg:x="62447" fg:w="10"/><text x="100.2100%" y="479.50"></text></g><g><title>std::panic::catch_unwind (62,441 samples, 99.95%)</title><rect x="0.0480%" y="725" width="99.9504%" height="15" fill="rgb(245,162,40)" fg:x="30" fg:w="62441"/><text x="0.2980%" y="735.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (62,441 samples, 99.95%)</title><rect x="0.0480%" y="709" width="99.9504%" height="15" fill="rgb(229,68,17)" fg:x="30" fg:w="62441"/><text x="0.2980%" y="719.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (62,441 samples, 99.95%)</title><rect x="0.0480%" y="693" width="99.9504%" height="15" fill="rgb(213,182,10)" fg:x="30" fg:w="62441"/><text x="0.2980%" y="703.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (62,441 samples, 99.95%)</title><rect x="0.0480%" y="677" width="99.9504%" height="15" fill="rgb(245,125,30)" fg:x="30" fg:w="62441"/><text x="0.2980%" y="687.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (62,441 samples, 99.95%)</title><rect x="0.0480%" y="661" width="99.9504%" height="15" fill="rgb(232,202,2)" fg:x="30" fg:w="62441"/><text x="0.2980%" y="671.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (62,441 samples, 99.95%)</title><rect x="0.0480%" y="645" width="99.9504%" height="15" fill="rgb(237,140,51)" fg:x="30" fg:w="62441"/><text x="0.2980%" y="655.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (62,441 samples, 99.95%)</title><rect x="0.0480%" y="629" width="99.9504%" height="15" fill="rgb(236,157,25)" fg:x="30" fg:w="62441"/><text x="0.2980%" y="639.50">core::ops::function::FnOnce::call_once</text></g><g><title>yt_history::main (62,441 samples, 99.95%)</title><rect x="0.0480%" y="613" width="99.9504%" height="15" fill="rgb(219,209,0)" fg:x="30" fg:w="62441"/><text x="0.2980%" y="623.50">yt_history::main</text></g><g><title>yt_history::parse (60,801 samples, 97.33%)</title><rect x="2.6732%" y="597" width="97.3252%" height="15" fill="rgb(240,116,54)" fg:x="1670" fg:w="60801"/><text x="2.9232%" y="607.50">yt_history::parse</text></g><g><title>yt_history::read_data_row (2,235 samples, 3.58%)</title><rect x="96.4208%" y="581" width="3.5776%" height="15" fill="rgb(216,10,36)" fg:x="60236" fg:w="2235"/><text x="96.6708%" y="591.50">yt_h..</text></g><g><title>yt_history::skip_to (1,706 samples, 2.73%)</title><rect x="97.2676%" y="565" width="2.7308%" height="15" fill="rgb(222,72,44)" fg:x="60765" fg:w="1706"/><text x="97.5176%" y="575.50">yt..</text></g><g><title>yt_history::iter_index (35 samples, 0.06%)</title><rect x="99.9424%" y="549" width="0.0560%" height="15" fill="rgb(232,159,9)" fg:x="62436" fg:w="35"/><text x="100.1924%" y="559.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (32 samples, 0.05%)</title><rect x="99.9472%" y="533" width="0.0512%" height="15" fill="rgb(210,39,32)" fg:x="62439" fg:w="32"/><text x="100.1972%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (32 samples, 0.05%)</title><rect x="99.9472%" y="517" width="0.0512%" height="15" fill="rgb(216,194,45)" fg:x="62439" fg:w="32"/><text x="100.1972%" y="527.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (24 samples, 0.04%)</title><rect x="99.9600%" y="501" width="0.0384%" height="15" fill="rgb(218,18,35)" fg:x="62447" fg:w="24"/><text x="100.2100%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.04%)</title><rect x="99.9600%" y="485" width="0.0384%" height="15" fill="rgb(207,83,51)" fg:x="62447" fg:w="24"/><text x="100.2100%" y="495.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.02%)</title><rect x="99.9760%" y="469" width="0.0224%" height="15" fill="rgb(225,63,43)" fg:x="62457" fg:w="14"/><text x="100.2260%" y="479.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (7 samples, 0.01%)</title><rect x="99.9872%" y="453" width="0.0112%" height="15" fill="rgb(207,57,36)" fg:x="62464" fg:w="7"/><text x="100.2372%" y="463.50"></text></g><g><title>all (62,472 samples, 100%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(216,99,33)" fg:x="0" fg:w="62472"/><text x="0.2500%" y="911.50"></text></g><g><title>yt-history (62,458 samples, 99.98%)</title><rect x="0.0224%" y="885" width="99.9776%" height="15" fill="rgb(225,42,16)" fg:x="14" fg:w="62458"/><text x="0.2724%" y="895.50">yt-history</text></g><g><title>_start (62,442 samples, 99.95%)</title><rect x="0.0480%" y="869" width="99.9520%" height="15" fill="rgb(220,201,45)" fg:x="30" fg:w="62442"/><text x="0.2980%" y="879.50">_start</text></g><g><title>__libc_start_main (62,442 samples, 99.95%)</title><rect x="0.0480%" y="853" width="99.9520%" height="15" fill="rgb(225,33,4)" fg:x="30" fg:w="62442"/><text x="0.2980%" y="863.50">__libc_start_main</text></g><g><title>[libc.so.6] (62,442 samples, 99.95%)</title><rect x="0.0480%" y="837" width="99.9520%" height="15" fill="rgb(224,33,50)" fg:x="30" fg:w="62442"/><text x="0.2980%" y="847.50">[libc.so.6]</text></g><g><title>main (62,442 samples, 99.95%)</title><rect x="0.0480%" y="821" width="99.9520%" height="15" fill="rgb(246,198,51)" fg:x="30" fg:w="62442"/><text x="0.2980%" y="831.50">main</text></g><g><title>std::rt::lang_start_internal (62,442 samples, 99.95%)</title><rect x="0.0480%" y="805" width="99.9520%" height="15" fill="rgb(205,22,4)" fg:x="30" fg:w="62442"/><text x="0.2980%" y="815.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (62,442 samples, 99.95%)</title><rect x="0.0480%" y="789" width="99.9520%" height="15" fill="rgb(206,3,8)" fg:x="30" fg:w="62442"/><text x="0.2980%" y="799.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (62,442 samples, 99.95%)</title><rect x="0.0480%" y="773" width="99.9520%" height="15" fill="rgb(251,23,15)" fg:x="30" fg:w="62442"/><text x="0.2980%" y="783.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (62,442 samples, 99.95%)</title><rect x="0.0480%" y="757" width="99.9520%" height="15" fill="rgb(252,88,28)" fg:x="30" fg:w="62442"/><text x="0.2980%" y="767.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (62,442 samples, 99.95%)</title><rect x="0.0480%" y="741" width="99.9520%" height="15" fill="rgb(212,127,14)" fg:x="30" fg:w="62442"/><text x="0.2980%" y="751.50">std::rt::lang_start_internal::{{closure}}</text></g></svg></svg>