<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1334" onload="init(evt)" viewBox="0 0 1200 1334" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1334" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1317.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1317.00"> </text><svg id="frames" x="10" width="1180" total_samples="35803"><g><title>[libc.so.6] (5 samples, 0.01%)</title><rect x="0.0028%" y="1237" width="0.0140%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="5"/><text x="0.2528%" y="1247.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="0.0028%" y="1221" width="0.0140%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="5"/><text x="0.2528%" y="1231.50"></text></g><g><title>[[stack]] (6 samples, 0.02%)</title><rect x="0.0028%" y="1253" width="0.0168%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="6"/><text x="0.2528%" y="1263.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.02%)</title><rect x="0.0419%" y="1189" width="0.0168%" height="15" fill="rgb(248,212,6)" fg:x="15" fg:w="6"/><text x="0.2919%" y="1199.50"></text></g><g><title>[ld-linux-x86-64.so.2] (14 samples, 0.04%)</title><rect x="0.0279%" y="1205" width="0.0391%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="14"/><text x="0.2779%" y="1215.50"></text></g><g><title>[ld-linux-x86-64.so.2] (17 samples, 0.05%)</title><rect x="0.0223%" y="1221" width="0.0475%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="17"/><text x="0.2723%" y="1231.50"></text></g><g><title>[ld-linux-x86-64.so.2] (21 samples, 0.06%)</title><rect x="0.0196%" y="1237" width="0.0587%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="21"/><text x="0.2696%" y="1247.50"></text></g><g><title>[ld-linux-x86-64.so.2] (23 samples, 0.06%)</title><rect x="0.0196%" y="1253" width="0.0642%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="23"/><text x="0.2696%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.0838%" y="1253" width="0.0112%" height="15" fill="rgb(218,30,26)" fg:x="30" fg:w="4"/><text x="0.3338%" y="1263.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.03%)</title><rect x="0.1229%" y="741" width="0.0279%" height="15" fill="rgb(220,122,19)" fg:x="44" fg:w="10"/><text x="0.3729%" y="751.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.03%)</title><rect x="0.1229%" y="725" width="0.0279%" height="15" fill="rgb(250,228,42)" fg:x="44" fg:w="10"/><text x="0.3729%" y="735.50"></text></g><g><title>cfree (10 samples, 0.03%)</title><rect x="0.1229%" y="709" width="0.0279%" height="15" fill="rgb(240,193,28)" fg:x="44" fg:w="10"/><text x="0.3729%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Channel&gt;&gt; (12 samples, 0.03%)</title><rect x="0.1201%" y="853" width="0.0335%" height="15" fill="rgb(216,20,37)" fg:x="43" fg:w="12"/><text x="0.3701%" y="863.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.03%)</title><rect x="0.1201%" y="837" width="0.0335%" height="15" fill="rgb(206,188,39)" fg:x="43" fg:w="12"/><text x="0.3701%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Channel&gt; (11 samples, 0.03%)</title><rect x="0.1229%" y="821" width="0.0307%" height="15" fill="rgb(217,207,13)" fg:x="44" fg:w="11"/><text x="0.3729%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (11 samples, 0.03%)</title><rect x="0.1229%" y="805" width="0.0307%" height="15" fill="rgb(231,73,38)" fg:x="44" fg:w="11"/><text x="0.3729%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (11 samples, 0.03%)</title><rect x="0.1229%" y="789" width="0.0307%" height="15" fill="rgb(225,20,46)" fg:x="44" fg:w="11"/><text x="0.3729%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (11 samples, 0.03%)</title><rect x="0.1229%" y="773" width="0.0307%" height="15" fill="rgb(210,31,41)" fg:x="44" fg:w="11"/><text x="0.3729%" y="783.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.03%)</title><rect x="0.1229%" y="757" width="0.0307%" height="15" fill="rgb(221,200,47)" fg:x="44" fg:w="11"/><text x="0.3729%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (60 samples, 0.17%)</title><rect x="0.1536%" y="789" width="0.1676%" height="15" fill="rgb(226,26,5)" fg:x="55" fg:w="60"/><text x="0.4036%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (60 samples, 0.17%)</title><rect x="0.1536%" y="773" width="0.1676%" height="15" fill="rgb(249,33,26)" fg:x="55" fg:w="60"/><text x="0.4036%" y="783.50"></text></g><g><title>cfree (58 samples, 0.16%)</title><rect x="0.1592%" y="757" width="0.1620%" height="15" fill="rgb(235,183,28)" fg:x="57" fg:w="58"/><text x="0.4092%" y="767.50"></text></g><g><title>[libc.so.6] (23 samples, 0.06%)</title><rect x="0.2570%" y="741" width="0.0642%" height="15" fill="rgb(221,5,38)" fg:x="92" fg:w="23"/><text x="0.5070%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Video&gt;&gt; (82 samples, 0.23%)</title><rect x="0.0950%" y="901" width="0.2290%" height="15" fill="rgb(247,18,42)" fg:x="34" fg:w="82"/><text x="0.3450%" y="911.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.23%)</title><rect x="0.0950%" y="885" width="0.2290%" height="15" fill="rgb(241,131,45)" fg:x="34" fg:w="82"/><text x="0.3450%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Video&gt; (73 samples, 0.20%)</title><rect x="0.1201%" y="869" width="0.2039%" height="15" fill="rgb(249,31,29)" fg:x="43" fg:w="73"/><text x="0.3701%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (61 samples, 0.17%)</title><rect x="0.1536%" y="853" width="0.1704%" height="15" fill="rgb(225,111,53)" fg:x="55" fg:w="61"/><text x="0.4036%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (61 samples, 0.17%)</title><rect x="0.1536%" y="837" width="0.1704%" height="15" fill="rgb(238,160,17)" fg:x="55" fg:w="61"/><text x="0.4036%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (61 samples, 0.17%)</title><rect x="0.1536%" y="821" width="0.1704%" height="15" fill="rgb(214,148,48)" fg:x="55" fg:w="61"/><text x="0.4036%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (61 samples, 0.17%)</title><rect x="0.1536%" y="805" width="0.1704%" height="15" fill="rgb(232,36,49)" fg:x="55" fg:w="61"/><text x="0.4036%" y="815.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (143 samples, 0.40%)</title><rect x="0.0950%" y="981" width="0.3994%" height="15" fill="rgb(209,103,24)" fg:x="34" fg:w="143"/><text x="0.3450%" y="991.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (143 samples, 0.40%)</title><rect x="0.0950%" y="965" width="0.3994%" height="15" fill="rgb(229,88,8)" fg:x="34" fg:w="143"/><text x="0.3450%" y="975.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (143 samples, 0.40%)</title><rect x="0.0950%" y="949" width="0.3994%" height="15" fill="rgb(213,181,19)" fg:x="34" fg:w="143"/><text x="0.3450%" y="959.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (143 samples, 0.40%)</title><rect x="0.0950%" y="933" width="0.3994%" height="15" fill="rgb(254,191,54)" fg:x="34" fg:w="143"/><text x="0.3450%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::rc::Rc&lt;yt_history::model::Video&gt;)&gt; (143 samples, 0.40%)</title><rect x="0.0950%" y="917" width="0.3994%" height="15" fill="rgb(241,83,37)" fg:x="34" fg:w="143"/><text x="0.3450%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (61 samples, 0.17%)</title><rect x="0.3240%" y="901" width="0.1704%" height="15" fill="rgb(233,36,39)" fg:x="116" fg:w="61"/><text x="0.5740%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (61 samples, 0.17%)</title><rect x="0.3240%" y="885" width="0.1704%" height="15" fill="rgb(226,3,54)" fg:x="116" fg:w="61"/><text x="0.5740%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (61 samples, 0.17%)</title><rect x="0.3240%" y="869" width="0.1704%" height="15" fill="rgb(245,192,40)" fg:x="116" fg:w="61"/><text x="0.5740%" y="879.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (61 samples, 0.17%)</title><rect x="0.3240%" y="853" width="0.1704%" height="15" fill="rgb(238,167,29)" fg:x="116" fg:w="61"/><text x="0.5740%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (61 samples, 0.17%)</title><rect x="0.3240%" y="837" width="0.1704%" height="15" fill="rgb(232,182,51)" fg:x="116" fg:w="61"/><text x="0.5740%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (61 samples, 0.17%)</title><rect x="0.3240%" y="821" width="0.1704%" height="15" fill="rgb(231,60,39)" fg:x="116" fg:w="61"/><text x="0.5740%" y="831.50"></text></g><g><title>cfree (61 samples, 0.17%)</title><rect x="0.3240%" y="805" width="0.1704%" height="15" fill="rgb(208,69,12)" fg:x="116" fg:w="61"/><text x="0.5740%" y="815.50"></text></g><g><title>[libc.so.6] (8 samples, 0.02%)</title><rect x="0.4720%" y="789" width="0.0223%" height="15" fill="rgb(235,93,37)" fg:x="169" fg:w="8"/><text x="0.7220%" y="799.50"></text></g><g><title>core::slice::sort::merge (8 samples, 0.02%)</title><rect x="0.4944%" y="933" width="0.0223%" height="15" fill="rgb(213,116,39)" fg:x="177" fg:w="8"/><text x="0.7444%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (9 samples, 0.03%)</title><rect x="0.4944%" y="981" width="0.0251%" height="15" fill="rgb(222,207,29)" fg:x="177" fg:w="9"/><text x="0.7444%" y="991.50"></text></g><g><title>alloc::slice::stable_sort (9 samples, 0.03%)</title><rect x="0.4944%" y="965" width="0.0251%" height="15" fill="rgb(206,96,30)" fg:x="177" fg:w="9"/><text x="0.7444%" y="975.50"></text></g><g><title>core::slice::sort::merge_sort (9 samples, 0.03%)</title><rect x="0.4944%" y="949" width="0.0251%" height="15" fill="rgb(218,138,4)" fg:x="177" fg:w="9"/><text x="0.7444%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;)&gt; (24 samples, 0.07%)</title><rect x="0.5251%" y="853" width="0.0670%" height="15" fill="rgb(250,191,14)" fg:x="188" fg:w="24"/><text x="0.7751%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Video&gt;&gt; (24 samples, 0.07%)</title><rect x="0.5251%" y="837" width="0.0670%" height="15" fill="rgb(239,60,40)" fg:x="188" fg:w="24"/><text x="0.7751%" y="847.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.07%)</title><rect x="0.5251%" y="821" width="0.0670%" height="15" fill="rgb(206,27,48)" fg:x="188" fg:w="24"/><text x="0.7751%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.08%)</title><rect x="0.5251%" y="933" width="0.0754%" height="15" fill="rgb(225,35,8)" fg:x="188" fg:w="27"/><text x="0.7751%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (27 samples, 0.08%)</title><rect x="0.5251%" y="917" width="0.0754%" height="15" fill="rgb(250,213,24)" fg:x="188" fg:w="27"/><text x="0.7751%" y="927.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (27 samples, 0.08%)</title><rect x="0.5251%" y="901" width="0.0754%" height="15" fill="rgb(247,123,22)" fg:x="188" fg:w="27"/><text x="0.7751%" y="911.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (27 samples, 0.08%)</title><rect x="0.5251%" y="885" width="0.0754%" height="15" fill="rgb(231,138,38)" fg:x="188" fg:w="27"/><text x="0.7751%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;))&gt; (27 samples, 0.08%)</title><rect x="0.5251%" y="869" width="0.0754%" height="15" fill="rgb(231,145,46)" fg:x="188" fg:w="27"/><text x="0.7751%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;)&gt;&gt; (39 samples, 0.11%)</title><rect x="0.5251%" y="981" width="0.1089%" height="15" fill="rgb(251,118,11)" fg:x="188" fg:w="39"/><text x="0.7751%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;),std::collections::hash::map::RandomState&gt;&gt; (39 samples, 0.11%)</title><rect x="0.5251%" y="965" width="0.1089%" height="15" fill="rgb(217,147,25)" fg:x="188" fg:w="39"/><text x="0.7751%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,(usize,alloc::rc::Rc&lt;yt_history::model::Video&gt;))&gt;&gt; (39 samples, 0.11%)</title><rect x="0.5251%" y="949" width="0.1089%" height="15" fill="rgb(247,81,37)" fg:x="188" fg:w="39"/><text x="0.7751%" y="959.50"></text></g><g><title>cfree (12 samples, 0.03%)</title><rect x="0.6005%" y="933" width="0.0335%" height="15" fill="rgb(209,12,38)" fg:x="215" fg:w="12"/><text x="0.8505%" y="943.50"></text></g><g><title>[libc.so.6] (12 samples, 0.03%)</title><rect x="0.6005%" y="917" width="0.0335%" height="15" fill="rgb(227,1,9)" fg:x="215" fg:w="12"/><text x="0.8505%" y="927.50"></text></g><g><title>[libc.so.6] (12 samples, 0.03%)</title><rect x="0.6005%" y="901" width="0.0335%" height="15" fill="rgb(248,47,43)" fg:x="215" fg:w="12"/><text x="0.8505%" y="911.50"></text></g><g><title>[libc.so.6] (5 samples, 0.01%)</title><rect x="0.6201%" y="885" width="0.0140%" height="15" fill="rgb(221,10,30)" fg:x="222" fg:w="5"/><text x="0.8701%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (38 samples, 0.11%)</title><rect x="0.6955%" y="773" width="0.1061%" height="15" fill="rgb(210,229,1)" fg:x="249" fg:w="38"/><text x="0.9455%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (38 samples, 0.11%)</title><rect x="0.6955%" y="757" width="0.1061%" height="15" fill="rgb(222,148,37)" fg:x="249" fg:w="38"/><text x="0.9455%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (38 samples, 0.11%)</title><rect x="0.6955%" y="741" width="0.1061%" height="15" fill="rgb(234,67,33)" fg:x="249" fg:w="38"/><text x="0.9455%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 0.11%)</title><rect x="0.6955%" y="725" width="0.1061%" height="15" fill="rgb(247,98,35)" fg:x="249" fg:w="38"/><text x="0.9455%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.11%)</title><rect x="0.6955%" y="709" width="0.1061%" height="15" fill="rgb(247,138,52)" fg:x="249" fg:w="38"/><text x="0.9455%" y="719.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.11%)</title><rect x="0.6955%" y="693" width="0.1061%" height="15" fill="rgb(213,79,30)" fg:x="249" fg:w="38"/><text x="0.9455%" y="703.50"></text></g><g><title>malloc (38 samples, 0.11%)</title><rect x="0.6955%" y="677" width="0.1061%" height="15" fill="rgb(246,177,23)" fg:x="249" fg:w="38"/><text x="0.9455%" y="687.50"></text></g><g><title>[libc.so.6] (11 samples, 0.03%)</title><rect x="0.7709%" y="661" width="0.0307%" height="15" fill="rgb(230,62,27)" fg:x="276" fg:w="11"/><text x="1.0209%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (40 samples, 0.11%)</title><rect x="0.6955%" y="901" width="0.1117%" height="15" fill="rgb(216,154,8)" fg:x="249" fg:w="40"/><text x="0.9455%" y="911.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (40 samples, 0.11%)</title><rect x="0.6955%" y="885" width="0.1117%" height="15" fill="rgb(244,35,45)" fg:x="249" fg:w="40"/><text x="0.9455%" y="895.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (40 samples, 0.11%)</title><rect x="0.6955%" y="869" width="0.1117%" height="15" fill="rgb(251,115,12)" fg:x="249" fg:w="40"/><text x="0.9455%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (40 samples, 0.11%)</title><rect x="0.6955%" y="853" width="0.1117%" height="15" fill="rgb(240,54,50)" fg:x="249" fg:w="40"/><text x="0.9455%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (40 samples, 0.11%)</title><rect x="0.6955%" y="837" width="0.1117%" height="15" fill="rgb(233,84,52)" fg:x="249" fg:w="40"/><text x="0.9455%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (40 samples, 0.11%)</title><rect x="0.6955%" y="821" width="0.1117%" height="15" fill="rgb(207,117,47)" fg:x="249" fg:w="40"/><text x="0.9455%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (40 samples, 0.11%)</title><rect x="0.6955%" y="805" width="0.1117%" height="15" fill="rgb(249,43,39)" fg:x="249" fg:w="40"/><text x="0.9455%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (40 samples, 0.11%)</title><rect x="0.6955%" y="789" width="0.1117%" height="15" fill="rgb(209,38,44)" fg:x="249" fg:w="40"/><text x="0.9455%" y="799.50"></text></g><g><title>[libc.so.6] (40 samples, 0.11%)</title><rect x="0.8128%" y="901" width="0.1117%" height="15" fill="rgb(236,212,23)" fg:x="291" fg:w="40"/><text x="1.0628%" y="911.50"></text></g><g><title>chrono::format::scan::char (4 samples, 0.01%)</title><rect x="0.9496%" y="837" width="0.0112%" height="15" fill="rgb(242,79,21)" fg:x="340" fg:w="4"/><text x="1.1996%" y="847.50"></text></g><g><title>chrono::format::scan::number (5 samples, 0.01%)</title><rect x="0.9692%" y="821" width="0.0140%" height="15" fill="rgb(211,96,35)" fg:x="347" fg:w="5"/><text x="1.2192%" y="831.50"></text></g><g><title>chrono::format::scan::nanosecond (9 samples, 0.03%)</title><rect x="0.9608%" y="837" width="0.0251%" height="15" fill="rgb(253,215,40)" fg:x="344" fg:w="9"/><text x="1.2108%" y="847.50"></text></g><g><title>chrono::format::scan::number (29 samples, 0.08%)</title><rect x="0.9860%" y="837" width="0.0810%" height="15" fill="rgb(211,81,21)" fg:x="353" fg:w="29"/><text x="1.2360%" y="847.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (25 samples, 0.07%)</title><rect x="0.9971%" y="821" width="0.0698%" height="15" fill="rgb(208,190,38)" fg:x="357" fg:w="25"/><text x="1.2471%" y="831.50"></text></g><g><title>core::ops::range::RangeBounds::contains (24 samples, 0.07%)</title><rect x="0.9999%" y="805" width="0.0670%" height="15" fill="rgb(235,213,38)" fg:x="358" fg:w="24"/><text x="1.2499%" y="815.50"></text></g><g><title>chrono::format::parse::parse (55 samples, 0.15%)</title><rect x="0.9273%" y="885" width="0.1536%" height="15" fill="rgb(237,122,38)" fg:x="332" fg:w="55"/><text x="1.1773%" y="895.50"></text></g><g><title>chrono::format::parse::parse_internal (55 samples, 0.15%)</title><rect x="0.9273%" y="869" width="0.1536%" height="15" fill="rgb(244,218,35)" fg:x="332" fg:w="55"/><text x="1.1773%" y="879.50"></text></g><g><title>chrono::format::parse::parse_rfc3339 (52 samples, 0.15%)</title><rect x="0.9357%" y="853" width="0.1452%" height="15" fill="rgb(240,68,47)" fg:x="335" fg:w="52"/><text x="1.1857%" y="863.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date::{{closure}} (9 samples, 0.03%)</title><rect x="1.1312%" y="837" width="0.0251%" height="15" fill="rgb(210,16,53)" fg:x="405" fg:w="9"/><text x="1.3812%" y="847.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date (18 samples, 0.05%)</title><rect x="1.1228%" y="853" width="0.0503%" height="15" fill="rgb(235,124,12)" fg:x="402" fg:w="18"/><text x="1.3728%" y="863.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (6 samples, 0.02%)</title><rect x="1.1563%" y="837" width="0.0168%" height="15" fill="rgb(224,169,11)" fg:x="414" fg:w="6"/><text x="1.4063%" y="847.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_datetime_with_offset (23 samples, 0.06%)</title><rect x="1.1116%" y="869" width="0.0642%" height="15" fill="rgb(250,166,2)" fg:x="398" fg:w="23"/><text x="1.3616%" y="879.50"></text></g><g><title>chrono::naive::date::NaiveDate::checked_sub_signed (6 samples, 0.02%)</title><rect x="1.1787%" y="853" width="0.0168%" height="15" fill="rgb(242,216,29)" fg:x="422" fg:w="6"/><text x="1.4287%" y="863.50"></text></g><g><title>&lt;time::duration::Duration as core::ops::arith::Sub&gt;::sub (5 samples, 0.01%)</title><rect x="1.2038%" y="821" width="0.0140%" height="15" fill="rgb(230,116,27)" fg:x="431" fg:w="5"/><text x="1.4538%" y="831.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_signed (18 samples, 0.05%)</title><rect x="1.1759%" y="869" width="0.0503%" height="15" fill="rgb(228,99,48)" fg:x="421" fg:w="18"/><text x="1.4259%" y="879.50"></text></g><g><title>chrono::naive::time::NaiveTime::overflowing_sub_signed (11 samples, 0.03%)</title><rect x="1.1954%" y="853" width="0.0307%" height="15" fill="rgb(253,11,6)" fg:x="428" fg:w="11"/><text x="1.4454%" y="863.50"></text></g><g><title>chrono::naive::time::NaiveTime::overflowing_add_signed (11 samples, 0.03%)</title><rect x="1.1954%" y="837" width="0.0307%" height="15" fill="rgb(247,143,39)" fg:x="428" fg:w="11"/><text x="1.4454%" y="847.50"></text></g><g><title>chrono::naive::date::NaiveDate::checked_add_signed (4 samples, 0.01%)</title><rect x="1.2289%" y="757" width="0.0112%" height="15" fill="rgb(236,97,10)" fg:x="440" fg:w="4"/><text x="1.4789%" y="767.50"></text></g><g><title>chrono::datetime::DateTime&lt;chrono::offset::fixed::FixedOffset&gt;::parse_from_rfc3339 (116 samples, 0.32%)</title><rect x="0.9273%" y="901" width="0.3240%" height="15" fill="rgb(233,208,19)" fg:x="332" fg:w="116"/><text x="1.1773%" y="911.50"></text></g><g><title>chrono::format::parsed::Parsed::to_datetime (60 samples, 0.17%)</title><rect x="1.0837%" y="885" width="0.1676%" height="15" fill="rgb(216,164,2)" fg:x="388" fg:w="60"/><text x="1.3337%" y="895.50"></text></g><g><title>chrono::offset::TimeZone::from_local_datetime (9 samples, 0.03%)</title><rect x="1.2262%" y="869" width="0.0251%" height="15" fill="rgb(220,129,5)" fg:x="439" fg:w="9"/><text x="1.4762%" y="879.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::map (9 samples, 0.03%)</title><rect x="1.2262%" y="853" width="0.0251%" height="15" fill="rgb(242,17,10)" fg:x="439" fg:w="9"/><text x="1.4762%" y="863.50"></text></g><g><title>chrono::offset::TimeZone::from_local_datetime::{{closure}} (9 samples, 0.03%)</title><rect x="1.2262%" y="837" width="0.0251%" height="15" fill="rgb(242,107,0)" fg:x="439" fg:w="9"/><text x="1.4762%" y="847.50"></text></g><g><title>chrono::offset::fixed::&lt;impl core::ops::arith::Sub&lt;chrono::offset::fixed::FixedOffset&gt; for chrono::naive::datetime::NaiveDateTime&gt;::sub (9 samples, 0.03%)</title><rect x="1.2262%" y="821" width="0.0251%" height="15" fill="rgb(251,28,31)" fg:x="439" fg:w="9"/><text x="1.4762%" y="831.50"></text></g><g><title>chrono::offset::fixed::add_with_leapsecond (9 samples, 0.03%)</title><rect x="1.2262%" y="805" width="0.0251%" height="15" fill="rgb(233,223,10)" fg:x="439" fg:w="9"/><text x="1.4762%" y="815.50"></text></g><g><title>&lt;chrono::naive::datetime::NaiveDateTime as core::ops::arith::Add&lt;time::duration::Duration&gt;&gt;::add (9 samples, 0.03%)</title><rect x="1.2262%" y="789" width="0.0251%" height="15" fill="rgb(215,21,27)" fg:x="439" fg:w="9"/><text x="1.4762%" y="799.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_signed (9 samples, 0.03%)</title><rect x="1.2262%" y="773" width="0.0251%" height="15" fill="rgb(232,23,21)" fg:x="439" fg:w="9"/><text x="1.4762%" y="783.50"></text></g><g><title>chrono::naive::time::NaiveTime::overflowing_add_signed (4 samples, 0.01%)</title><rect x="1.2401%" y="757" width="0.0112%" height="15" fill="rgb(244,5,23)" fg:x="444" fg:w="4"/><text x="1.4901%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (52 samples, 0.15%)</title><rect x="1.2513%" y="901" width="0.1452%" height="15" fill="rgb(226,81,46)" fg:x="448" fg:w="52"/><text x="1.5013%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (52 samples, 0.15%)</title><rect x="1.2513%" y="885" width="0.1452%" height="15" fill="rgb(247,70,30)" fg:x="448" fg:w="52"/><text x="1.5013%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (52 samples, 0.15%)</title><rect x="1.2513%" y="869" width="0.1452%" height="15" fill="rgb(212,68,19)" fg:x="448" fg:w="52"/><text x="1.5013%" y="879.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.15%)</title><rect x="1.2513%" y="853" width="0.1452%" height="15" fill="rgb(240,187,13)" fg:x="448" fg:w="52"/><text x="1.5013%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (51 samples, 0.14%)</title><rect x="1.2541%" y="837" width="0.1424%" height="15" fill="rgb(223,113,26)" fg:x="449" fg:w="51"/><text x="1.5041%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (51 samples, 0.14%)</title><rect x="1.2541%" y="821" width="0.1424%" height="15" fill="rgb(206,192,2)" fg:x="449" fg:w="51"/><text x="1.5041%" y="831.50"></text></g><g><title>cfree (51 samples, 0.14%)</title><rect x="1.2541%" y="805" width="0.1424%" height="15" fill="rgb(241,108,4)" fg:x="449" fg:w="51"/><text x="1.5041%" y="815.50"></text></g><g><title>[libc.so.6] (45 samples, 0.13%)</title><rect x="1.2708%" y="789" width="0.1257%" height="15" fill="rgb(247,173,49)" fg:x="455" fg:w="45"/><text x="1.5208%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.02%)</title><rect x="1.3965%" y="789" width="0.0223%" height="15" fill="rgb(224,114,35)" fg:x="500" fg:w="8"/><text x="1.6465%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.02%)</title><rect x="1.3965%" y="773" width="0.0223%" height="15" fill="rgb(245,159,27)" fg:x="500" fg:w="8"/><text x="1.6465%" y="783.50"></text></g><g><title>cfree (8 samples, 0.02%)</title><rect x="1.3965%" y="757" width="0.0223%" height="15" fill="rgb(245,172,44)" fg:x="500" fg:w="8"/><text x="1.6465%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.05%)</title><rect x="1.3965%" y="885" width="0.0475%" height="15" fill="rgb(236,23,11)" fg:x="500" fg:w="17"/><text x="1.6465%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (17 samples, 0.05%)</title><rect x="1.3965%" y="869" width="0.0475%" height="15" fill="rgb(205,117,38)" fg:x="500" fg:w="17"/><text x="1.6465%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (17 samples, 0.05%)</title><rect x="1.3965%" y="853" width="0.0475%" height="15" fill="rgb(237,72,25)" fg:x="500" fg:w="17"/><text x="1.6465%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (17 samples, 0.05%)</title><rect x="1.3965%" y="837" width="0.0475%" height="15" fill="rgb(244,70,9)" fg:x="500" fg:w="17"/><text x="1.6465%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (17 samples, 0.05%)</title><rect x="1.3965%" y="821" width="0.0475%" height="15" fill="rgb(217,125,39)" fg:x="500" fg:w="17"/><text x="1.6465%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.05%)</title><rect x="1.3965%" y="805" width="0.0475%" height="15" fill="rgb(235,36,10)" fg:x="500" fg:w="17"/><text x="1.6465%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (9 samples, 0.03%)</title><rect x="1.4189%" y="789" width="0.0251%" height="15" fill="rgb(251,123,47)" fg:x="508" fg:w="9"/><text x="1.6689%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (42 samples, 0.12%)</title><rect x="1.3965%" y="901" width="0.1173%" height="15" fill="rgb(221,13,13)" fg:x="500" fg:w="42"/><text x="1.6465%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (25 samples, 0.07%)</title><rect x="1.4440%" y="885" width="0.0698%" height="15" fill="rgb(238,131,9)" fg:x="517" fg:w="25"/><text x="1.6940%" y="895.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.07%)</title><rect x="1.4440%" y="869" width="0.0698%" height="15" fill="rgb(211,50,8)" fg:x="517" fg:w="25"/><text x="1.6940%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25 samples, 0.07%)</title><rect x="1.4440%" y="853" width="0.0698%" height="15" fill="rgb(245,182,24)" fg:x="517" fg:w="25"/><text x="1.6940%" y="863.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 0.07%)</title><rect x="1.4440%" y="837" width="0.0698%" height="15" fill="rgb(242,14,37)" fg:x="517" fg:w="25"/><text x="1.6940%" y="847.50"></text></g><g><title>cfree (23 samples, 0.06%)</title><rect x="1.4496%" y="821" width="0.0642%" height="15" fill="rgb(246,228,12)" fg:x="519" fg:w="23"/><text x="1.6996%" y="831.50"></text></g><g><title>[libc.so.6] (22 samples, 0.06%)</title><rect x="1.4524%" y="805" width="0.0614%" height="15" fill="rgb(213,55,15)" fg:x="520" fg:w="22"/><text x="1.7024%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="1.5138%" y="885" width="0.0168%" height="15" fill="rgb(209,9,3)" fg:x="542" fg:w="6"/><text x="1.7638%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;[yt_history::parser::json_parser::Subtitles]&gt; (6 samples, 0.02%)</title><rect x="1.5138%" y="869" width="0.0168%" height="15" fill="rgb(230,59,30)" fg:x="542" fg:w="6"/><text x="1.7638%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::parser::json_parser::Subtitles&gt; (6 samples, 0.02%)</title><rect x="1.5138%" y="853" width="0.0168%" height="15" fill="rgb(209,121,21)" fg:x="542" fg:w="6"/><text x="1.7638%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (6 samples, 0.02%)</title><rect x="1.5138%" y="837" width="0.0168%" height="15" fill="rgb(220,109,13)" fg:x="542" fg:w="6"/><text x="1.7638%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6 samples, 0.02%)</title><rect x="1.5138%" y="821" width="0.0168%" height="15" fill="rgb(232,18,1)" fg:x="542" fg:w="6"/><text x="1.7638%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6 samples, 0.02%)</title><rect x="1.5138%" y="805" width="0.0168%" height="15" fill="rgb(215,41,42)" fg:x="542" fg:w="6"/><text x="1.7638%" y="815.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="1.5138%" y="789" width="0.0168%" height="15" fill="rgb(224,123,36)" fg:x="542" fg:w="6"/><text x="1.7638%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.02%)</title><rect x="1.5138%" y="773" width="0.0168%" height="15" fill="rgb(240,125,3)" fg:x="542" fg:w="6"/><text x="1.7638%" y="783.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.02%)</title><rect x="1.5138%" y="757" width="0.0168%" height="15" fill="rgb(205,98,50)" fg:x="542" fg:w="6"/><text x="1.7638%" y="767.50"></text></g><g><title>cfree (5 samples, 0.01%)</title><rect x="1.5166%" y="741" width="0.0140%" height="15" fill="rgb(205,185,37)" fg:x="543" fg:w="5"/><text x="1.7666%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.05%)</title><rect x="1.5306%" y="853" width="0.0503%" height="15" fill="rgb(238,207,15)" fg:x="548" fg:w="18"/><text x="1.7806%" y="863.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.05%)</title><rect x="1.5306%" y="837" width="0.0503%" height="15" fill="rgb(213,199,42)" fg:x="548" fg:w="18"/><text x="1.7806%" y="847.50"></text></g><g><title>cfree (18 samples, 0.05%)</title><rect x="1.5306%" y="821" width="0.0503%" height="15" fill="rgb(235,201,11)" fg:x="548" fg:w="18"/><text x="1.7806%" y="831.50"></text></g><g><title>[libc.so.6] (18 samples, 0.05%)</title><rect x="1.5306%" y="805" width="0.0503%" height="15" fill="rgb(207,46,11)" fg:x="548" fg:w="18"/><text x="1.7806%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;yt_history::parser::json_parser::Subtitles&gt;&gt; (26 samples, 0.07%)</title><rect x="1.5138%" y="901" width="0.0726%" height="15" fill="rgb(241,35,35)" fg:x="542" fg:w="26"/><text x="1.7638%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;yt_history::parser::json_parser::Subtitles&gt;&gt; (20 samples, 0.06%)</title><rect x="1.5306%" y="885" width="0.0559%" height="15" fill="rgb(243,32,47)" fg:x="548" fg:w="20"/><text x="1.7806%" y="895.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.06%)</title><rect x="1.5306%" y="869" width="0.0559%" height="15" fill="rgb(247,202,23)" fg:x="548" fg:w="20"/><text x="1.7806%" y="879.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="1.5920%" y="885" width="0.0251%" height="15" fill="rgb(219,102,11)" fg:x="570" fg:w="9"/><text x="1.8420%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="1.5920%" y="869" width="0.0251%" height="15" fill="rgb(243,110,44)" fg:x="570" fg:w="9"/><text x="1.8420%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.03%)</title><rect x="1.5920%" y="853" width="0.0251%" height="15" fill="rgb(222,74,54)" fg:x="570" fg:w="9"/><text x="1.8420%" y="863.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.03%)</title><rect x="1.5920%" y="837" width="0.0251%" height="15" fill="rgb(216,99,12)" fg:x="570" fg:w="9"/><text x="1.8420%" y="847.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.03%)</title><rect x="1.5920%" y="821" width="0.0251%" height="15" fill="rgb(226,22,26)" fg:x="570" fg:w="9"/><text x="1.8420%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.03%)</title><rect x="1.5920%" y="805" width="0.0251%" height="15" fill="rgb(217,163,10)" fg:x="570" fg:w="9"/><text x="1.8420%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.03%)</title><rect x="1.5920%" y="789" width="0.0251%" height="15" fill="rgb(213,25,53)" fg:x="570" fg:w="9"/><text x="1.8420%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.03%)</title><rect x="1.5920%" y="773" width="0.0251%" height="15" fill="rgb(252,105,26)" fg:x="570" fg:w="9"/><text x="1.8420%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.03%)</title><rect x="1.5920%" y="757" width="0.0251%" height="15" fill="rgb(220,39,43)" fg:x="570" fg:w="9"/><text x="1.8420%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.03%)</title><rect x="1.5920%" y="741" width="0.0251%" height="15" fill="rgb(229,68,48)" fg:x="570" fg:w="9"/><text x="1.8420%" y="751.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.03%)</title><rect x="1.5920%" y="725" width="0.0251%" height="15" fill="rgb(252,8,32)" fg:x="570" fg:w="9"/><text x="1.8420%" y="735.50"></text></g><g><title>malloc (9 samples, 0.03%)</title><rect x="1.5920%" y="709" width="0.0251%" height="15" fill="rgb(223,20,43)" fg:x="570" fg:w="9"/><text x="1.8420%" y="719.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.12%)</title><rect x="2.1646%" y="853" width="0.1201%" height="15" fill="rgb(229,81,49)" fg:x="775" fg:w="43"/><text x="2.4146%" y="863.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (447 samples, 1.25%)</title><rect x="2.8545%" y="837" width="1.2485%" height="15" fill="rgb(236,28,36)" fg:x="1022" fg:w="447"/><text x="3.1045%" y="847.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (434 samples, 1.21%)</title><rect x="2.8908%" y="821" width="1.2122%" height="15" fill="rgb(249,185,26)" fg:x="1035" fg:w="434"/><text x="3.1408%" y="831.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (8 samples, 0.02%)</title><rect x="4.0807%" y="805" width="0.0223%" height="15" fill="rgb(249,174,33)" fg:x="1461" fg:w="8"/><text x="4.3307%" y="815.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (8 samples, 0.02%)</title><rect x="4.0807%" y="789" width="0.0223%" height="15" fill="rgb(233,201,37)" fg:x="1461" fg:w="8"/><text x="4.3307%" y="799.50"></text></g><g><title>core::mem::replace (8 samples, 0.02%)</title><rect x="4.0807%" y="773" width="0.0223%" height="15" fill="rgb(221,78,26)" fg:x="1461" fg:w="8"/><text x="4.3307%" y="783.50"></text></g><g><title>core::ptr::write (8 samples, 0.02%)</title><rect x="4.0807%" y="757" width="0.0223%" height="15" fill="rgb(250,127,30)" fg:x="1461" fg:w="8"/><text x="4.3307%" y="767.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.05%)</title><rect x="5.6113%" y="821" width="0.0531%" height="15" fill="rgb(230,49,44)" fg:x="2009" fg:w="19"/><text x="5.8613%" y="831.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (11 samples, 0.03%)</title><rect x="5.6336%" y="805" width="0.0307%" height="15" fill="rgb(229,67,23)" fg:x="2017" fg:w="11"/><text x="5.8836%" y="815.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (11 samples, 0.03%)</title><rect x="5.6336%" y="789" width="0.0307%" height="15" fill="rgb(249,83,47)" fg:x="2017" fg:w="11"/><text x="5.8836%" y="799.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (11 samples, 0.03%)</title><rect x="5.6336%" y="773" width="0.0307%" height="15" fill="rgb(215,43,3)" fg:x="2017" fg:w="11"/><text x="5.8836%" y="783.50"></text></g><g><title>core::mem::replace (11 samples, 0.03%)</title><rect x="5.6336%" y="757" width="0.0307%" height="15" fill="rgb(238,154,13)" fg:x="2017" fg:w="11"/><text x="5.8836%" y="767.50"></text></g><g><title>core::ptr::write (11 samples, 0.03%)</title><rect x="5.6336%" y="741" width="0.0307%" height="15" fill="rgb(219,56,2)" fg:x="2017" fg:w="11"/><text x="5.8836%" y="751.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (10,210 samples, 28.52%)</title><rect x="5.6643%" y="821" width="28.5172%" height="15" fill="rgb(233,0,4)" fg:x="2028" fg:w="10210"/><text x="5.9143%" y="831.50">core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;..</text></g><g><title>core::cmp::PartialEq::ne (10,210 samples, 28.52%)</title><rect x="5.6643%" y="805" width="28.5172%" height="15" fill="rgb(235,30,7)" fg:x="2028" fg:w="10210"/><text x="5.9143%" y="815.50">core::cmp::PartialEq::ne</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (10,198 samples, 28.48%)</title><rect x="5.6978%" y="789" width="28.4836%" height="15" fill="rgb(250,79,13)" fg:x="2040" fg:w="10198"/><text x="5.9478%" y="799.50">&lt;alloc::string::String as core::cmp::PartialEq..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (10,198 samples, 28.48%)</title><rect x="5.6978%" y="773" width="28.4836%" height="15" fill="rgb(211,146,34)" fg:x="2040" fg:w="10198"/><text x="5.9478%" y="783.50">core::str::traits::&lt;impl core::cmp::PartialEq ..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (10,198 samples, 28.48%)</title><rect x="5.6978%" y="757" width="28.4836%" height="15" fill="rgb(228,22,38)" fg:x="2040" fg:w="10198"/><text x="5.9478%" y="767.50">core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (10,198 samples, 28.48%)</title><rect x="5.6978%" y="741" width="28.4836%" height="15" fill="rgb(235,168,5)" fg:x="2040" fg:w="10198"/><text x="5.9478%" y="751.50">core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (10,198 samples, 28.48%)</title><rect x="5.6978%" y="725" width="28.4836%" height="15" fill="rgb(221,155,16)" fg:x="2040" fg:w="10198"/><text x="5.9478%" y="735.50">&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::..</text></g><g><title>[libc.so.6] (9,912 samples, 27.68%)</title><rect x="6.4967%" y="709" width="27.6848%" height="15" fill="rgb(215,215,53)" fg:x="2326" fg:w="9912"/><text x="6.7467%" y="719.50">[libc.so.6]</text></g><g><title>yt_history::model::Models::find_channel (11,669 samples, 32.59%)</title><rect x="1.6172%" y="885" width="32.5922%" height="15" fill="rgb(223,4,10)" fg:x="579" fg:w="11669"/><text x="1.8672%" y="895.50">yt_history::model::Models::find_channel</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (11,668 samples, 32.59%)</title><rect x="1.6200%" y="869" width="32.5894%" height="15" fill="rgb(234,103,6)" fg:x="580" fg:w="11668"/><text x="1.8700%" y="879.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::it..</text></g><g><title>yt_history::model::Models::find_channel::{{closure}} (11,430 samples, 31.92%)</title><rect x="2.2847%" y="853" width="31.9247%" height="15" fill="rgb(227,97,0)" fg:x="818" fg:w="11430"/><text x="2.5347%" y="863.50">yt_history::model::Models::find_channel::{{closure}}</text></g><g><title>yt_history::model::WhereChannel::matches (10,779 samples, 30.11%)</title><rect x="4.1030%" y="837" width="30.1064%" height="15" fill="rgb(234,150,53)" fg:x="1469" fg:w="10779"/><text x="4.3530%" y="847.50">yt_history::model::WhereChannel::matches</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (10 samples, 0.03%)</title><rect x="34.1815%" y="821" width="0.0279%" height="15" fill="rgb(228,201,54)" fg:x="12238" fg:w="10"/><text x="34.4315%" y="831.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (10 samples, 0.03%)</title><rect x="34.1815%" y="805" width="0.0279%" height="15" fill="rgb(222,22,37)" fg:x="12238" fg:w="10"/><text x="34.4315%" y="815.50"></text></g><g><title>[libc.so.6] (10 samples, 0.03%)</title><rect x="34.1815%" y="789" width="0.0279%" height="15" fill="rgb(237,53,32)" fg:x="12238" fg:w="10"/><text x="34.4315%" y="799.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (6 samples, 0.02%)</title><rect x="34.2150%" y="869" width="0.0168%" height="15" fill="rgb(233,25,53)" fg:x="12250" fg:w="6"/><text x="34.4650%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (6 samples, 0.02%)</title><rect x="34.2150%" y="853" width="0.0168%" height="15" fill="rgb(210,40,34)" fg:x="12250" fg:w="6"/><text x="34.4650%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (6 samples, 0.02%)</title><rect x="34.2150%" y="837" width="0.0168%" height="15" fill="rgb(241,220,44)" fg:x="12250" fg:w="6"/><text x="34.4650%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.02%)</title><rect x="34.2150%" y="821" width="0.0168%" height="15" fill="rgb(235,28,35)" fg:x="12250" fg:w="6"/><text x="34.4650%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.02%)</title><rect x="34.2150%" y="805" width="0.0168%" height="15" fill="rgb(210,56,17)" fg:x="12250" fg:w="6"/><text x="34.4650%" y="815.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.02%)</title><rect x="34.2150%" y="789" width="0.0168%" height="15" fill="rgb(224,130,29)" fg:x="12250" fg:w="6"/><text x="34.4650%" y="799.50"></text></g><g><title>malloc (6 samples, 0.02%)</title><rect x="34.2150%" y="773" width="0.0168%" height="15" fill="rgb(235,212,8)" fg:x="12250" fg:w="6"/><text x="34.4650%" y="783.50"></text></g><g><title>[libc.so.6] (6 samples, 0.02%)</title><rect x="34.2150%" y="757" width="0.0168%" height="15" fill="rgb(223,33,50)" fg:x="12250" fg:w="6"/><text x="34.4650%" y="767.50"></text></g><g><title>yt_history::model::Models::find_or_create_channel (11,689 samples, 32.65%)</title><rect x="1.5865%" y="901" width="32.6481%" height="15" fill="rgb(219,149,13)" fg:x="568" fg:w="11689"/><text x="1.8365%" y="911.50">yt_history::model::Models::find_or_create_channel</text></g><g><title>yt_history::model::Models::insert_channel (9 samples, 0.03%)</title><rect x="34.2094%" y="885" width="0.0251%" height="15" fill="rgb(250,156,29)" fg:x="12248" fg:w="9"/><text x="34.4594%" y="895.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.01%)</title><rect x="34.2513%" y="805" width="0.0112%" height="15" fill="rgb(216,193,19)" fg:x="12263" fg:w="4"/><text x="34.5013%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.01%)</title><rect x="34.2513%" y="789" width="0.0112%" height="15" fill="rgb(216,135,14)" fg:x="12263" fg:w="4"/><text x="34.5013%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.01%)</title><rect x="34.2653%" y="709" width="0.0112%" height="15" fill="rgb(241,47,5)" fg:x="12268" fg:w="4"/><text x="34.5153%" y="719.50"></text></g><g><title>hashbrown::map::make_hash (11 samples, 0.03%)</title><rect x="34.2513%" y="837" width="0.0307%" height="15" fill="rgb(233,42,35)" fg:x="12263" fg:w="11"/><text x="34.5013%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11 samples, 0.03%)</title><rect x="34.2513%" y="821" width="0.0307%" height="15" fill="rgb(231,13,6)" fg:x="12263" fg:w="11"/><text x="34.5013%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.02%)</title><rect x="34.2653%" y="805" width="0.0168%" height="15" fill="rgb(207,181,40)" fg:x="12268" fg:w="6"/><text x="34.5153%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (6 samples, 0.02%)</title><rect x="34.2653%" y="789" width="0.0168%" height="15" fill="rgb(254,173,49)" fg:x="12268" fg:w="6"/><text x="34.5153%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (6 samples, 0.02%)</title><rect x="34.2653%" y="773" width="0.0168%" height="15" fill="rgb(221,1,38)" fg:x="12268" fg:w="6"/><text x="34.5153%" y="783.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (6 samples, 0.02%)</title><rect x="34.2653%" y="757" width="0.0168%" height="15" fill="rgb(206,124,46)" fg:x="12268" fg:w="6"/><text x="34.5153%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (6 samples, 0.02%)</title><rect x="34.2653%" y="741" width="0.0168%" height="15" fill="rgb(249,21,11)" fg:x="12268" fg:w="6"/><text x="34.5153%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (6 samples, 0.02%)</title><rect x="34.2653%" y="725" width="0.0168%" height="15" fill="rgb(222,201,40)" fg:x="12268" fg:w="6"/><text x="34.5153%" y="735.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (15 samples, 0.04%)</title><rect x="34.2904%" y="773" width="0.0419%" height="15" fill="rgb(235,61,29)" fg:x="12277" fg:w="15"/><text x="34.5404%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (15 samples, 0.04%)</title><rect x="34.2904%" y="757" width="0.0419%" height="15" fill="rgb(219,207,3)" fg:x="12277" fg:w="15"/><text x="34.5404%" y="767.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (15 samples, 0.04%)</title><rect x="34.2904%" y="741" width="0.0419%" height="15" fill="rgb(222,56,46)" fg:x="12277" fg:w="15"/><text x="34.5404%" y="751.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (15 samples, 0.04%)</title><rect x="34.2904%" y="725" width="0.0419%" height="15" fill="rgb(239,76,54)" fg:x="12277" fg:w="15"/><text x="34.5404%" y="735.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (15 samples, 0.04%)</title><rect x="34.2904%" y="709" width="0.0419%" height="15" fill="rgb(231,124,27)" fg:x="12277" fg:w="15"/><text x="34.5404%" y="719.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (15 samples, 0.04%)</title><rect x="34.2904%" y="693" width="0.0419%" height="15" fill="rgb(249,195,6)" fg:x="12277" fg:w="15"/><text x="34.5404%" y="703.50"></text></g><g><title>[libc.so.6] (9 samples, 0.03%)</title><rect x="34.3072%" y="677" width="0.0251%" height="15" fill="rgb(237,174,47)" fg:x="12283" fg:w="9"/><text x="34.5572%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (16 samples, 0.04%)</title><rect x="34.2904%" y="789" width="0.0447%" height="15" fill="rgb(206,201,31)" fg:x="12277" fg:w="16"/><text x="34.5404%" y="799.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (31 samples, 0.09%)</title><rect x="34.3407%" y="789" width="0.0866%" height="15" fill="rgb(231,57,52)" fg:x="12295" fg:w="31"/><text x="34.5907%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (31 samples, 0.09%)</title><rect x="34.3407%" y="773" width="0.0866%" height="15" fill="rgb(248,177,22)" fg:x="12295" fg:w="31"/><text x="34.5907%" y="783.50"></text></g><g><title>yt_history::model::Models::find_or_create_video (31 samples, 0.09%)</title><rect x="34.3407%" y="757" width="0.0866%" height="15" fill="rgb(215,211,37)" fg:x="12295" fg:w="31"/><text x="34.5907%" y="767.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (64 samples, 0.18%)</title><rect x="34.2513%" y="885" width="0.1788%" height="15" fill="rgb(241,128,51)" fg:x="12263" fg:w="64"/><text x="34.5013%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (64 samples, 0.18%)</title><rect x="34.2513%" y="869" width="0.1788%" height="15" fill="rgb(227,165,31)" fg:x="12263" fg:w="64"/><text x="34.5013%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (64 samples, 0.18%)</title><rect x="34.2513%" y="853" width="0.1788%" height="15" fill="rgb(228,167,24)" fg:x="12263" fg:w="64"/><text x="34.5013%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (53 samples, 0.15%)</title><rect x="34.2820%" y="837" width="0.1480%" height="15" fill="rgb(228,143,12)" fg:x="12274" fg:w="53"/><text x="34.5320%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (53 samples, 0.15%)</title><rect x="34.2820%" y="821" width="0.1480%" height="15" fill="rgb(249,149,8)" fg:x="12274" fg:w="53"/><text x="34.5320%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (53 samples, 0.15%)</title><rect x="34.2820%" y="805" width="0.1480%" height="15" fill="rgb(243,35,44)" fg:x="12274" fg:w="53"/><text x="34.5320%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.12%)</title><rect x="34.9049%" y="837" width="0.1173%" height="15" fill="rgb(246,89,9)" fg:x="12497" fg:w="42"/><text x="35.1549%" y="847.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (398 samples, 1.11%)</title><rect x="35.5696%" y="821" width="1.1116%" height="15" fill="rgb(233,213,13)" fg:x="12735" fg:w="398"/><text x="35.8196%" y="831.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (387 samples, 1.08%)</title><rect x="35.6004%" y="805" width="1.0809%" height="15" fill="rgb(233,141,41)" fg:x="12746" fg:w="387"/><text x="35.8504%" y="815.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.06%)</title><rect x="38.1085%" y="805" width="0.0614%" height="15" fill="rgb(239,167,4)" fg:x="13644" fg:w="22"/><text x="38.3585%" y="815.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (15 samples, 0.04%)</title><rect x="38.1281%" y="789" width="0.0419%" height="15" fill="rgb(209,217,16)" fg:x="13651" fg:w="15"/><text x="38.3781%" y="799.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (15 samples, 0.04%)</title><rect x="38.1281%" y="773" width="0.0419%" height="15" fill="rgb(219,88,35)" fg:x="13651" fg:w="15"/><text x="38.3781%" y="783.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (15 samples, 0.04%)</title><rect x="38.1281%" y="757" width="0.0419%" height="15" fill="rgb(220,193,23)" fg:x="13651" fg:w="15"/><text x="38.3781%" y="767.50"></text></g><g><title>core::mem::replace (15 samples, 0.04%)</title><rect x="38.1281%" y="741" width="0.0419%" height="15" fill="rgb(230,90,52)" fg:x="13651" fg:w="15"/><text x="38.3781%" y="751.50"></text></g><g><title>core::ptr::write (15 samples, 0.04%)</title><rect x="38.1281%" y="725" width="0.0419%" height="15" fill="rgb(252,106,19)" fg:x="13651" fg:w="15"/><text x="38.3781%" y="735.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (9,282 samples, 25.93%)</title><rect x="38.1700%" y="805" width="25.9252%" height="15" fill="rgb(206,74,20)" fg:x="13666" fg:w="9282"/><text x="38.4200%" y="815.50">core::cmp::impls::&lt;impl core::cmp::Partia..</text></g><g><title>core::cmp::PartialEq::ne (9,282 samples, 25.93%)</title><rect x="38.1700%" y="789" width="25.9252%" height="15" fill="rgb(230,138,44)" fg:x="13666" fg:w="9282"/><text x="38.4200%" y="799.50">core::cmp::PartialEq::ne</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (9,270 samples, 25.89%)</title><rect x="38.2035%" y="773" width="25.8917%" height="15" fill="rgb(235,182,43)" fg:x="13678" fg:w="9270"/><text x="38.4535%" y="783.50">&lt;alloc::string::String as core::cmp::Part..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (9,270 samples, 25.89%)</title><rect x="38.2035%" y="757" width="25.8917%" height="15" fill="rgb(242,16,51)" fg:x="13678" fg:w="9270"/><text x="38.4535%" y="767.50">core::str::traits::&lt;impl core::cmp::Parti..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (9,270 samples, 25.89%)</title><rect x="38.2035%" y="741" width="25.8917%" height="15" fill="rgb(248,9,4)" fg:x="13678" fg:w="9270"/><text x="38.4535%" y="751.50">core::cmp::impls::&lt;impl core::cmp::Partia..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (9,270 samples, 25.89%)</title><rect x="38.2035%" y="725" width="25.8917%" height="15" fill="rgb(210,31,22)" fg:x="13678" fg:w="9270"/><text x="38.4535%" y="735.50">core::slice::cmp::&lt;impl core::cmp::Partia..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (9,270 samples, 25.89%)</title><rect x="38.2035%" y="709" width="25.8917%" height="15" fill="rgb(239,54,39)" fg:x="13678" fg:w="9270"/><text x="38.4535%" y="719.50">&lt;[A] as core::slice::cmp::SlicePartialEq&lt;..</text></g><g><title>[libc.so.6] (9,043 samples, 25.26%)</title><rect x="38.8375%" y="693" width="25.2577%" height="15" fill="rgb(230,99,41)" fg:x="13905" fg:w="9043"/><text x="39.0875%" y="703.50">[libc.so.6]</text></g><g><title>yt_history::model::Models::find_or_create_channel (10,623 samples, 29.67%)</title><rect x="34.4301%" y="885" width="29.6707%" height="15" fill="rgb(253,106,12)" fg:x="12327" fg:w="10623"/><text x="34.6801%" y="895.50">yt_history::model::Models::find_or_create_channel</text></g><g><title>yt_history::model::Models::find_channel (10,622 samples, 29.67%)</title><rect x="34.4329%" y="869" width="29.6679%" height="15" fill="rgb(213,46,41)" fg:x="12328" fg:w="10622"/><text x="34.6829%" y="879.50">yt_history::model::Models::find_channel</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (10,622 samples, 29.67%)</title><rect x="34.4329%" y="853" width="29.6679%" height="15" fill="rgb(215,133,35)" fg:x="12328" fg:w="10622"/><text x="34.6829%" y="863.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::trait..</text></g><g><title>yt_history::model::Models::find_channel::{{closure}} (10,411 samples, 29.08%)</title><rect x="35.0222%" y="837" width="29.0786%" height="15" fill="rgb(213,28,5)" fg:x="12539" fg:w="10411"/><text x="35.2722%" y="847.50">yt_history::model::Models::find_channel::{{clos..</text></g><g><title>yt_history::model::WhereChannel::matches (9,817 samples, 27.42%)</title><rect x="36.6813%" y="821" width="27.4195%" height="15" fill="rgb(215,77,49)" fg:x="13133" fg:w="9817"/><text x="36.9313%" y="831.50">yt_history::model::WhereChannel::matches</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.01%)</title><rect x="64.1147%" y="869" width="0.0140%" height="15" fill="rgb(248,100,22)" fg:x="22955" fg:w="5"/><text x="64.3647%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.01%)</title><rect x="64.1175%" y="853" width="0.0112%" height="15" fill="rgb(208,67,9)" fg:x="22956" fg:w="4"/><text x="64.3675%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.01%)</title><rect x="64.1175%" y="837" width="0.0112%" height="15" fill="rgb(219,133,21)" fg:x="22956" fg:w="4"/><text x="64.3675%" y="847.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.01%)</title><rect x="64.1175%" y="821" width="0.0112%" height="15" fill="rgb(246,46,29)" fg:x="22956" fg:w="4"/><text x="64.3675%" y="831.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.01%)</title><rect x="64.1175%" y="805" width="0.0112%" height="15" fill="rgb(246,185,52)" fg:x="22956" fg:w="4"/><text x="64.3675%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.01%)</title><rect x="64.1175%" y="789" width="0.0112%" height="15" fill="rgb(252,136,11)" fg:x="22956" fg:w="4"/><text x="64.3675%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.01%)</title><rect x="64.1175%" y="773" width="0.0112%" height="15" fill="rgb(219,138,53)" fg:x="22956" fg:w="4"/><text x="64.3675%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.01%)</title><rect x="64.1175%" y="757" width="0.0112%" height="15" fill="rgb(211,51,23)" fg:x="22956" fg:w="4"/><text x="64.3675%" y="767.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (67 samples, 0.19%)</title><rect x="64.1287%" y="869" width="0.1871%" height="15" fill="rgb(247,221,28)" fg:x="22960" fg:w="67"/><text x="64.3787%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (60 samples, 0.17%)</title><rect x="64.1483%" y="853" width="0.1676%" height="15" fill="rgb(251,222,45)" fg:x="22967" fg:w="60"/><text x="64.3983%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (59 samples, 0.16%)</title><rect x="64.1510%" y="837" width="0.1648%" height="15" fill="rgb(217,162,53)" fg:x="22968" fg:w="59"/><text x="64.4010%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (59 samples, 0.16%)</title><rect x="64.1510%" y="821" width="0.1648%" height="15" fill="rgb(229,93,14)" fg:x="22968" fg:w="59"/><text x="64.4010%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (59 samples, 0.16%)</title><rect x="64.1510%" y="805" width="0.1648%" height="15" fill="rgb(209,67,49)" fg:x="22968" fg:w="59"/><text x="64.4010%" y="815.50"></text></g><g><title>alloc::alloc::alloc (59 samples, 0.16%)</title><rect x="64.1510%" y="789" width="0.1648%" height="15" fill="rgb(213,87,29)" fg:x="22968" fg:w="59"/><text x="64.4010%" y="799.50"></text></g><g><title>malloc (58 samples, 0.16%)</title><rect x="64.1538%" y="773" width="0.1620%" height="15" fill="rgb(205,151,52)" fg:x="22969" fg:w="58"/><text x="64.4038%" y="783.50"></text></g><g><title>[libc.so.6] (32 samples, 0.09%)</title><rect x="64.2265%" y="757" width="0.0894%" height="15" fill="rgb(253,215,39)" fg:x="22995" fg:w="32"/><text x="64.4765%" y="767.50"></text></g><g><title>[libc.so.6] (13 samples, 0.04%)</title><rect x="64.2795%" y="741" width="0.0363%" height="15" fill="rgb(221,220,41)" fg:x="23014" fg:w="13"/><text x="64.5295%" y="751.50"></text></g><g><title>hashbrown::map::make_insert_hash (7 samples, 0.02%)</title><rect x="64.3270%" y="837" width="0.0196%" height="15" fill="rgb(218,133,21)" fg:x="23031" fg:w="7"/><text x="64.5770%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.02%)</title><rect x="64.3270%" y="821" width="0.0196%" height="15" fill="rgb(221,193,43)" fg:x="23031" fg:w="7"/><text x="64.5770%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (4 samples, 0.01%)</title><rect x="64.3466%" y="789" width="0.0112%" height="15" fill="rgb(240,128,52)" fg:x="23038" fg:w="4"/><text x="64.5966%" y="799.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (4 samples, 0.01%)</title><rect x="64.3466%" y="773" width="0.0112%" height="15" fill="rgb(253,114,12)" fg:x="23038" fg:w="4"/><text x="64.5966%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (4 samples, 0.01%)</title><rect x="64.3466%" y="757" width="0.0112%" height="15" fill="rgb(215,223,47)" fg:x="23038" fg:w="4"/><text x="64.5966%" y="767.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (4 samples, 0.01%)</title><rect x="64.3466%" y="741" width="0.0112%" height="15" fill="rgb(248,225,23)" fg:x="23038" fg:w="4"/><text x="64.5966%" y="751.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.01%)</title><rect x="64.3466%" y="725" width="0.0112%" height="15" fill="rgb(250,108,0)" fg:x="23038" fg:w="4"/><text x="64.5966%" y="735.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4 samples, 0.01%)</title><rect x="64.3466%" y="709" width="0.0112%" height="15" fill="rgb(228,208,7)" fg:x="23038" fg:w="4"/><text x="64.5966%" y="719.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4 samples, 0.01%)</title><rect x="64.3466%" y="693" width="0.0112%" height="15" fill="rgb(244,45,10)" fg:x="23038" fg:w="4"/><text x="64.5966%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (13 samples, 0.04%)</title><rect x="64.3466%" y="837" width="0.0363%" height="15" fill="rgb(207,125,25)" fg:x="23038" fg:w="13"/><text x="64.5966%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (13 samples, 0.04%)</title><rect x="64.3466%" y="821" width="0.0363%" height="15" fill="rgb(210,195,18)" fg:x="23038" fg:w="13"/><text x="64.5966%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (13 samples, 0.04%)</title><rect x="64.3466%" y="805" width="0.0363%" height="15" fill="rgb(249,80,12)" fg:x="23038" fg:w="13"/><text x="64.5966%" y="815.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (8 samples, 0.02%)</title><rect x="64.3605%" y="789" width="0.0223%" height="15" fill="rgb(221,65,9)" fg:x="23043" fg:w="8"/><text x="64.6105%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (8 samples, 0.02%)</title><rect x="64.3605%" y="773" width="0.0223%" height="15" fill="rgb(235,49,36)" fg:x="23043" fg:w="8"/><text x="64.6105%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 0.02%)</title><rect x="64.3605%" y="757" width="0.0223%" height="15" fill="rgb(225,32,20)" fg:x="23043" fg:w="8"/><text x="64.6105%" y="767.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (13 samples, 0.04%)</title><rect x="64.3940%" y="821" width="0.0363%" height="15" fill="rgb(215,141,46)" fg:x="23055" fg:w="13"/><text x="64.6440%" y="831.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (13 samples, 0.04%)</title><rect x="64.3940%" y="805" width="0.0363%" height="15" fill="rgb(250,160,47)" fg:x="23055" fg:w="13"/><text x="64.6440%" y="815.50"></text></g><g><title>core::ptr::write (13 samples, 0.04%)</title><rect x="64.3940%" y="789" width="0.0363%" height="15" fill="rgb(216,222,40)" fg:x="23055" fg:w="13"/><text x="64.6440%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.03%)</title><rect x="64.4304%" y="757" width="0.0279%" height="15" fill="rgb(234,217,39)" fg:x="23068" fg:w="10"/><text x="64.6804%" y="767.50"></text></g><g><title>[unknown] (9 samples, 0.03%)</title><rect x="64.4331%" y="741" width="0.0251%" height="15" fill="rgb(207,178,40)" fg:x="23069" fg:w="9"/><text x="64.6831%" y="751.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="64.4415%" y="725" width="0.0168%" height="15" fill="rgb(221,136,13)" fg:x="23072" fg:w="6"/><text x="64.6915%" y="735.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="64.4415%" y="709" width="0.0168%" height="15" fill="rgb(249,199,10)" fg:x="23072" fg:w="6"/><text x="64.6915%" y="719.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="64.4415%" y="693" width="0.0168%" height="15" fill="rgb(249,222,13)" fg:x="23072" fg:w="6"/><text x="64.6915%" y="703.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="64.4415%" y="677" width="0.0168%" height="15" fill="rgb(244,185,38)" fg:x="23072" fg:w="6"/><text x="64.6915%" y="687.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="64.4415%" y="661" width="0.0168%" height="15" fill="rgb(236,202,9)" fg:x="23072" fg:w="6"/><text x="64.6915%" y="671.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="64.4415%" y="645" width="0.0168%" height="15" fill="rgb(250,229,37)" fg:x="23072" fg:w="6"/><text x="64.6915%" y="655.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="64.4415%" y="629" width="0.0168%" height="15" fill="rgb(206,174,23)" fg:x="23072" fg:w="6"/><text x="64.6915%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="64.4443%" y="613" width="0.0140%" height="15" fill="rgb(211,33,43)" fg:x="23073" fg:w="5"/><text x="64.6943%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="64.4443%" y="597" width="0.0140%" height="15" fill="rgb(245,58,50)" fg:x="23073" fg:w="5"/><text x="64.6943%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (43 samples, 0.12%)</title><rect x="64.4667%" y="597" width="0.1201%" height="15" fill="rgb(244,68,36)" fg:x="23081" fg:w="43"/><text x="64.7167%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (43 samples, 0.12%)</title><rect x="64.4667%" y="581" width="0.1201%" height="15" fill="rgb(232,229,15)" fg:x="23081" fg:w="43"/><text x="64.7167%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (47 samples, 0.13%)</title><rect x="64.4583%" y="757" width="0.1313%" height="15" fill="rgb(254,30,23)" fg:x="23078" fg:w="47"/><text x="64.7083%" y="767.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (47 samples, 0.13%)</title><rect x="64.4583%" y="741" width="0.1313%" height="15" fill="rgb(235,160,14)" fg:x="23078" fg:w="47"/><text x="64.7083%" y="751.50"></text></g><g><title>hashbrown::map::make_hash (47 samples, 0.13%)</title><rect x="64.4583%" y="725" width="0.1313%" height="15" fill="rgb(212,155,44)" fg:x="23078" fg:w="47"/><text x="64.7083%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (47 samples, 0.13%)</title><rect x="64.4583%" y="709" width="0.1313%" height="15" fill="rgb(226,2,50)" fg:x="23078" fg:w="47"/><text x="64.7083%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (44 samples, 0.12%)</title><rect x="64.4667%" y="693" width="0.1229%" height="15" fill="rgb(234,177,6)" fg:x="23081" fg:w="44"/><text x="64.7167%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (44 samples, 0.12%)</title><rect x="64.4667%" y="677" width="0.1229%" height="15" fill="rgb(217,24,9)" fg:x="23081" fg:w="44"/><text x="64.7167%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (44 samples, 0.12%)</title><rect x="64.4667%" y="661" width="0.1229%" height="15" fill="rgb(220,13,46)" fg:x="23081" fg:w="44"/><text x="64.7167%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (44 samples, 0.12%)</title><rect x="64.4667%" y="645" width="0.1229%" height="15" fill="rgb(239,221,27)" fg:x="23081" fg:w="44"/><text x="64.7167%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (44 samples, 0.12%)</title><rect x="64.4667%" y="629" width="0.1229%" height="15" fill="rgb(222,198,25)" fg:x="23081" fg:w="44"/><text x="64.7167%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (44 samples, 0.12%)</title><rect x="64.4667%" y="613" width="0.1229%" height="15" fill="rgb(211,99,13)" fg:x="23081" fg:w="44"/><text x="64.7167%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (98 samples, 0.27%)</title><rect x="64.4304%" y="821" width="0.2737%" height="15" fill="rgb(232,111,31)" fg:x="23068" fg:w="98"/><text x="64.6804%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (98 samples, 0.27%)</title><rect x="64.4304%" y="805" width="0.2737%" height="15" fill="rgb(245,82,37)" fg:x="23068" fg:w="98"/><text x="64.6804%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (98 samples, 0.27%)</title><rect x="64.4304%" y="789" width="0.2737%" height="15" fill="rgb(227,149,46)" fg:x="23068" fg:w="98"/><text x="64.6804%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (98 samples, 0.27%)</title><rect x="64.4304%" y="773" width="0.2737%" height="15" fill="rgb(218,36,50)" fg:x="23068" fg:w="98"/><text x="64.6804%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (38 samples, 0.11%)</title><rect x="64.5979%" y="757" width="0.1061%" height="15" fill="rgb(226,80,48)" fg:x="23128" fg:w="38"/><text x="64.8479%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (38 samples, 0.11%)</title><rect x="64.5979%" y="741" width="0.1061%" height="15" fill="rgb(238,224,15)" fg:x="23128" fg:w="38"/><text x="64.8479%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (38 samples, 0.11%)</title><rect x="64.5979%" y="725" width="0.1061%" height="15" fill="rgb(241,136,10)" fg:x="23128" fg:w="38"/><text x="64.8479%" y="735.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (38 samples, 0.11%)</title><rect x="64.5979%" y="709" width="0.1061%" height="15" fill="rgb(208,32,45)" fg:x="23128" fg:w="38"/><text x="64.8479%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 0.11%)</title><rect x="64.5979%" y="693" width="0.1061%" height="15" fill="rgb(207,135,9)" fg:x="23128" fg:w="38"/><text x="64.8479%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.11%)</title><rect x="64.5979%" y="677" width="0.1061%" height="15" fill="rgb(206,86,44)" fg:x="23128" fg:w="38"/><text x="64.8479%" y="687.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.11%)</title><rect x="64.5979%" y="661" width="0.1061%" height="15" fill="rgb(245,177,15)" fg:x="23128" fg:w="38"/><text x="64.8479%" y="671.50"></text></g><g><title>malloc (38 samples, 0.11%)</title><rect x="64.5979%" y="645" width="0.1061%" height="15" fill="rgb(206,64,50)" fg:x="23128" fg:w="38"/><text x="64.8479%" y="655.50"></text></g><g><title>[libc.so.6] (38 samples, 0.11%)</title><rect x="64.5979%" y="629" width="0.1061%" height="15" fill="rgb(234,36,40)" fg:x="23128" fg:w="38"/><text x="64.8479%" y="639.50"></text></g><g><title>[libc.so.6] (35 samples, 0.10%)</title><rect x="64.6063%" y="613" width="0.0978%" height="15" fill="rgb(213,64,8)" fg:x="23131" fg:w="35"/><text x="64.8563%" y="623.50"></text></g><g><title>[libc.so.6] (15 samples, 0.04%)</title><rect x="64.6622%" y="597" width="0.0419%" height="15" fill="rgb(210,75,36)" fg:x="23151" fg:w="15"/><text x="64.9122%" y="607.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (138 samples, 0.39%)</title><rect x="64.3214%" y="869" width="0.3854%" height="15" fill="rgb(229,88,21)" fg:x="23029" fg:w="138"/><text x="64.5714%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (138 samples, 0.39%)</title><rect x="64.3214%" y="853" width="0.3854%" height="15" fill="rgb(252,204,47)" fg:x="23029" fg:w="138"/><text x="64.5714%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (116 samples, 0.32%)</title><rect x="64.3829%" y="837" width="0.3240%" height="15" fill="rgb(208,77,27)" fg:x="23051" fg:w="116"/><text x="64.6329%" y="847.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.09%)</title><rect x="65.2599%" y="837" width="0.0866%" height="15" fill="rgb(221,76,26)" fg:x="23365" fg:w="31"/><text x="65.5099%" y="847.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (330 samples, 0.92%)</title><rect x="65.9163%" y="821" width="0.9217%" height="15" fill="rgb(225,139,18)" fg:x="23600" fg:w="330"/><text x="66.1663%" y="831.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (317 samples, 0.89%)</title><rect x="65.9526%" y="805" width="0.8854%" height="15" fill="rgb(230,137,11)" fg:x="23613" fg:w="317"/><text x="66.2026%" y="815.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (6 samples, 0.02%)</title><rect x="66.8212%" y="789" width="0.0168%" height="15" fill="rgb(212,28,1)" fg:x="23924" fg:w="6"/><text x="67.0712%" y="799.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (6 samples, 0.02%)</title><rect x="66.8212%" y="773" width="0.0168%" height="15" fill="rgb(248,164,17)" fg:x="23924" fg:w="6"/><text x="67.0712%" y="783.50"></text></g><g><title>core::mem::replace (6 samples, 0.02%)</title><rect x="66.8212%" y="757" width="0.0168%" height="15" fill="rgb(222,171,42)" fg:x="23924" fg:w="6"/><text x="67.0712%" y="767.50"></text></g><g><title>core::ptr::write (6 samples, 0.02%)</title><rect x="66.8212%" y="741" width="0.0168%" height="15" fill="rgb(243,84,45)" fg:x="23924" fg:w="6"/><text x="67.0712%" y="751.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.05%)</title><rect x="67.6480%" y="805" width="0.0531%" height="15" fill="rgb(252,49,23)" fg:x="24220" fg:w="19"/><text x="67.8980%" y="815.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (13 samples, 0.04%)</title><rect x="67.6647%" y="789" width="0.0363%" height="15" fill="rgb(215,19,7)" fg:x="24226" fg:w="13"/><text x="67.9147%" y="799.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (13 samples, 0.04%)</title><rect x="67.6647%" y="773" width="0.0363%" height="15" fill="rgb(238,81,41)" fg:x="24226" fg:w="13"/><text x="67.9147%" y="783.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (13 samples, 0.04%)</title><rect x="67.6647%" y="757" width="0.0363%" height="15" fill="rgb(210,199,37)" fg:x="24226" fg:w="13"/><text x="67.9147%" y="767.50"></text></g><g><title>core::mem::replace (13 samples, 0.04%)</title><rect x="67.6647%" y="741" width="0.0363%" height="15" fill="rgb(244,192,49)" fg:x="24226" fg:w="13"/><text x="67.9147%" y="751.50"></text></g><g><title>core::ptr::write (13 samples, 0.04%)</title><rect x="67.6647%" y="725" width="0.0363%" height="15" fill="rgb(226,211,11)" fg:x="24226" fg:w="13"/><text x="67.9147%" y="735.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (9,882 samples, 27.60%)</title><rect x="67.7010%" y="805" width="27.6010%" height="15" fill="rgb(236,162,54)" fg:x="24239" fg:w="9882"/><text x="67.9510%" y="815.50">core::cmp::impls::&lt;impl core::cmp::PartialEq..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::cmp::PartialEq&gt;::eq (9,882 samples, 27.60%)</title><rect x="67.7010%" y="789" width="27.6010%" height="15" fill="rgb(220,229,9)" fg:x="24239" fg:w="9882"/><text x="67.9510%" y="799.50">&lt;alloc::rc::Rc&lt;T&gt; as core::cmp::PartialEq&gt;::..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as alloc::rc::RcEqIdent&lt;T&gt;&gt;::eq (9,882 samples, 27.60%)</title><rect x="67.7010%" y="773" width="27.6010%" height="15" fill="rgb(250,87,22)" fg:x="24239" fg:w="9882"/><text x="67.9510%" y="783.50">&lt;alloc::rc::Rc&lt;T&gt; as alloc::rc::RcEqIdent&lt;T&gt;..</text></g><g><title>&lt;yt_history::model::Channel as core::cmp::PartialEq&gt;::eq (9,882 samples, 27.60%)</title><rect x="67.7010%" y="757" width="27.6010%" height="15" fill="rgb(239,43,17)" fg:x="24239" fg:w="9882"/><text x="67.9510%" y="767.50">&lt;yt_history::model::Channel as core::cmp::Pa..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (9,684 samples, 27.05%)</title><rect x="68.2541%" y="741" width="27.0480%" height="15" fill="rgb(231,177,25)" fg:x="24437" fg:w="9684"/><text x="68.5041%" y="751.50">&lt;alloc::string::String as core::cmp::Partia..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (9,684 samples, 27.05%)</title><rect x="68.2541%" y="725" width="27.0480%" height="15" fill="rgb(219,179,1)" fg:x="24437" fg:w="9684"/><text x="68.5041%" y="735.50">core::str::traits::&lt;impl core::cmp::Partial..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (9,684 samples, 27.05%)</title><rect x="68.2541%" y="709" width="27.0480%" height="15" fill="rgb(238,219,53)" fg:x="24437" fg:w="9684"/><text x="68.5041%" y="719.50">core::cmp::impls::&lt;impl core::cmp::PartialE..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (9,684 samples, 27.05%)</title><rect x="68.2541%" y="693" width="27.0480%" height="15" fill="rgb(232,167,36)" fg:x="24437" fg:w="9684"/><text x="68.5041%" y="703.50">core::slice::cmp::&lt;impl core::cmp::PartialE..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (9,684 samples, 27.05%)</title><rect x="68.2541%" y="677" width="27.0480%" height="15" fill="rgb(244,19,51)" fg:x="24437" fg:w="9684"/><text x="68.5041%" y="687.50">&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;..</text></g><g><title>[libc.so.6] (9,600 samples, 26.81%)</title><rect x="68.4887%" y="661" width="26.8134%" height="15" fill="rgb(224,6,22)" fg:x="24521" fg:w="9600"/><text x="68.7387%" y="671.50">[libc.so.6]</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (10,961 samples, 30.61%)</title><rect x="64.7069%" y="853" width="30.6148%" height="15" fill="rgb(224,145,5)" fg:x="23167" fg:w="10961"/><text x="64.9569%" y="863.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits..</text></g><g><title>yt_history::model::Models::find_channel::{{closure}} (10,732 samples, 29.98%)</title><rect x="65.3465%" y="837" width="29.9751%" height="15" fill="rgb(234,130,49)" fg:x="23396" fg:w="10732"/><text x="65.5965%" y="847.50">yt_history::model::Models::find_channel::{{closu..</text></g><g><title>yt_history::model::WhereChannel::matches (10,198 samples, 28.48%)</title><rect x="66.8380%" y="821" width="28.4836%" height="15" fill="rgb(254,6,2)" fg:x="23930" fg:w="10198"/><text x="67.0880%" y="831.50">yt_history::model::WhereChannel::matches</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (7 samples, 0.02%)</title><rect x="95.3021%" y="805" width="0.0196%" height="15" fill="rgb(208,96,46)" fg:x="34121" fg:w="7"/><text x="95.5521%" y="815.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (7 samples, 0.02%)</title><rect x="95.3021%" y="789" width="0.0196%" height="15" fill="rgb(239,3,39)" fg:x="34121" fg:w="7"/><text x="95.5521%" y="799.50"></text></g><g><title>[libc.so.6] (7 samples, 0.02%)</title><rect x="95.3021%" y="773" width="0.0196%" height="15" fill="rgb(233,210,1)" fg:x="34121" fg:w="7"/><text x="95.5521%" y="783.50"></text></g><g><title>yt_history::model::Models::find_channel (10,962 samples, 30.62%)</title><rect x="64.7069%" y="869" width="30.6175%" height="15" fill="rgb(244,137,37)" fg:x="23167" fg:w="10962"/><text x="64.9569%" y="879.50">yt_history::model::Models::find_channel</text></g><g><title>yt_history::model::Models::find_or_create_video (21,873 samples, 61.09%)</title><rect x="34.2346%" y="901" width="61.0926%" height="15" fill="rgb(240,136,2)" fg:x="12257" fg:w="21873"/><text x="34.4846%" y="911.50">yt_history::model::Models::find_or_create_video</text></g><g><title>yt_history::model::Models::insert_video (11,180 samples, 31.23%)</title><rect x="64.1008%" y="885" width="31.2264%" height="15" fill="rgb(239,18,37)" fg:x="22950" fg:w="11180"/><text x="64.3508%" y="895.50">yt_history::model::Models::insert_video</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.02%)</title><rect x="95.3300%" y="885" width="0.0168%" height="15" fill="rgb(218,185,22)" fg:x="34131" fg:w="6"/><text x="95.5800%" y="895.50"></text></g><g><title>core::ptr::write (4 samples, 0.01%)</title><rect x="95.3356%" y="869" width="0.0112%" height="15" fill="rgb(225,218,4)" fg:x="34133" fg:w="4"/><text x="95.5856%" y="879.50"></text></g><g><title>yt_history::model::Models::insert_watched (8 samples, 0.02%)</title><rect x="95.3272%" y="901" width="0.0223%" height="15" fill="rgb(230,182,32)" fg:x="34130" fg:w="8"/><text x="95.5772%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.01%)</title><rect x="95.3523%" y="805" width="0.0112%" height="15" fill="rgb(242,56,43)" fg:x="34139" fg:w="4"/><text x="95.6023%" y="815.50"></text></g><g><title>core::ptr::write (4 samples, 0.01%)</title><rect x="95.3523%" y="789" width="0.0112%" height="15" fill="rgb(233,99,24)" fg:x="34139" fg:w="4"/><text x="95.6023%" y="799.50"></text></g><g><title>[libc.so.6] (4 samples, 0.01%)</title><rect x="95.3523%" y="773" width="0.0112%" height="15" fill="rgb(234,209,42)" fg:x="34139" fg:w="4"/><text x="95.6023%" y="783.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (4 samples, 0.01%)</title><rect x="95.4501%" y="597" width="0.0112%" height="15" fill="rgb(227,7,12)" fg:x="34174" fg:w="4"/><text x="95.7001%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 0.03%)</title><rect x="95.6512%" y="581" width="0.0251%" height="15" fill="rgb(245,203,43)" fg:x="34246" fg:w="9"/><text x="95.9012%" y="591.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (11 samples, 0.03%)</title><rect x="95.6763%" y="549" width="0.0307%" height="15" fill="rgb(238,205,33)" fg:x="34255" fg:w="11"/><text x="95.9263%" y="559.50"></text></g><g><title>core::ops::function::FnOnce::call_once (23 samples, 0.06%)</title><rect x="95.6763%" y="581" width="0.0642%" height="15" fill="rgb(231,56,7)" fg:x="34255" fg:w="23"/><text x="95.9263%" y="591.50"></text></g><g><title>serde_json::read::as_str (23 samples, 0.06%)</title><rect x="95.6763%" y="565" width="0.0642%" height="15" fill="rgb(244,186,29)" fg:x="34255" fg:w="23"/><text x="95.9263%" y="575.50"></text></g><g><title>core::str::converts::from_utf8 (10 samples, 0.03%)</title><rect x="95.7126%" y="549" width="0.0279%" height="15" fill="rgb(234,111,31)" fg:x="34268" fg:w="10"/><text x="95.9626%" y="559.50"></text></g><g><title>core::str::validations::run_utf8_validation (6 samples, 0.02%)</title><rect x="95.7238%" y="533" width="0.0168%" height="15" fill="rgb(241,149,10)" fg:x="34272" fg:w="6"/><text x="95.9738%" y="543.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (8 samples, 0.02%)</title><rect x="95.9808%" y="501" width="0.0223%" height="15" fill="rgb(249,206,44)" fg:x="34364" fg:w="8"/><text x="96.2308%" y="511.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (97 samples, 0.27%)</title><rect x="95.7685%" y="549" width="0.2709%" height="15" fill="rgb(251,153,30)" fg:x="34288" fg:w="97"/><text x="96.0185%" y="559.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (88 samples, 0.25%)</title><rect x="95.7936%" y="533" width="0.2458%" height="15" fill="rgb(239,152,38)" fg:x="34297" fg:w="88"/><text x="96.0436%" y="543.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (41 samples, 0.11%)</title><rect x="95.9249%" y="517" width="0.1145%" height="15" fill="rgb(249,139,47)" fg:x="34344" fg:w="41"/><text x="96.1749%" y="527.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (7 samples, 0.02%)</title><rect x="96.0199%" y="501" width="0.0196%" height="15" fill="rgb(244,64,35)" fg:x="34378" fg:w="7"/><text x="96.2699%" y="511.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (230 samples, 0.64%)</title><rect x="95.4417%" y="613" width="0.6424%" height="15" fill="rgb(216,46,15)" fg:x="34171" fg:w="230"/><text x="95.6917%" y="623.50"></text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (223 samples, 0.62%)</title><rect x="95.4613%" y="597" width="0.6229%" height="15" fill="rgb(250,74,19)" fg:x="34178" fg:w="223"/><text x="95.7113%" y="607.50"></text></g><g><title>serde_json::read::next_or_eof (123 samples, 0.34%)</title><rect x="95.7406%" y="581" width="0.3435%" height="15" fill="rgb(249,42,33)" fg:x="34278" fg:w="123"/><text x="95.9906%" y="591.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (123 samples, 0.34%)</title><rect x="95.7406%" y="565" width="0.3435%" height="15" fill="rgb(242,149,17)" fg:x="34278" fg:w="123"/><text x="95.9906%" y="575.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (16 samples, 0.04%)</title><rect x="96.0394%" y="549" width="0.0447%" height="15" fill="rgb(244,29,21)" fg:x="34385" fg:w="16"/><text x="96.2894%" y="559.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (242 samples, 0.68%)</title><rect x="95.4306%" y="677" width="0.6759%" height="15" fill="rgb(220,130,37)" fg:x="34167" fg:w="242"/><text x="95.6806%" y="687.50"></text></g><g><title>&lt;yt_history::parser::json_parser::_::&lt;impl serde::de::Deserialize for yt_history::parser::json_parser::DataRow&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (242 samples, 0.68%)</title><rect x="95.4306%" y="661" width="0.6759%" height="15" fill="rgb(211,67,2)" fg:x="34167" fg:w="242"/><text x="95.6806%" y="671.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (242 samples, 0.68%)</title><rect x="95.4306%" y="645" width="0.6759%" height="15" fill="rgb(235,68,52)" fg:x="34167" fg:w="242"/><text x="95.6806%" y="655.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (242 samples, 0.68%)</title><rect x="95.4306%" y="629" width="0.6759%" height="15" fill="rgb(246,142,3)" fg:x="34167" fg:w="242"/><text x="95.6806%" y="639.50"></text></g><g><title>&lt;yt_history::parser::json_parser::_::&lt;impl serde::de::Deserialize for yt_history::parser::json_parser::DataRow&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (8 samples, 0.02%)</title><rect x="96.0841%" y="613" width="0.0223%" height="15" fill="rgb(241,25,7)" fg:x="34401" fg:w="8"/><text x="96.3341%" y="623.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (5 samples, 0.01%)</title><rect x="96.3355%" y="581" width="0.0140%" height="15" fill="rgb(242,119,39)" fg:x="34491" fg:w="5"/><text x="96.5855%" y="591.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (5 samples, 0.01%)</title><rect x="96.3355%" y="565" width="0.0140%" height="15" fill="rgb(241,98,45)" fg:x="34491" fg:w="5"/><text x="96.5855%" y="575.50"></text></g><g><title>serde::de::MapAccess::next_key (341 samples, 0.95%)</title><rect x="95.4278%" y="709" width="0.9524%" height="15" fill="rgb(254,28,30)" fg:x="34166" fg:w="341"/><text x="95.6778%" y="719.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (341 samples, 0.95%)</title><rect x="95.4278%" y="693" width="0.9524%" height="15" fill="rgb(241,142,54)" fg:x="34166" fg:w="341"/><text x="95.6778%" y="703.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (97 samples, 0.27%)</title><rect x="96.1093%" y="677" width="0.2709%" height="15" fill="rgb(222,85,15)" fg:x="34410" fg:w="97"/><text x="96.3593%" y="687.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (93 samples, 0.26%)</title><rect x="96.1204%" y="661" width="0.2598%" height="15" fill="rgb(210,85,47)" fg:x="34414" fg:w="93"/><text x="96.3704%" y="671.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (93 samples, 0.26%)</title><rect x="96.1204%" y="645" width="0.2598%" height="15" fill="rgb(224,206,25)" fg:x="34414" fg:w="93"/><text x="96.3704%" y="655.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 0.25%)</title><rect x="96.1260%" y="629" width="0.2542%" height="15" fill="rgb(243,201,19)" fg:x="34416" fg:w="91"/><text x="96.3760%" y="639.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 0.20%)</title><rect x="96.1819%" y="613" width="0.1983%" height="15" fill="rgb(236,59,4)" fg:x="34436" fg:w="71"/><text x="96.4319%" y="623.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (35 samples, 0.10%)</title><rect x="96.2824%" y="597" width="0.0978%" height="15" fill="rgb(254,179,45)" fg:x="34472" fg:w="35"/><text x="96.5324%" y="607.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (8 samples, 0.02%)</title><rect x="96.3578%" y="581" width="0.0223%" height="15" fill="rgb(226,14,10)" fg:x="34499" fg:w="8"/><text x="96.6078%" y="591.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (29 samples, 0.08%)</title><rect x="96.3969%" y="613" width="0.0810%" height="15" fill="rgb(244,27,41)" fg:x="34513" fg:w="29"/><text x="96.6469%" y="623.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (29 samples, 0.08%)</title><rect x="96.3969%" y="597" width="0.0810%" height="15" fill="rgb(235,35,32)" fg:x="34513" fg:w="29"/><text x="96.6469%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (29 samples, 0.08%)</title><rect x="96.3969%" y="581" width="0.0810%" height="15" fill="rgb(218,68,31)" fg:x="34513" fg:w="29"/><text x="96.6469%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (29 samples, 0.08%)</title><rect x="96.3969%" y="565" width="0.0810%" height="15" fill="rgb(207,120,37)" fg:x="34513" fg:w="29"/><text x="96.6469%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (29 samples, 0.08%)</title><rect x="96.3969%" y="549" width="0.0810%" height="15" fill="rgb(227,98,0)" fg:x="34513" fg:w="29"/><text x="96.6469%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (29 samples, 0.08%)</title><rect x="96.3969%" y="533" width="0.0810%" height="15" fill="rgb(207,7,3)" fg:x="34513" fg:w="29"/><text x="96.6469%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (29 samples, 0.08%)</title><rect x="96.3969%" y="517" width="0.0810%" height="15" fill="rgb(206,98,19)" fg:x="34513" fg:w="29"/><text x="96.6469%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (29 samples, 0.08%)</title><rect x="96.3969%" y="501" width="0.0810%" height="15" fill="rgb(217,5,26)" fg:x="34513" fg:w="29"/><text x="96.6469%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (29 samples, 0.08%)</title><rect x="96.3969%" y="485" width="0.0810%" height="15" fill="rgb(235,190,38)" fg:x="34513" fg:w="29"/><text x="96.6469%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (29 samples, 0.08%)</title><rect x="96.3969%" y="469" width="0.0810%" height="15" fill="rgb(247,86,24)" fg:x="34513" fg:w="29"/><text x="96.6469%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28 samples, 0.08%)</title><rect x="96.3997%" y="453" width="0.0782%" height="15" fill="rgb(205,101,16)" fg:x="34514" fg:w="28"/><text x="96.6497%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28 samples, 0.08%)</title><rect x="96.3997%" y="437" width="0.0782%" height="15" fill="rgb(246,168,33)" fg:x="34514" fg:w="28"/><text x="96.6497%" y="447.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.08%)</title><rect x="96.3997%" y="421" width="0.0782%" height="15" fill="rgb(231,114,1)" fg:x="34514" fg:w="28"/><text x="96.6497%" y="431.50"></text></g><g><title>malloc (26 samples, 0.07%)</title><rect x="96.4053%" y="405" width="0.0726%" height="15" fill="rgb(207,184,53)" fg:x="34516" fg:w="26"/><text x="96.6553%" y="415.50"></text></g><g><title>[libc.so.6] (19 samples, 0.05%)</title><rect x="96.4249%" y="389" width="0.0531%" height="15" fill="rgb(224,95,51)" fg:x="34523" fg:w="19"/><text x="96.6749%" y="399.50"></text></g><g><title>[unknown] (9 samples, 0.03%)</title><rect x="96.4528%" y="373" width="0.0251%" height="15" fill="rgb(212,188,45)" fg:x="34533" fg:w="9"/><text x="96.7028%" y="383.50"></text></g><g><title>[unknown] (9 samples, 0.03%)</title><rect x="96.4528%" y="357" width="0.0251%" height="15" fill="rgb(223,154,38)" fg:x="34533" fg:w="9"/><text x="96.7028%" y="367.50"></text></g><g><title>[unknown] (9 samples, 0.03%)</title><rect x="96.4528%" y="341" width="0.0251%" height="15" fill="rgb(251,22,52)" fg:x="34533" fg:w="9"/><text x="96.7028%" y="351.50"></text></g><g><title>[unknown] (9 samples, 0.03%)</title><rect x="96.4528%" y="325" width="0.0251%" height="15" fill="rgb(229,209,22)" fg:x="34533" fg:w="9"/><text x="96.7028%" y="335.50"></text></g><g><title>[unknown] (9 samples, 0.03%)</title><rect x="96.4528%" y="309" width="0.0251%" height="15" fill="rgb(234,138,34)" fg:x="34533" fg:w="9"/><text x="96.7028%" y="319.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="96.4556%" y="293" width="0.0223%" height="15" fill="rgb(212,95,11)" fg:x="34534" fg:w="8"/><text x="96.7056%" y="303.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="96.4556%" y="277" width="0.0223%" height="15" fill="rgb(240,179,47)" fg:x="34534" fg:w="8"/><text x="96.7056%" y="287.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="96.4556%" y="261" width="0.0223%" height="15" fill="rgb(240,163,11)" fg:x="34534" fg:w="8"/><text x="96.7056%" y="271.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="96.4556%" y="245" width="0.0223%" height="15" fill="rgb(236,37,12)" fg:x="34534" fg:w="8"/><text x="96.7056%" y="255.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="96.4584%" y="229" width="0.0196%" height="15" fill="rgb(232,164,16)" fg:x="34535" fg:w="7"/><text x="96.7084%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (17 samples, 0.05%)</title><rect x="96.8438%" y="581" width="0.0475%" height="15" fill="rgb(244,205,15)" fg:x="34673" fg:w="17"/><text x="97.0938%" y="591.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (6 samples, 0.02%)</title><rect x="96.8913%" y="549" width="0.0168%" height="15" fill="rgb(223,117,47)" fg:x="34690" fg:w="6"/><text x="97.1413%" y="559.50"></text></g><g><title>core::ops::function::FnOnce::call_once (25 samples, 0.07%)</title><rect x="96.8913%" y="581" width="0.0698%" height="15" fill="rgb(244,107,35)" fg:x="34690" fg:w="25"/><text x="97.1413%" y="591.50"></text></g><g><title>serde_json::read::as_str (25 samples, 0.07%)</title><rect x="96.8913%" y="565" width="0.0698%" height="15" fill="rgb(205,140,8)" fg:x="34690" fg:w="25"/><text x="97.1413%" y="575.50"></text></g><g><title>core::str::converts::from_utf8 (16 samples, 0.04%)</title><rect x="96.9165%" y="549" width="0.0447%" height="15" fill="rgb(228,84,46)" fg:x="34699" fg:w="16"/><text x="97.1665%" y="559.50"></text></g><g><title>core::str::validations::run_utf8_validation (11 samples, 0.03%)</title><rect x="96.9304%" y="533" width="0.0307%" height="15" fill="rgb(254,188,9)" fg:x="34704" fg:w="11"/><text x="97.1804%" y="543.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (13 samples, 0.04%)</title><rect x="97.4555%" y="501" width="0.0363%" height="15" fill="rgb(206,112,54)" fg:x="34892" fg:w="13"/><text x="97.7055%" y="511.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (5 samples, 0.01%)</title><rect x="97.4974%" y="501" width="0.0140%" height="15" fill="rgb(216,84,49)" fg:x="34907" fg:w="5"/><text x="97.7474%" y="511.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (5 samples, 0.01%)</title><rect x="97.4974%" y="485" width="0.0140%" height="15" fill="rgb(214,194,35)" fg:x="34907" fg:w="5"/><text x="97.7474%" y="495.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (5 samples, 0.01%)</title><rect x="97.4974%" y="469" width="0.0140%" height="15" fill="rgb(249,28,3)" fg:x="34907" fg:w="5"/><text x="97.7474%" y="479.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (5 samples, 0.01%)</title><rect x="97.4974%" y="453" width="0.0140%" height="15" fill="rgb(222,56,52)" fg:x="34907" fg:w="5"/><text x="97.7474%" y="463.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (5 samples, 0.01%)</title><rect x="97.4974%" y="437" width="0.0140%" height="15" fill="rgb(245,217,50)" fg:x="34907" fg:w="5"/><text x="97.7474%" y="447.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (5 samples, 0.01%)</title><rect x="97.4974%" y="421" width="0.0140%" height="15" fill="rgb(213,201,24)" fg:x="34907" fg:w="5"/><text x="97.7474%" y="431.50"></text></g><g><title>read (5 samples, 0.01%)</title><rect x="97.4974%" y="405" width="0.0140%" height="15" fill="rgb(248,116,28)" fg:x="34907" fg:w="5"/><text x="97.7474%" y="415.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="97.4974%" y="389" width="0.0140%" height="15" fill="rgb(219,72,43)" fg:x="34907" fg:w="5"/><text x="97.7474%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="97.4974%" y="373" width="0.0140%" height="15" fill="rgb(209,138,14)" fg:x="34907" fg:w="5"/><text x="97.7474%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="97.4974%" y="357" width="0.0140%" height="15" fill="rgb(222,18,33)" fg:x="34907" fg:w="5"/><text x="97.7474%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="97.4974%" y="341" width="0.0140%" height="15" fill="rgb(213,199,7)" fg:x="34907" fg:w="5"/><text x="97.7474%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="97.4974%" y="325" width="0.0140%" height="15" fill="rgb(250,110,10)" fg:x="34907" fg:w="5"/><text x="97.7474%" y="335.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="97.5002%" y="309" width="0.0112%" height="15" fill="rgb(248,123,6)" fg:x="34908" fg:w="4"/><text x="97.7502%" y="319.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::pos (13 samples, 0.04%)</title><rect x="97.5198%" y="501" width="0.0363%" height="15" fill="rgb(206,91,31)" fg:x="34915" fg:w="13"/><text x="97.7698%" y="511.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (221 samples, 0.62%)</title><rect x="97.0030%" y="549" width="0.6173%" height="15" fill="rgb(211,154,13)" fg:x="34730" fg:w="221"/><text x="97.2530%" y="559.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (198 samples, 0.55%)</title><rect x="97.0673%" y="533" width="0.5530%" height="15" fill="rgb(225,148,7)" fg:x="34753" fg:w="198"/><text x="97.3173%" y="543.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (101 samples, 0.28%)</title><rect x="97.3382%" y="517" width="0.2821%" height="15" fill="rgb(220,160,43)" fg:x="34850" fg:w="101"/><text x="97.5882%" y="527.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (23 samples, 0.06%)</title><rect x="97.5561%" y="501" width="0.0642%" height="15" fill="rgb(213,52,39)" fg:x="34928" fg:w="23"/><text x="97.8061%" y="511.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (34 samples, 0.09%)</title><rect x="97.6203%" y="549" width="0.0950%" height="15" fill="rgb(243,137,7)" fg:x="34951" fg:w="34"/><text x="97.8703%" y="559.50"></text></g><g><title>serde_json::read::next_or_eof (271 samples, 0.76%)</title><rect x="96.9611%" y="581" width="0.7569%" height="15" fill="rgb(230,79,13)" fg:x="34715" fg:w="271"/><text x="97.2111%" y="591.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (271 samples, 0.76%)</title><rect x="96.9611%" y="565" width="0.7569%" height="15" fill="rgb(247,105,23)" fg:x="34715" fg:w="271"/><text x="97.2111%" y="575.50"></text></g><g><title>serde_json::read::decode_hex_val (7 samples, 0.02%)</title><rect x="97.7264%" y="549" width="0.0196%" height="15" fill="rgb(223,179,41)" fg:x="34989" fg:w="7"/><text x="97.9764%" y="559.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::decode_hex_escape (19 samples, 0.05%)</title><rect x="97.7181%" y="565" width="0.0531%" height="15" fill="rgb(218,9,34)" fg:x="34986" fg:w="19"/><text x="97.9681%" y="575.50"></text></g><g><title>serde_json::read::next_or_eof (9 samples, 0.03%)</title><rect x="97.7460%" y="549" width="0.0251%" height="15" fill="rgb(222,106,8)" fg:x="34996" fg:w="9"/><text x="97.9960%" y="559.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (9 samples, 0.03%)</title><rect x="97.7460%" y="533" width="0.0251%" height="15" fill="rgb(211,220,0)" fg:x="34996" fg:w="9"/><text x="97.9960%" y="543.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.02%)</title><rect x="97.7488%" y="517" width="0.0223%" height="15" fill="rgb(229,52,16)" fg:x="34997" fg:w="8"/><text x="97.9988%" y="527.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.02%)</title><rect x="97.7516%" y="501" width="0.0196%" height="15" fill="rgb(212,155,18)" fg:x="34998" fg:w="7"/><text x="98.0016%" y="511.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.01%)</title><rect x="97.7600%" y="485" width="0.0112%" height="15" fill="rgb(242,21,14)" fg:x="35001" fg:w="4"/><text x="98.0100%" y="495.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.02%)</title><rect x="97.7739%" y="533" width="0.0223%" height="15" fill="rgb(222,19,48)" fg:x="35006" fg:w="8"/><text x="98.0239%" y="543.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.02%)</title><rect x="97.7739%" y="517" width="0.0223%" height="15" fill="rgb(232,45,27)" fg:x="35006" fg:w="8"/><text x="98.0239%" y="527.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (473 samples, 1.32%)</title><rect x="96.4779%" y="613" width="1.3211%" height="15" fill="rgb(249,103,42)" fg:x="34542" fg:w="473"/><text x="96.7279%" y="623.50"></text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (473 samples, 1.32%)</title><rect x="96.4779%" y="597" width="1.3211%" height="15" fill="rgb(246,81,33)" fg:x="34542" fg:w="473"/><text x="96.7279%" y="607.50"></text></g><g><title>serde_json::read::parse_escape (29 samples, 0.08%)</title><rect x="97.7181%" y="581" width="0.0810%" height="15" fill="rgb(252,33,42)" fg:x="34986" fg:w="29"/><text x="97.9681%" y="591.50"></text></g><g><title>serde_json::read::next_or_eof (9 samples, 0.03%)</title><rect x="97.7739%" y="565" width="0.0251%" height="15" fill="rgb(209,212,41)" fg:x="35006" fg:w="9"/><text x="98.0239%" y="575.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (9 samples, 0.03%)</title><rect x="97.7739%" y="549" width="0.0251%" height="15" fill="rgb(207,154,6)" fg:x="35006" fg:w="9"/><text x="98.0239%" y="559.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (525 samples, 1.47%)</title><rect x="96.3802%" y="661" width="1.4664%" height="15" fill="rgb(223,64,47)" fg:x="34507" fg:w="525"/><text x="96.6302%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (525 samples, 1.47%)</title><rect x="96.3802%" y="645" width="1.4664%" height="15" fill="rgb(211,161,38)" fg:x="34507" fg:w="525"/><text x="96.6302%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (524 samples, 1.46%)</title><rect x="96.3830%" y="629" width="1.4636%" height="15" fill="rgb(219,138,40)" fg:x="34508" fg:w="524"/><text x="96.6330%" y="639.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (17 samples, 0.05%)</title><rect x="97.7991%" y="613" width="0.0475%" height="15" fill="rgb(241,228,46)" fg:x="35015" fg:w="17"/><text x="98.0491%" y="623.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (17 samples, 0.05%)</title><rect x="97.7991%" y="597" width="0.0475%" height="15" fill="rgb(223,209,38)" fg:x="35015" fg:w="17"/><text x="98.0491%" y="607.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (17 samples, 0.05%)</title><rect x="97.7991%" y="581" width="0.0475%" height="15" fill="rgb(236,164,45)" fg:x="35015" fg:w="17"/><text x="98.0491%" y="591.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.05%)</title><rect x="97.7991%" y="565" width="0.0475%" height="15" fill="rgb(231,15,5)" fg:x="35015" fg:w="17"/><text x="98.0491%" y="575.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.03%)</title><rect x="97.8130%" y="549" width="0.0335%" height="15" fill="rgb(252,35,15)" fg:x="35020" fg:w="12"/><text x="98.0630%" y="559.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.01%)</title><rect x="97.8354%" y="533" width="0.0112%" height="15" fill="rgb(248,181,18)" fg:x="35028" fg:w="4"/><text x="98.0854%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (34 samples, 0.09%)</title><rect x="97.8912%" y="565" width="0.0950%" height="15" fill="rgb(233,39,42)" fg:x="35048" fg:w="34"/><text x="98.1412%" y="575.50"></text></g><g><title>malloc (34 samples, 0.09%)</title><rect x="97.8912%" y="549" width="0.0950%" height="15" fill="rgb(238,110,33)" fg:x="35048" fg:w="34"/><text x="98.1412%" y="559.50"></text></g><g><title>[libc.so.6] (31 samples, 0.09%)</title><rect x="97.8996%" y="533" width="0.0866%" height="15" fill="rgb(233,195,10)" fg:x="35051" fg:w="31"/><text x="98.1496%" y="543.50"></text></g><g><title>[unknown] (23 samples, 0.06%)</title><rect x="97.9220%" y="517" width="0.0642%" height="15" fill="rgb(254,105,3)" fg:x="35059" fg:w="23"/><text x="98.1720%" y="527.50"></text></g><g><title>[unknown] (21 samples, 0.06%)</title><rect x="97.9275%" y="501" width="0.0587%" height="15" fill="rgb(221,225,9)" fg:x="35061" fg:w="21"/><text x="98.1775%" y="511.50"></text></g><g><title>[unknown] (20 samples, 0.06%)</title><rect x="97.9303%" y="485" width="0.0559%" height="15" fill="rgb(224,227,45)" fg:x="35062" fg:w="20"/><text x="98.1803%" y="495.50"></text></g><g><title>[unknown] (20 samples, 0.06%)</title><rect x="97.9303%" y="469" width="0.0559%" height="15" fill="rgb(229,198,43)" fg:x="35062" fg:w="20"/><text x="98.1803%" y="479.50"></text></g><g><title>[unknown] (19 samples, 0.05%)</title><rect x="97.9331%" y="453" width="0.0531%" height="15" fill="rgb(206,209,35)" fg:x="35063" fg:w="19"/><text x="98.1831%" y="463.50"></text></g><g><title>[unknown] (16 samples, 0.04%)</title><rect x="97.9415%" y="437" width="0.0447%" height="15" fill="rgb(245,195,53)" fg:x="35066" fg:w="16"/><text x="98.1915%" y="447.50"></text></g><g><title>[unknown] (16 samples, 0.04%)</title><rect x="97.9415%" y="421" width="0.0447%" height="15" fill="rgb(240,92,26)" fg:x="35066" fg:w="16"/><text x="98.1915%" y="431.50"></text></g><g><title>[unknown] (16 samples, 0.04%)</title><rect x="97.9415%" y="405" width="0.0447%" height="15" fill="rgb(207,40,23)" fg:x="35066" fg:w="16"/><text x="98.1915%" y="415.50"></text></g><g><title>[unknown] (15 samples, 0.04%)</title><rect x="97.9443%" y="389" width="0.0419%" height="15" fill="rgb(223,111,35)" fg:x="35067" fg:w="15"/><text x="98.1943%" y="399.50"></text></g><g><title>[unknown] (15 samples, 0.04%)</title><rect x="97.9443%" y="373" width="0.0419%" height="15" fill="rgb(229,147,28)" fg:x="35067" fg:w="15"/><text x="98.1943%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (36 samples, 0.10%)</title><rect x="97.8884%" y="597" width="0.1006%" height="15" fill="rgb(211,29,28)" fg:x="35047" fg:w="36"/><text x="98.1384%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (36 samples, 0.10%)</title><rect x="97.8884%" y="581" width="0.1006%" height="15" fill="rgb(228,72,33)" fg:x="35047" fg:w="36"/><text x="98.1384%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (6 samples, 0.02%)</title><rect x="97.9890%" y="597" width="0.0168%" height="15" fill="rgb(205,214,31)" fg:x="35083" fg:w="6"/><text x="98.2390%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (6 samples, 0.02%)</title><rect x="97.9890%" y="581" width="0.0168%" height="15" fill="rgb(224,111,15)" fg:x="35083" fg:w="6"/><text x="98.2390%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (46 samples, 0.13%)</title><rect x="97.8857%" y="613" width="0.1285%" height="15" fill="rgb(253,21,26)" fg:x="35046" fg:w="46"/><text x="98.1357%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (20 samples, 0.06%)</title><rect x="98.0532%" y="405" width="0.0559%" height="15" fill="rgb(245,139,43)" fg:x="35106" fg:w="20"/><text x="98.3032%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20 samples, 0.06%)</title><rect x="98.0532%" y="389" width="0.0559%" height="15" fill="rgb(252,170,7)" fg:x="35106" fg:w="20"/><text x="98.3032%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (20 samples, 0.06%)</title><rect x="98.0532%" y="373" width="0.0559%" height="15" fill="rgb(231,118,14)" fg:x="35106" fg:w="20"/><text x="98.3032%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.06%)</title><rect x="98.0532%" y="357" width="0.0559%" height="15" fill="rgb(238,83,0)" fg:x="35106" fg:w="20"/><text x="98.3032%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.06%)</title><rect x="98.0532%" y="341" width="0.0559%" height="15" fill="rgb(221,39,39)" fg:x="35106" fg:w="20"/><text x="98.3032%" y="351.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.06%)</title><rect x="98.0532%" y="325" width="0.0559%" height="15" fill="rgb(222,119,46)" fg:x="35106" fg:w="20"/><text x="98.3032%" y="335.50"></text></g><g><title>malloc (19 samples, 0.05%)</title><rect x="98.0560%" y="309" width="0.0531%" height="15" fill="rgb(222,165,49)" fg:x="35107" fg:w="19"/><text x="98.3060%" y="319.50"></text></g><g><title>[libc.so.6] (12 samples, 0.03%)</title><rect x="98.0756%" y="293" width="0.0335%" height="15" fill="rgb(219,113,52)" fg:x="35114" fg:w="12"/><text x="98.3256%" y="303.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="98.0979%" y="277" width="0.0112%" height="15" fill="rgb(214,7,15)" fg:x="35122" fg:w="4"/><text x="98.3479%" y="287.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="98.0979%" y="261" width="0.0112%" height="15" fill="rgb(235,32,4)" fg:x="35122" fg:w="4"/><text x="98.3479%" y="271.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="98.0979%" y="245" width="0.0112%" height="15" fill="rgb(238,90,54)" fg:x="35122" fg:w="4"/><text x="98.3479%" y="255.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="98.0979%" y="229" width="0.0112%" height="15" fill="rgb(213,208,19)" fg:x="35122" fg:w="4"/><text x="98.3479%" y="239.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="98.0979%" y="213" width="0.0112%" height="15" fill="rgb(233,156,4)" fg:x="35122" fg:w="4"/><text x="98.3479%" y="223.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (22 samples, 0.06%)</title><rect x="98.0532%" y="517" width="0.0614%" height="15" fill="rgb(207,194,5)" fg:x="35106" fg:w="22"/><text x="98.3032%" y="527.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (22 samples, 0.06%)</title><rect x="98.0532%" y="501" width="0.0614%" height="15" fill="rgb(206,111,30)" fg:x="35106" fg:w="22"/><text x="98.3032%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (22 samples, 0.06%)</title><rect x="98.0532%" y="485" width="0.0614%" height="15" fill="rgb(243,70,54)" fg:x="35106" fg:w="22"/><text x="98.3032%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (22 samples, 0.06%)</title><rect x="98.0532%" y="469" width="0.0614%" height="15" fill="rgb(242,28,8)" fg:x="35106" fg:w="22"/><text x="98.3032%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (22 samples, 0.06%)</title><rect x="98.0532%" y="453" width="0.0614%" height="15" fill="rgb(219,106,18)" fg:x="35106" fg:w="22"/><text x="98.3032%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (22 samples, 0.06%)</title><rect x="98.0532%" y="437" width="0.0614%" height="15" fill="rgb(244,222,10)" fg:x="35106" fg:w="22"/><text x="98.3032%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (22 samples, 0.06%)</title><rect x="98.0532%" y="421" width="0.0614%" height="15" fill="rgb(236,179,52)" fg:x="35106" fg:w="22"/><text x="98.3032%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7 samples, 0.02%)</title><rect x="98.1845%" y="485" width="0.0196%" height="15" fill="rgb(213,23,39)" fg:x="35153" fg:w="7"/><text x="98.4345%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once (10 samples, 0.03%)</title><rect x="98.2041%" y="485" width="0.0279%" height="15" fill="rgb(238,48,10)" fg:x="35160" fg:w="10"/><text x="98.4541%" y="495.50"></text></g><g><title>serde_json::read::as_str (10 samples, 0.03%)</title><rect x="98.2041%" y="469" width="0.0279%" height="15" fill="rgb(251,196,23)" fg:x="35160" fg:w="10"/><text x="98.4541%" y="479.50"></text></g><g><title>core::str::converts::from_utf8 (7 samples, 0.02%)</title><rect x="98.2124%" y="453" width="0.0196%" height="15" fill="rgb(250,152,24)" fg:x="35163" fg:w="7"/><text x="98.4624%" y="463.50"></text></g><g><title>core::str::validations::run_utf8_validation (5 samples, 0.01%)</title><rect x="98.2180%" y="437" width="0.0140%" height="15" fill="rgb(209,150,17)" fg:x="35165" fg:w="5"/><text x="98.4680%" y="447.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.12%)</title><rect x="98.2376%" y="453" width="0.1173%" height="15" fill="rgb(234,202,34)" fg:x="35172" fg:w="42"/><text x="98.4876%" y="463.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.09%)</title><rect x="98.2599%" y="437" width="0.0950%" height="15" fill="rgb(253,148,53)" fg:x="35180" fg:w="34"/><text x="98.5099%" y="447.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (14 samples, 0.04%)</title><rect x="98.3158%" y="421" width="0.0391%" height="15" fill="rgb(218,129,16)" fg:x="35200" fg:w="14"/><text x="98.5658%" y="431.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (4 samples, 0.01%)</title><rect x="98.3437%" y="405" width="0.0112%" height="15" fill="rgb(216,85,19)" fg:x="35210" fg:w="4"/><text x="98.5937%" y="415.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (118 samples, 0.33%)</title><rect x="98.0449%" y="565" width="0.3296%" height="15" fill="rgb(235,228,7)" fg:x="35103" fg:w="118"/><text x="98.2949%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (118 samples, 0.33%)</title><rect x="98.0449%" y="549" width="0.3296%" height="15" fill="rgb(245,175,0)" fg:x="35103" fg:w="118"/><text x="98.2949%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (118 samples, 0.33%)</title><rect x="98.0449%" y="533" width="0.3296%" height="15" fill="rgb(208,168,36)" fg:x="35103" fg:w="118"/><text x="98.2949%" y="543.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (93 samples, 0.26%)</title><rect x="98.1147%" y="517" width="0.2598%" height="15" fill="rgb(246,171,24)" fg:x="35128" fg:w="93"/><text x="98.3647%" y="527.50"></text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (92 samples, 0.26%)</title><rect x="98.1175%" y="501" width="0.2570%" height="15" fill="rgb(215,142,24)" fg:x="35129" fg:w="92"/><text x="98.3675%" y="511.50"></text></g><g><title>serde_json::read::next_or_eof (51 samples, 0.14%)</title><rect x="98.2320%" y="485" width="0.1424%" height="15" fill="rgb(250,187,7)" fg:x="35170" fg:w="51"/><text x="98.4820%" y="495.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (51 samples, 0.14%)</title><rect x="98.2320%" y="469" width="0.1424%" height="15" fill="rgb(228,66,33)" fg:x="35170" fg:w="51"/><text x="98.4820%" y="479.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (7 samples, 0.02%)</title><rect x="98.3549%" y="453" width="0.0196%" height="15" fill="rgb(234,215,21)" fg:x="35214" fg:w="7"/><text x="98.6049%" y="463.50"></text></g><g><title>core::ops::function::FnOnce::call_once (6 samples, 0.02%)</title><rect x="98.4247%" y="389" width="0.0168%" height="15" fill="rgb(222,191,20)" fg:x="35239" fg:w="6"/><text x="98.6747%" y="399.50"></text></g><g><title>serde_json::read::as_str (6 samples, 0.02%)</title><rect x="98.4247%" y="373" width="0.0168%" height="15" fill="rgb(245,79,54)" fg:x="35239" fg:w="6"/><text x="98.6747%" y="383.50"></text></g><g><title>core::str::converts::from_utf8 (4 samples, 0.01%)</title><rect x="98.4303%" y="357" width="0.0112%" height="15" fill="rgb(240,10,37)" fg:x="35241" fg:w="4"/><text x="98.6803%" y="367.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.02%)</title><rect x="98.4443%" y="357" width="0.0196%" height="15" fill="rgb(214,192,32)" fg:x="35246" fg:w="7"/><text x="98.6943%" y="367.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.02%)</title><rect x="98.4443%" y="341" width="0.0196%" height="15" fill="rgb(209,36,54)" fg:x="35246" fg:w="7"/><text x="98.6943%" y="351.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (28 samples, 0.08%)</title><rect x="98.3940%" y="421" width="0.0782%" height="15" fill="rgb(220,10,11)" fg:x="35228" fg:w="28"/><text x="98.6440%" y="431.50"></text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (27 samples, 0.08%)</title><rect x="98.3968%" y="405" width="0.0754%" height="15" fill="rgb(221,106,17)" fg:x="35229" fg:w="27"/><text x="98.6468%" y="415.50"></text></g><g><title>serde_json::read::next_or_eof (11 samples, 0.03%)</title><rect x="98.4415%" y="389" width="0.0307%" height="15" fill="rgb(251,142,44)" fg:x="35245" fg:w="11"/><text x="98.6915%" y="399.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (11 samples, 0.03%)</title><rect x="98.4415%" y="373" width="0.0307%" height="15" fill="rgb(238,13,15)" fg:x="35245" fg:w="11"/><text x="98.6915%" y="383.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (31 samples, 0.09%)</title><rect x="98.3884%" y="485" width="0.0866%" height="15" fill="rgb(208,107,27)" fg:x="35226" fg:w="31"/><text x="98.6384%" y="495.50"></text></g><g><title>&lt;yt_history::parser::json_parser::_::&lt;impl serde::de::Deserialize for yt_history::parser::json_parser::Subtitles&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (31 samples, 0.09%)</title><rect x="98.3884%" y="469" width="0.0866%" height="15" fill="rgb(205,136,37)" fg:x="35226" fg:w="31"/><text x="98.6384%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (31 samples, 0.09%)</title><rect x="98.3884%" y="453" width="0.0866%" height="15" fill="rgb(250,205,27)" fg:x="35226" fg:w="31"/><text x="98.6384%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (31 samples, 0.09%)</title><rect x="98.3884%" y="437" width="0.0866%" height="15" fill="rgb(210,80,43)" fg:x="35226" fg:w="31"/><text x="98.6384%" y="447.50"></text></g><g><title>serde::de::MapAccess::next_key (69 samples, 0.19%)</title><rect x="98.3884%" y="517" width="0.1927%" height="15" fill="rgb(247,160,36)" fg:x="35226" fg:w="69"/><text x="98.6384%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (69 samples, 0.19%)</title><rect x="98.3884%" y="501" width="0.1927%" height="15" fill="rgb(234,13,49)" fg:x="35226" fg:w="69"/><text x="98.6384%" y="511.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (38 samples, 0.11%)</title><rect x="98.4750%" y="485" width="0.1061%" height="15" fill="rgb(234,122,0)" fg:x="35257" fg:w="38"/><text x="98.7250%" y="495.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (37 samples, 0.10%)</title><rect x="98.4778%" y="469" width="0.1033%" height="15" fill="rgb(207,146,38)" fg:x="35258" fg:w="37"/><text x="98.7278%" y="479.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (37 samples, 0.10%)</title><rect x="98.4778%" y="453" width="0.1033%" height="15" fill="rgb(207,177,25)" fg:x="35258" fg:w="37"/><text x="98.7278%" y="463.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.10%)</title><rect x="98.4778%" y="437" width="0.1033%" height="15" fill="rgb(211,178,42)" fg:x="35258" fg:w="37"/><text x="98.7278%" y="447.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.09%)</title><rect x="98.4917%" y="421" width="0.0894%" height="15" fill="rgb(230,69,54)" fg:x="35263" fg:w="32"/><text x="98.7417%" y="431.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (18 samples, 0.05%)</title><rect x="98.5308%" y="405" width="0.0503%" height="15" fill="rgb(214,135,41)" fg:x="35277" fg:w="18"/><text x="98.7808%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13 samples, 0.04%)</title><rect x="98.5895%" y="309" width="0.0363%" height="15" fill="rgb(237,67,25)" fg:x="35298" fg:w="13"/><text x="98.8395%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13 samples, 0.04%)</title><rect x="98.5895%" y="293" width="0.0363%" height="15" fill="rgb(222,189,50)" fg:x="35298" fg:w="13"/><text x="98.8395%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13 samples, 0.04%)</title><rect x="98.5895%" y="277" width="0.0363%" height="15" fill="rgb(245,148,34)" fg:x="35298" fg:w="13"/><text x="98.8395%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.04%)</title><rect x="98.5895%" y="261" width="0.0363%" height="15" fill="rgb(222,29,6)" fg:x="35298" fg:w="13"/><text x="98.8395%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.04%)</title><rect x="98.5895%" y="245" width="0.0363%" height="15" fill="rgb(221,189,43)" fg:x="35298" fg:w="13"/><text x="98.8395%" y="255.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.04%)</title><rect x="98.5895%" y="229" width="0.0363%" height="15" fill="rgb(207,36,27)" fg:x="35298" fg:w="13"/><text x="98.8395%" y="239.50"></text></g><g><title>malloc (12 samples, 0.03%)</title><rect x="98.5923%" y="213" width="0.0335%" height="15" fill="rgb(217,90,24)" fg:x="35299" fg:w="12"/><text x="98.8423%" y="223.50"></text></g><g><title>[libc.so.6] (9 samples, 0.03%)</title><rect x="98.6007%" y="197" width="0.0251%" height="15" fill="rgb(224,66,35)" fg:x="35302" fg:w="9"/><text x="98.8507%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="98.6118%" y="181" width="0.0140%" height="15" fill="rgb(221,13,50)" fg:x="35306" fg:w="5"/><text x="98.8618%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="98.6118%" y="165" width="0.0140%" height="15" fill="rgb(236,68,49)" fg:x="35306" fg:w="5"/><text x="98.8618%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="98.6118%" y="149" width="0.0140%" height="15" fill="rgb(229,146,28)" fg:x="35306" fg:w="5"/><text x="98.8618%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="98.6118%" y="133" width="0.0140%" height="15" fill="rgb(225,31,38)" fg:x="35306" fg:w="5"/><text x="98.8618%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="98.6118%" y="117" width="0.0140%" height="15" fill="rgb(250,208,3)" fg:x="35306" fg:w="5"/><text x="98.8618%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="98.6118%" y="101" width="0.0140%" height="15" fill="rgb(246,54,23)" fg:x="35306" fg:w="5"/><text x="98.8618%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="98.6118%" y="85" width="0.0140%" height="15" fill="rgb(243,76,11)" fg:x="35306" fg:w="5"/><text x="98.8618%" y="95.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="98.6118%" y="69" width="0.0140%" height="15" fill="rgb(245,21,50)" fg:x="35306" fg:w="5"/><text x="98.8618%" y="79.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="98.6146%" y="53" width="0.0112%" height="15" fill="rgb(228,9,43)" fg:x="35307" fg:w="4"/><text x="98.8646%" y="63.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="98.6146%" y="37" width="0.0112%" height="15" fill="rgb(208,100,47)" fg:x="35307" fg:w="4"/><text x="98.8646%" y="47.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (15 samples, 0.04%)</title><rect x="98.5895%" y="421" width="0.0419%" height="15" fill="rgb(232,26,8)" fg:x="35298" fg:w="15"/><text x="98.8395%" y="431.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (15 samples, 0.04%)</title><rect x="98.5895%" y="405" width="0.0419%" height="15" fill="rgb(216,166,38)" fg:x="35298" fg:w="15"/><text x="98.8395%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (15 samples, 0.04%)</title><rect x="98.5895%" y="389" width="0.0419%" height="15" fill="rgb(251,202,51)" fg:x="35298" fg:w="15"/><text x="98.8395%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (15 samples, 0.04%)</title><rect x="98.5895%" y="373" width="0.0419%" height="15" fill="rgb(254,216,34)" fg:x="35298" fg:w="15"/><text x="98.8395%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.04%)</title><rect x="98.5895%" y="357" width="0.0419%" height="15" fill="rgb(251,32,27)" fg:x="35298" fg:w="15"/><text x="98.8395%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.04%)</title><rect x="98.5895%" y="341" width="0.0419%" height="15" fill="rgb(208,127,28)" fg:x="35298" fg:w="15"/><text x="98.8395%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.04%)</title><rect x="98.5895%" y="325" width="0.0419%" height="15" fill="rgb(224,137,22)" fg:x="35298" fg:w="15"/><text x="98.8395%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 0.03%)</title><rect x="98.7934%" y="389" width="0.0251%" height="15" fill="rgb(254,70,32)" fg:x="35371" fg:w="9"/><text x="99.0434%" y="399.50"></text></g><g><title>core::ops::function::FnOnce::call_once (15 samples, 0.04%)</title><rect x="98.8185%" y="389" width="0.0419%" height="15" fill="rgb(229,75,37)" fg:x="35380" fg:w="15"/><text x="99.0685%" y="399.50"></text></g><g><title>serde_json::read::as_str (15 samples, 0.04%)</title><rect x="98.8185%" y="373" width="0.0419%" height="15" fill="rgb(252,64,23)" fg:x="35380" fg:w="15"/><text x="99.0685%" y="383.50"></text></g><g><title>core::str::converts::from_utf8 (10 samples, 0.03%)</title><rect x="98.8325%" y="357" width="0.0279%" height="15" fill="rgb(232,162,48)" fg:x="35385" fg:w="10"/><text x="99.0825%" y="367.50"></text></g><g><title>core::str::validations::run_utf8_validation (7 samples, 0.02%)</title><rect x="98.8409%" y="341" width="0.0196%" height="15" fill="rgb(246,160,12)" fg:x="35388" fg:w="7"/><text x="99.0909%" y="351.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::pos (5 samples, 0.01%)</title><rect x="99.1230%" y="309" width="0.0140%" height="15" fill="rgb(247,166,0)" fg:x="35489" fg:w="5"/><text x="99.3730%" y="319.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (100 samples, 0.28%)</title><rect x="98.8772%" y="357" width="0.2793%" height="15" fill="rgb(249,219,21)" fg:x="35401" fg:w="100"/><text x="99.1272%" y="367.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (87 samples, 0.24%)</title><rect x="98.9135%" y="341" width="0.2430%" height="15" fill="rgb(205,209,3)" fg:x="35414" fg:w="87"/><text x="99.1635%" y="351.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (40 samples, 0.11%)</title><rect x="99.0448%" y="325" width="0.1117%" height="15" fill="rgb(243,44,1)" fg:x="35461" fg:w="40"/><text x="99.2948%" y="335.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (7 samples, 0.02%)</title><rect x="99.1369%" y="309" width="0.0196%" height="15" fill="rgb(206,159,16)" fg:x="35494" fg:w="7"/><text x="99.3869%" y="319.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (207 samples, 0.58%)</title><rect x="98.6314%" y="421" width="0.5782%" height="15" fill="rgb(244,77,30)" fg:x="35313" fg:w="207"/><text x="98.8814%" y="431.50"></text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (207 samples, 0.58%)</title><rect x="98.6314%" y="405" width="0.5782%" height="15" fill="rgb(218,69,12)" fg:x="35313" fg:w="207"/><text x="98.8814%" y="415.50"></text></g><g><title>serde_json::read::next_or_eof (125 samples, 0.35%)</title><rect x="98.8604%" y="389" width="0.3491%" height="15" fill="rgb(212,87,7)" fg:x="35395" fg:w="125"/><text x="99.1104%" y="399.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (125 samples, 0.35%)</title><rect x="98.8604%" y="373" width="0.3491%" height="15" fill="rgb(245,114,25)" fg:x="35395" fg:w="125"/><text x="99.1104%" y="383.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (19 samples, 0.05%)</title><rect x="99.1565%" y="357" width="0.0531%" height="15" fill="rgb(210,61,42)" fg:x="35501" fg:w="19"/><text x="99.4065%" y="367.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (235 samples, 0.66%)</title><rect x="98.5811%" y="485" width="0.6564%" height="15" fill="rgb(211,52,33)" fg:x="35295" fg:w="235"/><text x="98.8311%" y="495.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (235 samples, 0.66%)</title><rect x="98.5811%" y="469" width="0.6564%" height="15" fill="rgb(234,58,33)" fg:x="35295" fg:w="235"/><text x="98.8311%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (235 samples, 0.66%)</title><rect x="98.5811%" y="453" width="0.6564%" height="15" fill="rgb(220,115,36)" fg:x="35295" fg:w="235"/><text x="98.8311%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (235 samples, 0.66%)</title><rect x="98.5811%" y="437" width="0.6564%" height="15" fill="rgb(243,153,54)" fg:x="35295" fg:w="235"/><text x="98.8311%" y="447.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (10 samples, 0.03%)</title><rect x="99.2096%" y="421" width="0.0279%" height="15" fill="rgb(251,47,18)" fg:x="35520" fg:w="10"/><text x="99.4596%" y="431.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (9 samples, 0.03%)</title><rect x="99.2124%" y="405" width="0.0251%" height="15" fill="rgb(242,102,42)" fg:x="35521" fg:w="9"/><text x="99.4624%" y="415.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (9 samples, 0.03%)</title><rect x="99.2124%" y="389" width="0.0251%" height="15" fill="rgb(234,31,38)" fg:x="35521" fg:w="9"/><text x="99.4624%" y="399.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.03%)</title><rect x="99.2124%" y="373" width="0.0251%" height="15" fill="rgb(221,117,51)" fg:x="35521" fg:w="9"/><text x="99.4624%" y="383.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.02%)</title><rect x="99.2151%" y="357" width="0.0223%" height="15" fill="rgb(212,20,18)" fg:x="35522" fg:w="8"/><text x="99.4651%" y="367.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (430 samples, 1.20%)</title><rect x="98.0449%" y="581" width="1.2010%" height="15" fill="rgb(245,133,36)" fg:x="35103" fg:w="430"/><text x="98.2949%" y="591.50"></text></g><g><title>yt_history::parser::json_parser::_::&lt;impl serde::de::Deserialize for yt_history::parser::json_parser::Subtitles&gt;::deserialize (312 samples, 0.87%)</title><rect x="98.3744%" y="565" width="0.8714%" height="15" fill="rgb(212,6,19)" fg:x="35221" fg:w="312"/><text x="98.6244%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (312 samples, 0.87%)</title><rect x="98.3744%" y="549" width="0.8714%" height="15" fill="rgb(218,1,36)" fg:x="35221" fg:w="312"/><text x="98.6244%" y="559.50"></text></g><g><title>&lt;yt_history::parser::json_parser::_::&lt;impl serde::de::Deserialize for yt_history::parser::json_parser::Subtitles&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (311 samples, 0.87%)</title><rect x="98.3772%" y="533" width="0.8686%" height="15" fill="rgb(246,84,54)" fg:x="35222" fg:w="311"/><text x="98.6272%" y="543.50"></text></g><g><title>serde::de::MapAccess::next_value (238 samples, 0.66%)</title><rect x="98.5811%" y="517" width="0.6647%" height="15" fill="rgb(242,110,6)" fg:x="35295" fg:w="238"/><text x="98.8311%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (238 samples, 0.66%)</title><rect x="98.5811%" y="501" width="0.6647%" height="15" fill="rgb(214,47,5)" fg:x="35295" fg:w="238"/><text x="98.8311%" y="511.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (466 samples, 1.30%)</title><rect x="98.0141%" y="597" width="1.3016%" height="15" fill="rgb(218,159,25)" fg:x="35092" fg:w="466"/><text x="98.2641%" y="607.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (25 samples, 0.07%)</title><rect x="99.2459%" y="581" width="0.0698%" height="15" fill="rgb(215,211,28)" fg:x="35533" fg:w="25"/><text x="99.4959%" y="591.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (21 samples, 0.06%)</title><rect x="99.2570%" y="565" width="0.0587%" height="15" fill="rgb(238,59,32)" fg:x="35537" fg:w="21"/><text x="99.5070%" y="575.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (21 samples, 0.06%)</title><rect x="99.2570%" y="549" width="0.0587%" height="15" fill="rgb(226,82,3)" fg:x="35537" fg:w="21"/><text x="99.5070%" y="559.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.05%)</title><rect x="99.2654%" y="533" width="0.0503%" height="15" fill="rgb(240,164,32)" fg:x="35540" fg:w="18"/><text x="99.5154%" y="543.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.04%)</title><rect x="99.2738%" y="517" width="0.0419%" height="15" fill="rgb(232,46,7)" fg:x="35543" fg:w="15"/><text x="99.5238%" y="527.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (12 samples, 0.03%)</title><rect x="99.2822%" y="501" width="0.0335%" height="15" fill="rgb(229,129,53)" fg:x="35546" fg:w="12"/><text x="99.5322%" y="511.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (523 samples, 1.46%)</title><rect x="97.8605%" y="629" width="1.4608%" height="15" fill="rgb(234,188,29)" fg:x="35037" fg:w="523"/><text x="98.1105%" y="639.50"></text></g><g><title>serde::de::SeqAccess::next_element (468 samples, 1.31%)</title><rect x="98.0141%" y="613" width="1.3072%" height="15" fill="rgb(246,141,4)" fg:x="35092" fg:w="468"/><text x="98.2641%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,064 samples, 2.97%)</title><rect x="96.3802%" y="677" width="2.9718%" height="15" fill="rgb(229,23,39)" fg:x="34507" fg:w="1064"/><text x="96.6302%" y="687.50">&lt;co..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (539 samples, 1.51%)</title><rect x="97.8465%" y="661" width="1.5055%" height="15" fill="rgb(206,12,3)" fg:x="35032" fg:w="539"/><text x="98.0965%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (539 samples, 1.51%)</title><rect x="97.8465%" y="645" width="1.5055%" height="15" fill="rgb(252,226,20)" fg:x="35032" fg:w="539"/><text x="98.0965%" y="655.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (11 samples, 0.03%)</title><rect x="99.3213%" y="629" width="0.0307%" height="15" fill="rgb(216,123,35)" fg:x="35560" fg:w="11"/><text x="99.5713%" y="639.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (11 samples, 0.03%)</title><rect x="99.3213%" y="613" width="0.0307%" height="15" fill="rgb(212,68,40)" fg:x="35560" fg:w="11"/><text x="99.5713%" y="623.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (11 samples, 0.03%)</title><rect x="99.3213%" y="597" width="0.0307%" height="15" fill="rgb(254,125,32)" fg:x="35560" fg:w="11"/><text x="99.5713%" y="607.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.03%)</title><rect x="99.3213%" y="581" width="0.0307%" height="15" fill="rgb(253,97,22)" fg:x="35560" fg:w="11"/><text x="99.5713%" y="591.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.03%)</title><rect x="99.3269%" y="565" width="0.0251%" height="15" fill="rgb(241,101,14)" fg:x="35562" fg:w="9"/><text x="99.5769%" y="575.50"></text></g><g><title>&lt;yt_history::parser::json_parser::_::&lt;impl serde::de::Deserialize for yt_history::parser::json_parser::DataRow&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1,446 samples, 4.04%)</title><rect x="95.3691%" y="725" width="4.0388%" height="15" fill="rgb(238,103,29)" fg:x="34145" fg:w="1446"/><text x="95.6191%" y="735.50">&lt;yt_..</text></g><g><title>serde::de::MapAccess::next_value (1,084 samples, 3.03%)</title><rect x="96.3802%" y="709" width="3.0277%" height="15" fill="rgb(233,195,47)" fg:x="34507" fg:w="1084"/><text x="96.6302%" y="719.50">ser..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1,084 samples, 3.03%)</title><rect x="96.3802%" y="693" width="3.0277%" height="15" fill="rgb(246,218,30)" fg:x="34507" fg:w="1084"/><text x="96.6302%" y="703.50">&lt;se..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (20 samples, 0.06%)</title><rect x="99.3520%" y="677" width="0.0559%" height="15" fill="rgb(219,145,47)" fg:x="35571" fg:w="20"/><text x="99.6020%" y="687.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (19 samples, 0.05%)</title><rect x="99.3548%" y="661" width="0.0531%" height="15" fill="rgb(243,12,26)" fg:x="35572" fg:w="19"/><text x="99.6048%" y="671.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (19 samples, 0.05%)</title><rect x="99.3548%" y="645" width="0.0531%" height="15" fill="rgb(214,87,16)" fg:x="35572" fg:w="19"/><text x="99.6048%" y="655.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (19 samples, 0.05%)</title><rect x="99.3548%" y="629" width="0.0531%" height="15" fill="rgb(208,99,42)" fg:x="35572" fg:w="19"/><text x="99.6048%" y="639.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.05%)</title><rect x="99.3548%" y="613" width="0.0531%" height="15" fill="rgb(253,99,2)" fg:x="35572" fg:w="19"/><text x="99.6048%" y="623.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.04%)</title><rect x="99.3716%" y="597" width="0.0363%" height="15" fill="rgb(220,168,23)" fg:x="35578" fg:w="13"/><text x="99.6216%" y="607.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (8 samples, 0.02%)</title><rect x="99.3855%" y="581" width="0.0223%" height="15" fill="rgb(242,38,24)" fg:x="35583" fg:w="8"/><text x="99.6355%" y="591.50"></text></g><g><title>[libc.so.6] (16 samples, 0.04%)</title><rect x="99.4079%" y="725" width="0.0447%" height="15" fill="rgb(225,182,9)" fg:x="35591" fg:w="16"/><text x="99.6579%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,465 samples, 4.09%)</title><rect x="95.3635%" y="773" width="4.0918%" height="15" fill="rgb(243,178,37)" fg:x="34143" fg:w="1465"/><text x="95.6135%" y="783.50">&lt;cor..</text></g><g><title>yt_history::parser::json_parser::_::&lt;impl serde::de::Deserialize for yt_history::parser::json_parser::DataRow&gt;::deserialize (1,465 samples, 4.09%)</title><rect x="95.3635%" y="757" width="4.0918%" height="15" fill="rgb(232,139,19)" fg:x="34143" fg:w="1465"/><text x="95.6135%" y="767.50">yt_h..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1,465 samples, 4.09%)</title><rect x="95.3635%" y="741" width="4.0918%" height="15" fill="rgb(225,201,24)" fg:x="34143" fg:w="1465"/><text x="95.6135%" y="751.50">&lt;&amp;mu..</text></g><g><title>[libc.so.6] (4 samples, 0.01%)</title><rect x="99.4554%" y="773" width="0.0112%" height="15" fill="rgb(221,47,46)" fg:x="35608" fg:w="4"/><text x="99.7054%" y="783.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,474 samples, 4.12%)</title><rect x="95.3635%" y="789" width="4.1170%" height="15" fill="rgb(249,23,13)" fg:x="34143" fg:w="1474"/><text x="95.6135%" y="799.50">&lt;ser..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (5 samples, 0.01%)</title><rect x="99.4665%" y="773" width="0.0140%" height="15" fill="rgb(219,9,5)" fg:x="35612" fg:w="5"/><text x="99.7165%" y="783.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (5 samples, 0.01%)</title><rect x="99.4665%" y="757" width="0.0140%" height="15" fill="rgb(254,171,16)" fg:x="35612" fg:w="5"/><text x="99.7165%" y="767.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (5 samples, 0.01%)</title><rect x="99.4665%" y="741" width="0.0140%" height="15" fill="rgb(230,171,20)" fg:x="35612" fg:w="5"/><text x="99.7165%" y="751.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.01%)</title><rect x="99.4665%" y="725" width="0.0140%" height="15" fill="rgb(210,71,41)" fg:x="35612" fg:w="5"/><text x="99.7165%" y="735.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="99.4693%" y="709" width="0.0112%" height="15" fill="rgb(206,173,20)" fg:x="35613" fg:w="4"/><text x="99.7193%" y="719.50"></text></g><g><title>yt_history::load_models (35,390 samples, 98.85%)</title><rect x="0.6452%" y="981" width="98.8465%" height="15" fill="rgb(233,88,34)" fg:x="231" fg:w="35390"/><text x="0.8952%" y="991.50">yt_history::load_models</text></g><g><title>yt_history::parse (35,390 samples, 98.85%)</title><rect x="0.6452%" y="965" width="98.8465%" height="15" fill="rgb(223,209,46)" fg:x="231" fg:w="35390"/><text x="0.8952%" y="975.50">yt_history::parse</text></g><g><title>yt_history::parser::parse_file (35,390 samples, 98.85%)</title><rect x="0.6452%" y="949" width="98.8465%" height="15" fill="rgb(250,43,18)" fg:x="231" fg:w="35390"/><text x="0.8952%" y="959.50">yt_history::parser::parse_file</text></g><g><title>yt_history::parser::parser (35,390 samples, 98.85%)</title><rect x="0.6452%" y="933" width="98.8465%" height="15" fill="rgb(208,13,10)" fg:x="231" fg:w="35390"/><text x="0.8952%" y="943.50">yt_history::parser::parser</text></g><g><title>yt_history::parser::json_parser::parse (35,390 samples, 98.85%)</title><rect x="0.6452%" y="917" width="98.8465%" height="15" fill="rgb(212,200,36)" fg:x="231" fg:w="35390"/><text x="0.8952%" y="927.50">yt_history::parser::json_parser::parse</text></g><g><title>yt_history::parser::json_parser::parse_data_rows (1,483 samples, 4.14%)</title><rect x="95.3496%" y="901" width="4.1421%" height="15" fill="rgb(225,90,30)" fg:x="34138" fg:w="1483"/><text x="95.5996%" y="911.50">yt_hi..</text></g><g><title>serde_json::de::from_reader (1,483 samples, 4.14%)</title><rect x="95.3496%" y="885" width="4.1421%" height="15" fill="rgb(236,182,39)" fg:x="34138" fg:w="1483"/><text x="95.5996%" y="895.50">serde..</text></g><g><title>serde_json::de::from_trait (1,483 samples, 4.14%)</title><rect x="95.3496%" y="869" width="4.1421%" height="15" fill="rgb(212,144,35)" fg:x="34138" fg:w="1483"/><text x="95.5996%" y="879.50">serde..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (1,483 samples, 4.14%)</title><rect x="95.3496%" y="853" width="4.1421%" height="15" fill="rgb(228,63,44)" fg:x="34138" fg:w="1483"/><text x="95.5996%" y="863.50">serde..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1,483 samples, 4.14%)</title><rect x="95.3496%" y="837" width="4.1421%" height="15" fill="rgb(228,109,6)" fg:x="34138" fg:w="1483"/><text x="95.5996%" y="847.50">&lt;&amp;mut..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1,483 samples, 4.14%)</title><rect x="95.3496%" y="821" width="4.1421%" height="15" fill="rgb(238,117,24)" fg:x="34138" fg:w="1483"/><text x="95.5996%" y="831.50">&lt;serd..</text></g><g><title>serde::de::SeqAccess::next_element (1,478 samples, 4.13%)</title><rect x="95.3635%" y="805" width="4.1281%" height="15" fill="rgb(242,26,26)" fg:x="34143" fg:w="1478"/><text x="95.6135%" y="815.50">serd..</text></g><g><title>[libc.so.6] (4 samples, 0.01%)</title><rect x="99.4805%" y="789" width="0.0112%" height="15" fill="rgb(221,92,48)" fg:x="35617" fg:w="4"/><text x="99.7305%" y="799.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="99.4805%" y="773" width="0.0112%" height="15" fill="rgb(209,209,32)" fg:x="35617" fg:w="4"/><text x="99.7305%" y="783.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.01%)</title><rect x="99.4917%" y="965" width="0.0112%" height="15" fill="rgb(221,70,22)" fg:x="35621" fg:w="4"/><text x="99.7417%" y="975.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (4 samples, 0.01%)</title><rect x="99.4917%" y="949" width="0.0112%" height="15" fill="rgb(248,145,5)" fg:x="35621" fg:w="4"/><text x="99.7417%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 0.05%)</title><rect x="99.5419%" y="885" width="0.0475%" height="15" fill="rgb(226,116,26)" fg:x="35639" fg:w="17"/><text x="99.7919%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.05%)</title><rect x="99.5419%" y="869" width="0.0475%" height="15" fill="rgb(244,5,17)" fg:x="35639" fg:w="17"/><text x="99.7919%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.05%)</title><rect x="99.5419%" y="853" width="0.0475%" height="15" fill="rgb(252,159,33)" fg:x="35639" fg:w="17"/><text x="99.7919%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.04%)</title><rect x="99.5475%" y="837" width="0.0419%" height="15" fill="rgb(206,71,0)" fg:x="35641" fg:w="15"/><text x="99.7975%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.04%)</title><rect x="99.5475%" y="821" width="0.0419%" height="15" fill="rgb(233,118,54)" fg:x="35641" fg:w="15"/><text x="99.7975%" y="831.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.04%)</title><rect x="99.5475%" y="805" width="0.0419%" height="15" fill="rgb(234,83,48)" fg:x="35641" fg:w="15"/><text x="99.7975%" y="815.50"></text></g><g><title>malloc (15 samples, 0.04%)</title><rect x="99.5475%" y="789" width="0.0419%" height="15" fill="rgb(228,3,54)" fg:x="35641" fg:w="15"/><text x="99.7975%" y="799.50"></text></g><g><title>[libc.so.6] (14 samples, 0.04%)</title><rect x="99.5503%" y="773" width="0.0391%" height="15" fill="rgb(226,155,13)" fg:x="35642" fg:w="14"/><text x="99.8003%" y="783.50"></text></g><g><title>[libc.so.6] (8 samples, 0.02%)</title><rect x="99.5671%" y="757" width="0.0223%" height="15" fill="rgb(241,28,37)" fg:x="35648" fg:w="8"/><text x="99.8171%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (75 samples, 0.21%)</title><rect x="99.5028%" y="965" width="0.2095%" height="15" fill="rgb(233,93,10)" fg:x="35625" fg:w="75"/><text x="99.7528%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (61 samples, 0.17%)</title><rect x="99.5419%" y="949" width="0.1704%" height="15" fill="rgb(225,113,19)" fg:x="35639" fg:w="61"/><text x="99.7919%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (61 samples, 0.17%)</title><rect x="99.5419%" y="933" width="0.1704%" height="15" fill="rgb(241,2,18)" fg:x="35639" fg:w="61"/><text x="99.7919%" y="943.50"></text></g><g><title>alloc::slice::hack::to_vec (61 samples, 0.17%)</title><rect x="99.5419%" y="917" width="0.1704%" height="15" fill="rgb(228,207,21)" fg:x="35639" fg:w="61"/><text x="99.7919%" y="927.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (61 samples, 0.17%)</title><rect x="99.5419%" y="901" width="0.1704%" height="15" fill="rgb(213,211,35)" fg:x="35639" fg:w="61"/><text x="99.7919%" y="911.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (44 samples, 0.12%)</title><rect x="99.5894%" y="885" width="0.1229%" height="15" fill="rgb(209,83,10)" fg:x="35656" fg:w="44"/><text x="99.8394%" y="895.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (44 samples, 0.12%)</title><rect x="99.5894%" y="869" width="0.1229%" height="15" fill="rgb(209,164,1)" fg:x="35656" fg:w="44"/><text x="99.8394%" y="879.50"></text></g><g><title>[libc.so.6] (44 samples, 0.12%)</title><rect x="99.5894%" y="853" width="0.1229%" height="15" fill="rgb(213,184,43)" fg:x="35656" fg:w="44"/><text x="99.8394%" y="863.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.02%)</title><rect x="99.7123%" y="965" width="0.0196%" height="15" fill="rgb(231,61,34)" fg:x="35700" fg:w="7"/><text x="99.9623%" y="975.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (7 samples, 0.02%)</title><rect x="99.7319%" y="965" width="0.0196%" height="15" fill="rgb(235,75,3)" fg:x="35707" fg:w="7"/><text x="99.9819%" y="975.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (4 samples, 0.01%)</title><rect x="99.7402%" y="949" width="0.0112%" height="15" fill="rgb(220,106,47)" fg:x="35710" fg:w="4"/><text x="99.9902%" y="959.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (4 samples, 0.01%)</title><rect x="99.7402%" y="933" width="0.0112%" height="15" fill="rgb(210,196,33)" fg:x="35710" fg:w="4"/><text x="99.9902%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (4 samples, 0.01%)</title><rect x="99.7402%" y="917" width="0.0112%" height="15" fill="rgb(229,154,42)" fg:x="35710" fg:w="4"/><text x="99.9902%" y="927.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.02%)</title><rect x="99.7570%" y="853" width="0.0168%" height="15" fill="rgb(228,114,26)" fg:x="35716" fg:w="6"/><text x="100.0070%" y="863.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.7570%" y="837" width="0.0168%" height="15" fill="rgb(208,144,1)" fg:x="35716" fg:w="6"/><text x="100.0070%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.01%)</title><rect x="99.7766%" y="757" width="0.0112%" height="15" fill="rgb(239,112,37)" fg:x="35723" fg:w="4"/><text x="100.0266%" y="767.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.01%)</title><rect x="99.7766%" y="789" width="0.0140%" height="15" fill="rgb(210,96,50)" fg:x="35723" fg:w="5"/><text x="100.0266%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.01%)</title><rect x="99.7766%" y="773" width="0.0140%" height="15" fill="rgb(222,178,2)" fg:x="35723" fg:w="5"/><text x="100.0266%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (31 samples, 0.09%)</title><rect x="99.7933%" y="677" width="0.0866%" height="15" fill="rgb(226,74,18)" fg:x="35729" fg:w="31"/><text x="100.0433%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (34 samples, 0.09%)</title><rect x="99.7905%" y="693" width="0.0950%" height="15" fill="rgb(225,67,54)" fg:x="35728" fg:w="34"/><text x="100.0405%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (41 samples, 0.11%)</title><rect x="99.7738%" y="853" width="0.1145%" height="15" fill="rgb(251,92,32)" fg:x="35722" fg:w="41"/><text x="100.0238%" y="863.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (41 samples, 0.11%)</title><rect x="99.7738%" y="837" width="0.1145%" height="15" fill="rgb(228,149,22)" fg:x="35722" fg:w="41"/><text x="100.0238%" y="847.50"></text></g><g><title>hashbrown::map::make_hash (41 samples, 0.11%)</title><rect x="99.7738%" y="821" width="0.1145%" height="15" fill="rgb(243,54,13)" fg:x="35722" fg:w="41"/><text x="100.0238%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (41 samples, 0.11%)</title><rect x="99.7738%" y="805" width="0.1145%" height="15" fill="rgb(243,180,28)" fg:x="35722" fg:w="41"/><text x="100.0238%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (35 samples, 0.10%)</title><rect x="99.7905%" y="789" width="0.0978%" height="15" fill="rgb(208,167,24)" fg:x="35728" fg:w="35"/><text x="100.0405%" y="799.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (35 samples, 0.10%)</title><rect x="99.7905%" y="773" width="0.0978%" height="15" fill="rgb(245,73,45)" fg:x="35728" fg:w="35"/><text x="100.0405%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (35 samples, 0.10%)</title><rect x="99.7905%" y="757" width="0.0978%" height="15" fill="rgb(237,203,48)" fg:x="35728" fg:w="35"/><text x="100.0405%" y="767.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (35 samples, 0.10%)</title><rect x="99.7905%" y="741" width="0.0978%" height="15" fill="rgb(211,197,16)" fg:x="35728" fg:w="35"/><text x="100.0405%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (35 samples, 0.10%)</title><rect x="99.7905%" y="725" width="0.0978%" height="15" fill="rgb(243,99,51)" fg:x="35728" fg:w="35"/><text x="100.0405%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (35 samples, 0.10%)</title><rect x="99.7905%" y="709" width="0.0978%" height="15" fill="rgb(215,123,29)" fg:x="35728" fg:w="35"/><text x="100.0405%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (68 samples, 0.19%)</title><rect x="99.7570%" y="933" width="0.1899%" height="15" fill="rgb(239,186,37)" fg:x="35716" fg:w="68"/><text x="100.0070%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (68 samples, 0.19%)</title><rect x="99.7570%" y="917" width="0.1899%" height="15" fill="rgb(252,136,39)" fg:x="35716" fg:w="68"/><text x="100.0070%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (68 samples, 0.19%)</title><rect x="99.7570%" y="901" width="0.1899%" height="15" fill="rgb(223,213,32)" fg:x="35716" fg:w="68"/><text x="100.0070%" y="911.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (68 samples, 0.19%)</title><rect x="99.7570%" y="885" width="0.1899%" height="15" fill="rgb(233,115,5)" fg:x="35716" fg:w="68"/><text x="100.0070%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (68 samples, 0.19%)</title><rect x="99.7570%" y="869" width="0.1899%" height="15" fill="rgb(207,226,44)" fg:x="35716" fg:w="68"/><text x="100.0070%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (19 samples, 0.05%)</title><rect x="99.8939%" y="853" width="0.0531%" height="15" fill="rgb(208,126,0)" fg:x="35765" fg:w="19"/><text x="100.1439%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (19 samples, 0.05%)</title><rect x="99.8939%" y="837" width="0.0531%" height="15" fill="rgb(244,66,21)" fg:x="35765" fg:w="19"/><text x="100.1439%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (18 samples, 0.05%)</title><rect x="99.8967%" y="821" width="0.0503%" height="15" fill="rgb(222,97,12)" fg:x="35766" fg:w="18"/><text x="100.1467%" y="831.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (18 samples, 0.05%)</title><rect x="99.8967%" y="805" width="0.0503%" height="15" fill="rgb(219,213,19)" fg:x="35766" fg:w="18"/><text x="100.1467%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.05%)</title><rect x="99.8967%" y="789" width="0.0503%" height="15" fill="rgb(252,169,30)" fg:x="35766" fg:w="18"/><text x="100.1467%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.05%)</title><rect x="99.8967%" y="773" width="0.0503%" height="15" fill="rgb(206,32,51)" fg:x="35766" fg:w="18"/><text x="100.1467%" y="783.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.05%)</title><rect x="99.8967%" y="757" width="0.0503%" height="15" fill="rgb(250,172,42)" fg:x="35766" fg:w="18"/><text x="100.1467%" y="767.50"></text></g><g><title>malloc (18 samples, 0.05%)</title><rect x="99.8967%" y="741" width="0.0503%" height="15" fill="rgb(209,34,43)" fg:x="35766" fg:w="18"/><text x="100.1467%" y="751.50"></text></g><g><title>[libc.so.6] (18 samples, 0.05%)</title><rect x="99.8967%" y="725" width="0.0503%" height="15" fill="rgb(223,11,35)" fg:x="35766" fg:w="18"/><text x="100.1467%" y="735.50"></text></g><g><title>[libc.so.6] (15 samples, 0.04%)</title><rect x="99.9050%" y="709" width="0.0419%" height="15" fill="rgb(251,219,26)" fg:x="35769" fg:w="15"/><text x="100.1550%" y="719.50"></text></g><g><title>[libc.so.6] (9 samples, 0.03%)</title><rect x="99.9218%" y="693" width="0.0251%" height="15" fill="rgb(231,119,3)" fg:x="35775" fg:w="9"/><text x="100.1718%" y="703.50"></text></g><g><title>hashbrown::map::make_insert_hash (7 samples, 0.02%)</title><rect x="99.9469%" y="933" width="0.0196%" height="15" fill="rgb(216,97,11)" fg:x="35784" fg:w="7"/><text x="100.1969%" y="943.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.02%)</title><rect x="99.9469%" y="917" width="0.0196%" height="15" fill="rgb(223,59,9)" fg:x="35784" fg:w="7"/><text x="100.1969%" y="927.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.01%)</title><rect x="99.9525%" y="901" width="0.0140%" height="15" fill="rgb(233,93,31)" fg:x="35786" fg:w="5"/><text x="100.2025%" y="911.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (5 samples, 0.01%)</title><rect x="99.9525%" y="885" width="0.0140%" height="15" fill="rgb(239,81,33)" fg:x="35786" fg:w="5"/><text x="100.2025%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (5 samples, 0.01%)</title><rect x="99.9525%" y="869" width="0.0140%" height="15" fill="rgb(213,120,34)" fg:x="35786" fg:w="5"/><text x="100.2025%" y="879.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (5 samples, 0.01%)</title><rect x="99.9525%" y="853" width="0.0140%" height="15" fill="rgb(243,49,53)" fg:x="35786" fg:w="5"/><text x="100.2025%" y="863.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (5 samples, 0.01%)</title><rect x="99.9525%" y="837" width="0.0140%" height="15" fill="rgb(247,216,33)" fg:x="35786" fg:w="5"/><text x="100.2025%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (5 samples, 0.01%)</title><rect x="99.9525%" y="821" width="0.0140%" height="15" fill="rgb(226,26,14)" fg:x="35786" fg:w="5"/><text x="100.2025%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.01%)</title><rect x="99.9525%" y="805" width="0.0140%" height="15" fill="rgb(215,49,53)" fg:x="35786" fg:w="5"/><text x="100.2025%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.01%)</title><rect x="99.9525%" y="789" width="0.0140%" height="15" fill="rgb(245,162,40)" fg:x="35786" fg:w="5"/><text x="100.2025%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (6 samples, 0.02%)</title><rect x="99.9693%" y="901" width="0.0168%" height="15" fill="rgb(229,68,17)" fg:x="35792" fg:w="6"/><text x="100.2193%" y="911.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (6 samples, 0.02%)</title><rect x="99.9693%" y="885" width="0.0168%" height="15" fill="rgb(213,182,10)" fg:x="35792" fg:w="6"/><text x="100.2193%" y="895.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (6 samples, 0.02%)</title><rect x="99.9693%" y="869" width="0.0168%" height="15" fill="rgb(245,125,30)" fg:x="35792" fg:w="6"/><text x="100.2193%" y="879.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (6 samples, 0.02%)</title><rect x="99.9693%" y="853" width="0.0168%" height="15" fill="rgb(232,202,2)" fg:x="35792" fg:w="6"/><text x="100.2193%" y="863.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6 samples, 0.02%)</title><rect x="99.9693%" y="837" width="0.0168%" height="15" fill="rgb(237,140,51)" fg:x="35792" fg:w="6"/><text x="100.2193%" y="847.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (6 samples, 0.02%)</title><rect x="99.9693%" y="821" width="0.0168%" height="15" fill="rgb(236,157,25)" fg:x="35792" fg:w="6"/><text x="100.2193%" y="831.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6 samples, 0.02%)</title><rect x="99.9693%" y="805" width="0.0168%" height="15" fill="rgb(219,209,0)" fg:x="35792" fg:w="6"/><text x="100.2193%" y="815.50"></text></g><g><title>[libc.so.6] (4 samples, 0.01%)</title><rect x="99.9749%" y="789" width="0.0112%" height="15" fill="rgb(240,116,54)" fg:x="35794" fg:w="4"/><text x="100.2249%" y="799.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (88 samples, 0.25%)</title><rect x="99.7514%" y="949" width="0.2458%" height="15" fill="rgb(216,10,36)" fg:x="35714" fg:w="88"/><text x="100.0014%" y="959.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (11 samples, 0.03%)</title><rect x="99.9665%" y="933" width="0.0307%" height="15" fill="rgb(222,72,44)" fg:x="35791" fg:w="11"/><text x="100.2165%" y="943.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (11 samples, 0.03%)</title><rect x="99.9665%" y="917" width="0.0307%" height="15" fill="rgb(232,159,9)" fg:x="35791" fg:w="11"/><text x="100.2165%" y="927.50"></text></g><g><title>all (35,803 samples, 100%)</title><rect x="0.0000%" y="1285" width="100.0000%" height="15" fill="rgb(210,39,32)" fg:x="0" fg:w="35803"/><text x="0.2500%" y="1295.50"></text></g><g><title>yt-history (35,803 samples, 100.00%)</title><rect x="0.0000%" y="1269" width="100.0000%" height="15" fill="rgb(216,194,45)" fg:x="0" fg:w="35803"/><text x="0.2500%" y="1279.50">yt-history</text></g><g><title>_start (35,769 samples, 99.91%)</title><rect x="0.0950%" y="1253" width="99.9050%" height="15" fill="rgb(218,18,35)" fg:x="34" fg:w="35769"/><text x="0.3450%" y="1263.50">_start</text></g><g><title>__libc_start_main (35,769 samples, 99.91%)</title><rect x="0.0950%" y="1237" width="99.9050%" height="15" fill="rgb(207,83,51)" fg:x="34" fg:w="35769"/><text x="0.3450%" y="1247.50">__libc_start_main</text></g><g><title>[libc.so.6] (35,769 samples, 99.91%)</title><rect x="0.0950%" y="1221" width="99.9050%" height="15" fill="rgb(225,63,43)" fg:x="34" fg:w="35769"/><text x="0.3450%" y="1231.50">[libc.so.6]</text></g><g><title>main (35,769 samples, 99.91%)</title><rect x="0.0950%" y="1205" width="99.9050%" height="15" fill="rgb(207,57,36)" fg:x="34" fg:w="35769"/><text x="0.3450%" y="1215.50">main</text></g><g><title>std::rt::lang_start_internal (35,769 samples, 99.91%)</title><rect x="0.0950%" y="1189" width="99.9050%" height="15" fill="rgb(216,99,33)" fg:x="34" fg:w="35769"/><text x="0.3450%" y="1199.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (35,769 samples, 99.91%)</title><rect x="0.0950%" y="1173" width="99.9050%" height="15" fill="rgb(225,42,16)" fg:x="34" fg:w="35769"/><text x="0.3450%" y="1183.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (35,769 samples, 99.91%)</title><rect x="0.0950%" y="1157" width="99.9050%" height="15" fill="rgb(220,201,45)" fg:x="34" fg:w="35769"/><text x="0.3450%" y="1167.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (35,769 samples, 99.91%)</title><rect x="0.0950%" y="1141" width="99.9050%" height="15" fill="rgb(225,33,4)" fg:x="34" fg:w="35769"/><text x="0.3450%" y="1151.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (35,769 samples, 99.91%)</title><rect x="0.0950%" y="1125" width="99.9050%" height="15" fill="rgb(224,33,50)" fg:x="34" fg:w="35769"/><text x="0.3450%" y="1135.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (35,769 samples, 99.91%)</title><rect x="0.0950%" y="1109" width="99.9050%" height="15" fill="rgb(246,198,51)" fg:x="34" fg:w="35769"/><text x="0.3450%" y="1119.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (35,769 samples, 99.91%)</title><rect x="0.0950%" y="1093" width="99.9050%" height="15" fill="rgb(205,22,4)" fg:x="34" fg:w="35769"/><text x="0.3450%" y="1103.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (35,769 samples, 99.91%)</title><rect x="0.0950%" y="1077" width="99.9050%" height="15" fill="rgb(206,3,8)" fg:x="34" fg:w="35769"/><text x="0.3450%" y="1087.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (35,769 samples, 99.91%)</title><rect x="0.0950%" y="1061" width="99.9050%" height="15" fill="rgb(251,23,15)" fg:x="34" fg:w="35769"/><text x="0.3450%" y="1071.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (35,769 samples, 99.91%)</title><rect x="0.0950%" y="1045" width="99.9050%" height="15" fill="rgb(252,88,28)" fg:x="34" fg:w="35769"/><text x="0.3450%" y="1055.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (35,769 samples, 99.91%)</title><rect x="0.0950%" y="1029" width="99.9050%" height="15" fill="rgb(212,127,14)" fg:x="34" fg:w="35769"/><text x="0.3450%" y="1039.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (35,769 samples, 99.91%)</title><rect x="0.0950%" y="1013" width="99.9050%" height="15" fill="rgb(247,145,37)" fg:x="34" fg:w="35769"/><text x="0.3450%" y="1023.50">core::ops::function::FnOnce::call_once</text></g><g><title>yt_history::main (35,769 samples, 99.91%)</title><rect x="0.0950%" y="997" width="99.9050%" height="15" fill="rgb(209,117,53)" fg:x="34" fg:w="35769"/><text x="0.3450%" y="1007.50">yt_history::main</text></g><g><title>yt_history::model::Models::count_watched_by_video (182 samples, 0.51%)</title><rect x="99.4917%" y="981" width="0.5083%" height="15" fill="rgb(212,90,42)" fg:x="35621" fg:w="182"/><text x="99.7417%" y="991.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (89 samples, 0.25%)</title><rect x="99.7514%" y="965" width="0.2486%" height="15" fill="rgb(218,164,37)" fg:x="35714" fg:w="89"/><text x="100.0014%" y="975.50"></text></g></svg></svg>