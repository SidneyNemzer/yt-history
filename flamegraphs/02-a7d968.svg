<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="918" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="901.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="901.00"> </text><svg id="frames" x="10" width="1180" total_samples="33826"><g><title>[ld-linux-x86-64.so.2] (10 samples, 0.03%)</title><rect x="0.0177%" y="789" width="0.0296%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="10"/><text x="0.2677%" y="799.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.02%)</title><rect x="0.0266%" y="773" width="0.0207%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="7"/><text x="0.2766%" y="783.50"></text></g><g><title>[ld-linux-x86-64.so.2] (14 samples, 0.04%)</title><rect x="0.0118%" y="805" width="0.0414%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="14"/><text x="0.2618%" y="815.50"></text></g><g><title>[ld-linux-x86-64.so.2] (19 samples, 0.06%)</title><rect x="0.0089%" y="821" width="0.0562%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="19"/><text x="0.2589%" y="831.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.0532%" y="805" width="0.0118%" height="15" fill="rgb(208,68,35)" fg:x="18" fg:w="4"/><text x="0.3032%" y="815.50"></text></g><g><title>[ld-linux-x86-64.so.2] (21 samples, 0.06%)</title><rect x="0.0059%" y="837" width="0.0621%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="21"/><text x="0.2559%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Models&gt; (6 samples, 0.02%)</title><rect x="0.0710%" y="565" width="0.0177%" height="15" fill="rgb(207,160,47)" fg:x="24" fg:w="6"/><text x="0.3210%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;yt_history::model::Watched&gt;&gt; (4 samples, 0.01%)</title><rect x="0.0769%" y="549" width="0.0118%" height="15" fill="rgb(228,23,34)" fg:x="26" fg:w="4"/><text x="0.3269%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="0.0769%" y="533" width="0.0118%" height="15" fill="rgb(218,30,26)" fg:x="26" fg:w="4"/><text x="0.3269%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[yt_history::model::Watched]&gt; (4 samples, 0.01%)</title><rect x="0.0769%" y="517" width="0.0118%" height="15" fill="rgb(220,122,19)" fg:x="26" fg:w="4"/><text x="0.3269%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Watched&gt; (4 samples, 0.01%)</title><rect x="0.0769%" y="501" width="0.0118%" height="15" fill="rgb(250,228,42)" fg:x="26" fg:w="4"/><text x="0.3269%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Video&gt; (4 samples, 0.01%)</title><rect x="0.0769%" y="485" width="0.0118%" height="15" fill="rgb(240,193,28)" fg:x="26" fg:w="4"/><text x="0.3269%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.02%)</title><rect x="0.1449%" y="437" width="0.0207%" height="15" fill="rgb(216,20,37)" fg:x="49" fg:w="7"/><text x="0.3949%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.02%)</title><rect x="0.1449%" y="421" width="0.0207%" height="15" fill="rgb(206,188,39)" fg:x="49" fg:w="7"/><text x="0.3949%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.02%)</title><rect x="0.1449%" y="405" width="0.0207%" height="15" fill="rgb(217,207,13)" fg:x="49" fg:w="7"/><text x="0.3949%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.02%)</title><rect x="0.1478%" y="389" width="0.0177%" height="15" fill="rgb(231,73,38)" fg:x="50" fg:w="6"/><text x="0.3978%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.02%)</title><rect x="0.1478%" y="373" width="0.0177%" height="15" fill="rgb(225,20,46)" fg:x="50" fg:w="6"/><text x="0.3978%" y="383.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.02%)</title><rect x="0.1478%" y="357" width="0.0177%" height="15" fill="rgb(210,31,41)" fg:x="50" fg:w="6"/><text x="0.3978%" y="367.50"></text></g><g><title>malloc (5 samples, 0.01%)</title><rect x="0.1508%" y="341" width="0.0148%" height="15" fill="rgb(221,200,47)" fg:x="51" fg:w="5"/><text x="0.4008%" y="351.50"></text></g><g><title>&lt;yt_history::DataRow as core::clone::Clone&gt;::clone (11 samples, 0.03%)</title><rect x="0.1360%" y="533" width="0.0325%" height="15" fill="rgb(226,26,5)" fg:x="46" fg:w="11"/><text x="0.3860%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="0.1419%" y="517" width="0.0266%" height="15" fill="rgb(249,33,26)" fg:x="48" fg:w="9"/><text x="0.3919%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.02%)</title><rect x="0.1449%" y="501" width="0.0237%" height="15" fill="rgb(235,183,28)" fg:x="49" fg:w="8"/><text x="0.3949%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.02%)</title><rect x="0.1449%" y="485" width="0.0237%" height="15" fill="rgb(221,5,38)" fg:x="49" fg:w="8"/><text x="0.3949%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.02%)</title><rect x="0.1449%" y="469" width="0.0237%" height="15" fill="rgb(247,18,42)" fg:x="49" fg:w="8"/><text x="0.3949%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.02%)</title><rect x="0.1449%" y="453" width="0.0237%" height="15" fill="rgb(241,131,45)" fg:x="49" fg:w="8"/><text x="0.3949%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (6 samples, 0.02%)</title><rect x="0.1892%" y="437" width="0.0177%" height="15" fill="rgb(249,31,29)" fg:x="64" fg:w="6"/><text x="0.4392%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Debug&gt;::fmt (10 samples, 0.03%)</title><rect x="0.2602%" y="341" width="0.0296%" height="15" fill="rgb(225,111,53)" fg:x="88" fg:w="10"/><text x="0.5102%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (9 samples, 0.03%)</title><rect x="0.4523%" y="277" width="0.0266%" height="15" fill="rgb(238,160,17)" fg:x="153" fg:w="9"/><text x="0.7023%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (8 samples, 0.02%)</title><rect x="0.4553%" y="261" width="0.0237%" height="15" fill="rgb(214,148,48)" fg:x="154" fg:w="8"/><text x="0.7053%" y="271.50"></text></g><g><title>alloc::string::String::push_str (8 samples, 0.02%)</title><rect x="0.4553%" y="245" width="0.0237%" height="15" fill="rgb(232,36,49)" fg:x="154" fg:w="8"/><text x="0.7053%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (8 samples, 0.02%)</title><rect x="0.4553%" y="229" width="0.0237%" height="15" fill="rgb(209,103,24)" fg:x="154" fg:w="8"/><text x="0.7053%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (8 samples, 0.02%)</title><rect x="0.4553%" y="213" width="0.0237%" height="15" fill="rgb(229,88,8)" fg:x="154" fg:w="8"/><text x="0.7053%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (8 samples, 0.02%)</title><rect x="0.4553%" y="197" width="0.0237%" height="15" fill="rgb(213,181,19)" fg:x="154" fg:w="8"/><text x="0.7053%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.01%)</title><rect x="0.4641%" y="181" width="0.0148%" height="15" fill="rgb(254,191,54)" fg:x="157" fg:w="5"/><text x="0.7141%" y="191.50"></text></g><g><title>[libc.so.6] (5 samples, 0.01%)</title><rect x="0.4641%" y="165" width="0.0148%" height="15" fill="rgb(241,83,37)" fg:x="157" fg:w="5"/><text x="0.7141%" y="175.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.02%)</title><rect x="0.4789%" y="277" width="0.0237%" height="15" fill="rgb(233,36,39)" fg:x="162" fg:w="8"/><text x="0.7289%" y="287.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (8 samples, 0.02%)</title><rect x="0.4789%" y="261" width="0.0237%" height="15" fill="rgb(226,3,54)" fg:x="162" fg:w="8"/><text x="0.7289%" y="271.50"></text></g><g><title>&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (38 samples, 0.11%)</title><rect x="0.3932%" y="325" width="0.1123%" height="15" fill="rgb(245,192,40)" fg:x="133" fg:w="38"/><text x="0.6432%" y="335.50"></text></g><g><title>core::fmt::Write::write_char (33 samples, 0.10%)</title><rect x="0.4080%" y="309" width="0.0976%" height="15" fill="rgb(238,167,29)" fg:x="138" fg:w="33"/><text x="0.6580%" y="319.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (29 samples, 0.09%)</title><rect x="0.4198%" y="293" width="0.0857%" height="15" fill="rgb(232,182,51)" fg:x="142" fg:w="29"/><text x="0.6698%" y="303.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.05%)</title><rect x="0.5055%" y="325" width="0.0473%" height="15" fill="rgb(231,60,39)" fg:x="171" fg:w="16"/><text x="0.7555%" y="335.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.05%)</title><rect x="0.5055%" y="309" width="0.0473%" height="15" fill="rgb(208,69,12)" fg:x="171" fg:w="16"/><text x="0.7555%" y="319.50"></text></g><g><title>core::str::validations::next_code_point (16 samples, 0.05%)</title><rect x="0.5055%" y="293" width="0.0473%" height="15" fill="rgb(235,93,37)" fg:x="171" fg:w="16"/><text x="0.7555%" y="303.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (10 samples, 0.03%)</title><rect x="0.6533%" y="261" width="0.0296%" height="15" fill="rgb(213,116,39)" fg:x="221" fg:w="10"/><text x="0.9033%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (10 samples, 0.03%)</title><rect x="0.6533%" y="245" width="0.0296%" height="15" fill="rgb(222,207,29)" fg:x="221" fg:w="10"/><text x="0.9033%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (10 samples, 0.03%)</title><rect x="0.6533%" y="229" width="0.0296%" height="15" fill="rgb(206,96,30)" fg:x="221" fg:w="10"/><text x="0.9033%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (97 samples, 0.29%)</title><rect x="0.9756%" y="213" width="0.2868%" height="15" fill="rgb(218,138,4)" fg:x="330" fg:w="97"/><text x="1.2256%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key (205 samples, 0.61%)</title><rect x="0.6829%" y="261" width="0.6060%" height="15" fill="rgb(250,191,14)" fg:x="231" fg:w="205"/><text x="0.9329%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (205 samples, 0.61%)</title><rect x="0.6829%" y="245" width="0.6060%" height="15" fill="rgb(239,60,40)" fg:x="231" fg:w="205"/><text x="0.9329%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key::{{closure}} (106 samples, 0.31%)</title><rect x="0.9756%" y="229" width="0.3134%" height="15" fill="rgb(206,27,48)" fg:x="330" fg:w="106"/><text x="1.2256%" y="239.50"></text></g><g><title>core::unicode::unicode_data::skip_search::{{closure}} (9 samples, 0.03%)</title><rect x="1.2623%" y="213" width="0.0266%" height="15" fill="rgb(225,35,8)" fg:x="427" fg:w="9"/><text x="1.5123%" y="223.50"></text></g><g><title>&lt;&amp;u32 as core::ops::bit::Shl&lt;i32&gt;&gt;::shl (9 samples, 0.03%)</title><rect x="1.2623%" y="197" width="0.0266%" height="15" fill="rgb(250,213,24)" fg:x="427" fg:w="9"/><text x="1.5123%" y="207.50"></text></g><g><title>&lt;u32 as core::ops::bit::Shl&lt;i32&gt;&gt;::shl (9 samples, 0.03%)</title><rect x="1.2623%" y="181" width="0.0266%" height="15" fill="rgb(247,123,22)" fg:x="427" fg:w="9"/><text x="1.5123%" y="191.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_grapheme_extended (242 samples, 0.72%)</title><rect x="0.5942%" y="309" width="0.7154%" height="15" fill="rgb(231,138,38)" fg:x="201" fg:w="242"/><text x="0.8442%" y="319.50"></text></g><g><title>core::unicode::unicode_data::grapheme_extend::lookup (241 samples, 0.71%)</title><rect x="0.5972%" y="293" width="0.7125%" height="15" fill="rgb(231,145,46)" fg:x="202" fg:w="241"/><text x="0.8472%" y="303.50"></text></g><g><title>core::unicode::unicode_data::skip_search (227 samples, 0.67%)</title><rect x="0.6386%" y="277" width="0.6711%" height="15" fill="rgb(251,118,11)" fg:x="216" fg:w="227"/><text x="0.8886%" y="287.50"></text></g><g><title>core::unicode::unicode_data::decode_length (7 samples, 0.02%)</title><rect x="1.2889%" y="261" width="0.0207%" height="15" fill="rgb(217,147,25)" fg:x="436" fg:w="7"/><text x="1.5389%" y="271.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (301 samples, 0.89%)</title><rect x="0.5617%" y="325" width="0.8898%" height="15" fill="rgb(247,81,37)" fg:x="190" fg:w="301"/><text x="0.8117%" y="335.50"></text></g><g><title>core::unicode::printable::is_printable (48 samples, 0.14%)</title><rect x="1.3096%" y="309" width="0.1419%" height="15" fill="rgb(209,12,38)" fg:x="443" fg:w="48"/><text x="1.5596%" y="319.50"></text></g><g><title>core::unicode::printable::check (5 samples, 0.01%)</title><rect x="1.4368%" y="293" width="0.0148%" height="15" fill="rgb(227,1,9)" fg:x="486" fg:w="5"/><text x="1.6868%" y="303.50"></text></g><g><title>[libc.so.6] (9 samples, 0.03%)</title><rect x="1.5225%" y="37" width="0.0266%" height="15" fill="rgb(248,47,43)" fg:x="515" fg:w="9"/><text x="1.7725%" y="47.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (18 samples, 0.05%)</title><rect x="1.5018%" y="117" width="0.0532%" height="15" fill="rgb(221,10,30)" fg:x="508" fg:w="18"/><text x="1.7518%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (18 samples, 0.05%)</title><rect x="1.5018%" y="101" width="0.0532%" height="15" fill="rgb(210,229,1)" fg:x="508" fg:w="18"/><text x="1.7518%" y="111.50"></text></g><g><title>alloc::alloc::realloc (18 samples, 0.05%)</title><rect x="1.5018%" y="85" width="0.0532%" height="15" fill="rgb(222,148,37)" fg:x="508" fg:w="18"/><text x="1.7518%" y="95.50"></text></g><g><title>realloc (16 samples, 0.05%)</title><rect x="1.5077%" y="69" width="0.0473%" height="15" fill="rgb(234,67,33)" fg:x="510" fg:w="16"/><text x="1.7577%" y="79.50"></text></g><g><title>[libc.so.6] (11 samples, 0.03%)</title><rect x="1.5225%" y="53" width="0.0325%" height="15" fill="rgb(247,98,35)" fg:x="515" fg:w="11"/><text x="1.7725%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (21 samples, 0.06%)</title><rect x="1.4959%" y="197" width="0.0621%" height="15" fill="rgb(247,138,52)" fg:x="506" fg:w="21"/><text x="1.7459%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (21 samples, 0.06%)</title><rect x="1.4959%" y="181" width="0.0621%" height="15" fill="rgb(213,79,30)" fg:x="506" fg:w="21"/><text x="1.7459%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (20 samples, 0.06%)</title><rect x="1.4988%" y="165" width="0.0591%" height="15" fill="rgb(246,177,23)" fg:x="507" fg:w="20"/><text x="1.7488%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (20 samples, 0.06%)</title><rect x="1.4988%" y="149" width="0.0591%" height="15" fill="rgb(230,62,27)" fg:x="507" fg:w="20"/><text x="1.7488%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (20 samples, 0.06%)</title><rect x="1.4988%" y="133" width="0.0591%" height="15" fill="rgb(216,154,8)" fg:x="507" fg:w="20"/><text x="1.7488%" y="143.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (28 samples, 0.08%)</title><rect x="1.4870%" y="293" width="0.0828%" height="15" fill="rgb(244,35,45)" fg:x="503" fg:w="28"/><text x="1.7370%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (25 samples, 0.07%)</title><rect x="1.4959%" y="277" width="0.0739%" height="15" fill="rgb(251,115,12)" fg:x="506" fg:w="25"/><text x="1.7459%" y="287.50"></text></g><g><title>alloc::string::String::push_str (25 samples, 0.07%)</title><rect x="1.4959%" y="261" width="0.0739%" height="15" fill="rgb(240,54,50)" fg:x="506" fg:w="25"/><text x="1.7459%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (25 samples, 0.07%)</title><rect x="1.4959%" y="245" width="0.0739%" height="15" fill="rgb(233,84,52)" fg:x="506" fg:w="25"/><text x="1.7459%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (25 samples, 0.07%)</title><rect x="1.4959%" y="229" width="0.0739%" height="15" fill="rgb(207,117,47)" fg:x="506" fg:w="25"/><text x="1.7459%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (25 samples, 0.07%)</title><rect x="1.4959%" y="213" width="0.0739%" height="15" fill="rgb(249,43,39)" fg:x="506" fg:w="25"/><text x="1.7459%" y="223.50"></text></g><g><title>core::slice::memchr::memchr_aligned (7 samples, 0.02%)</title><rect x="1.5816%" y="229" width="0.0207%" height="15" fill="rgb(209,38,44)" fg:x="535" fg:w="7"/><text x="1.8316%" y="239.50"></text></g><g><title>core::slice::memchr::memchr_naive (5 samples, 0.01%)</title><rect x="1.5875%" y="213" width="0.0148%" height="15" fill="rgb(236,212,23)" fg:x="537" fg:w="5"/><text x="1.8375%" y="223.50"></text></g><g><title>core::fmt::Formatter::write_str (53 samples, 0.16%)</title><rect x="1.4515%" y="325" width="0.1567%" height="15" fill="rgb(242,79,21)" fg:x="491" fg:w="53"/><text x="1.7015%" y="335.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (53 samples, 0.16%)</title><rect x="1.4515%" y="309" width="0.1567%" height="15" fill="rgb(211,96,35)" fg:x="491" fg:w="53"/><text x="1.7015%" y="319.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.04%)</title><rect x="1.5698%" y="293" width="0.0384%" height="15" fill="rgb(253,215,40)" fg:x="531" fg:w="13"/><text x="1.8198%" y="303.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (13 samples, 0.04%)</title><rect x="1.5698%" y="277" width="0.0384%" height="15" fill="rgb(211,81,21)" fg:x="531" fg:w="13"/><text x="1.8198%" y="287.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (9 samples, 0.03%)</title><rect x="1.5816%" y="261" width="0.0266%" height="15" fill="rgb(208,190,38)" fg:x="535" fg:w="9"/><text x="1.8316%" y="271.50"></text></g><g><title>core::slice::memchr::memchr (9 samples, 0.03%)</title><rect x="1.5816%" y="245" width="0.0266%" height="15" fill="rgb(235,213,38)" fg:x="535" fg:w="9"/><text x="1.8316%" y="255.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (452 samples, 1.34%)</title><rect x="0.2897%" y="341" width="1.3363%" height="15" fill="rgb(237,122,38)" fg:x="98" fg:w="452"/><text x="0.5397%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (6 samples, 0.02%)</title><rect x="1.6082%" y="325" width="0.0177%" height="15" fill="rgb(244,218,35)" fg:x="544" fg:w="6"/><text x="1.8582%" y="335.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (6 samples, 0.02%)</title><rect x="1.6082%" y="309" width="0.0177%" height="15" fill="rgb(240,68,47)" fg:x="544" fg:w="6"/><text x="1.8582%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (5 samples, 0.01%)</title><rect x="1.6112%" y="293" width="0.0148%" height="15" fill="rgb(210,16,53)" fg:x="545" fg:w="5"/><text x="1.8612%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (7 samples, 0.02%)</title><rect x="1.6289%" y="325" width="0.0207%" height="15" fill="rgb(235,124,12)" fg:x="551" fg:w="7"/><text x="1.8789%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (6 samples, 0.02%)</title><rect x="1.6319%" y="309" width="0.0177%" height="15" fill="rgb(224,169,11)" fg:x="552" fg:w="6"/><text x="1.8819%" y="319.50"></text></g><g><title>alloc::string::String::push_str (6 samples, 0.02%)</title><rect x="1.6319%" y="293" width="0.0177%" height="15" fill="rgb(250,166,2)" fg:x="552" fg:w="6"/><text x="1.8819%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (6 samples, 0.02%)</title><rect x="1.6319%" y="277" width="0.0177%" height="15" fill="rgb(242,216,29)" fg:x="552" fg:w="6"/><text x="1.8819%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.02%)</title><rect x="1.6319%" y="261" width="0.0177%" height="15" fill="rgb(230,116,27)" fg:x="552" fg:w="6"/><text x="1.8819%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (6 samples, 0.02%)</title><rect x="1.6319%" y="245" width="0.0177%" height="15" fill="rgb(228,99,48)" fg:x="552" fg:w="6"/><text x="1.8819%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.01%)</title><rect x="1.6348%" y="229" width="0.0148%" height="15" fill="rgb(253,11,6)" fg:x="553" fg:w="5"/><text x="1.8848%" y="239.50"></text></g><g><title>[libc.so.6] (5 samples, 0.01%)</title><rect x="1.6348%" y="213" width="0.0148%" height="15" fill="rgb(247,143,39)" fg:x="553" fg:w="5"/><text x="1.8848%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (20 samples, 0.06%)</title><rect x="1.7147%" y="213" width="0.0591%" height="15" fill="rgb(236,97,10)" fg:x="580" fg:w="20"/><text x="1.9647%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (18 samples, 0.05%)</title><rect x="1.7206%" y="197" width="0.0532%" height="15" fill="rgb(233,208,19)" fg:x="582" fg:w="18"/><text x="1.9706%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14 samples, 0.04%)</title><rect x="1.7324%" y="181" width="0.0414%" height="15" fill="rgb(216,164,2)" fg:x="586" fg:w="14"/><text x="1.9824%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (14 samples, 0.04%)</title><rect x="1.7324%" y="165" width="0.0414%" height="15" fill="rgb(220,129,5)" fg:x="586" fg:w="14"/><text x="1.9824%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 0.04%)</title><rect x="1.7324%" y="149" width="0.0414%" height="15" fill="rgb(242,17,10)" fg:x="586" fg:w="14"/><text x="1.9824%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (13 samples, 0.04%)</title><rect x="1.7354%" y="133" width="0.0384%" height="15" fill="rgb(242,107,0)" fg:x="587" fg:w="13"/><text x="1.9854%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (13 samples, 0.04%)</title><rect x="1.7354%" y="117" width="0.0384%" height="15" fill="rgb(251,28,31)" fg:x="587" fg:w="13"/><text x="1.9854%" y="127.50"></text></g><g><title>alloc::alloc::realloc (13 samples, 0.04%)</title><rect x="1.7354%" y="101" width="0.0384%" height="15" fill="rgb(233,223,10)" fg:x="587" fg:w="13"/><text x="1.9854%" y="111.50"></text></g><g><title>realloc (13 samples, 0.04%)</title><rect x="1.7354%" y="85" width="0.0384%" height="15" fill="rgb(215,21,27)" fg:x="587" fg:w="13"/><text x="1.9854%" y="95.50"></text></g><g><title>[libc.so.6] (12 samples, 0.04%)</title><rect x="1.7383%" y="69" width="0.0355%" height="15" fill="rgb(232,23,21)" fg:x="588" fg:w="12"/><text x="1.9883%" y="79.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (35 samples, 0.10%)</title><rect x="1.6910%" y="309" width="0.1035%" height="15" fill="rgb(244,5,23)" fg:x="572" fg:w="35"/><text x="1.9410%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (28 samples, 0.08%)</title><rect x="1.7117%" y="293" width="0.0828%" height="15" fill="rgb(226,81,46)" fg:x="579" fg:w="28"/><text x="1.9617%" y="303.50"></text></g><g><title>alloc::string::String::push_str (28 samples, 0.08%)</title><rect x="1.7117%" y="277" width="0.0828%" height="15" fill="rgb(247,70,30)" fg:x="579" fg:w="28"/><text x="1.9617%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (28 samples, 0.08%)</title><rect x="1.7117%" y="261" width="0.0828%" height="15" fill="rgb(212,68,19)" fg:x="579" fg:w="28"/><text x="1.9617%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (28 samples, 0.08%)</title><rect x="1.7117%" y="245" width="0.0828%" height="15" fill="rgb(240,187,13)" fg:x="579" fg:w="28"/><text x="1.9617%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (28 samples, 0.08%)</title><rect x="1.7117%" y="229" width="0.0828%" height="15" fill="rgb(223,113,26)" fg:x="579" fg:w="28"/><text x="1.9617%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.02%)</title><rect x="1.7738%" y="213" width="0.0207%" height="15" fill="rgb(206,192,2)" fg:x="600" fg:w="7"/><text x="2.0238%" y="223.50"></text></g><g><title>[libc.so.6] (7 samples, 0.02%)</title><rect x="1.7738%" y="197" width="0.0207%" height="15" fill="rgb(241,108,4)" fg:x="600" fg:w="7"/><text x="2.0238%" y="207.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.04%)</title><rect x="1.7945%" y="309" width="0.0414%" height="15" fill="rgb(247,173,49)" fg:x="607" fg:w="14"/><text x="2.0445%" y="319.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (13 samples, 0.04%)</title><rect x="1.7974%" y="293" width="0.0384%" height="15" fill="rgb(224,114,35)" fg:x="608" fg:w="13"/><text x="2.0474%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (6 samples, 0.02%)</title><rect x="1.8181%" y="277" width="0.0177%" height="15" fill="rgb(245,159,27)" fg:x="615" fg:w="6"/><text x="2.0681%" y="287.50"></text></g><g><title>core::slice::memchr::memchr (5 samples, 0.01%)</title><rect x="1.8211%" y="261" width="0.0148%" height="15" fill="rgb(245,172,44)" fg:x="616" fg:w="5"/><text x="2.0711%" y="271.50"></text></g><g><title>core::slice::memchr::memchr_naive (5 samples, 0.01%)</title><rect x="1.8211%" y="245" width="0.0148%" height="15" fill="rgb(236,23,11)" fg:x="616" fg:w="5"/><text x="2.0711%" y="255.50"></text></g><g><title>core::fmt::Formatter::write_str (72 samples, 0.21%)</title><rect x="1.6260%" y="341" width="0.2129%" height="15" fill="rgb(205,117,38)" fg:x="550" fg:w="72"/><text x="1.8760%" y="351.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (64 samples, 0.19%)</title><rect x="1.6496%" y="325" width="0.1892%" height="15" fill="rgb(237,72,25)" fg:x="558" fg:w="64"/><text x="1.8996%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (10 samples, 0.03%)</title><rect x="1.8418%" y="309" width="0.0296%" height="15" fill="rgb(244,70,9)" fg:x="623" fg:w="10"/><text x="2.0918%" y="319.50"></text></g><g><title>core::fmt::Write::write_char (14 samples, 0.04%)</title><rect x="1.8388%" y="341" width="0.0414%" height="15" fill="rgb(217,125,39)" fg:x="622" fg:w="14"/><text x="2.0888%" y="351.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (14 samples, 0.04%)</title><rect x="1.8388%" y="325" width="0.0414%" height="15" fill="rgb(235,36,10)" fg:x="622" fg:w="14"/><text x="2.0888%" y="335.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (558 samples, 1.65%)</title><rect x="0.2365%" y="389" width="1.6496%" height="15" fill="rgb(251,123,47)" fg:x="80" fg:w="558"/><text x="0.4865%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (556 samples, 1.64%)</title><rect x="0.2424%" y="373" width="1.6437%" height="15" fill="rgb(221,13,13)" fg:x="82" fg:w="556"/><text x="0.4924%" y="383.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (553 samples, 1.63%)</title><rect x="0.2513%" y="357" width="1.6348%" height="15" fill="rgb(238,131,9)" fg:x="85" fg:w="553"/><text x="0.5013%" y="367.50"></text></g><g><title>alloc::fmt::format (584 samples, 1.73%)</title><rect x="0.1685%" y="533" width="1.7265%" height="15" fill="rgb(211,50,8)" fg:x="57" fg:w="584"/><text x="0.4185%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (584 samples, 1.73%)</title><rect x="0.1685%" y="517" width="1.7265%" height="15" fill="rgb(245,182,24)" fg:x="57" fg:w="584"/><text x="0.4185%" y="527.50"></text></g><g><title>alloc::fmt::format::{{closure}} (584 samples, 1.73%)</title><rect x="0.1685%" y="501" width="1.7265%" height="15" fill="rgb(242,14,37)" fg:x="57" fg:w="584"/><text x="0.4185%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (584 samples, 1.73%)</title><rect x="0.1685%" y="485" width="1.7265%" height="15" fill="rgb(246,228,12)" fg:x="57" fg:w="584"/><text x="0.4185%" y="495.50"></text></g><g><title>core::fmt::Write::write_fmt (579 samples, 1.71%)</title><rect x="0.1833%" y="469" width="1.7117%" height="15" fill="rgb(213,55,15)" fg:x="62" fg:w="579"/><text x="0.4333%" y="479.50"></text></g><g><title>core::fmt::write (579 samples, 1.71%)</title><rect x="0.1833%" y="453" width="1.7117%" height="15" fill="rgb(209,9,3)" fg:x="62" fg:w="579"/><text x="0.4333%" y="463.50"></text></g><g><title>core::fmt::run (571 samples, 1.69%)</title><rect x="0.2069%" y="437" width="1.6881%" height="15" fill="rgb(230,59,30)" fg:x="70" fg:w="571"/><text x="0.4569%" y="447.50"></text></g><g><title>&lt;yt_history::DataRow as core::fmt::Debug&gt;::fmt (571 samples, 1.69%)</title><rect x="0.2069%" y="421" width="1.6881%" height="15" fill="rgb(209,121,21)" fg:x="70" fg:w="571"/><text x="0.4569%" y="431.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field5_finish (566 samples, 1.67%)</title><rect x="0.2217%" y="405" width="1.6733%" height="15" fill="rgb(220,109,13)" fg:x="75" fg:w="566"/><text x="0.4717%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (4 samples, 0.01%)</title><rect x="2.1108%" y="469" width="0.0118%" height="15" fill="rgb(232,18,1)" fg:x="714" fg:w="4"/><text x="2.3608%" y="479.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (4 samples, 0.01%)</title><rect x="2.1108%" y="453" width="0.0118%" height="15" fill="rgb(215,41,42)" fg:x="714" fg:w="4"/><text x="2.3608%" y="463.50"></text></g><g><title>core::str::pattern::Searcher::next_match (4 samples, 0.01%)</title><rect x="2.1108%" y="437" width="0.0118%" height="15" fill="rgb(224,123,36)" fg:x="714" fg:w="4"/><text x="2.3608%" y="447.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (4 samples, 0.01%)</title><rect x="2.1108%" y="421" width="0.0118%" height="15" fill="rgb(240,125,3)" fg:x="714" fg:w="4"/><text x="2.3608%" y="431.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="2.1108%" y="405" width="0.0118%" height="15" fill="rgb(205,98,50)" fg:x="714" fg:w="4"/><text x="2.3608%" y="415.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="2.1108%" y="389" width="0.0118%" height="15" fill="rgb(205,185,37)" fg:x="714" fg:w="4"/><text x="2.3608%" y="399.50"></text></g><g><title>core::str::validations::next_code_point (4 samples, 0.01%)</title><rect x="2.1108%" y="373" width="0.0118%" height="15" fill="rgb(238,207,15)" fg:x="714" fg:w="4"/><text x="2.3608%" y="383.50"></text></g><g><title>&lt;chrono::format::strftime::StrftimeItems as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.11%)</title><rect x="2.0221%" y="485" width="0.1064%" height="15" fill="rgb(213,199,42)" fg:x="684" fg:w="36"/><text x="2.2721%" y="495.50"></text></g><g><title>chrono::format::scan::short_month0 (12 samples, 0.04%)</title><rect x="2.1345%" y="485" width="0.0355%" height="15" fill="rgb(235,201,11)" fg:x="722" fg:w="12"/><text x="2.3845%" y="495.50"></text></g><g><title>chrono::format::parse::parse (101 samples, 0.30%)</title><rect x="1.8950%" y="517" width="0.2986%" height="15" fill="rgb(207,46,11)" fg:x="641" fg:w="101"/><text x="2.1450%" y="527.50"></text></g><g><title>chrono::format::parse::parse_internal (99 samples, 0.29%)</title><rect x="1.9009%" y="501" width="0.2927%" height="15" fill="rgb(241,35,35)" fg:x="643" fg:w="99"/><text x="2.1509%" y="511.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_left (4 samples, 0.01%)</title><rect x="2.1818%" y="485" width="0.0118%" height="15" fill="rgb(243,32,47)" fg:x="738" fg:w="4"/><text x="2.4318%" y="495.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start (4 samples, 0.01%)</title><rect x="2.1818%" y="469" width="0.0118%" height="15" fill="rgb(247,202,23)" fg:x="738" fg:w="4"/><text x="2.4318%" y="479.50"></text></g><g><title>chrono::format::parsed::Parsed::new (6 samples, 0.02%)</title><rect x="2.1936%" y="517" width="0.0177%" height="15" fill="rgb(219,102,11)" fg:x="742" fg:w="6"/><text x="2.4436%" y="527.50"></text></g><g><title>&lt;chrono::format::parsed::Parsed as core::default::Default&gt;::default (4 samples, 0.01%)</title><rect x="2.1995%" y="501" width="0.0118%" height="15" fill="rgb(243,110,44)" fg:x="744" fg:w="4"/><text x="2.4495%" y="511.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date::{{closure}} (4 samples, 0.01%)</title><rect x="2.2261%" y="469" width="0.0118%" height="15" fill="rgb(222,74,54)" fg:x="753" fg:w="4"/><text x="2.4761%" y="479.50"></text></g><g><title>&lt;chrono::naive::date::NaiveDate as chrono::traits::Datelike&gt;::iso_week (4 samples, 0.01%)</title><rect x="2.2261%" y="453" width="0.0118%" height="15" fill="rgb(216,99,12)" fg:x="753" fg:w="4"/><text x="2.4761%" y="463.50"></text></g><g><title>chrono::naive::isoweek::iso_week_from_yof (4 samples, 0.01%)</title><rect x="2.2261%" y="437" width="0.0118%" height="15" fill="rgb(226,22,26)" fg:x="753" fg:w="4"/><text x="2.4761%" y="447.50"></text></g><g><title>chrono::naive::internals::Of::isoweekdate_raw (4 samples, 0.01%)</title><rect x="2.2261%" y="421" width="0.0118%" height="15" fill="rgb(217,163,10)" fg:x="753" fg:w="4"/><text x="2.4761%" y="431.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date (10 samples, 0.03%)</title><rect x="2.2202%" y="485" width="0.0296%" height="15" fill="rgb(213,25,53)" fg:x="751" fg:w="10"/><text x="2.4702%" y="495.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (4 samples, 0.01%)</title><rect x="2.2379%" y="469" width="0.0118%" height="15" fill="rgb(252,105,26)" fg:x="757" fg:w="4"/><text x="2.4879%" y="479.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_mdf (4 samples, 0.01%)</title><rect x="2.2379%" y="453" width="0.0118%" height="15" fill="rgb(220,39,43)" fg:x="757" fg:w="4"/><text x="2.4879%" y="463.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_of (4 samples, 0.01%)</title><rect x="2.2379%" y="437" width="0.0118%" height="15" fill="rgb(229,68,48)" fg:x="757" fg:w="4"/><text x="2.4879%" y="447.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (4 samples, 0.01%)</title><rect x="2.2379%" y="421" width="0.0118%" height="15" fill="rgb(252,8,32)" fg:x="757" fg:w="4"/><text x="2.4879%" y="431.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date (4 samples, 0.01%)</title><rect x="2.2379%" y="405" width="0.0118%" height="15" fill="rgb(223,20,43)" fg:x="757" fg:w="4"/><text x="2.4879%" y="415.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_datetime_with_offset (13 samples, 0.04%)</title><rect x="2.2143%" y="501" width="0.0384%" height="15" fill="rgb(229,81,49)" fg:x="749" fg:w="13"/><text x="2.4643%" y="511.50"></text></g><g><title>chrono::naive::date::NaiveDate::checked_add_signed (4 samples, 0.01%)</title><rect x="2.2645%" y="389" width="0.0118%" height="15" fill="rgb(236,28,36)" fg:x="766" fg:w="4"/><text x="2.5145%" y="399.50"></text></g><g><title>chrono::format::parsed::Parsed::to_datetime_with_timezone (23 samples, 0.07%)</title><rect x="2.2113%" y="517" width="0.0680%" height="15" fill="rgb(249,185,26)" fg:x="748" fg:w="23"/><text x="2.4613%" y="527.50"></text></g><g><title>chrono::offset::TimeZone::from_local_datetime (9 samples, 0.03%)</title><rect x="2.2527%" y="501" width="0.0266%" height="15" fill="rgb(249,174,33)" fg:x="762" fg:w="9"/><text x="2.5027%" y="511.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::map (9 samples, 0.03%)</title><rect x="2.2527%" y="485" width="0.0266%" height="15" fill="rgb(233,201,37)" fg:x="762" fg:w="9"/><text x="2.5027%" y="495.50"></text></g><g><title>chrono::offset::TimeZone::from_local_datetime::{{closure}} (9 samples, 0.03%)</title><rect x="2.2527%" y="469" width="0.0266%" height="15" fill="rgb(221,78,26)" fg:x="762" fg:w="9"/><text x="2.5027%" y="479.50"></text></g><g><title>chrono::offset::fixed::&lt;impl core::ops::arith::Sub&lt;chrono::offset::fixed::FixedOffset&gt; for chrono::naive::datetime::NaiveDateTime&gt;::sub (8 samples, 0.02%)</title><rect x="2.2557%" y="453" width="0.0237%" height="15" fill="rgb(250,127,30)" fg:x="763" fg:w="8"/><text x="2.5057%" y="463.50"></text></g><g><title>chrono::offset::fixed::add_with_leapsecond (8 samples, 0.02%)</title><rect x="2.2557%" y="437" width="0.0237%" height="15" fill="rgb(230,49,44)" fg:x="763" fg:w="8"/><text x="2.5057%" y="447.50"></text></g><g><title>&lt;chrono::naive::datetime::NaiveDateTime as core::ops::arith::Add&lt;time::duration::Duration&gt;&gt;::add (8 samples, 0.02%)</title><rect x="2.2557%" y="421" width="0.0237%" height="15" fill="rgb(229,67,23)" fg:x="763" fg:w="8"/><text x="2.5057%" y="431.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_signed (8 samples, 0.02%)</title><rect x="2.2557%" y="405" width="0.0237%" height="15" fill="rgb(249,83,47)" fg:x="763" fg:w="8"/><text x="2.5057%" y="415.50"></text></g><g><title>chrono::offset::TimeZone::datetime_from_str (135 samples, 0.40%)</title><rect x="1.8950%" y="533" width="0.3991%" height="15" fill="rgb(215,43,3)" fg:x="641" fg:w="135"/><text x="2.1450%" y="543.50"></text></g><g><title>chrono::format::strftime::StrftimeItems::new (5 samples, 0.01%)</title><rect x="2.2793%" y="517" width="0.0148%" height="15" fill="rgb(238,154,13)" fg:x="771" fg:w="5"/><text x="2.5293%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (21 samples, 0.06%)</title><rect x="2.2941%" y="533" width="0.0621%" height="15" fill="rgb(219,56,2)" fg:x="776" fg:w="21"/><text x="2.5441%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (21 samples, 0.06%)</title><rect x="2.2941%" y="517" width="0.0621%" height="15" fill="rgb(233,0,4)" fg:x="776" fg:w="21"/><text x="2.5441%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (21 samples, 0.06%)</title><rect x="2.2941%" y="501" width="0.0621%" height="15" fill="rgb(235,30,7)" fg:x="776" fg:w="21"/><text x="2.5441%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.06%)</title><rect x="2.2941%" y="485" width="0.0621%" height="15" fill="rgb(250,79,13)" fg:x="776" fg:w="21"/><text x="2.5441%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 0.06%)</title><rect x="2.2941%" y="469" width="0.0621%" height="15" fill="rgb(211,146,34)" fg:x="776" fg:w="21"/><text x="2.5441%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 0.06%)</title><rect x="2.2941%" y="453" width="0.0621%" height="15" fill="rgb(228,22,38)" fg:x="776" fg:w="21"/><text x="2.5441%" y="463.50"></text></g><g><title>cfree (21 samples, 0.06%)</title><rect x="2.2941%" y="437" width="0.0621%" height="15" fill="rgb(235,168,5)" fg:x="776" fg:w="21"/><text x="2.5441%" y="447.50"></text></g><g><title>[libc.so.6] (15 samples, 0.04%)</title><rect x="2.3118%" y="421" width="0.0443%" height="15" fill="rgb(221,155,16)" fg:x="782" fg:w="15"/><text x="2.5618%" y="431.50"></text></g><g><title>[libc.so.6] (9 samples, 0.03%)</title><rect x="2.3296%" y="405" width="0.0266%" height="15" fill="rgb(215,215,53)" fg:x="788" fg:w="9"/><text x="2.5796%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.03%)</title><rect x="2.3562%" y="453" width="0.0296%" height="15" fill="rgb(223,4,10)" fg:x="797" fg:w="10"/><text x="2.6062%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.03%)</title><rect x="2.3562%" y="437" width="0.0296%" height="15" fill="rgb(234,103,6)" fg:x="797" fg:w="10"/><text x="2.6062%" y="447.50"></text></g><g><title>cfree (9 samples, 0.03%)</title><rect x="2.3591%" y="421" width="0.0266%" height="15" fill="rgb(227,97,0)" fg:x="798" fg:w="9"/><text x="2.6091%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::DataRow&gt; (12 samples, 0.04%)</title><rect x="2.3562%" y="533" width="0.0355%" height="15" fill="rgb(234,150,53)" fg:x="797" fg:w="12"/><text x="2.6062%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (12 samples, 0.04%)</title><rect x="2.3562%" y="517" width="0.0355%" height="15" fill="rgb(228,201,54)" fg:x="797" fg:w="12"/><text x="2.6062%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (12 samples, 0.04%)</title><rect x="2.3562%" y="501" width="0.0355%" height="15" fill="rgb(222,22,37)" fg:x="797" fg:w="12"/><text x="2.6062%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (12 samples, 0.04%)</title><rect x="2.3562%" y="485" width="0.0355%" height="15" fill="rgb(237,53,32)" fg:x="797" fg:w="12"/><text x="2.6062%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.04%)</title><rect x="2.3562%" y="469" width="0.0355%" height="15" fill="rgb(233,25,53)" fg:x="797" fg:w="12"/><text x="2.6062%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Watched&gt; (4 samples, 0.01%)</title><rect x="2.4005%" y="533" width="0.0118%" height="15" fill="rgb(210,40,34)" fg:x="812" fg:w="4"/><text x="2.6505%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::Video&gt; (4 samples, 0.01%)</title><rect x="2.4005%" y="517" width="0.0118%" height="15" fill="rgb(241,220,44)" fg:x="812" fg:w="4"/><text x="2.6505%" y="527.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="2.4212%" y="421" width="0.0177%" height="15" fill="rgb(235,28,35)" fg:x="819" fg:w="6"/><text x="2.6712%" y="431.50"></text></g><g><title>core::str::validations::next_code_point (6 samples, 0.02%)</title><rect x="2.4212%" y="405" width="0.0177%" height="15" fill="rgb(210,56,17)" fg:x="819" fg:w="6"/><text x="2.6712%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 0.03%)</title><rect x="2.4656%" y="293" width="0.0266%" height="15" fill="rgb(224,130,29)" fg:x="834" fg:w="9"/><text x="2.7156%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.03%)</title><rect x="2.4656%" y="277" width="0.0266%" height="15" fill="rgb(235,212,8)" fg:x="834" fg:w="9"/><text x="2.7156%" y="287.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.03%)</title><rect x="2.4656%" y="261" width="0.0266%" height="15" fill="rgb(223,33,50)" fg:x="834" fg:w="9"/><text x="2.7156%" y="271.50"></text></g><g><title>realloc (7 samples, 0.02%)</title><rect x="2.4715%" y="245" width="0.0207%" height="15" fill="rgb(219,149,13)" fg:x="836" fg:w="7"/><text x="2.7215%" y="255.50"></text></g><g><title>[libc.so.6] (7 samples, 0.02%)</title><rect x="2.4715%" y="229" width="0.0207%" height="15" fill="rgb(250,156,29)" fg:x="836" fg:w="7"/><text x="2.7215%" y="239.50"></text></g><g><title>[libc.so.6] (4 samples, 0.01%)</title><rect x="2.4803%" y="213" width="0.0118%" height="15" fill="rgb(216,193,19)" fg:x="839" fg:w="4"/><text x="2.7303%" y="223.50"></text></g><g><title>yt_history::filter_ascii (25 samples, 0.07%)</title><rect x="2.4212%" y="533" width="0.0739%" height="15" fill="rgb(216,135,14)" fg:x="819" fg:w="25"/><text x="2.6712%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (25 samples, 0.07%)</title><rect x="2.4212%" y="517" width="0.0739%" height="15" fill="rgb(241,47,5)" fg:x="819" fg:w="25"/><text x="2.6712%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (25 samples, 0.07%)</title><rect x="2.4212%" y="501" width="0.0739%" height="15" fill="rgb(233,42,35)" fg:x="819" fg:w="25"/><text x="2.6712%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (25 samples, 0.07%)</title><rect x="2.4212%" y="485" width="0.0739%" height="15" fill="rgb(231,13,6)" fg:x="819" fg:w="25"/><text x="2.6712%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (25 samples, 0.07%)</title><rect x="2.4212%" y="469" width="0.0739%" height="15" fill="rgb(207,181,40)" fg:x="819" fg:w="25"/><text x="2.6712%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (25 samples, 0.07%)</title><rect x="2.4212%" y="453" width="0.0739%" height="15" fill="rgb(254,173,49)" fg:x="819" fg:w="25"/><text x="2.6712%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (25 samples, 0.07%)</title><rect x="2.4212%" y="437" width="0.0739%" height="15" fill="rgb(221,1,38)" fg:x="819" fg:w="25"/><text x="2.6712%" y="447.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::{{closure}} (19 samples, 0.06%)</title><rect x="2.4390%" y="421" width="0.0562%" height="15" fill="rgb(206,124,46)" fg:x="825" fg:w="19"/><text x="2.6890%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (19 samples, 0.06%)</title><rect x="2.4390%" y="405" width="0.0562%" height="15" fill="rgb(249,21,11)" fg:x="825" fg:w="19"/><text x="2.6890%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::{{closure}} (19 samples, 0.06%)</title><rect x="2.4390%" y="389" width="0.0562%" height="15" fill="rgb(222,201,40)" fg:x="825" fg:w="19"/><text x="2.6890%" y="399.50"></text></g><g><title>alloc::string::String::push (19 samples, 0.06%)</title><rect x="2.4390%" y="373" width="0.0562%" height="15" fill="rgb(235,61,29)" fg:x="825" fg:w="19"/><text x="2.6890%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (19 samples, 0.06%)</title><rect x="2.4390%" y="357" width="0.0562%" height="15" fill="rgb(219,207,3)" fg:x="825" fg:w="19"/><text x="2.6890%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.03%)</title><rect x="2.4626%" y="341" width="0.0325%" height="15" fill="rgb(222,56,46)" fg:x="833" fg:w="11"/><text x="2.7126%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (11 samples, 0.03%)</title><rect x="2.4626%" y="325" width="0.0325%" height="15" fill="rgb(239,76,54)" fg:x="833" fg:w="11"/><text x="2.7126%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 0.03%)</title><rect x="2.4626%" y="309" width="0.0325%" height="15" fill="rgb(231,124,27)" fg:x="833" fg:w="11"/><text x="2.7126%" y="319.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (8 samples, 0.02%)</title><rect x="2.5897%" y="469" width="0.0237%" height="15" fill="rgb(249,195,6)" fg:x="876" fg:w="8"/><text x="2.8397%" y="479.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (8 samples, 0.02%)</title><rect x="2.5897%" y="453" width="0.0237%" height="15" fill="rgb(237,174,47)" fg:x="876" fg:w="8"/><text x="2.8397%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (341 samples, 1.01%)</title><rect x="2.7139%" y="453" width="1.0081%" height="15" fill="rgb(206,201,31)" fg:x="918" fg:w="341"/><text x="2.9639%" y="463.50"></text></g><g><title>core::cmp::PartialEq::ne (341 samples, 1.01%)</title><rect x="2.7139%" y="437" width="1.0081%" height="15" fill="rgb(231,57,52)" fg:x="918" fg:w="341"/><text x="2.9639%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (341 samples, 1.01%)</title><rect x="2.7139%" y="421" width="1.0081%" height="15" fill="rgb(248,177,22)" fg:x="918" fg:w="341"/><text x="2.9639%" y="431.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (341 samples, 1.01%)</title><rect x="2.7139%" y="405" width="1.0081%" height="15" fill="rgb(215,211,37)" fg:x="918" fg:w="341"/><text x="2.9639%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (341 samples, 1.01%)</title><rect x="2.7139%" y="389" width="1.0081%" height="15" fill="rgb(241,128,51)" fg:x="918" fg:w="341"/><text x="2.9639%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (341 samples, 1.01%)</title><rect x="2.7139%" y="373" width="1.0081%" height="15" fill="rgb(227,165,31)" fg:x="918" fg:w="341"/><text x="2.9639%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (341 samples, 1.01%)</title><rect x="2.7139%" y="357" width="1.0081%" height="15" fill="rgb(228,167,24)" fg:x="918" fg:w="341"/><text x="2.9639%" y="367.50"></text></g><g><title>[libc.so.6] (327 samples, 0.97%)</title><rect x="2.7553%" y="341" width="0.9667%" height="15" fill="rgb(228,143,12)" fg:x="932" fg:w="327"/><text x="3.0053%" y="351.50"></text></g><g><title>yt_history::model::Models::find_or_create_channel (416 samples, 1.23%)</title><rect x="2.4981%" y="533" width="1.2298%" height="15" fill="rgb(249,149,8)" fg:x="845" fg:w="416"/><text x="2.7481%" y="543.50"></text></g><g><title>yt_history::model::Models::find_channel (413 samples, 1.22%)</title><rect x="2.5069%" y="517" width="1.2210%" height="15" fill="rgb(243,35,44)" fg:x="848" fg:w="413"/><text x="2.7569%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (411 samples, 1.22%)</title><rect x="2.5129%" y="501" width="1.2150%" height="15" fill="rgb(246,89,9)" fg:x="850" fg:w="411"/><text x="2.7629%" y="511.50"></text></g><g><title>yt_history::model::Models::find_channel::{{closure}} (399 samples, 1.18%)</title><rect x="2.5483%" y="485" width="1.1796%" height="15" fill="rgb(233,213,13)" fg:x="862" fg:w="399"/><text x="2.7983%" y="495.50"></text></g><g><title>yt_history::model::WhereChannel::matches (377 samples, 1.11%)</title><rect x="2.6134%" y="469" width="1.1145%" height="15" fill="rgb(233,141,41)" fg:x="884" fg:w="377"/><text x="2.8634%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.02%)</title><rect x="3.7604%" y="437" width="0.0237%" height="15" fill="rgb(239,167,4)" fg:x="1272" fg:w="8"/><text x="4.0104%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.02%)</title><rect x="3.7604%" y="421" width="0.0237%" height="15" fill="rgb(209,217,16)" fg:x="1272" fg:w="8"/><text x="4.0104%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.02%)</title><rect x="3.7604%" y="405" width="0.0237%" height="15" fill="rgb(219,88,35)" fg:x="1272" fg:w="8"/><text x="4.0104%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.02%)</title><rect x="3.7604%" y="389" width="0.0237%" height="15" fill="rgb(220,193,23)" fg:x="1272" fg:w="8"/><text x="4.0104%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.02%)</title><rect x="3.7604%" y="373" width="0.0237%" height="15" fill="rgb(230,90,52)" fg:x="1272" fg:w="8"/><text x="4.0104%" y="383.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.02%)</title><rect x="3.7604%" y="357" width="0.0237%" height="15" fill="rgb(252,106,19)" fg:x="1272" fg:w="8"/><text x="4.0104%" y="367.50"></text></g><g><title>malloc (8 samples, 0.02%)</title><rect x="3.7604%" y="341" width="0.0237%" height="15" fill="rgb(206,74,20)" fg:x="1272" fg:w="8"/><text x="4.0104%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (11 samples, 0.03%)</title><rect x="3.7575%" y="517" width="0.0325%" height="15" fill="rgb(230,138,44)" fg:x="1271" fg:w="11"/><text x="4.0075%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.03%)</title><rect x="3.7604%" y="501" width="0.0296%" height="15" fill="rgb(235,182,43)" fg:x="1272" fg:w="10"/><text x="4.0104%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (10 samples, 0.03%)</title><rect x="3.7604%" y="485" width="0.0296%" height="15" fill="rgb(242,16,51)" fg:x="1272" fg:w="10"/><text x="4.0104%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (10 samples, 0.03%)</title><rect x="3.7604%" y="469" width="0.0296%" height="15" fill="rgb(248,9,4)" fg:x="1272" fg:w="10"/><text x="4.0104%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (10 samples, 0.03%)</title><rect x="3.7604%" y="453" width="0.0296%" height="15" fill="rgb(210,31,22)" fg:x="1272" fg:w="10"/><text x="4.0104%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.01%)</title><rect x="3.7959%" y="421" width="0.0118%" height="15" fill="rgb(239,54,39)" fg:x="1284" fg:w="4"/><text x="4.0459%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.01%)</title><rect x="3.7959%" y="405" width="0.0118%" height="15" fill="rgb(230,99,41)" fg:x="1284" fg:w="4"/><text x="4.0459%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.01%)</title><rect x="3.7959%" y="389" width="0.0118%" height="15" fill="rgb(253,106,12)" fg:x="1284" fg:w="4"/><text x="4.0459%" y="399.50"></text></g><g><title>&lt;yt_history::model::Video as core::clone::Clone&gt;::clone (7 samples, 0.02%)</title><rect x="3.7900%" y="517" width="0.0207%" height="15" fill="rgb(213,46,41)" fg:x="1282" fg:w="7"/><text x="4.0400%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="3.7929%" y="501" width="0.0177%" height="15" fill="rgb(215,133,35)" fg:x="1283" fg:w="6"/><text x="4.0429%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.01%)</title><rect x="3.7959%" y="485" width="0.0148%" height="15" fill="rgb(213,28,5)" fg:x="1284" fg:w="5"/><text x="4.0459%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.01%)</title><rect x="3.7959%" y="469" width="0.0148%" height="15" fill="rgb(215,77,49)" fg:x="1284" fg:w="5"/><text x="4.0459%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.01%)</title><rect x="3.7959%" y="453" width="0.0148%" height="15" fill="rgb(248,100,22)" fg:x="1284" fg:w="5"/><text x="4.0459%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.01%)</title><rect x="3.7959%" y="437" width="0.0148%" height="15" fill="rgb(208,67,9)" fg:x="1284" fg:w="5"/><text x="4.0459%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (8 samples, 0.02%)</title><rect x="3.8195%" y="517" width="0.0237%" height="15" fill="rgb(219,133,21)" fg:x="1292" fg:w="8"/><text x="4.0695%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (8 samples, 0.02%)</title><rect x="3.8195%" y="501" width="0.0237%" height="15" fill="rgb(246,46,29)" fg:x="1292" fg:w="8"/><text x="4.0695%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (8 samples, 0.02%)</title><rect x="3.8195%" y="485" width="0.0237%" height="15" fill="rgb(246,185,52)" fg:x="1292" fg:w="8"/><text x="4.0695%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.02%)</title><rect x="3.8195%" y="469" width="0.0237%" height="15" fill="rgb(252,136,11)" fg:x="1292" fg:w="8"/><text x="4.0695%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (6 samples, 0.02%)</title><rect x="3.8255%" y="453" width="0.0177%" height="15" fill="rgb(219,138,53)" fg:x="1294" fg:w="6"/><text x="4.0755%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (149 samples, 0.44%)</title><rect x="3.9230%" y="437" width="0.4405%" height="15" fill="rgb(211,51,23)" fg:x="1327" fg:w="149"/><text x="4.1730%" y="447.50"></text></g><g><title>core::cmp::PartialEq::ne (149 samples, 0.44%)</title><rect x="3.9230%" y="421" width="0.4405%" height="15" fill="rgb(247,221,28)" fg:x="1327" fg:w="149"/><text x="4.1730%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (149 samples, 0.44%)</title><rect x="3.9230%" y="405" width="0.4405%" height="15" fill="rgb(251,222,45)" fg:x="1327" fg:w="149"/><text x="4.1730%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (149 samples, 0.44%)</title><rect x="3.9230%" y="389" width="0.4405%" height="15" fill="rgb(217,162,53)" fg:x="1327" fg:w="149"/><text x="4.1730%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (149 samples, 0.44%)</title><rect x="3.9230%" y="373" width="0.4405%" height="15" fill="rgb(229,93,14)" fg:x="1327" fg:w="149"/><text x="4.1730%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (149 samples, 0.44%)</title><rect x="3.9230%" y="357" width="0.4405%" height="15" fill="rgb(209,67,49)" fg:x="1327" fg:w="149"/><text x="4.1730%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (149 samples, 0.44%)</title><rect x="3.9230%" y="341" width="0.4405%" height="15" fill="rgb(213,87,29)" fg:x="1327" fg:w="149"/><text x="4.1730%" y="351.50"></text></g><g><title>[libc.so.6] (144 samples, 0.43%)</title><rect x="3.9378%" y="325" width="0.4257%" height="15" fill="rgb(205,151,52)" fg:x="1332" fg:w="144"/><text x="4.1878%" y="335.50"></text></g><g><title>yt_history::model::Models::find_or_create_channel (177 samples, 0.52%)</title><rect x="3.8432%" y="517" width="0.5233%" height="15" fill="rgb(253,215,39)" fg:x="1300" fg:w="177"/><text x="4.0932%" y="527.50"></text></g><g><title>yt_history::model::Models::find_channel (174 samples, 0.51%)</title><rect x="3.8521%" y="501" width="0.5144%" height="15" fill="rgb(221,220,41)" fg:x="1303" fg:w="174"/><text x="4.1021%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (174 samples, 0.51%)</title><rect x="3.8521%" y="485" width="0.5144%" height="15" fill="rgb(218,133,21)" fg:x="1303" fg:w="174"/><text x="4.1021%" y="495.50"></text></g><g><title>yt_history::model::Models::find_channel::{{closure}} (167 samples, 0.49%)</title><rect x="3.8728%" y="469" width="0.4937%" height="15" fill="rgb(221,193,43)" fg:x="1310" fg:w="167"/><text x="4.1228%" y="479.50"></text></g><g><title>yt_history::model::WhereChannel::matches (161 samples, 0.48%)</title><rect x="3.8905%" y="453" width="0.4760%" height="15" fill="rgb(240,128,52)" fg:x="1316" fg:w="161"/><text x="4.1405%" y="463.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::inner (19 samples, 0.06%)</title><rect x="10.6072%" y="437" width="0.0562%" height="15" fill="rgb(253,114,12)" fg:x="3588" fg:w="19"/><text x="10.8572%" y="447.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (19 samples, 0.06%)</title><rect x="10.6072%" y="421" width="0.0562%" height="15" fill="rgb(215,223,47)" fg:x="3588" fg:w="19"/><text x="10.8572%" y="431.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (481 samples, 1.42%)</title><rect x="10.4771%" y="453" width="1.4220%" height="15" fill="rgb(248,225,23)" fg:x="3544" fg:w="481"/><text x="10.7271%" y="463.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (418 samples, 1.24%)</title><rect x="10.6634%" y="437" width="1.2357%" height="15" fill="rgb(250,108,0)" fg:x="3607" fg:w="418"/><text x="10.9134%" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (21 samples, 0.06%)</title><rect x="11.8370%" y="421" width="0.0621%" height="15" fill="rgb(228,208,7)" fg:x="4004" fg:w="21"/><text x="12.0870%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (21 samples, 0.06%)</title><rect x="11.8370%" y="405" width="0.0621%" height="15" fill="rgb(244,45,10)" fg:x="4004" fg:w="21"/><text x="12.0870%" y="415.50"></text></g><g><title>core::mem::replace (21 samples, 0.06%)</title><rect x="11.8370%" y="389" width="0.0621%" height="15" fill="rgb(207,125,25)" fg:x="4004" fg:w="21"/><text x="12.0870%" y="399.50"></text></g><g><title>core::ptr::write (21 samples, 0.06%)</title><rect x="11.8370%" y="373" width="0.0621%" height="15" fill="rgb(210,195,18)" fg:x="4004" fg:w="21"/><text x="12.0870%" y="383.50"></text></g><g><title>__rdl_alloc (276 samples, 0.82%)</title><rect x="14.5036%" y="277" width="0.8159%" height="15" fill="rgb(249,80,12)" fg:x="4906" fg:w="276"/><text x="14.7536%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (51 samples, 0.15%)</title><rect x="15.1688%" y="261" width="0.1508%" height="15" fill="rgb(221,65,9)" fg:x="5131" fg:w="51"/><text x="15.4188%" y="271.50"></text></g><g><title>__rust_alloc (267 samples, 0.79%)</title><rect x="15.3196%" y="277" width="0.7893%" height="15" fill="rgb(235,49,36)" fg:x="5182" fg:w="267"/><text x="15.5696%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,675 samples, 7.91%)</title><rect x="13.3802%" y="373" width="7.9081%" height="15" fill="rgb(225,32,20)" fg:x="4526" fg:w="2675"/><text x="13.6302%" y="383.50">alloc::vec:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,675 samples, 7.91%)</title><rect x="13.3802%" y="357" width="7.9081%" height="15" fill="rgb(215,141,46)" fg:x="4526" fg:w="2675"/><text x="13.6302%" y="367.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2,674 samples, 7.91%)</title><rect x="13.3832%" y="341" width="7.9052%" height="15" fill="rgb(250,160,47)" fg:x="4527" fg:w="2674"/><text x="13.6332%" y="351.50">alloc::raw_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,519 samples, 7.45%)</title><rect x="13.8414%" y="325" width="7.4469%" height="15" fill="rgb(216,222,40)" fg:x="4682" fg:w="2519"/><text x="14.0914%" y="335.50">&lt;alloc::al..</text></g><g><title>alloc::alloc::Global::alloc_impl (2,519 samples, 7.45%)</title><rect x="13.8414%" y="309" width="7.4469%" height="15" fill="rgb(234,217,39)" fg:x="4682" fg:w="2519"/><text x="14.0914%" y="319.50">alloc::all..</text></g><g><title>alloc::alloc::alloc (2,519 samples, 7.45%)</title><rect x="13.8414%" y="293" width="7.4469%" height="15" fill="rgb(207,178,40)" fg:x="4682" fg:w="2519"/><text x="14.0914%" y="303.50">alloc::all..</text></g><g><title>malloc (1,752 samples, 5.18%)</title><rect x="16.1089%" y="277" width="5.1794%" height="15" fill="rgb(221,136,13)" fg:x="5449" fg:w="1752"/><text x="16.3589%" y="287.50">malloc</text></g><g><title>[libc.so.6] (8 samples, 0.02%)</title><rect x="21.2647%" y="261" width="0.0237%" height="15" fill="rgb(249,199,10)" fg:x="7193" fg:w="8"/><text x="21.5147%" y="271.50"></text></g><g><title>&lt;yt_history::model::Video as core::clone::Clone&gt;::clone (10,423 samples, 30.81%)</title><rect x="4.3842%" y="469" width="30.8136%" height="15" fill="rgb(249,222,13)" fg:x="1483" fg:w="10423"/><text x="4.6342%" y="479.50">&lt;yt_history::model::Video as core::clone::Clone&gt;::..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7,881 samples, 23.30%)</title><rect x="11.8991%" y="453" width="23.2986%" height="15" fill="rgb(244,185,38)" fg:x="4025" fg:w="7881"/><text x="12.1491%" y="463.50">&lt;alloc::string::String as core::clone..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7,380 samples, 21.82%)</title><rect x="13.3802%" y="437" width="21.8175%" height="15" fill="rgb(236,202,9)" fg:x="4526" fg:w="7380"/><text x="13.6302%" y="447.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::clo..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7,380 samples, 21.82%)</title><rect x="13.3802%" y="421" width="21.8175%" height="15" fill="rgb(250,229,37)" fg:x="4526" fg:w="7380"/><text x="13.6302%" y="431.50">alloc::slice::&lt;impl [T]&gt;::to_vec_in</text></g><g><title>alloc::slice::hack::to_vec (7,380 samples, 21.82%)</title><rect x="13.3802%" y="405" width="21.8175%" height="15" fill="rgb(206,174,23)" fg:x="4526" fg:w="7380"/><text x="13.6302%" y="415.50">alloc::slice::hack::to_vec</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7,380 samples, 21.82%)</title><rect x="13.3802%" y="389" width="21.8175%" height="15" fill="rgb(211,33,43)" fg:x="4526" fg:w="7380"/><text x="13.6302%" y="399.50">&lt;T as alloc::slice::hack::ConvertV..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4,705 samples, 13.91%)</title><rect x="21.2884%" y="373" width="13.9094%" height="15" fill="rgb(245,58,50)" fg:x="7201" fg:w="4705"/><text x="21.5384%" y="383.50">core::ptr::const_ptr:..</text></g><g><title>core::intrinsics::copy_nonoverlapping (4,705 samples, 13.91%)</title><rect x="21.2884%" y="357" width="13.9094%" height="15" fill="rgb(244,68,36)" fg:x="7201" fg:w="4705"/><text x="21.5384%" y="367.50">core::intrinsics::cop..</text></g><g><title>[libc.so.6] (4,702 samples, 13.90%)</title><rect x="21.2972%" y="341" width="13.9005%" height="15" fill="rgb(232,229,15)" fg:x="7204" fg:w="4702"/><text x="21.5472%" y="351.50">[libc.so.6]</text></g><g><title>core::cmp::PartialEq::ne (1,428 samples, 4.22%)</title><rect x="36.4365%" y="453" width="4.2216%" height="15" fill="rgb(254,30,23)" fg:x="12325" fg:w="1428"/><text x="36.6865%" y="463.50">core:..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1,428 samples, 4.22%)</title><rect x="36.4365%" y="437" width="4.2216%" height="15" fill="rgb(235,160,14)" fg:x="12325" fg:w="1428"/><text x="36.6865%" y="447.50">&lt;allo..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1,428 samples, 4.22%)</title><rect x="36.4365%" y="421" width="4.2216%" height="15" fill="rgb(212,155,44)" fg:x="12325" fg:w="1428"/><text x="36.6865%" y="431.50">core:..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,428 samples, 4.22%)</title><rect x="36.4365%" y="405" width="4.2216%" height="15" fill="rgb(226,2,50)" fg:x="12325" fg:w="1428"/><text x="36.6865%" y="415.50">core:..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,428 samples, 4.22%)</title><rect x="36.4365%" y="389" width="4.2216%" height="15" fill="rgb(234,177,6)" fg:x="12325" fg:w="1428"/><text x="36.6865%" y="399.50">core:..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,428 samples, 4.22%)</title><rect x="36.4365%" y="373" width="4.2216%" height="15" fill="rgb(217,24,9)" fg:x="12325" fg:w="1428"/><text x="36.6865%" y="383.50">&lt;[A] ..</text></g><g><title>[libc.so.6] (1,312 samples, 3.88%)</title><rect x="36.7794%" y="357" width="3.8787%" height="15" fill="rgb(220,13,46)" fg:x="12441" fg:w="1312"/><text x="37.0294%" y="367.50">[lib..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Channel&gt;&gt; (99 samples, 0.29%)</title><rect x="40.6581%" y="453" width="0.2927%" height="15" fill="rgb(239,221,27)" fg:x="13753" fg:w="99"/><text x="40.9081%" y="463.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (99 samples, 0.29%)</title><rect x="40.6581%" y="437" width="0.2927%" height="15" fill="rgb(222,198,25)" fg:x="13753" fg:w="99"/><text x="40.9081%" y="447.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (85 samples, 0.25%)</title><rect x="40.6995%" y="421" width="0.2513%" height="15" fill="rgb(211,99,13)" fg:x="13767" fg:w="85"/><text x="40.9495%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (85 samples, 0.25%)</title><rect x="40.6995%" y="405" width="0.2513%" height="15" fill="rgb(232,111,31)" fg:x="13767" fg:w="85"/><text x="40.9495%" y="415.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (85 samples, 0.25%)</title><rect x="40.6995%" y="389" width="0.2513%" height="15" fill="rgb(245,82,37)" fg:x="13767" fg:w="85"/><text x="40.9495%" y="399.50"></text></g><g><title>core::mem::replace (85 samples, 0.25%)</title><rect x="40.6995%" y="373" width="0.2513%" height="15" fill="rgb(227,149,46)" fg:x="13767" fg:w="85"/><text x="40.9495%" y="383.50"></text></g><g><title>core::ptr::write (85 samples, 0.25%)</title><rect x="40.6995%" y="357" width="0.2513%" height="15" fill="rgb(218,36,50)" fg:x="13767" fg:w="85"/><text x="40.9495%" y="367.50"></text></g><g><title>__rdl_dealloc (215 samples, 0.64%)</title><rect x="40.9507%" y="357" width="0.6356%" height="15" fill="rgb(226,80,48)" fg:x="13852" fg:w="215"/><text x="41.2007%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (215 samples, 0.64%)</title><rect x="40.9507%" y="341" width="0.6356%" height="15" fill="rgb(238,224,15)" fg:x="13852" fg:w="215"/><text x="41.2007%" y="351.50"></text></g><g><title>__rust_dealloc (253 samples, 0.75%)</title><rect x="41.5864%" y="357" width="0.7479%" height="15" fill="rgb(241,136,10)" fg:x="14067" fg:w="253"/><text x="41.8364%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,650 samples, 7.83%)</title><rect x="40.9507%" y="389" width="7.8342%" height="15" fill="rgb(208,32,45)" fg:x="13852" fg:w="2650"/><text x="41.2007%" y="399.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::dealloc (2,650 samples, 7.83%)</title><rect x="40.9507%" y="373" width="7.8342%" height="15" fill="rgb(207,135,9)" fg:x="13852" fg:w="2650"/><text x="41.2007%" y="383.50">alloc::allo..</text></g><g><title>cfree (2,182 samples, 6.45%)</title><rect x="42.3343%" y="357" width="6.4507%" height="15" fill="rgb(206,86,44)" fg:x="14320" fg:w="2182"/><text x="42.5843%" y="367.50">cfree</text></g><g><title>[libc.so.6] (1,536 samples, 4.54%)</title><rect x="44.2441%" y="341" width="4.5409%" height="15" fill="rgb(245,177,15)" fg:x="14966" fg:w="1536"/><text x="44.4941%" y="351.50">[libc..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2,783 samples, 8.23%)</title><rect x="40.9507%" y="453" width="8.2274%" height="15" fill="rgb(206,64,50)" fg:x="13852" fg:w="2783"/><text x="41.2007%" y="463.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2,783 samples, 8.23%)</title><rect x="40.9507%" y="437" width="8.2274%" height="15" fill="rgb(234,36,40)" fg:x="13852" fg:w="2783"/><text x="41.2007%" y="447.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2,783 samples, 8.23%)</title><rect x="40.9507%" y="421" width="8.2274%" height="15" fill="rgb(213,64,8)" fg:x="13852" fg:w="2783"/><text x="41.2007%" y="431.50">core::ptr::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,783 samples, 8.23%)</title><rect x="40.9507%" y="405" width="8.2274%" height="15" fill="rgb(210,75,36)" fg:x="13852" fg:w="2783"/><text x="41.2007%" y="415.50">&lt;alloc::raw..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (133 samples, 0.39%)</title><rect x="48.7850%" y="389" width="0.3932%" height="15" fill="rgb(229,88,21)" fg:x="16502" fg:w="133"/><text x="49.0350%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (15,160 samples, 44.82%)</title><rect x="4.3665%" y="501" width="44.8176%" height="15" fill="rgb(252,204,47)" fg:x="1477" fg:w="15160"/><text x="4.6165%" y="511.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::f..</text></g><g><title>yt_history::model::Models::find_video::{{closure}} (15,157 samples, 44.81%)</title><rect x="4.3753%" y="485" width="44.8087%" height="15" fill="rgb(208,77,27)" fg:x="1480" fg:w="15157"/><text x="4.6253%" y="495.50">yt_history::model::Models::find_video::{{closure}}</text></g><g><title>yt_history::model::WhereVideo::matches (4,731 samples, 13.99%)</title><rect x="35.1978%" y="469" width="13.9863%" height="15" fill="rgb(221,76,26)" fg:x="11906" fg:w="4731"/><text x="35.4478%" y="479.50">yt_history::model::Wh..</text></g><g><title>core::ptr::drop_in_place&lt;yt_history::model::WhereVideo&gt; (6 samples, 0.02%)</title><rect x="49.1841%" y="501" width="0.0177%" height="15" fill="rgb(225,139,18)" fg:x="16637" fg:w="6"/><text x="49.4341%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (5 samples, 0.01%)</title><rect x="49.1870%" y="485" width="0.0148%" height="15" fill="rgb(230,137,11)" fg:x="16638" fg:w="5"/><text x="49.4370%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4 samples, 0.01%)</title><rect x="49.1900%" y="469" width="0.0118%" height="15" fill="rgb(212,28,1)" fg:x="16639" fg:w="4"/><text x="49.4400%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.01%)</title><rect x="49.1900%" y="453" width="0.0118%" height="15" fill="rgb(248,164,17)" fg:x="16639" fg:w="4"/><text x="49.4400%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.01%)</title><rect x="49.1900%" y="437" width="0.0118%" height="15" fill="rgb(222,171,42)" fg:x="16639" fg:w="4"/><text x="49.4400%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="49.1900%" y="421" width="0.0118%" height="15" fill="rgb(243,84,45)" fg:x="16639" fg:w="4"/><text x="49.4400%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.01%)</title><rect x="49.1900%" y="405" width="0.0118%" height="15" fill="rgb(252,49,23)" fg:x="16639" fg:w="4"/><text x="49.4400%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.01%)</title><rect x="49.1900%" y="389" width="0.0118%" height="15" fill="rgb(215,19,7)" fg:x="16639" fg:w="4"/><text x="49.4400%" y="399.50"></text></g><g><title>cfree (4 samples, 0.01%)</title><rect x="49.1900%" y="373" width="0.0118%" height="15" fill="rgb(238,81,41)" fg:x="16639" fg:w="4"/><text x="49.4400%" y="383.50"></text></g><g><title>yt_history::model::Models::find_video (15,172 samples, 44.85%)</title><rect x="4.3665%" y="517" width="44.8531%" height="15" fill="rgb(210,199,37)" fg:x="1477" fg:w="15172"/><text x="4.6165%" y="527.50">yt_history::model::Models::find_video</text></g><g><title>yt_history::model::Models::find_video (6 samples, 0.02%)</title><rect x="49.2018%" y="501" width="0.0177%" height="15" fill="rgb(244,192,49)" fg:x="16643" fg:w="6"/><text x="49.4518%" y="511.50"></text></g><g><title>&lt;yt_history::model::Video as core::clone::Clone&gt;::clone (4 samples, 0.01%)</title><rect x="49.2284%" y="501" width="0.0118%" height="15" fill="rgb(226,211,11)" fg:x="16652" fg:w="4"/><text x="49.4784%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (101 samples, 0.30%)</title><rect x="49.2964%" y="437" width="0.2986%" height="15" fill="rgb(236,162,54)" fg:x="16675" fg:w="101"/><text x="49.5464%" y="447.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::cmp::PartialEq&gt;::eq (101 samples, 0.30%)</title><rect x="49.2964%" y="421" width="0.2986%" height="15" fill="rgb(220,229,9)" fg:x="16675" fg:w="101"/><text x="49.5464%" y="431.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as alloc::rc::RcEqIdent&lt;T&gt;&gt;::eq (101 samples, 0.30%)</title><rect x="49.2964%" y="405" width="0.2986%" height="15" fill="rgb(250,87,22)" fg:x="16675" fg:w="101"/><text x="49.5464%" y="415.50"></text></g><g><title>&lt;yt_history::model::Channel as core::cmp::PartialEq&gt;::eq (101 samples, 0.30%)</title><rect x="49.2964%" y="389" width="0.2986%" height="15" fill="rgb(239,43,17)" fg:x="16675" fg:w="101"/><text x="49.5464%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (98 samples, 0.29%)</title><rect x="49.3053%" y="373" width="0.2897%" height="15" fill="rgb(231,177,25)" fg:x="16678" fg:w="98"/><text x="49.5553%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (98 samples, 0.29%)</title><rect x="49.3053%" y="357" width="0.2897%" height="15" fill="rgb(219,179,1)" fg:x="16678" fg:w="98"/><text x="49.5553%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (98 samples, 0.29%)</title><rect x="49.3053%" y="341" width="0.2897%" height="15" fill="rgb(238,219,53)" fg:x="16678" fg:w="98"/><text x="49.5553%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (98 samples, 0.29%)</title><rect x="49.3053%" y="325" width="0.2897%" height="15" fill="rgb(232,167,36)" fg:x="16678" fg:w="98"/><text x="49.5553%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (98 samples, 0.29%)</title><rect x="49.3053%" y="309" width="0.2897%" height="15" fill="rgb(244,19,51)" fg:x="16678" fg:w="98"/><text x="49.5553%" y="319.50"></text></g><g><title>[libc.so.6] (95 samples, 0.28%)</title><rect x="49.3141%" y="293" width="0.2808%" height="15" fill="rgb(224,6,22)" fg:x="16681" fg:w="95"/><text x="49.5641%" y="303.50"></text></g><g><title>yt_history::model::Models::find_or_create_video (15,517 samples, 45.87%)</title><rect x="3.7279%" y="533" width="45.8730%" height="15" fill="rgb(224,145,5)" fg:x="1261" fg:w="15517"/><text x="3.9779%" y="543.50">yt_history::model::Models::find_or_create_video</text></g><g><title>yt_history::model::Models::insert_video (129 samples, 0.38%)</title><rect x="49.2195%" y="517" width="0.3814%" height="15" fill="rgb(234,130,49)" fg:x="16649" fg:w="129"/><text x="49.4695%" y="527.50"></text></g><g><title>yt_history::model::Models::find_channel (122 samples, 0.36%)</title><rect x="49.2402%" y="501" width="0.3607%" height="15" fill="rgb(254,6,2)" fg:x="16656" fg:w="122"/><text x="49.4902%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (122 samples, 0.36%)</title><rect x="49.2402%" y="485" width="0.3607%" height="15" fill="rgb(208,96,46)" fg:x="16656" fg:w="122"/><text x="49.4902%" y="495.50"></text></g><g><title>yt_history::model::Models::find_channel::{{closure}} (118 samples, 0.35%)</title><rect x="49.2521%" y="469" width="0.3488%" height="15" fill="rgb(239,3,39)" fg:x="16660" fg:w="118"/><text x="49.5021%" y="479.50"></text></g><g><title>yt_history::model::WhereChannel::matches (111 samples, 0.33%)</title><rect x="49.2727%" y="453" width="0.3281%" height="15" fill="rgb(233,210,1)" fg:x="16667" fg:w="111"/><text x="49.5227%" y="463.50"></text></g><g><title>&lt;yt_history::model::Video as core::clone::Clone&gt;::clone (12 samples, 0.04%)</title><rect x="49.6157%" y="517" width="0.0355%" height="15" fill="rgb(244,137,37)" fg:x="16783" fg:w="12"/><text x="49.8657%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.02%)</title><rect x="49.6689%" y="405" width="0.0177%" height="15" fill="rgb(240,136,2)" fg:x="16801" fg:w="6"/><text x="49.9189%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.02%)</title><rect x="49.6689%" y="389" width="0.0177%" height="15" fill="rgb(239,18,37)" fg:x="16801" fg:w="6"/><text x="49.9189%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.02%)</title><rect x="49.6689%" y="373" width="0.0177%" height="15" fill="rgb(218,185,22)" fg:x="16801" fg:w="6"/><text x="49.9189%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.02%)</title><rect x="49.6689%" y="357" width="0.0177%" height="15" fill="rgb(225,218,4)" fg:x="16801" fg:w="6"/><text x="49.9189%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.02%)</title><rect x="49.6689%" y="341" width="0.0177%" height="15" fill="rgb(230,182,32)" fg:x="16801" fg:w="6"/><text x="49.9189%" y="351.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.02%)</title><rect x="49.6689%" y="325" width="0.0177%" height="15" fill="rgb(242,56,43)" fg:x="16801" fg:w="6"/><text x="49.9189%" y="335.50"></text></g><g><title>malloc (6 samples, 0.02%)</title><rect x="49.6689%" y="309" width="0.0177%" height="15" fill="rgb(233,99,24)" fg:x="16801" fg:w="6"/><text x="49.9189%" y="319.50"></text></g><g><title>&lt;yt_history::model::Watched as core::clone::Clone&gt;::clone (13 samples, 0.04%)</title><rect x="49.6512%" y="517" width="0.0384%" height="15" fill="rgb(234,209,42)" fg:x="16795" fg:w="13"/><text x="49.9012%" y="527.50"></text></g><g><title>&lt;yt_history::model::Video as core::clone::Clone&gt;::clone (12 samples, 0.04%)</title><rect x="49.6541%" y="501" width="0.0355%" height="15" fill="rgb(227,7,12)" fg:x="16796" fg:w="12"/><text x="49.9041%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (10 samples, 0.03%)</title><rect x="49.6600%" y="485" width="0.0296%" height="15" fill="rgb(245,203,43)" fg:x="16798" fg:w="10"/><text x="49.9100%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.02%)</title><rect x="49.6689%" y="469" width="0.0207%" height="15" fill="rgb(238,205,33)" fg:x="16801" fg:w="7"/><text x="49.9189%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.02%)</title><rect x="49.6689%" y="453" width="0.0207%" height="15" fill="rgb(231,56,7)" fg:x="16801" fg:w="7"/><text x="49.9189%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.02%)</title><rect x="49.6689%" y="437" width="0.0207%" height="15" fill="rgb(244,186,29)" fg:x="16801" fg:w="7"/><text x="49.9189%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.02%)</title><rect x="49.6689%" y="421" width="0.0207%" height="15" fill="rgb(234,111,31)" fg:x="16801" fg:w="7"/><text x="49.9189%" y="431.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::inner (15 samples, 0.04%)</title><rect x="55.4307%" y="437" width="0.0443%" height="15" fill="rgb(241,149,10)" fg:x="18750" fg:w="15"/><text x="55.6807%" y="447.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (15 samples, 0.04%)</title><rect x="55.4307%" y="421" width="0.0443%" height="15" fill="rgb(249,206,44)" fg:x="18750" fg:w="15"/><text x="55.6807%" y="431.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (554 samples, 1.64%)</title><rect x="55.2267%" y="453" width="1.6378%" height="15" fill="rgb(251,153,30)" fg:x="18681" fg:w="554"/><text x="55.4767%" y="463.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (470 samples, 1.39%)</title><rect x="55.4751%" y="437" width="1.3895%" height="15" fill="rgb(239,152,38)" fg:x="18765" fg:w="470"/><text x="55.7251%" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (25 samples, 0.07%)</title><rect x="56.7906%" y="421" width="0.0739%" height="15" fill="rgb(249,139,47)" fg:x="19210" fg:w="25"/><text x="57.0406%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (25 samples, 0.07%)</title><rect x="56.7906%" y="405" width="0.0739%" height="15" fill="rgb(244,64,35)" fg:x="19210" fg:w="25"/><text x="57.0406%" y="415.50"></text></g><g><title>core::mem::replace (25 samples, 0.07%)</title><rect x="56.7906%" y="389" width="0.0739%" height="15" fill="rgb(216,46,15)" fg:x="19210" fg:w="25"/><text x="57.0406%" y="399.50"></text></g><g><title>core::ptr::write (25 samples, 0.07%)</title><rect x="56.7906%" y="373" width="0.0739%" height="15" fill="rgb(250,74,19)" fg:x="19210" fg:w="25"/><text x="57.0406%" y="383.50"></text></g><g><title>__rdl_alloc (293 samples, 0.87%)</title><rect x="59.7056%" y="277" width="0.8662%" height="15" fill="rgb(249,42,33)" fg:x="20196" fg:w="293"/><text x="59.9556%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (59 samples, 0.17%)</title><rect x="60.3973%" y="261" width="0.1744%" height="15" fill="rgb(242,149,17)" fg:x="20430" fg:w="59"/><text x="60.6473%" y="271.50"></text></g><g><title>__rust_alloc (273 samples, 0.81%)</title><rect x="60.5717%" y="277" width="0.8071%" height="15" fill="rgb(244,29,21)" fg:x="20489" fg:w="273"/><text x="60.8217%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,672 samples, 7.90%)</title><rect x="58.5082%" y="373" width="7.8992%" height="15" fill="rgb(220,130,37)" fg:x="19791" fg:w="2672"/><text x="58.7582%" y="383.50">alloc::vec:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,672 samples, 7.90%)</title><rect x="58.5082%" y="357" width="7.8992%" height="15" fill="rgb(211,67,2)" fg:x="19791" fg:w="2672"/><text x="58.7582%" y="367.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2,672 samples, 7.90%)</title><rect x="58.5082%" y="341" width="7.8992%" height="15" fill="rgb(235,68,52)" fg:x="19791" fg:w="2672"/><text x="58.7582%" y="351.50">alloc::raw_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,493 samples, 7.37%)</title><rect x="59.0374%" y="325" width="7.3701%" height="15" fill="rgb(246,142,3)" fg:x="19970" fg:w="2493"/><text x="59.2874%" y="335.50">&lt;alloc::al..</text></g><g><title>alloc::alloc::Global::alloc_impl (2,493 samples, 7.37%)</title><rect x="59.0374%" y="309" width="7.3701%" height="15" fill="rgb(241,25,7)" fg:x="19970" fg:w="2493"/><text x="59.2874%" y="319.50">alloc::all..</text></g><g><title>alloc::alloc::alloc (2,493 samples, 7.37%)</title><rect x="59.0374%" y="293" width="7.3701%" height="15" fill="rgb(242,119,39)" fg:x="19970" fg:w="2493"/><text x="59.2874%" y="303.50">alloc::all..</text></g><g><title>malloc (1,701 samples, 5.03%)</title><rect x="61.3788%" y="277" width="5.0287%" height="15" fill="rgb(241,98,45)" fg:x="20762" fg:w="1701"/><text x="61.6288%" y="287.50">malloc</text></g><g><title>&lt;yt_history::model::Video as core::clone::Clone&gt;::clone (10,266 samples, 30.35%)</title><rect x="49.7132%" y="469" width="30.3494%" height="15" fill="rgb(254,28,30)" fg:x="16816" fg:w="10266"/><text x="49.9632%" y="479.50">&lt;yt_history::model::Video as core::clone::Clone&gt;:..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7,847 samples, 23.20%)</title><rect x="56.8645%" y="453" width="23.1981%" height="15" fill="rgb(241,142,54)" fg:x="19235" fg:w="7847"/><text x="57.1145%" y="463.50">&lt;alloc::string::String as core::clone..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7,291 samples, 21.55%)</title><rect x="58.5082%" y="437" width="21.5544%" height="15" fill="rgb(222,85,15)" fg:x="19791" fg:w="7291"/><text x="58.7582%" y="447.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::clo..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7,291 samples, 21.55%)</title><rect x="58.5082%" y="421" width="21.5544%" height="15" fill="rgb(210,85,47)" fg:x="19791" fg:w="7291"/><text x="58.7582%" y="431.50">alloc::slice::&lt;impl [T]&gt;::to_vec_in</text></g><g><title>alloc::slice::hack::to_vec (7,291 samples, 21.55%)</title><rect x="58.5082%" y="405" width="21.5544%" height="15" fill="rgb(224,206,25)" fg:x="19791" fg:w="7291"/><text x="58.7582%" y="415.50">alloc::slice::hack::to_vec</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7,291 samples, 21.55%)</title><rect x="58.5082%" y="389" width="21.5544%" height="15" fill="rgb(243,201,19)" fg:x="19791" fg:w="7291"/><text x="58.7582%" y="399.50">&lt;T as alloc::slice::hack::ConvertV..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4,619 samples, 13.66%)</title><rect x="66.4075%" y="373" width="13.6552%" height="15" fill="rgb(236,59,4)" fg:x="22463" fg:w="4619"/><text x="66.6575%" y="383.50">core::ptr::const_ptr:..</text></g><g><title>core::intrinsics::copy_nonoverlapping (4,619 samples, 13.66%)</title><rect x="66.4075%" y="357" width="13.6552%" height="15" fill="rgb(254,179,45)" fg:x="22463" fg:w="4619"/><text x="66.6575%" y="367.50">core::intrinsics::cop..</text></g><g><title>[libc.so.6] (4,619 samples, 13.66%)</title><rect x="66.4075%" y="341" width="13.6552%" height="15" fill="rgb(226,14,10)" fg:x="22463" fg:w="4619"/><text x="66.6575%" y="351.50">[libc.so.6]</text></g><g><title>&lt;yt_history::model::Video as core::cmp::PartialEq&gt;::eq (1,361 samples, 4.02%)</title><rect x="81.1595%" y="453" width="4.0235%" height="15" fill="rgb(244,27,41)" fg:x="27453" fg:w="1361"/><text x="81.4095%" y="463.50">&lt;yt_..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1,296 samples, 3.83%)</title><rect x="81.3516%" y="437" width="3.8314%" height="15" fill="rgb(235,35,32)" fg:x="27518" fg:w="1296"/><text x="81.6016%" y="447.50">&lt;all..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1,296 samples, 3.83%)</title><rect x="81.3516%" y="421" width="3.8314%" height="15" fill="rgb(218,68,31)" fg:x="27518" fg:w="1296"/><text x="81.6016%" y="431.50">core..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,296 samples, 3.83%)</title><rect x="81.3516%" y="405" width="3.8314%" height="15" fill="rgb(207,120,37)" fg:x="27518" fg:w="1296"/><text x="81.6016%" y="415.50">core..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,296 samples, 3.83%)</title><rect x="81.3516%" y="389" width="3.8314%" height="15" fill="rgb(227,98,0)" fg:x="27518" fg:w="1296"/><text x="81.6016%" y="399.50">core..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,296 samples, 3.83%)</title><rect x="81.3516%" y="373" width="3.8314%" height="15" fill="rgb(207,7,3)" fg:x="27518" fg:w="1296"/><text x="81.6016%" y="383.50">&lt;[A]..</text></g><g><title>[libc.so.6] (1,178 samples, 3.48%)</title><rect x="81.7005%" y="357" width="3.4825%" height="15" fill="rgb(206,98,19)" fg:x="27636" fg:w="1178"/><text x="81.9505%" y="367.50">[li..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;yt_history::model::Channel&gt;&gt; (97 samples, 0.29%)</title><rect x="85.1830%" y="453" width="0.2868%" height="15" fill="rgb(217,5,26)" fg:x="28814" fg:w="97"/><text x="85.4330%" y="463.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (97 samples, 0.29%)</title><rect x="85.1830%" y="437" width="0.2868%" height="15" fill="rgb(235,190,38)" fg:x="28814" fg:w="97"/><text x="85.4330%" y="447.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (82 samples, 0.24%)</title><rect x="85.2273%" y="421" width="0.2424%" height="15" fill="rgb(247,86,24)" fg:x="28829" fg:w="82"/><text x="85.4773%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (82 samples, 0.24%)</title><rect x="85.2273%" y="405" width="0.2424%" height="15" fill="rgb(205,101,16)" fg:x="28829" fg:w="82"/><text x="85.4773%" y="415.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (82 samples, 0.24%)</title><rect x="85.2273%" y="389" width="0.2424%" height="15" fill="rgb(246,168,33)" fg:x="28829" fg:w="82"/><text x="85.4773%" y="399.50"></text></g><g><title>core::mem::replace (82 samples, 0.24%)</title><rect x="85.2273%" y="373" width="0.2424%" height="15" fill="rgb(231,114,1)" fg:x="28829" fg:w="82"/><text x="85.4773%" y="383.50"></text></g><g><title>core::ptr::write (82 samples, 0.24%)</title><rect x="85.2273%" y="357" width="0.2424%" height="15" fill="rgb(207,184,53)" fg:x="28829" fg:w="82"/><text x="85.4773%" y="367.50"></text></g><g><title>__rdl_dealloc (221 samples, 0.65%)</title><rect x="85.4727%" y="357" width="0.6533%" height="15" fill="rgb(224,95,51)" fg:x="28912" fg:w="221"/><text x="85.7227%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (221 samples, 0.65%)</title><rect x="85.4727%" y="341" width="0.6533%" height="15" fill="rgb(212,188,45)" fg:x="28912" fg:w="221"/><text x="85.7227%" y="351.50"></text></g><g><title>__rust_dealloc (287 samples, 0.85%)</title><rect x="86.1261%" y="357" width="0.8485%" height="15" fill="rgb(223,154,38)" fg:x="29133" fg:w="287"/><text x="86.3761%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,723 samples, 8.05%)</title><rect x="85.4698%" y="389" width="8.0500%" height="15" fill="rgb(251,22,52)" fg:x="28911" fg:w="2723"/><text x="85.7198%" y="399.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::dealloc (2,723 samples, 8.05%)</title><rect x="85.4698%" y="373" width="8.0500%" height="15" fill="rgb(229,209,22)" fg:x="28911" fg:w="2723"/><text x="85.7198%" y="383.50">alloc::allo..</text></g><g><title>cfree (2,214 samples, 6.55%)</title><rect x="86.9745%" y="357" width="6.5453%" height="15" fill="rgb(234,138,34)" fg:x="29420" fg:w="2214"/><text x="87.2245%" y="367.50">cfree</text></g><g><title>[libc.so.6] (1,580 samples, 4.67%)</title><rect x="88.8488%" y="341" width="4.6710%" height="15" fill="rgb(212,95,11)" fg:x="30054" fg:w="1580"/><text x="89.0988%" y="351.50">[libc..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (14,970 samples, 44.26%)</title><rect x="49.6985%" y="501" width="44.2559%" height="15" fill="rgb(240,179,47)" fg:x="16811" fg:w="14970"/><text x="49.9485%" y="511.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::f..</text></g><g><title>yt_history::model::Models::find_video::{{closure}} (14,966 samples, 44.24%)</title><rect x="49.7103%" y="485" width="44.2441%" height="15" fill="rgb(240,163,11)" fg:x="16815" fg:w="14966"/><text x="49.9603%" y="495.50">yt_history::model::Models::find_video::{{closure}}</text></g><g><title>yt_history::model::WhereVideo::matches (4,699 samples, 13.89%)</title><rect x="80.0627%" y="469" width="13.8917%" height="15" fill="rgb(236,37,12)" fg:x="27082" fg:w="4699"/><text x="80.3127%" y="479.50">yt_history::model::Wh..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2,870 samples, 8.48%)</title><rect x="85.4698%" y="453" width="8.4846%" height="15" fill="rgb(232,164,16)" fg:x="28911" fg:w="2870"/><text x="85.7198%" y="463.50">core::ptr::d..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2,870 samples, 8.48%)</title><rect x="85.4698%" y="437" width="8.4846%" height="15" fill="rgb(244,205,15)" fg:x="28911" fg:w="2870"/><text x="85.7198%" y="447.50">core::ptr::d..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2,870 samples, 8.48%)</title><rect x="85.4698%" y="421" width="8.4846%" height="15" fill="rgb(223,117,47)" fg:x="28911" fg:w="2870"/><text x="85.7198%" y="431.50">core::ptr::d..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,870 samples, 8.48%)</title><rect x="85.4698%" y="405" width="8.4846%" height="15" fill="rgb(244,107,35)" fg:x="28911" fg:w="2870"/><text x="85.7198%" y="415.50">&lt;alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (147 samples, 0.43%)</title><rect x="93.5198%" y="389" width="0.4346%" height="15" fill="rgb(205,140,8)" fg:x="31634" fg:w="147"/><text x="93.7698%" y="399.50"></text></g><g><title>yt_history::model::Models::insert_watched (15,017 samples, 44.39%)</title><rect x="49.6009%" y="533" width="44.3948%" height="15" fill="rgb(228,84,46)" fg:x="16778" fg:w="15017"/><text x="49.8509%" y="543.50">yt_history::model::Models::insert_watched</text></g><g><title>yt_history::model::Models::find_video (14,985 samples, 44.30%)</title><rect x="49.6955%" y="517" width="44.3002%" height="15" fill="rgb(254,188,9)" fg:x="16810" fg:w="14985"/><text x="49.9455%" y="527.50">yt_history::model::Models::find_video</text></g><g><title>yt_history::model::Models::find_video (14 samples, 0.04%)</title><rect x="93.9544%" y="501" width="0.0414%" height="15" fill="rgb(206,112,54)" fg:x="31781" fg:w="14"/><text x="94.2044%" y="511.50"></text></g><g><title>__rdl_alloc (4 samples, 0.01%)</title><rect x="94.0105%" y="293" width="0.0118%" height="15" fill="rgb(216,84,49)" fg:x="31800" fg:w="4"/><text x="94.2605%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.04%)</title><rect x="94.0076%" y="389" width="0.0414%" height="15" fill="rgb(214,194,35)" fg:x="31799" fg:w="14"/><text x="94.2576%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.04%)</title><rect x="94.0076%" y="373" width="0.0414%" height="15" fill="rgb(249,28,3)" fg:x="31799" fg:w="14"/><text x="94.2576%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.04%)</title><rect x="94.0076%" y="357" width="0.0414%" height="15" fill="rgb(222,56,52)" fg:x="31799" fg:w="14"/><text x="94.2576%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.04%)</title><rect x="94.0105%" y="341" width="0.0384%" height="15" fill="rgb(245,217,50)" fg:x="31800" fg:w="13"/><text x="94.2605%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.04%)</title><rect x="94.0105%" y="325" width="0.0384%" height="15" fill="rgb(213,201,24)" fg:x="31800" fg:w="13"/><text x="94.2605%" y="335.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.04%)</title><rect x="94.0105%" y="309" width="0.0384%" height="15" fill="rgb(248,116,28)" fg:x="31800" fg:w="13"/><text x="94.2605%" y="319.50"></text></g><g><title>malloc (8 samples, 0.02%)</title><rect x="94.0253%" y="293" width="0.0237%" height="15" fill="rgb(219,72,43)" fg:x="31805" fg:w="8"/><text x="94.2753%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (17 samples, 0.05%)</title><rect x="94.0076%" y="501" width="0.0503%" height="15" fill="rgb(209,138,14)" fg:x="31799" fg:w="17"/><text x="94.2576%" y="511.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (17 samples, 0.05%)</title><rect x="94.0076%" y="485" width="0.0503%" height="15" fill="rgb(222,18,33)" fg:x="31799" fg:w="17"/><text x="94.2576%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (17 samples, 0.05%)</title><rect x="94.0076%" y="469" width="0.0503%" height="15" fill="rgb(213,199,7)" fg:x="31799" fg:w="17"/><text x="94.2576%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (17 samples, 0.05%)</title><rect x="94.0076%" y="453" width="0.0503%" height="15" fill="rgb(250,110,10)" fg:x="31799" fg:w="17"/><text x="94.2576%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.05%)</title><rect x="94.0076%" y="437" width="0.0503%" height="15" fill="rgb(248,123,6)" fg:x="31799" fg:w="17"/><text x="94.2576%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.05%)</title><rect x="94.0076%" y="421" width="0.0503%" height="15" fill="rgb(206,91,31)" fg:x="31799" fg:w="17"/><text x="94.2576%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.05%)</title><rect x="94.0076%" y="405" width="0.0503%" height="15" fill="rgb(211,154,13)" fg:x="31799" fg:w="17"/><text x="94.2576%" y="415.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (20 samples, 0.06%)</title><rect x="94.0076%" y="517" width="0.0591%" height="15" fill="rgb(225,148,7)" fg:x="31799" fg:w="20"/><text x="94.2576%" y="527.50"></text></g><g><title>&lt;core::str::iter::MatchIndices&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.09%)</title><rect x="94.0785%" y="501" width="0.0916%" height="15" fill="rgb(220,160,43)" fg:x="31823" fg:w="31"/><text x="94.3285%" y="511.50"></text></g><g><title>core::str::iter::MatchIndicesInternal&lt;P&gt;::next (31 samples, 0.09%)</title><rect x="94.0785%" y="485" width="0.0916%" height="15" fill="rgb(213,52,39)" fg:x="31823" fg:w="31"/><text x="94.3285%" y="495.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (31 samples, 0.09%)</title><rect x="94.0785%" y="469" width="0.0916%" height="15" fill="rgb(243,137,7)" fg:x="31823" fg:w="31"/><text x="94.3285%" y="479.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (26 samples, 0.08%)</title><rect x="94.0933%" y="453" width="0.0769%" height="15" fill="rgb(230,79,13)" fg:x="31828" fg:w="26"/><text x="94.3433%" y="463.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_contains (6 samples, 0.02%)</title><rect x="94.1524%" y="437" width="0.0177%" height="15" fill="rgb(247,105,23)" fg:x="31848" fg:w="6"/><text x="94.4024%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="94.1731%" y="373" width="0.0118%" height="15" fill="rgb(223,179,41)" fg:x="31855" fg:w="4"/><text x="94.4231%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (6 samples, 0.02%)</title><rect x="94.1702%" y="437" width="0.0177%" height="15" fill="rgb(218,9,34)" fg:x="31854" fg:w="6"/><text x="94.4202%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.02%)</title><rect x="94.1702%" y="421" width="0.0177%" height="15" fill="rgb(222,106,8)" fg:x="31854" fg:w="6"/><text x="94.4202%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.02%)</title><rect x="94.1702%" y="405" width="0.0177%" height="15" fill="rgb(211,220,0)" fg:x="31854" fg:w="6"/><text x="94.4202%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.01%)</title><rect x="94.1731%" y="389" width="0.0148%" height="15" fill="rgb(229,52,16)" fg:x="31855" fg:w="5"/><text x="94.4231%" y="399.50"></text></g><g><title>alloc::string::String::push_str (10 samples, 0.03%)</title><rect x="94.1702%" y="501" width="0.0296%" height="15" fill="rgb(212,155,18)" fg:x="31854" fg:w="10"/><text x="94.4202%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (10 samples, 0.03%)</title><rect x="94.1702%" y="485" width="0.0296%" height="15" fill="rgb(242,21,14)" fg:x="31854" fg:w="10"/><text x="94.4202%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (10 samples, 0.03%)</title><rect x="94.1702%" y="469" width="0.0296%" height="15" fill="rgb(222,19,48)" fg:x="31854" fg:w="10"/><text x="94.4202%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (10 samples, 0.03%)</title><rect x="94.1702%" y="453" width="0.0296%" height="15" fill="rgb(232,45,27)" fg:x="31854" fg:w="10"/><text x="94.4202%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.01%)</title><rect x="94.1879%" y="437" width="0.0118%" height="15" fill="rgb(249,103,42)" fg:x="31860" fg:w="4"/><text x="94.4379%" y="447.50"></text></g><g><title>[libc.so.6] (4 samples, 0.01%)</title><rect x="94.1879%" y="421" width="0.0118%" height="15" fill="rgb(246,81,33)" fg:x="31860" fg:w="4"/><text x="94.4379%" y="431.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::replace (62 samples, 0.18%)</title><rect x="94.0667%" y="517" width="0.1833%" height="15" fill="rgb(252,33,42)" fg:x="31819" fg:w="62"/><text x="94.3167%" y="527.50"></text></g><g><title>core::str::&lt;impl str&gt;::match_indices (16 samples, 0.05%)</title><rect x="94.2027%" y="501" width="0.0473%" height="15" fill="rgb(209,212,41)" fg:x="31865" fg:w="16"/><text x="94.4527%" y="511.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (16 samples, 0.05%)</title><rect x="94.2027%" y="485" width="0.0473%" height="15" fill="rgb(207,154,6)" fg:x="31865" fg:w="16"/><text x="94.4527%" y="495.50"></text></g><g><title>core::str::pattern::StrSearcher::new (16 samples, 0.05%)</title><rect x="94.2027%" y="469" width="0.0473%" height="15" fill="rgb(223,64,47)" fg:x="31865" fg:w="16"/><text x="94.4527%" y="479.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (11 samples, 0.03%)</title><rect x="94.2175%" y="453" width="0.0325%" height="15" fill="rgb(211,161,38)" fg:x="31870" fg:w="11"/><text x="94.4675%" y="463.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create (7 samples, 0.02%)</title><rect x="94.2293%" y="437" width="0.0207%" height="15" fill="rgb(219,138,40)" fg:x="31874" fg:w="7"/><text x="94.4793%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (7 samples, 0.02%)</title><rect x="94.2293%" y="421" width="0.0207%" height="15" fill="rgb(241,228,46)" fg:x="31874" fg:w="7"/><text x="94.4793%" y="431.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create::{{closure}} (5 samples, 0.01%)</title><rect x="94.2352%" y="405" width="0.0148%" height="15" fill="rgb(223,209,38)" fg:x="31876" fg:w="5"/><text x="94.4852%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.02%)</title><rect x="94.2500%" y="453" width="0.0177%" height="15" fill="rgb(236,164,45)" fg:x="31881" fg:w="6"/><text x="94.5000%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.02%)</title><rect x="94.2500%" y="437" width="0.0177%" height="15" fill="rgb(231,15,5)" fg:x="31881" fg:w="6"/><text x="94.5000%" y="447.50"></text></g><g><title>cfree (6 samples, 0.02%)</title><rect x="94.2500%" y="421" width="0.0177%" height="15" fill="rgb(252,35,15)" fg:x="31881" fg:w="6"/><text x="94.5000%" y="431.50"></text></g><g><title>[libc.so.6] (4 samples, 0.01%)</title><rect x="94.2559%" y="405" width="0.0118%" height="15" fill="rgb(248,181,18)" fg:x="31883" fg:w="4"/><text x="94.5059%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (7 samples, 0.02%)</title><rect x="94.2500%" y="517" width="0.0207%" height="15" fill="rgb(233,39,42)" fg:x="31881" fg:w="7"/><text x="94.5000%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (7 samples, 0.02%)</title><rect x="94.2500%" y="501" width="0.0207%" height="15" fill="rgb(238,110,33)" fg:x="31881" fg:w="7"/><text x="94.5000%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (7 samples, 0.02%)</title><rect x="94.2500%" y="485" width="0.0207%" height="15" fill="rgb(233,195,10)" fg:x="31881" fg:w="7"/><text x="94.5000%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="94.2500%" y="469" width="0.0207%" height="15" fill="rgb(254,105,3)" fg:x="31881" fg:w="7"/><text x="94.5000%" y="479.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (36 samples, 0.11%)</title><rect x="94.4540%" y="453" width="0.1064%" height="15" fill="rgb(221,225,9)" fg:x="31950" fg:w="36"/><text x="94.7040%" y="463.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (9 samples, 0.03%)</title><rect x="94.8649%" y="421" width="0.0266%" height="15" fill="rgb(224,227,45)" fg:x="32089" fg:w="9"/><text x="95.1149%" y="431.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (9 samples, 0.03%)</title><rect x="94.8649%" y="405" width="0.0266%" height="15" fill="rgb(229,198,43)" fg:x="32089" fg:w="9"/><text x="95.1149%" y="415.50"></text></g><g><title>core::cmp::min (7 samples, 0.02%)</title><rect x="94.8708%" y="389" width="0.0207%" height="15" fill="rgb(206,209,35)" fg:x="32091" fg:w="7"/><text x="95.1208%" y="399.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (7 samples, 0.02%)</title><rect x="94.8708%" y="373" width="0.0207%" height="15" fill="rgb(245,195,53)" fg:x="32091" fg:w="7"/><text x="95.1208%" y="383.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (8 samples, 0.02%)</title><rect x="94.8915%" y="421" width="0.0237%" height="15" fill="rgb(240,92,26)" fg:x="32098" fg:w="8"/><text x="95.1415%" y="431.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (8 samples, 0.02%)</title><rect x="94.8915%" y="405" width="0.0237%" height="15" fill="rgb(207,40,23)" fg:x="32098" fg:w="8"/><text x="95.1415%" y="415.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::pos (7 samples, 0.02%)</title><rect x="94.9270%" y="421" width="0.0207%" height="15" fill="rgb(223,111,35)" fg:x="32110" fg:w="7"/><text x="95.1770%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (186 samples, 0.55%)</title><rect x="94.4155%" y="469" width="0.5499%" height="15" fill="rgb(229,147,28)" fg:x="31937" fg:w="186"/><text x="94.6655%" y="479.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (137 samples, 0.41%)</title><rect x="94.5604%" y="453" width="0.4050%" height="15" fill="rgb(211,29,28)" fg:x="31986" fg:w="137"/><text x="94.8104%" y="463.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (71 samples, 0.21%)</title><rect x="94.7555%" y="437" width="0.2099%" height="15" fill="rgb(228,72,33)" fg:x="32052" fg:w="71"/><text x="95.0055%" y="447.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (6 samples, 0.02%)</title><rect x="94.9477%" y="421" width="0.0177%" height="15" fill="rgb(205,214,31)" fg:x="32117" fg:w="6"/><text x="95.1977%" y="431.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (191 samples, 0.56%)</title><rect x="94.4155%" y="501" width="0.5647%" height="15" fill="rgb(224,111,15)" fg:x="31937" fg:w="191"/><text x="94.6655%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (191 samples, 0.56%)</title><rect x="94.4155%" y="485" width="0.5647%" height="15" fill="rgb(253,21,26)" fg:x="31937" fg:w="191"/><text x="94.6655%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (5 samples, 0.01%)</title><rect x="94.9654%" y="469" width="0.0148%" height="15" fill="rgb(245,139,43)" fg:x="32123" fg:w="5"/><text x="95.2154%" y="479.50"></text></g><g><title>core::mem::replace (5 samples, 0.01%)</title><rect x="94.9654%" y="453" width="0.0148%" height="15" fill="rgb(252,170,7)" fg:x="32123" fg:w="5"/><text x="95.2154%" y="463.50"></text></g><g><title>core::ptr::read (5 samples, 0.01%)</title><rect x="94.9654%" y="437" width="0.0148%" height="15" fill="rgb(231,118,14)" fg:x="32123" fg:w="5"/><text x="95.2154%" y="447.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (5 samples, 0.01%)</title><rect x="94.9654%" y="421" width="0.0148%" height="15" fill="rgb(238,83,0)" fg:x="32123" fg:w="5"/><text x="95.2154%" y="431.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (11 samples, 0.03%)</title><rect x="94.9861%" y="501" width="0.0325%" height="15" fill="rgb(221,39,39)" fg:x="32130" fg:w="11"/><text x="95.2361%" y="511.50"></text></g><g><title>&lt;core::str::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::nth (8 samples, 0.02%)</title><rect x="95.0186%" y="501" width="0.0237%" height="15" fill="rgb(222,119,46)" fg:x="32141" fg:w="8"/><text x="95.2686%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::nth (8 samples, 0.02%)</title><rect x="95.0186%" y="485" width="0.0237%" height="15" fill="rgb(222,165,49)" fg:x="32141" fg:w="8"/><text x="95.2686%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::nth (8 samples, 0.02%)</title><rect x="95.0186%" y="469" width="0.0237%" height="15" fill="rgb(219,113,52)" fg:x="32141" fg:w="8"/><text x="95.2686%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (38 samples, 0.11%)</title><rect x="95.1398%" y="421" width="0.1123%" height="15" fill="rgb(214,7,15)" fg:x="32182" fg:w="38"/><text x="95.3898%" y="431.50"></text></g><g><title>alloc::alloc::Global::grow_impl (38 samples, 0.11%)</title><rect x="95.1398%" y="405" width="0.1123%" height="15" fill="rgb(235,32,4)" fg:x="32182" fg:w="38"/><text x="95.3898%" y="415.50"></text></g><g><title>alloc::alloc::realloc (38 samples, 0.11%)</title><rect x="95.1398%" y="389" width="0.1123%" height="15" fill="rgb(238,90,54)" fg:x="32182" fg:w="38"/><text x="95.3898%" y="399.50"></text></g><g><title>realloc (35 samples, 0.10%)</title><rect x="95.1487%" y="373" width="0.1035%" height="15" fill="rgb(213,208,19)" fg:x="32185" fg:w="35"/><text x="95.3987%" y="383.50"></text></g><g><title>[libc.so.6] (30 samples, 0.09%)</title><rect x="95.1635%" y="357" width="0.0887%" height="15" fill="rgb(233,156,4)" fg:x="32190" fg:w="30"/><text x="95.4135%" y="367.50"></text></g><g><title>[libc.so.6] (20 samples, 0.06%)</title><rect x="95.1930%" y="341" width="0.0591%" height="15" fill="rgb(207,194,5)" fg:x="32200" fg:w="20"/><text x="95.4430%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (51 samples, 0.15%)</title><rect x="95.1280%" y="437" width="0.1508%" height="15" fill="rgb(206,111,30)" fg:x="32178" fg:w="51"/><text x="95.3780%" y="447.50"></text></g><g><title>malloc (5 samples, 0.01%)</title><rect x="95.2640%" y="421" width="0.0148%" height="15" fill="rgb(243,70,54)" fg:x="32224" fg:w="5"/><text x="95.5140%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (62 samples, 0.18%)</title><rect x="95.1103%" y="453" width="0.1833%" height="15" fill="rgb(242,28,8)" fg:x="32172" fg:w="62"/><text x="95.3603%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (63 samples, 0.19%)</title><rect x="95.1103%" y="469" width="0.1862%" height="15" fill="rgb(219,106,18)" fg:x="32172" fg:w="63"/><text x="95.3603%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (85 samples, 0.25%)</title><rect x="95.0482%" y="485" width="0.2513%" height="15" fill="rgb(244,222,10)" fg:x="32151" fg:w="85"/><text x="95.2982%" y="495.50"></text></g><g><title>alloc::string::String::push (91 samples, 0.27%)</title><rect x="95.0423%" y="501" width="0.2690%" height="15" fill="rgb(236,179,52)" fg:x="32149" fg:w="91"/><text x="95.2923%" y="511.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::len_utf8 (4 samples, 0.01%)</title><rect x="95.2995%" y="485" width="0.0118%" height="15" fill="rgb(213,23,39)" fg:x="32236" fg:w="4"/><text x="95.5495%" y="495.50"></text></g><g><title>core::char::methods::len_utf8 (4 samples, 0.01%)</title><rect x="95.2995%" y="469" width="0.0118%" height="15" fill="rgb(238,48,10)" fg:x="32236" fg:w="4"/><text x="95.5495%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (7 samples, 0.02%)</title><rect x="95.3113%" y="501" width="0.0207%" height="15" fill="rgb(251,196,23)" fg:x="32240" fg:w="7"/><text x="95.5613%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (7 samples, 0.02%)</title><rect x="95.3113%" y="485" width="0.0207%" height="15" fill="rgb(250,152,24)" fg:x="32240" fg:w="7"/><text x="95.5613%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (7 samples, 0.02%)</title><rect x="95.3113%" y="469" width="0.0207%" height="15" fill="rgb(209,150,17)" fg:x="32240" fg:w="7"/><text x="95.5613%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="95.3113%" y="453" width="0.0207%" height="15" fill="rgb(234,202,34)" fg:x="32240" fg:w="7"/><text x="95.5613%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.02%)</title><rect x="95.3113%" y="437" width="0.0207%" height="15" fill="rgb(253,148,53)" fg:x="32240" fg:w="7"/><text x="95.5613%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.02%)</title><rect x="95.3113%" y="421" width="0.0207%" height="15" fill="rgb(218,129,16)" fg:x="32240" fg:w="7"/><text x="95.5613%" y="431.50"></text></g><g><title>cfree (6 samples, 0.02%)</title><rect x="95.3143%" y="405" width="0.0177%" height="15" fill="rgb(216,85,19)" fg:x="32241" fg:w="6"/><text x="95.5643%" y="415.50"></text></g><g><title>[libc.so.6] (4 samples, 0.01%)</title><rect x="95.3202%" y="389" width="0.0118%" height="15" fill="rgb(235,228,7)" fg:x="32243" fg:w="4"/><text x="95.5702%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.01%)</title><rect x="95.3468%" y="421" width="0.0148%" height="15" fill="rgb(245,175,0)" fg:x="32252" fg:w="5"/><text x="95.5968%" y="431.50"></text></g><g><title>yt_history::read_until (369 samples, 1.09%)</title><rect x="94.2766%" y="517" width="1.0909%" height="15" fill="rgb(208,168,36)" fg:x="31890" fg:w="369"/><text x="94.5266%" y="527.50"></text></g><g><title>yt_history::iter_index (12 samples, 0.04%)</title><rect x="95.3320%" y="501" width="0.0355%" height="15" fill="rgb(246,171,24)" fg:x="32247" fg:w="12"/><text x="95.5820%" y="511.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (12 samples, 0.04%)</title><rect x="95.3320%" y="485" width="0.0355%" height="15" fill="rgb(215,142,24)" fg:x="32247" fg:w="12"/><text x="95.5820%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (12 samples, 0.04%)</title><rect x="95.3320%" y="469" width="0.0355%" height="15" fill="rgb(250,187,7)" fg:x="32247" fg:w="12"/><text x="95.5820%" y="479.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (7 samples, 0.02%)</title><rect x="95.3468%" y="453" width="0.0207%" height="15" fill="rgb(228,66,33)" fg:x="32252" fg:w="7"/><text x="95.5968%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.02%)</title><rect x="95.3468%" y="437" width="0.0207%" height="15" fill="rgb(234,215,21)" fg:x="32252" fg:w="7"/><text x="95.5968%" y="447.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (275 samples, 0.81%)</title><rect x="96.1302%" y="453" width="0.8130%" height="15" fill="rgb(222,191,20)" fg:x="32517" fg:w="275"/><text x="96.3802%" y="463.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.01%)</title><rect x="98.9357%" y="421" width="0.0148%" height="15" fill="rgb(245,79,54)" fg:x="33466" fg:w="5"/><text x="99.1857%" y="431.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (59 samples, 0.17%)</title><rect x="98.9505%" y="421" width="0.1744%" height="15" fill="rgb(240,10,37)" fg:x="33471" fg:w="59"/><text x="99.2005%" y="431.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (59 samples, 0.17%)</title><rect x="98.9505%" y="405" width="0.1744%" height="15" fill="rgb(214,192,32)" fg:x="33471" fg:w="59"/><text x="99.2005%" y="415.50"></text></g><g><title>core::cmp::min (48 samples, 0.14%)</title><rect x="98.9830%" y="389" width="0.1419%" height="15" fill="rgb(209,36,54)" fg:x="33482" fg:w="48"/><text x="99.2330%" y="399.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (48 samples, 0.14%)</title><rect x="98.9830%" y="373" width="0.1419%" height="15" fill="rgb(220,10,11)" fg:x="33482" fg:w="48"/><text x="99.2330%" y="383.50"></text></g><g><title>read (18 samples, 0.05%)</title><rect x="99.1279%" y="325" width="0.0532%" height="15" fill="rgb(221,106,17)" fg:x="33531" fg:w="18"/><text x="99.3779%" y="335.50"></text></g><g><title>[unknown] (16 samples, 0.05%)</title><rect x="99.1338%" y="309" width="0.0473%" height="15" fill="rgb(251,142,44)" fg:x="33533" fg:w="16"/><text x="99.3838%" y="319.50"></text></g><g><title>[unknown] (16 samples, 0.05%)</title><rect x="99.1338%" y="293" width="0.0473%" height="15" fill="rgb(238,13,15)" fg:x="33533" fg:w="16"/><text x="99.3838%" y="303.50"></text></g><g><title>[unknown] (16 samples, 0.05%)</title><rect x="99.1338%" y="277" width="0.0473%" height="15" fill="rgb(208,107,27)" fg:x="33533" fg:w="16"/><text x="99.3838%" y="287.50"></text></g><g><title>[unknown] (14 samples, 0.04%)</title><rect x="99.1397%" y="261" width="0.0414%" height="15" fill="rgb(205,136,37)" fg:x="33535" fg:w="14"/><text x="99.3897%" y="271.50"></text></g><g><title>[unknown] (13 samples, 0.04%)</title><rect x="99.1427%" y="245" width="0.0384%" height="15" fill="rgb(250,205,27)" fg:x="33536" fg:w="13"/><text x="99.3927%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.1663%" y="229" width="0.0148%" height="15" fill="rgb(210,80,43)" fg:x="33544" fg:w="5"/><text x="99.4163%" y="239.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (20 samples, 0.06%)</title><rect x="99.1249%" y="421" width="0.0591%" height="15" fill="rgb(247,160,36)" fg:x="33530" fg:w="20"/><text x="99.3749%" y="431.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (20 samples, 0.06%)</title><rect x="99.1249%" y="405" width="0.0591%" height="15" fill="rgb(234,13,49)" fg:x="33530" fg:w="20"/><text x="99.3749%" y="415.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (19 samples, 0.06%)</title><rect x="99.1279%" y="389" width="0.0562%" height="15" fill="rgb(234,122,0)" fg:x="33531" fg:w="19"/><text x="99.3779%" y="399.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (19 samples, 0.06%)</title><rect x="99.1279%" y="373" width="0.0562%" height="15" fill="rgb(207,146,38)" fg:x="33531" fg:w="19"/><text x="99.3779%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (19 samples, 0.06%)</title><rect x="99.1279%" y="357" width="0.0562%" height="15" fill="rgb(207,177,25)" fg:x="33531" fg:w="19"/><text x="99.3779%" y="367.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (19 samples, 0.06%)</title><rect x="99.1279%" y="341" width="0.0562%" height="15" fill="rgb(211,178,42)" fg:x="33531" fg:w="19"/><text x="99.3779%" y="351.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (8 samples, 0.02%)</title><rect x="99.1841%" y="421" width="0.0237%" height="15" fill="rgb(230,69,54)" fg:x="33550" fg:w="8"/><text x="99.4341%" y="431.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::filled (63 samples, 0.19%)</title><rect x="99.2077%" y="421" width="0.1862%" height="15" fill="rgb(214,135,41)" fg:x="33558" fg:w="63"/><text x="99.4577%" y="431.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::pos (6 samples, 0.02%)</title><rect x="99.3940%" y="421" width="0.0177%" height="15" fill="rgb(237,67,25)" fg:x="33621" fg:w="6"/><text x="99.6440%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,299 samples, 3.84%)</title><rect x="95.8582%" y="469" width="3.8402%" height="15" fill="rgb(222,189,50)" fg:x="32425" fg:w="1299"/><text x="96.1082%" y="479.50">&lt;cor..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (932 samples, 2.76%)</title><rect x="96.9432%" y="453" width="2.7553%" height="15" fill="rgb(245,148,34)" fg:x="32792" fg:w="932"/><text x="97.1932%" y="463.50">&lt;s..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (449 samples, 1.33%)</title><rect x="98.3711%" y="437" width="1.3274%" height="15" fill="rgb(222,29,6)" fg:x="33275" fg:w="449"/><text x="98.6211%" y="447.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (97 samples, 0.29%)</title><rect x="99.4117%" y="421" width="0.2868%" height="15" fill="rgb(221,189,43)" fg:x="33627" fg:w="97"/><text x="99.6617%" y="431.50"></text></g><g><title>core::cmp::min (50 samples, 0.15%)</title><rect x="99.5506%" y="405" width="0.1478%" height="15" fill="rgb(207,36,27)" fg:x="33674" fg:w="50"/><text x="99.8006%" y="415.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (50 samples, 0.15%)</title><rect x="99.5506%" y="389" width="0.1478%" height="15" fill="rgb(217,90,24)" fg:x="33674" fg:w="50"/><text x="99.8006%" y="399.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (1,309 samples, 3.87%)</title><rect x="95.8405%" y="501" width="3.8698%" height="15" fill="rgb(224,66,35)" fg:x="32419" fg:w="1309"/><text x="96.0905%" y="511.50">&lt;&amp;mu..</text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,309 samples, 3.87%)</title><rect x="95.8405%" y="485" width="3.8698%" height="15" fill="rgb(221,13,50)" fg:x="32419" fg:w="1309"/><text x="96.0905%" y="495.50">&lt;cor..</text></g><g><title>core::option::Option&lt;T&gt;::take (4 samples, 0.01%)</title><rect x="99.6985%" y="469" width="0.0118%" height="15" fill="rgb(236,68,49)" fg:x="33724" fg:w="4"/><text x="99.9485%" y="479.50"></text></g><g><title>core::mem::replace (4 samples, 0.01%)</title><rect x="99.6985%" y="453" width="0.0118%" height="15" fill="rgb(229,146,28)" fg:x="33724" fg:w="4"/><text x="99.9485%" y="463.50"></text></g><g><title>core::ptr::read (4 samples, 0.01%)</title><rect x="99.6985%" y="437" width="0.0118%" height="15" fill="rgb(225,31,38)" fg:x="33724" fg:w="4"/><text x="99.9485%" y="447.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (4 samples, 0.01%)</title><rect x="99.6985%" y="421" width="0.0118%" height="15" fill="rgb(250,208,3)" fg:x="33724" fg:w="4"/><text x="99.9485%" y="431.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (58 samples, 0.17%)</title><rect x="99.7103%" y="501" width="0.1715%" height="15" fill="rgb(246,54,23)" fg:x="33728" fg:w="58"/><text x="99.9603%" y="511.50"></text></g><g><title>&lt;core::str::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::nth (13 samples, 0.04%)</title><rect x="99.8817%" y="501" width="0.0384%" height="15" fill="rgb(243,76,11)" fg:x="33786" fg:w="13"/><text x="100.1317%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::nth (13 samples, 0.04%)</title><rect x="99.8817%" y="485" width="0.0384%" height="15" fill="rgb(245,21,50)" fg:x="33786" fg:w="13"/><text x="100.1317%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::nth (13 samples, 0.04%)</title><rect x="99.8817%" y="469" width="0.0384%" height="15" fill="rgb(228,9,43)" fg:x="33786" fg:w="13"/><text x="100.1317%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (11 samples, 0.03%)</title><rect x="99.9202%" y="501" width="0.0325%" height="15" fill="rgb(208,100,47)" fg:x="33799" fg:w="11"/><text x="100.1702%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (11 samples, 0.03%)</title><rect x="99.9202%" y="485" width="0.0325%" height="15" fill="rgb(232,26,8)" fg:x="33799" fg:w="11"/><text x="100.1702%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (11 samples, 0.03%)</title><rect x="99.9202%" y="469" width="0.0325%" height="15" fill="rgb(216,166,38)" fg:x="33799" fg:w="11"/><text x="100.1702%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.03%)</title><rect x="99.9202%" y="453" width="0.0325%" height="15" fill="rgb(251,202,51)" fg:x="33799" fg:w="11"/><text x="100.1702%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.03%)</title><rect x="99.9202%" y="437" width="0.0325%" height="15" fill="rgb(254,216,34)" fg:x="33799" fg:w="11"/><text x="100.1702%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.03%)</title><rect x="99.9202%" y="421" width="0.0325%" height="15" fill="rgb(251,32,27)" fg:x="33799" fg:w="11"/><text x="100.1702%" y="431.50"></text></g><g><title>cfree (10 samples, 0.03%)</title><rect x="99.9231%" y="405" width="0.0296%" height="15" fill="rgb(208,127,28)" fg:x="33800" fg:w="10"/><text x="100.1731%" y="415.50"></text></g><g><title>[libc.so.6] (8 samples, 0.02%)</title><rect x="99.9290%" y="389" width="0.0237%" height="15" fill="rgb(224,137,22)" fg:x="33802" fg:w="8"/><text x="100.1790%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.01%)</title><rect x="99.9586%" y="421" width="0.0118%" height="15" fill="rgb(254,70,32)" fg:x="33812" fg:w="4"/><text x="100.2086%" y="431.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (11 samples, 0.03%)</title><rect x="99.9586%" y="453" width="0.0325%" height="15" fill="rgb(229,75,37)" fg:x="33812" fg:w="11"/><text x="100.2086%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.03%)</title><rect x="99.9586%" y="437" width="0.0325%" height="15" fill="rgb(252,64,23)" fg:x="33812" fg:w="11"/><text x="100.2086%" y="447.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.02%)</title><rect x="99.9704%" y="421" width="0.0207%" height="15" fill="rgb(232,162,48)" fg:x="33816" fg:w="7"/><text x="100.2204%" y="431.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.01%)</title><rect x="99.9793%" y="405" width="0.0118%" height="15" fill="rgb(246,160,12)" fg:x="33819" fg:w="4"/><text x="100.2293%" y="415.50"></text></g><g><title>yt_history::load_models (33,794 samples, 99.91%)</title><rect x="0.0887%" y="565" width="99.9054%" height="15" fill="rgb(247,166,0)" fg:x="30" fg:w="33794"/><text x="0.3387%" y="575.50">yt_history::load_models</text></g><g><title>yt_history::parse (33,794 samples, 99.91%)</title><rect x="0.0887%" y="549" width="99.9054%" height="15" fill="rgb(249,219,21)" fg:x="30" fg:w="33794"/><text x="0.3387%" y="559.50">yt_history::parse</text></g><g><title>yt_history::read_data_row (2,029 samples, 6.00%)</title><rect x="93.9957%" y="533" width="5.9983%" height="15" fill="rgb(205,209,3)" fg:x="31795" fg:w="2029"/><text x="94.2457%" y="543.50">yt_histo..</text></g><g><title>yt_history::skip_to (1,565 samples, 4.63%)</title><rect x="95.3675%" y="517" width="4.6266%" height="15" fill="rgb(243,44,1)" fg:x="32259" fg:w="1565"/><text x="95.6175%" y="527.50">yt_hi..</text></g><g><title>yt_history::iter_index (14 samples, 0.04%)</title><rect x="99.9527%" y="501" width="0.0414%" height="15" fill="rgb(206,159,16)" fg:x="33810" fg:w="14"/><text x="100.2027%" y="511.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (14 samples, 0.04%)</title><rect x="99.9527%" y="485" width="0.0414%" height="15" fill="rgb(244,77,30)" fg:x="33810" fg:w="14"/><text x="100.2027%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (14 samples, 0.04%)</title><rect x="99.9527%" y="469" width="0.0414%" height="15" fill="rgb(218,69,12)" fg:x="33810" fg:w="14"/><text x="100.2027%" y="479.50"></text></g><g><title>std::panic::catch_unwind (33,801 samples, 99.93%)</title><rect x="0.0710%" y="693" width="99.9261%" height="15" fill="rgb(212,87,7)" fg:x="24" fg:w="33801"/><text x="0.3210%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (33,801 samples, 99.93%)</title><rect x="0.0710%" y="677" width="99.9261%" height="15" fill="rgb(245,114,25)" fg:x="24" fg:w="33801"/><text x="0.3210%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (33,801 samples, 99.93%)</title><rect x="0.0710%" y="661" width="99.9261%" height="15" fill="rgb(210,61,42)" fg:x="24" fg:w="33801"/><text x="0.3210%" y="671.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (33,801 samples, 99.93%)</title><rect x="0.0710%" y="645" width="99.9261%" height="15" fill="rgb(211,52,33)" fg:x="24" fg:w="33801"/><text x="0.3210%" y="655.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (33,801 samples, 99.93%)</title><rect x="0.0710%" y="629" width="99.9261%" height="15" fill="rgb(234,58,33)" fg:x="24" fg:w="33801"/><text x="0.3210%" y="639.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (33,801 samples, 99.93%)</title><rect x="0.0710%" y="613" width="99.9261%" height="15" fill="rgb(220,115,36)" fg:x="24" fg:w="33801"/><text x="0.3210%" y="623.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (33,801 samples, 99.93%)</title><rect x="0.0710%" y="597" width="99.9261%" height="15" fill="rgb(243,153,54)" fg:x="24" fg:w="33801"/><text x="0.3210%" y="607.50">core::ops::function::FnOnce::call_once</text></g><g><title>yt_history::main (33,801 samples, 99.93%)</title><rect x="0.0710%" y="581" width="99.9261%" height="15" fill="rgb(251,47,18)" fg:x="24" fg:w="33801"/><text x="0.3210%" y="591.50">yt_history::main</text></g><g><title>all (33,826 samples, 100%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(242,102,42)" fg:x="0" fg:w="33826"/><text x="0.2500%" y="879.50"></text></g><g><title>yt-history (33,826 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(234,31,38)" fg:x="0" fg:w="33826"/><text x="0.2500%" y="863.50">yt-history</text></g><g><title>_start (33,802 samples, 99.93%)</title><rect x="0.0710%" y="837" width="99.9290%" height="15" fill="rgb(221,117,51)" fg:x="24" fg:w="33802"/><text x="0.3210%" y="847.50">_start</text></g><g><title>__libc_start_main (33,802 samples, 99.93%)</title><rect x="0.0710%" y="821" width="99.9290%" height="15" fill="rgb(212,20,18)" fg:x="24" fg:w="33802"/><text x="0.3210%" y="831.50">__libc_start_main</text></g><g><title>[libc.so.6] (33,802 samples, 99.93%)</title><rect x="0.0710%" y="805" width="99.9290%" height="15" fill="rgb(245,133,36)" fg:x="24" fg:w="33802"/><text x="0.3210%" y="815.50">[libc.so.6]</text></g><g><title>main (33,802 samples, 99.93%)</title><rect x="0.0710%" y="789" width="99.9290%" height="15" fill="rgb(212,6,19)" fg:x="24" fg:w="33802"/><text x="0.3210%" y="799.50">main</text></g><g><title>std::rt::lang_start_internal (33,802 samples, 99.93%)</title><rect x="0.0710%" y="773" width="99.9290%" height="15" fill="rgb(218,1,36)" fg:x="24" fg:w="33802"/><text x="0.3210%" y="783.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (33,802 samples, 99.93%)</title><rect x="0.0710%" y="757" width="99.9290%" height="15" fill="rgb(246,84,54)" fg:x="24" fg:w="33802"/><text x="0.3210%" y="767.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (33,802 samples, 99.93%)</title><rect x="0.0710%" y="741" width="99.9290%" height="15" fill="rgb(242,110,6)" fg:x="24" fg:w="33802"/><text x="0.3210%" y="751.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (33,802 samples, 99.93%)</title><rect x="0.0710%" y="725" width="99.9290%" height="15" fill="rgb(214,47,5)" fg:x="24" fg:w="33802"/><text x="0.3210%" y="735.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (33,802 samples, 99.93%)</title><rect x="0.0710%" y="709" width="99.9290%" height="15" fill="rgb(218,159,25)" fg:x="24" fg:w="33802"/><text x="0.3210%" y="719.50">std::rt::lang_start_internal::{{closure}}</text></g></svg></svg>